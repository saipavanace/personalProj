\jsbegin
//=============================================================================
// Copyright(C) 2018 Arteris, Inc.
// All rights reserved
//=============================================================================
// DVE Skid Buffer
// Author: Boon Chuan
// Filename: dve_protocol_man.tachl
// Description: DVE Skid Buffer assembles DVM-related CMDreq and DTWreq via
//    CMDreq Skid Buffer and DTWreq Skid Buffer, and posts the assembled DVM
//    command-data message into the DVM Transaction FIFO.
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

var assertOn           = obj.lib.getParam('assertOn');
var wDvmReqAddr        = obj.lib.getParam('wDvmReqAddr');    // AMBA 5 CHI DVM requires 44,45,46..52
var wDvmReqData        = obj.lib.getParam('wDvmReqData');    // Always 64 as DVM data payload is always lower 64 bits.
var wDvmReqAttr        = obj.lib.getParam('wDvmReqAttr');
var wDvmReqAiuId       = obj.lib.getParam('wDvmReqAiuId');
var wDvmReqMsgId       = obj.lib.getParam('wDvmReqMsgId');
var wDvmReqQos         = obj.lib.getParam('wDvmReqQos');
var wDvmReqPriority    = obj.lib.getParam('wDvmReqPriority');
var nSkidEntries       = obj.lib.getParam('nSkidEntries');
var wSkidEntries       = obj.lib.getParam('wSkidEntries');
var nRbidEntries       = nSkidEntries;
var wRbidEntries       = wSkidEntries;
var wSttId             = obj.lib.getParam('wSttId');
var nDtfEntries        = 1;
var nMainTraceBufSize  = obj.lib.getParam('nMainTraceBufSize');
var wTraceMe           = obj.lib.getParam('wTraceMe');

var wCmdReqFifo = wRbidEntries + wSttId;

var wCmdRspFifo = wDvmReqMsgId + wDvmReqAiuId + 8 + wDvmReqPriority + wTraceMe;
var wDtwRspFifo = wDvmReqMsgId + wDvmReqAiuId + wDvmReqPriority + wTraceMe;
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize>0) {
var wDtwDebugRspFifo = wDvmReqMsgId + wDvmReqAiuId + wDvmReqPriority + 8;
}
var wStrReqFifo = wDvmReqMsgId + wDvmReqAiuId + wDvmReqPriority + wRbidEntries + wSttId + wTraceMe;

var wDtfFifo    = wSttId + wRbidEntries + wDvmReqAddr + wDvmReqAttr + wDvmReqAiuId + wDvmReqMsgId + 8 + wDvmReqQos + wDvmReqPriority + wDvmReqData + 1;

\jsend

\jsbegin
//=============================================================================
// Ports
//=============================================================================
\jsend

\jsbegin

obj.lib.port('input',  'clk',      1);
obj.lib.port('input',  'reset_n',  1);
obj.lib.port('input',  'csr_MaxOneSyncDVMOp', 1);
obj.lib.port('input',  'csr_AceDvmOrder', 1);
obj.lib.port('input',  'stt_sync_active', 1);
obj.lib.port('input',  'nonsync_bypass_in', 1);
obj.lib.port('input',  'flm_sttid_collision', 1);
obj.lib.port('output', 'flm_sttid', wSttId);

obj.lib.port('input',  'dvm_cmdreq_valid',  1);
obj.lib.port('output', 'dvm_cmdreq_ready',  1);
obj.lib.port('input',  'dvm_cmdreq_cmstatus', 8);
obj.lib.port('input',  'dvm_cmdreq_addr',   wDvmReqAddr);
obj.lib.port('input',  'dvm_cmdreq_attr',   wDvmReqAttr);
obj.lib.port('input',  'dvm_cmdreq_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_cmdreq_msgid',  wDvmReqMsgId);
    if (wDvmReqQos > 0) {
obj.lib.port('input',  'dvm_cmdreq_qos',    wDvmReqQos);
    }
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_cmdreq_priority', wDvmReqPriority);
    }

obj.lib.port('output', 'dvm_cmdrsp_valid',  1);
obj.lib.port('input',  'dvm_cmdrsp_ready',  1);
obj.lib.port('output', 'dvm_cmdrsp_aiuid',  wDvmReqAiuId);
obj.lib.port('output', 'dvm_cmdrsp_msgid',  wDvmReqMsgId); //this is the RMessageId
obj.lib.port('output', 'dvm_cmdrsp_cmstatus', 8);
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dvm_cmdrsp_priority', wDvmReqPriority);
    }
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) {
obj.lib.port('output', 'dvm_cmdrsp_tm', wTraceMe);
    }

obj.lib.port('input',  'dvm_dtwreq_valid',  1);
obj.lib.port('output', 'dvm_dtwreq_ready',  1);
obj.lib.port('input',  'dvm_dtwreq_last',   1);
obj.lib.port('input',  'dvm_dtwreq_cmstatus', 8);
obj.lib.port('input',  'dvm_dtwreq_rbid',   wRbidEntries);
obj.lib.port('input',  'dvm_dtwreq_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_dtwreq_msgid',  wDvmReqMsgId);
obj.lib.port('input',  'dvm_dtwreq_data',   wDvmReqData);
obj.lib.port('input',  'dvm_dtwreq_dbad',   1);
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_dtwreq_priority', wDvmReqPriority);
    }
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) {
obj.lib.port('input',  'dvm_dtwreq_tm', wTraceMe);
    }

// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize>0) {
obj.lib.port('input',  'dvm_dbg_dtwreq_valid',  1);
obj.lib.port('output', 'dvm_dbg_dtwreq_ready',  1);
obj.lib.port('input',  'dvm_dbg_dtwreq_last',   1);
obj.lib.port('input',  'dvm_dbg_dtwreq_cmstatus', 8);
//obj.lib.port('input',  'dvm_dbg_dtwreq_rbid',   wRbidEntries);
obj.lib.port('input',  'dvm_dbg_dtwreq_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_dbg_dtwreq_msgid',  wDvmReqMsgId);
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_dbg_dtwreq_priority', wDvmReqPriority);
    }
}

obj.lib.port('output', 'cmdreq_fifo__pop_valid',  1);
obj.lib.port('output', 'cmdrsp_fifo__pop_valid',  1);
obj.lib.port('output', 'dtwrsp_fifo__pop_valid',  1);
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize>0) {
obj.lib.port('output', 'dtwrsp_dbg_fifo__pop_valid',  1);
}
obj.lib.port('output', 'strreq_fifo__pop_valid',  1);

obj.lib.port('input', 'dve_cmd_age_buffer__lookup_en', 1);

obj.lib.port('output', 'dtf_valid', 1);
obj.lib.port('input',  'dtf_ready', 1);
obj.lib.port('output', 'dtf_cmstatus', 8);
obj.lib.port('output', 'dtf_addr',  wDvmReqAddr);
obj.lib.port('output', 'dtf_attr',  wDvmReqAttr);
obj.lib.port('output', 'dtf_aiuid', wDvmReqAiuId);
obj.lib.port('output', 'dtf_msgid', wDvmReqMsgId);
obj.lib.port('output', 'dtf_rbid',  wRbidEntries);
obj.lib.port('output', 'dtf_sttid', wSttId);
    if (wDvmReqQos > 0) {
obj.lib.port('output', 'dtf_qos',   wDvmReqQos);
    }
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dtf_priority', wDvmReqPriority);
    }
obj.lib.port('output', 'dtf_data',  wDvmReqData);
obj.lib.port('output', 'dtf_dbad',  1);


obj.lib.port('output', 'dvm_strreq_valid',  1);
obj.lib.port('input',  'dvm_strreq_ready',  1);
obj.lib.port('output', 'dvm_strreq_rbid',   wRbidEntries);
obj.lib.port('output', 'dvm_strreq_sttid',  wSttId);
obj.lib.port('output', 'dvm_strreq_aiuid',  wDvmReqAiuId);
obj.lib.port('output', 'dvm_strreq_msgid',  wDvmReqMsgId); //this is the RMessageId
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dvm_strreq_priority', wDvmReqPriority);
    }
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) {
obj.lib.port('output', 'dvm_strreq_tm', wTraceMe);
    }
obj.lib.port('output', 'dvm_dtwrsp_valid',  1);
obj.lib.port('input',  'dvm_dtwrsp_ready',  1);
obj.lib.port('output', 'dvm_dtwrsp_aiuid',  wDvmReqAiuId);
obj.lib.port('output', 'dvm_dtwrsp_msgid',  wDvmReqMsgId);
obj.lib.port('output', 'dvm_dtwrsp_cmstatus', 8);
obj.lib.port('output', 'dvm_dtwrsp_dbad',   1);
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dvm_dtwrsp_priority', wDvmReqPriority);
    }
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) {
obj.lib.port('output', 'dvm_dtwrsp_tm', wTraceMe);
    }

// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize>0) {
obj.lib.port('output', 'dvm_dbg_dtwrsp_valid',  1);
obj.lib.port('input',  'dvm_dbg_dtwrsp_ready',  1);
obj.lib.port('output', 'dvm_dbg_dtwrsp_aiuid',  wDvmReqAiuId);
obj.lib.port('output', 'dvm_dbg_dtwrsp_msgid',  wDvmReqMsgId);
obj.lib.port('output', 'dvm_dbg_dtwrsp_cmstatus', 8);
obj.lib.port('output', 'dvm_dbg_dtwrsp_dbad',   1);
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dvm_dbg_dtwrsp_priority', wDvmReqPriority);
    }
}

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\jsbegin
//=============================================================================
// Wires
//=============================================================================
\jsend

wire [2:0] DVM_OPCODE_SYNC = 3'b100;

wire dff_enable = 1'b1;

wire cmdreq_fifo__push_valid;
wire cmdreq_fifo__push_ready;
wire [\=wCmdReqFifo-1=\:0] cmdreq_fifo__push_data;
wire [\=wCmdReqFifo-1=\:0] cmdreq_fifo__pop_data;
\js //wire cmdreq_fifo__pop_valid;
wire cmdreq_fifo__pop_ready;

wire cmdrsp_fifo__push_valid;
wire cmdrsp_fifo__push_ready;
wire [\=wCmdRspFifo-1=\:0] cmdrsp_fifo__push_data;
wire [\=wCmdRspFifo-1=\:0] cmdrsp_fifo__pop_data;
\js //wire cmdrsp_fifo__pop_valid;
wire cmdrsp_fifo__pop_ready;

wire [7:0] skid_cmdreq_dtwreq_cmstatus;

wire skid_cmdreq_valid;
wire skid_cmdreq_ready;
wire [\=wDvmReqAddr-1=\:0] skid_cmdreq_addr;
wire [\=wDvmReqAttr-1=\:0] skid_cmdreq_attr;
wire [\=wDvmReqAiuId-1=\:0] skid_cmdreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] skid_cmdreq_msgid;
wire [\=wRbidEntries-1=\:0] skid_cmdreq_rbid;
wire [\=wSttId-1=\:0] skid_cmdreq_sttid;
wire [7:0] skid_cmdreq_cmstatus;
\js if ( wDvmReqQos > 0 ) {
wire [\=wDvmReqQos-1=\:0] skid_cmdreq_qos;
\js }
\js if ( wDvmReqPriority > 0 ) {
wire [\=wDvmReqPriority-1=\:0] skid_cmdreq_priority;
\js }
wire skid_dtwreq_valid;
wire skid_dtwreq_ready;
wire [\=wDvmReqData-1=\:0] skid_dtwreq_data;
wire [7:0] skid_dtwreq_cmstatus;
wire skid_dtwreq_dbad;

wire [\=nRbidEntries-1=\:0] skid_dtwreq_init_vec;
wire [\=nRbidEntries-1=\:0] skid_dtwreq_deinit_vec;
wire [\=nRbidEntries-1=\:0] skid_dtwreq_rbid_onehot;

wire skid_buffer_out_valid;
wire skid_buffer_out_ready;

    \js for (var i=0; i < nRbidEntries; i++) {
wire [7:0] skid\=i=\_dtwreq_cmstatus;
wire [\=wDvmReqData-1=\:0] skid\=i=\_dtwreq_data;
wire skid\=i=\_dtwreq_dbad;
    \js }
    \js for (var i=0; i < nRbidEntries; i++) {
wire skid\=i=\_dtwreq_valid;
wire skid\=i=\_dtwreq_valid_en;
wire skid\=i=\_dtwreq_valid_in;
    \js }

wire dtwreq_first;
wire dtwreq_first_in;


wire allocate_sttid;

wire allocate_rbid;
wire deallocate_rbid;

wire rbid_flm__flm_all_free;
wire [\=nRbidEntries-1=\:0] rbid_flm__allocate0;
wire [\=nRbidEntries-1=\:0] rbid_flm__deallocate0;
wire rbid_flm__allocate0_vld;
wire rbid_flm__allocate0_ack;
wire rbid_flm__deallocate0_vld;

wire [\=wRbidEntries-1=\:0] flm_rbid, flm_rbid_enc;
wire [\=wSttId-1=\:0] flm_sttid_in;

wire dtwrsp_fifo__push_valid;
wire dtwrsp_fifo__push_ready;
wire [\=wDtwRspFifo-1=\:0] dtwrsp_fifo__push_data;
wire [\=wDtwRspFifo-1=\:0] dtwrsp_fifo__pop_data;
\js //wire dtwrsp_fifo__pop_valid;
wire dtwrsp_fifo__pop_ready;

\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire dtwrsp_dbg_fifo__push_valid;
wire dtwrsp_dbg_fifo__push_ready;
wire [\=wDtwDebugRspFifo-1=\:0] dtwrsp_dbg_fifo__push_data;
wire [\=wDtwDebugRspFifo-1=\:0] dtwrsp_dbg_fifo__pop_data;
\js //wire dtwrsp_dbg_fifo__pop_valid;
wire dtwrsp_dbg_fifo__pop_ready;
\js }

wire strreq_fifo__push_valid;
wire strreq_fifo__push_ready;
wire [\=wStrReqFifo-1=\:0] strreq_fifo__push_data;
wire [\=wStrReqFifo-1=\:0] strreq_fifo__pop_data;
\js //wire strreq_fifo__pop_valid;
wire strreq_fifo__pop_ready;


wire                         dve_cmd_age_buffer__full;
wire                         dve_cmd_age_buffer__empty;
wire                         dve_cmd_age_buffer__push_en;
wire [0:0]                   dve_cmd_age_buffer__push_tag;
wire [\=wCmdReqFifo-1=\:0]   dve_cmd_age_buffer__push_data;
wire                         dve_cmd_age_buffer__pop_en;
wire [\=wCmdReqFifo-1=\:0]   dve_cmd_age_buffer__pop_data;
wire [0:0]                   dve_cmd_age_buffer__pop_tag;
\js //wire                         dve_cmd_age_buffer__lookup_en;
wire [0:0]                   dve_cmd_age_buffer__lookup_tag;
wire [\=nSkidEntries-1=\:0]  dve_cmd_age_buffer__valid_vec;

wire [\=nRbidEntries-1=\:0] skid_cmdreq_rbid_onehot;

\jsbegin
//=============================================================================
// Command Skid Buffer is an Age Buffer.
//=============================================================================
\jsend

\jsbegin
    var dve_cmd_age_buffer_Params = {
            assertOn    : assertOn,
            wData       : wCmdReqFifo,
            wTag        : 1,
            nEntries    : nSkidEntries,
    };
    var  instance_ports_for_dve_cmd_age_buffer = {
            clk             : 'clk',
            reset_n         : 'reset_n',
            full            : 'dve_cmd_age_buffer__full',
            empty           : 'dve_cmd_age_buffer__empty',
            valid_vec       : 'dve_cmd_age_buffer__valid_vec',
            push_en         : 'dve_cmd_age_buffer__push_en',
            push_tag        : 'dve_cmd_age_buffer__push_tag',
            push_data       : 'dve_cmd_age_buffer__push_data',
            pop_en          : 'dve_cmd_age_buffer__pop_en',
            pop_data        : 'dve_cmd_age_buffer__pop_data',
            pop_tag         : 'dve_cmd_age_buffer__pop_tag',
            lookup_en       : 'dve_cmd_age_buffer__lookup_en',
            lookup_tag      : 'dve_cmd_age_buffer__lookup_tag',
    };
\jsend

  \=u.instance({
        instanceName  : 'u_dve_cmd_age_buffer',
        moduleName    : 'dve_age_buffer',
        params        : dve_cmd_age_buffer_Params,
        verilogParams : {},
        ports         : instance_ports_for_dve_cmd_age_buffer
  })=\


assign dve_cmd_age_buffer__push_en   = cmdreq_fifo__push_valid;
assign dve_cmd_age_buffer__push_data = cmdreq_fifo__push_data;
assign dve_cmd_age_buffer__push_tag  = dvm_cmdreq_valid & (dvm_cmdreq_addr[13:11] == DVM_OPCODE_SYNC) & (csr_AceDvmOrder ? (dvm_cmdreq_attr[10:8] == 3'b1) : 1'b1); \js //ONLY CHI DVM SYNC can be bypassed

assign dve_cmd_age_buffer__pop_en = cmdreq_fifo__pop_ready;

assign dve_cmd_age_buffer__lookup_tag = 1'b0;



assign cmdreq_fifo__push_ready = ~dve_cmd_age_buffer__full;

assign cmdreq_fifo__pop_valid  = ~dve_cmd_age_buffer__empty;

assign cmdreq_fifo__pop_data   = dve_cmd_age_buffer__pop_data;



assign cmdreq_fifo__push_valid = dvm_cmdreq_valid & dvm_cmdreq_ready;

assign cmdreq_fifo__push_data = {
    flm_sttid,
    flm_rbid };

assign {
    skid_cmdreq_sttid,
    skid_cmdreq_rbid } = cmdreq_fifo__pop_data;

assign skid_cmdreq_valid = cmdreq_fifo__pop_valid;

assign cmdreq_fifo__pop_ready = skid_cmdreq_ready;



wire [\=nRbidEntries-1=\:0] skid_cmdreq_init_vec;
wire [\=nRbidEntries-1=\:0] skid_cmdreq_deinit_vec;

    \js for (var i=0; i < nRbidEntries; i++) {
wire skid\=i=\_cmdreq_valid;
wire skid\=i=\_cmdreq_valid_en;
wire skid\=i=\_cmdreq_valid_in;
    \js }

    \js for (var i=0; i < nRbidEntries; i++) {
wire [\=wDvmReqAddr-1=\:0] skid\=i=\_cmdreq_addr;
wire [\=wDvmReqAttr-1=\:0] skid\=i=\_cmdreq_attr;
wire [\=wDvmReqAiuId-1=\:0] skid\=i=\_cmdreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] skid\=i=\_cmdreq_msgid;
wire [7:0] skid\=i=\_cmdreq_cmstatus;
        \js if (wDvmReqQos > 0) {
wire [\=wDvmReqQos-1=\:0] skid\=i=\_cmdreq_qos;
        \js }
        \js if (wDvmReqPriority > 0) {
wire [\=wDvmReqPriority-1=\:0] skid\=i=\_cmdreq_priority;
        \js }
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
            if (wTraceMe > 0) { \jsend
wire [\=wTraceMe-1=\:0] skid\=i=\_cmdreq_tm;
        \js }
\js }


assign skid_cmdreq_init_vec = {\=nRbidEntries=\{allocate_rbid}} & rbid_flm__allocate0;
assign skid_cmdreq_deinit_vec = skid_dtwreq_deinit_vec;

    \js for (var i=0; i < nRbidEntries; i++) {
\=u.dffre(wDvmReqAddr,     'skid'+i+'_cmdreq_addr',      'dvm_cmdreq_addr',     '{'+wDvmReqAddr+"{1'b0}}",     'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
\=u.dffre(wDvmReqAttr,     'skid'+i+'_cmdreq_attr',      'dvm_cmdreq_attr',     '{'+wDvmReqAttr+"{1'b0}}",     'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
\=u.dffre(wDvmReqAiuId,    'skid'+i+'_cmdreq_aiuid',     'dvm_cmdreq_aiuid',    '{'+wDvmReqAiuId+"{1'b0}}",    'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
\=u.dffre(wDvmReqMsgId,    'skid'+i+'_cmdreq_msgid',     'dvm_cmdreq_msgid',    '{'+wDvmReqMsgId+"{1'b0}}",    'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
\=u.dffre(8,               'skid'+i+'_cmdreq_cmstatus',  'dvm_cmdreq_cmstatus', "8'b0",                        'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
        \js if (wDvmReqQos > 0) {
\=u.dffre(wDvmReqQos,      'skid'+i+'_cmdreq_qos',       'dvm_cmdreq_qos',      '{'+wDvmReqQos+"{1'b0}}",      'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
        \js }
        \js if (wDvmReqPriority > 0) {
\=u.dffre(wDvmReqPriority, 'skid'+i+ '_cmdreq_priority', 'dvm_cmdreq_priority', '{'+wDvmReqPriority+"{1'b0}}", 'skid_cmdreq_init_vec['+i+']', 'clk', 'reset_n')=\
        \js }
    \js }

    \js for (var i=0; i < nRbidEntries; i++) {
assign skid\=i=\_cmdreq_valid_en = skid_cmdreq_init_vec[\=i=\] | skid_cmdreq_deinit_vec[\=i=\];
assign skid\=i=\_cmdreq_valid_in = skid_cmdreq_init_vec[\=i=\];
    \js }
    \js for (var i=0; i < nRbidEntries; i++) {
\=u.dffre(1, 'skid' + i + '_cmdreq_valid', 'skid' + i + '_cmdreq_valid_in', '{'+1+"{1'b0}}", 'skid' + i + '_cmdreq_valid_en', 'clk', 'reset_n')=\
    \js }


assign skid_cmdreq_rbid_onehot = (\=nRbidEntries=\'b1 << skid_cmdreq_rbid);

assign skid_cmdreq_addr = ({\=wDvmReqAddr=\{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_addr)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({\=wDvmReqAddr=\{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_addr)
            \js }
                        ;

assign skid_cmdreq_attr = ({\=wDvmReqAttr=\{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_attr)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({\=wDvmReqAttr=\{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_attr)
            \js }
                        ;

assign skid_cmdreq_aiuid = ({\=wDvmReqAiuId=\{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_aiuid)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({\=wDvmReqAiuId=\{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_aiuid)
            \js }
                        ;

assign skid_cmdreq_msgid = ({\=wDvmReqMsgId=\{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_msgid)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({\=wDvmReqMsgId=\{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_msgid)
            \js }
                        ;

assign skid_cmdreq_cmstatus = ({8{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_cmstatus)
            \js for (var i = 1; i < nRbidEntries; i++) {
                            | ({8{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_cmstatus)
            \js }
                             ;

        \js if ( wDvmReqQos > 0 ) {
assign skid_cmdreq_qos = ({\=wDvmReqQos=\{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_qos)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({\=wDvmReqQos=\{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_qos)
            \js }
                        ;
        \js }

        \js if ( wDvmReqPriority > 0 ) {
assign skid_cmdreq_priority = ({\=wDvmReqPriority=\{skid_cmdreq_rbid_onehot[0]}} & skid0_cmdreq_priority)
            \js for (var i = 1; i < nRbidEntries; i++) {
                            | ({\=wDvmReqPriority=\{skid_cmdreq_rbid_onehot[\=i=\]}} & skid\=i=\_cmdreq_priority)
            \js }
                             ;
        \js }

\jsbegin
//=============================================================================
// OUT CMDrsp
//=============================================================================
\jsend

\jsbegin
    var cmdrspFifoParams = {
        width       : wCmdRspFifo,
        depth       : nSkidEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_cmdrsp_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'cmdrsp_fifo__push_data',
        push_valid          : 'cmdrsp_fifo__push_valid',
        push_ready          : 'cmdrsp_fifo__push_ready',
        pop_data            : 'cmdrsp_fifo__pop_data',
        pop_valid           : 'cmdrsp_fifo__pop_valid',
        pop_ready           : 'cmdrsp_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'cmdrsp_fifo',
        moduleName: 'fifo',
        params : cmdrspFifoParams,
        verilogParams: {},
        ports: instance_ports_for_cmdrsp_fifo,
        portsDelimiter: '\n    '
    })=\

assign cmdrsp_fifo__push_valid = dtf_valid & dtf_ready;

assign cmdrsp_fifo__push_data = {
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
                    if ( wTraceMe > 0 ) { \jsend
            dtf_attr[7],
                \js }
                \js if ( wDvmReqPriority > 0 ) {
            dtf_priority,
                \js }
            dtf_cmstatus,
            dtf_aiuid,
            dtf_msgid };

assign {
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
                    if ( wTraceMe > 0 ) { \jsend
            dvm_cmdrsp_tm,
                \js }
                \js if ( wDvmReqPriority > 0 ) {
            dvm_cmdrsp_priority,
                \js }
            dvm_cmdrsp_cmstatus,
            dvm_cmdrsp_aiuid,
            dvm_cmdrsp_msgid } = cmdrsp_fifo__pop_data;

assign dvm_cmdrsp_valid = cmdrsp_fifo__pop_valid;

assign cmdrsp_fifo__pop_ready = dvm_cmdrsp_ready;

\jsbegin
//=============================================================================
// Data Skid Buffer init, deinit
//=============================================================================
\jsend

assign skid_dtwreq_init_vec = {\=nRbidEntries=\{dvm_dtwreq_valid & dvm_dtwreq_ready & dtwreq_first}} & (\=nRbidEntries=\'b1 << dvm_dtwreq_rbid);

assign skid_dtwreq_deinit_vec = {\=nRbidEntries=\{skid_buffer_out_valid & skid_buffer_out_ready}} & skid_cmdreq_rbid_onehot;

\=u.dffre(1, 'dtwreq_first', 'dtwreq_first_in', "1'b1", 'dff_enable', 'clk', 'reset_n')=\

assign dtwreq_first_in = (dvm_dtwreq_valid & dvm_dtwreq_ready) ? (dvm_dtwreq_last ? 1'b1 : 1'b0) : dtwreq_first;

\jsbegin
//=============================================================================
// Data Skid Buffer Entries that are static
//=============================================================================
\jsend

\js for (var i=0; i < nRbidEntries; i++) {

\=u.dffre(wDvmReqData, 'skid' + i + '_dtwreq_data', 'dvm_dtwreq_data', '{'+wDvmReqData+"{1'b0}}", 'skid_dtwreq_init_vec[' + i + ']', 'clk', 'reset_n')=\

\=u.dffre(1, 'skid' + i + '_dtwreq_dbad', 'dvm_dtwreq_dbad', '{'+1+"{1'b0}}", 'skid_dtwreq_init_vec[' + i + ']', 'clk', 'reset_n')=\

\=u.dffre(8, 'skid' + i + '_dtwreq_cmstatus', 'dvm_dtwreq_cmstatus', '{'+8+"{1'b0}}", 'skid_dtwreq_init_vec[' + i + ']', 'clk', 'reset_n')=\

\js }

\jsbegin
//=============================================================================
// Data Skid Buffer Entries that are dynamic
//=============================================================================
\jsend

\js for (var i=0; i < nRbidEntries; i++) {

assign skid\=i=\_dtwreq_valid_en = skid_dtwreq_init_vec[\=i=\] | skid_dtwreq_deinit_vec[\=i=\];
assign skid\=i=\_dtwreq_valid_in = skid_dtwreq_init_vec[\=i=\];

\js }

\js for (var i=0; i < nRbidEntries; i++) {

\=u.dffre(1, 'skid' + i + '_dtwreq_valid', 'skid' + i + '_dtwreq_valid_in', '{'+1+"{1'b0}}", 'skid' + i + '_dtwreq_valid_en', 'clk', 'reset_n')=\

\js }

\jsbegin
//=============================================================================
// Selecting Data Skid Buffer Entry
//=============================================================================
\jsend

assign skid_dtwreq_rbid_onehot = skid_cmdreq_rbid_onehot;

assign skid_dtwreq_valid = (skid_dtwreq_rbid_onehot[0] & skid0_dtwreq_valid)
            \js for (var i = 1; i < nRbidEntries; i++) {
                            | (skid_dtwreq_rbid_onehot[\=i=\] & skid\=i=\_dtwreq_valid)
            \js }
                            ;
assign skid_dtwreq_data = ({\=wDvmReqData=\{skid_dtwreq_rbid_onehot[0]}} & skid0_dtwreq_data)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({\=wDvmReqData=\{skid_dtwreq_rbid_onehot[\=i=\]}} & skid\=i=\_dtwreq_data)
            \js }
                        ;

assign skid_dtwreq_dbad = (skid_dtwreq_rbid_onehot[0] & skid0_dtwreq_dbad)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | (skid_dtwreq_rbid_onehot[\=i=\] & skid\=i=\_dtwreq_dbad)
            \js }
                        ;

assign skid_dtwreq_cmstatus = ({8{skid_dtwreq_rbid_onehot[0]}} & skid0_dtwreq_cmstatus)
            \js for (var i = 1; i < nRbidEntries; i++) {
                        | ({8{skid_dtwreq_rbid_onehot[\=i=\]}} & skid\=i=\_dtwreq_cmstatus)
            \js }
                        ;

\jsbegin
//=============================================================================
// Skid Buffer Output Valid / Ready
//=============================================================================
\jsend

assign skid_buffer_out_valid = skid_cmdreq_valid & skid_dtwreq_valid;

assign skid_cmdreq_ready = skid_dtwreq_ready;

assign skid_dtwreq_ready = skid_dtwreq_valid & skid_buffer_out_ready;

\jsbegin
//=============================================================================
// DVM Transaction FIFO
//=============================================================================
\jsend

wire dtf_fifo__push_valid;
wire dtf_fifo__push_ready;
wire [\=wDtfFifo-1=\:0] dtf_fifo__push_data;
wire [\=wDtfFifo-1=\:0] dtf_fifo__pop_data;
wire dtf_fifo__pop_valid;
wire dtf_fifo__pop_ready;

\js //assign dtf_fifo__pop_valid  = dtf_fifo__push_valid;
\js //assign dtf_fifo__pop_data   = dtf_fifo__push_data;
\js //assign dtf_fifo__push_ready = dtf_fifo__pop_ready;


wire skid_cmdreq_cmstatus_err;

assign skid_cmdreq_cmstatus_err = skid_cmdreq_cmstatus[7];

assign skid_cmdreq_dtwreq_cmstatus = skid_cmdreq_cmstatus_err ? skid_cmdreq_cmstatus : skid_dtwreq_cmstatus;

assign dtf_fifo__push_data = {
            \js if ( wDvmReqPriority > 0 ) {
        skid_cmdreq_priority,
            \js }
            \js if ( wDvmReqQos > 0 ) {
        skid_cmdreq_qos,
            \js }
        skid_cmdreq_sttid,
        skid_cmdreq_rbid,
        skid_cmdreq_dtwreq_cmstatus,
        skid_dtwreq_dbad,
        skid_dtwreq_data,
        skid_cmdreq_msgid,
        skid_cmdreq_aiuid,
        skid_cmdreq_attr,
        skid_cmdreq_addr };

assign {
            \js if ( wDvmReqPriority > 0 ) {
        dtf_priority,
            \js }
            \js if ( wDvmReqQos > 0 ) {
        dtf_qos,
            \js }
        dtf_sttid,
        dtf_rbid,
        dtf_cmstatus,
        dtf_dbad,
        dtf_data,
        dtf_msgid,
        dtf_aiuid,
        dtf_attr,
        dtf_addr } = dtf_fifo__pop_data;
wire skid_cmdreq_sync_dvmop = (skid_cmdreq_addr[13:11] == DVM_OPCODE_SYNC) ? 1'b1 : 1'b0;
assign dtf_fifo__push_valid = csr_MaxOneSyncDVMOp ? (stt_sync_active ? (skid_buffer_out_valid & ~skid_cmdreq_sync_dvmop) : skid_buffer_out_valid) :
                                                  (nonsync_bypass_in ? (skid_buffer_out_valid & ~skid_cmdreq_sync_dvmop) : skid_buffer_out_valid);
assign skid_buffer_out_ready = csr_MaxOneSyncDVMOp ? (stt_sync_active ? (dtf_fifo__push_ready & ~skid_cmdreq_sync_dvmop) : dtf_fifo__push_ready) : 
                                                   (nonsync_bypass_in ? (dtf_fifo__push_ready & ~skid_cmdreq_sync_dvmop) : dtf_fifo__push_ready);

assign dtf_valid = dtf_fifo__pop_valid;

assign dtf_fifo__pop_ready = dtf_ready;

\js //=============================================================================
\js // STRREQ FIFO
\js //=============================================================================

\jsbegin
    var strreqFifoParams = {
        width       : wStrReqFifo,
        depth       : nSkidEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_strreq_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'strreq_fifo__push_data',
        push_valid          : 'strreq_fifo__push_valid',
        push_ready          : 'strreq_fifo__push_ready',
        pop_data            : 'strreq_fifo__pop_data',
        pop_valid           : 'strreq_fifo__pop_valid',
        pop_ready           : 'strreq_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'strreq_fifo',
        moduleName: 'fifo',
        params : strreqFifoParams,
        verilogParams: {},
        ports: instance_ports_for_strreq_fifo,
        portsDelimiter: '\n    '
    })=\

assign dvm_cmdreq_ready = strreq_fifo__push_ready & cmdrsp_fifo__push_ready & rbid_flm__allocate0_vld & ~flm_sttid_collision;

assign strreq_fifo__push_valid = dvm_cmdreq_valid & dvm_cmdreq_ready;

assign strreq_fifo__push_data = {
        \js if ( wDvmReqPriority > 0 ) {
    dvm_cmdreq_priority,
        \js }
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
            if (wTraceMe > 0) { \jsend
    dvm_cmdreq_attr[7],
        \js }
    flm_sttid,
    flm_rbid,
    dvm_cmdreq_msgid,
    dvm_cmdreq_aiuid
    };

\js //=============================================================================
\js // STTID allocate/deallocate
\js //=============================================================================

assign allocate_sttid = dvm_cmdreq_valid & dvm_cmdreq_ready;
wire flm_sttid_en = allocate_sttid | flm_sttid_collision;
assign flm_sttid_in = flm_sttid + {{\=wSttId-1=\{1'b0}}, flm_sttid_en};

\=u.dffre(wSttId, 'flm_sttid', 'flm_sttid_in',  wSttId+"'d0", 'flm_sttid_en', 'clk', 'reset_n')=\

\js //=============================================================================
\js // RBID allocate/deallocate
\js //=============================================================================

assign allocate_rbid = dvm_cmdreq_valid & dvm_cmdreq_ready;

assign deallocate_rbid = skid_buffer_out_valid & skid_buffer_out_ready;

assign rbid_flm__allocate0_ack = allocate_rbid;

assign rbid_flm__deallocate0_vld = deallocate_rbid;

assign rbid_flm__deallocate0 = skid_cmdreq_rbid_onehot;

    \jsbegin
        var rbid_flm_params = {
            acdEmit                   : 0,
            acdGate                   : 'CARBON',
            num_entries               : nRbidEntries,
            num_allocate_interfaces   : 1,
            num_deallocate_interfaces : 1
        };
        var instance_ports_for_rbid_flm = {
            clk                             : 'clk',
            reset_n                         : 'reset_n',
            flm_all_free                    : 'rbid_flm__flm_all_free',
            allocate0                       : 'rbid_flm__allocate0',
            allocate0_vld                   : 'rbid_flm__allocate0_vld',
            allocate0_ack                   : 'rbid_flm__allocate0_ack',
            deallocate0                     : 'rbid_flm__deallocate0',
            deallocate0_vld                 : 'rbid_flm__deallocate0_vld'
        };
    \jsend
        \=obj.lib.instance({
            instanceName: 'u_rbid_flm',
            moduleName: 'flm',
            params: rbid_flm_params,
            verilogParams: {},
            ports: instance_ports_for_rbid_flm,
            portsDelimiter: '\n    '
        })=\

    \=obj.lib.instance({
        instanceName: 'u_rbid_id',
        moduleName: 'encoder',
        params: { width : nRbidEntries },
        verilogParams: {},
        ports: {
            invector : 'rbid_flm__allocate0', outdecode : 'flm_rbid_enc'
        }
    })=\


    \jsbegin
// Ncore3.2 always has > 1 skid buffer entries (nRbidEntries==cmpInfo.nSkidEntries)
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (nRbidEntries > 1) { \jsend
 assign flm_rbid = flm_rbid_enc;
    \js } else {
 assign flm_rbid = \=wRbidEntries=\'b0;
    \js }
 

\js //=============================================================================
\js // OUT STRreq
\js //=============================================================================

assign dvm_strreq_valid = strreq_fifo__pop_valid;

assign strreq_fifo__pop_ready = dvm_strreq_ready;

assign {
\js if ( wDvmReqPriority > 0 ) {
    dvm_strreq_priority,
\js }
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if ( wTraceMe > 0 ) { \jsend
    dvm_strreq_tm,
\js }
    dvm_strreq_sttid,
    dvm_strreq_rbid,
    dvm_strreq_msgid,
    dvm_strreq_aiuid

    } = strreq_fifo__pop_data;

\js //=============================================================================
\js // IN DTWreq
\js //=============================================================================

assign dvm_dtwreq_ready = dtwrsp_fifo__push_ready;

\js //=============================================================================
\js // OUT DTWrsp
\js //=============================================================================

\jsbegin
    var dtwrspFifoParams = {
        width       : wDtwRspFifo,
        depth       : nSkidEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_dtwrsp_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'dtwrsp_fifo__push_data',
        push_valid          : 'dtwrsp_fifo__push_valid',
        push_ready          : 'dtwrsp_fifo__push_ready',
        pop_data            : 'dtwrsp_fifo__pop_data',
        pop_valid           : 'dtwrsp_fifo__pop_valid',
        pop_ready           : 'dtwrsp_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'dtwrsp_fifo',
        moduleName: 'fifo',
        params : dtwrspFifoParams,
        verilogParams: {},
        ports: instance_ports_for_dtwrsp_fifo,
        portsDelimiter: '\n    '
    })=\

assign dtwrsp_fifo__push_valid = dtf_valid & dtf_ready;

assign dtwrsp_fifo__push_data = {
    \js if ( wDvmReqPriority > 0 ) {
        dtf_priority,
    \js }
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
        dtf_attr[7],
    \js }
        dtf_aiuid,
        dtf_msgid};

assign dvm_dtwrsp_valid = dtwrsp_fifo__pop_valid;

assign dtwrsp_fifo__pop_ready = dvm_dtwrsp_ready;

assign {
    \js if ( wDvmReqPriority > 0 ) {
        dvm_dtwrsp_priority,
    \js }
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
        dvm_dtwrsp_tm,
    \js }
        dvm_dtwrsp_aiuid,
        dvm_dtwrsp_msgid} = dtwrsp_fifo__pop_data;

assign dvm_dtwrsp_cmstatus = 8'b0;
assign dvm_dtwrsp_dbad = 1'b0;

\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize>0) { \jsend
\js //=============================================================================
\js // IN DTWreq (debug)
\js //=============================================================================

assign dvm_dbg_dtwreq_ready = dtwrsp_dbg_fifo__push_ready;

\js //=============================================================================
\js // OUT DTWrsp (debug)
\js //=============================================================================

\jsbegin
    var dtwrspDebugFifoParams = {
        width       : wDtwDebugRspFifo,
        depth       : 4,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_dtwrsp_dbg_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'dtwrsp_dbg_fifo__push_data',
        push_valid          : 'dtwrsp_dbg_fifo__push_valid',
        push_ready          : 'dtwrsp_dbg_fifo__push_ready',
        pop_data            : 'dtwrsp_dbg_fifo__pop_data',
        pop_valid           : 'dtwrsp_dbg_fifo__pop_valid',
        pop_ready           : 'dtwrsp_dbg_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'dtwrsp_dbg_fifo',
        moduleName: 'fifo',
        params : dtwrspDebugFifoParams,
        verilogParams: {},
        ports: instance_ports_for_dtwrsp_dbg_fifo,
        portsDelimiter: '\n    '
    })=\

assign dtwrsp_dbg_fifo__push_valid = dvm_dbg_dtwreq_valid & dvm_dbg_dtwreq_ready & dvm_dbg_dtwreq_last;

assign dtwrsp_dbg_fifo__push_data = {
    \js if ( wDvmReqPriority > 0 ) {
        dvm_dbg_dtwreq_priority,
    \js }
        dvm_dbg_dtwreq_aiuid,
        dvm_dbg_dtwreq_msgid,
        dvm_dbg_dtwreq_cmstatus};

assign dvm_dbg_dtwrsp_valid = dtwrsp_dbg_fifo__pop_valid;

assign dtwrsp_dbg_fifo__pop_ready = dvm_dbg_dtwrsp_ready;

assign {
    \js if ( wDvmReqPriority > 0 ) {
        dvm_dbg_dtwrsp_priority,
    \js }
        dvm_dbg_dtwrsp_aiuid,
        dvm_dbg_dtwrsp_msgid,
        dvm_dbg_dtwrsp_cmstatus} = dtwrsp_dbg_fifo__pop_data;

assign dvm_dbg_dtwrsp_dbad = 1'b0;
\js }

\jsbegin
//=============================================================================
// DVM Transaction FIFO
//=============================================================================
\jsend

\jsbegin
    var dtfFifoParams = {
        width       : wDtfFifo,
        depth       : nDtfEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_dtf_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'dtf_fifo__push_data',
        push_valid          : 'dtf_fifo__push_valid',
        push_ready          : 'dtf_fifo__push_ready',
        pop_data            : 'dtf_fifo__pop_data',
        pop_valid           : 'dtf_fifo__pop_valid',
        pop_ready           : 'dtf_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'dtf_fifo',
        moduleName: 'fifo',
        params : dtfFifoParams,
        verilogParams: {},
        ports: instance_ports_for_dtf_fifo,
        portsDelimiter: '\n    '
    })=\

\js if (assertOn) {
//=========================================================================
// Coverage Properties
//=========================================================================
`ifdef OVL_ASSERT_ON
// synthesis_off
// pragma synthesis_off
// coverage off

SKID_BUFFER_FULL:           cover property ( @(posedge clk) (1'b1
    \js for (var i=0; i < nRbidEntries; i++) {
                                                             & skid\=i=\_dtwreq_valid
    \js }
));

// coverage on
// pragma synthesis_on
// synthesis_on
`endif

\js }

endmodule
