\jsbegin
//=============================================================================
// Copyright(C) 2018 Arteris, Inc.
// All rights reserved
//=============================================================================
// DVE Unit
// Author: Boon Chuan
//=============================================================================

// Variables
var u = obj.lib;
var m = obj.userLib;

var bundleFunctions = obj.userLib.bundleFunctions;
var interfaceGen    = obj.userLib.interfaceGenerators;
var newToOldStyleInterface      = m.newToOldStyleInterface.bind( null, obj.userLib );
var flattenInterface            = m.flattenInterface;
var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

u.paramDefault('useSysEvtBroadcaster', 'int', 0);

//=============================================================================
// Top Level Parameters
//=============================================================================

var assertOn = obj.lib.getParam('assertOn');

var useSysEvtCoh = obj.lib.getParam('useSysEvtCoh');
var useSysEvtBroadcaster = obj.lib.getParam('useSysEvtBroadcaster');
var sysEvtReceivers = obj.lib.getParam('sysEvtReceivers');
var nEvtReceivers   = sysEvtReceivers.length;


var usePma     = obj.lib.getParam('usePma');
var PmaInfo    = obj.lib.getParam('PmaInfo');

var concParams = obj.lib.getParam('concParams');

var SMI_TX_INTF  = m.ParamDefaultGet(u, 'SMI_TX_INTF', 'array', []);
var SMI_RX_INTF  = m.ParamDefaultGet(u, 'SMI_RX_INTF', 'array', []);
var CONC_TX_INTF = m.ParamDefaultGet(u, 'CONC_TX_INTF', 'array', []);
var CONC_RX_INTF = m.ParamDefaultGet(u, 'CONC_RX_INTF', 'array', []);

var nPerfCounters      = obj.lib.getParam('nPerfCounters');

var wEventTimeout = 20; //must be the same as wProtocolTimeout
var wProtocolTimeout = 20;

var memErrType         = obj.lib.getParam('memErrType');
var memErrWidth        = obj.lib.getParam('memErrWidth');
var nMainTraceBufSize  = obj.lib.getParam('nMainTraceBufSize');
var nTraceBanks        = obj.lib.getParam('nTraceBanks');
var wMainTraceBufSize  = Math.max(1, log2ceil(nMainTraceBufSize));
var wTraceBanks        = Math.max(1, log2ceil(nTraceBanks));
var CmpInfo            = obj.lib.getParam('CmpInfo');
var cmType             = obj.lib.getParam('cmType');
var wQos               = obj.lib.getParam('wQos');
var wFPortId           = obj.lib.getParam('wFPortId');
var wFUnitId           = obj.lib.getParam('wFUnitId');
var wNUnitId           = obj.lib.getParam('wNUnitId');
var wRpn               = obj.lib.getParam('wRpn');
var wNrri              = obj.lib.getParam('wNrri');
var wInitiatorId       = obj.lib.getParam('wInitiatorId');
var wTargetId          = wInitiatorId;
var wMessageId         = obj.lib.getParam('wMsgId');
var wAddr              = obj.lib.getParam('wAddr');
var wRBufferId         = obj.lib.getParam('wRBID');
var wSttId             = obj.lib.getParam('wSttId');
var nDveAgents         = obj.lib.getParam('nDVMAgentAius');
var nAius              = obj.lib.getParam('nAius');
var wSnoopEnables      = obj.lib.getParam('wSnoopEnables');
var useResiliency      = obj.lib.getParam('useResiliency');
var csr                = obj.lib.getParam('csr');
var wResThreshold      = obj.lib.getParam('wResThreshold');
var wHdrPriority       = concParams.hdrParams.wPriority;
var wCmdReqAux         = concParams.cmdReqParams.wNdpAux;
var wDvmReqAddr        = wAddr;
var wDvmReqData        = 64;
var wDvmReqAttr        = 1   // VZ
                       + 1   // AC
                       + 1   // CA
                       + 1   // NS
                       + 1   // PR
                       + 2   // RL
                       + 1   // TM
                       + 3   // TOF
                       + wCmdReqAux
                       ;
// Ncore3.2 always has a trace bit
/* istanbul ignore if env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (concParams.ncCmdRspParams.wTM == undefined) {
var wTraceMe           = 0;
} else {
var wTraceMe           = 1;
}
var wDvmReqAiuId       = wFUnitId;
var wDvmReqMsgId       = wMessageId;
var wDvmReqQos         = wQos; 
var wDvmReqPriority    = wHdrPriority;
var nDvmSnpCredits     = CmpInfo.nDvmSnpCredits;
var nSkidEntries       = CmpInfo.nSkidEntries;
var nSttEntries        = (nDvmSnpCredits <= 8) ? 4 : Math.max(4 + 1, nDveAgents + 1); //CmpInfo.nSttEntries;
var wSttEntries        = Math.max(1, log2ceil(nSttEntries));
var wSkidEntries       = Math.max(1, log2ceil(nSkidEntries));

var wSnpReqMpf1        = concParams.snpReqParams.wMpf1;   //Math.abs(SNPReqInterface.mpf1);
var wSnpReqMpf2        = concParams.snpReqParams.wMpf2;   //Math.abs(SNPReqInterface.mpf2);
var wSnpReqMpf3        = concParams.snpReqParams.wMpf3;   //Math.abs(SNPReqInterface.mpf3);
var wSnpReqAux         = concParams.snpReqParams.wNdpAux; //Math.abs(SNPReqInterface.aux);

var wNcCmdRspMProt     = concParams.ncCmdRspParams.wMProt;
var wDtwRspMProt       = concParams.dtwRspParams.wMProt;
var wStrReqMProt       = concParams.strReqParams.wMProt;
var wSnpReqMProt       = concParams.snpReqParams.wMProt;
var wCmpRspMProt       = concParams.cmpRspParams.wMProt;
//=============================================================================
// Interface Generation
//=============================================================================

var clkInterfaceJson           = obj.lib.getParam('clkInterfaceJson');
var clkInterface               = obj.lib.getParam('clkInterface');
var clkInterfaceName           = obj.lib.getParam('clkInterfaceName');

var clk16Interface             = { name: clkInterfaceName+"16_", signals: clkInterface };

var myClkInterface = {
    clk: 1,
    reset_n: 1
}

var regProtectionInterface     = obj.lib.getParam('regProtectionInterface');
var regProtectionInterfaceName = obj.lib.getParam('regProtectionInterfaceName');
var regProtectionStyle         = obj.lib.getParam('regProtectionStyle');

// Concerto Inputs
// Request Interfaces
var CMDReqInterface = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface');
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysEvtCoh) {
var SYSReqInterface = obj.lib.getParam('concertoInterfaces', 'SYSReqInterface');
}
var DTWReqInterface = obj.lib.getParam('concertoInterfaces', 'DTWReqInterface');
// Response Interfaces
var STRRespInterface = obj.lib.getParam('concertoInterfaces', 'STRRespInterface');
var SNPRespInterface = obj.lib.getParam('concertoInterfaces', 'SNPRespInterface');
var DTWDBGReqInterface = obj.lib.getParam('concertoInterfaces', 'DTWDBGReqInterface');
// Concerto Outputs
// Request Interfaces
var STRReqInterface = obj.lib.getParam('concertoInterfaces', 'STRReqInterface');
var SNPReqInterface = obj.lib.getParam('concertoInterfaces', 'SNPReqInterface');
// Response Interface
var NCCMDRespInterface = obj.lib.getParam('concertoInterfaces', 'NCCMDRespInterface');
var DTWRespInterface   = obj.lib.getParam('concertoInterfaces', 'DTWRespInterface');
var CMPRespInterface   = obj.lib.getParam('concertoInterfaces', 'CMPRespInterface');
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysEvtCoh) {
var SYSRespInterface   = obj.lib.getParam('concertoInterfaces', 'SYSRespInterface');
}
var DTWDBGRespInterface = obj.lib.getParam('concertoInterfaces', 'DTWDBGRespInterface');

var unitIdInterface            = obj.lib.getParam('unitIdInterface');
var unitIdInterfaceName        = obj.lib.getParam('unitIdInterfaceName');

var sysUnitIdInterface         = obj.lib.getParam('sysUnitIdInterface');
var sysUnitIdInterfaceName     = obj.lib.getParam('sysUnitIdInterfaceName');

var sysNodeUnitIdInterface     = obj.lib.getParam('sysNodeUnitIdInterface');
var sysNodeUnitIdInterfaceName = obj.lib.getParam('sysNodeUnitIdInterfaceName');

var apbInterface       = obj.lib.getParam('apbInterface');
var apbInterfaceName   = obj.lib.getParam('apbInterfaceName');

var irqInterface       = obj.lib.getParam('irqInterface');
var irqInterfaceName   = obj.lib.getParam('irqInterfaceName');

if (usePma) {

var qInterface         = obj.lib.getParam('qInterface');
var qInterfaceName     = obj.lib.getParam('qInterfaceName');

}

var internalFaultInterface     = obj.lib.getParam('internalFaultInterface');
var internalFaultInterfaceName = obj.lib.getParam('internalFaultInterfaceName');

var masterTriggerInterfaceJson    = obj.lib.getParam('masterTriggerInterfaceJson');

// Define local reqAckEventInterface
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
if (useSysEvtBroadcaster) {
var reqAckEventInterface		= { name: "broadcaster_", signals: { req: 1, ack: -1, initiator_id: wFUnitId } };
}

// Function that returns wire declarations of an old-style interface (with properties 'name' and 'signals')
function declareOldStyleInterface ( oldStyleInterface ) {
        return bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}


// Function that returns wire declarations of a new-style interface
function declareNewStyleInterface ( newStyleInterface ) {
        const oldStyleInterface         = newToOldStyleInterface( newStyleInterface );
        const flatOldInterface          = flattenInterface ( oldStyleInterface );
        return declareOldStyleInterface( flatOldInterface );
}

function numToVlogConstants (numarray, widthInput){
	var vlogconstants = [];
	for (var i = 0; i < numarray.length; i++){
		vlogconstants.push( numToVlogConstant(numarray[i], widthInput));	
	}
	return vlogconstants;
}


// Converts a number x to a Verilog constant (string) of specified width
function numToVlogConstant (x, width) {
	return width + "'h" + x.toString(16);
}


//=============================================================================
// Clock and Reset Interface
//=============================================================================

obj.lib.interface(clkInterfaceName, 'slave', clkInterface);

//=============================================================================
// Unit Id Interface
//=============================================================================

obj.lib.interface(unitIdInterfaceName, 'slave', unitIdInterface);

//=============================================================================
// Sys Unit Id Interface
//=============================================================================

obj.lib.interface(sysUnitIdInterfaceName, 'slave', sysUnitIdInterface);

//=============================================================================
// Sys Node Unit Id Interface
//=============================================================================

obj.lib.interface(sysNodeUnitIdInterfaceName, 'slave', sysNodeUnitIdInterface);

//=============================================================================
// APB Interface
//=============================================================================

obj.lib.interface(apbInterfaceName, 'slave', obj.lib.getParam('apbInterface'));

//=============================================================================
// IRQ Interface
//=============================================================================

obj.lib.interface(irqInterfaceName, 'master', irqInterface);

//=============================================================================
// Q Channel Interface
//=============================================================================
if (usePma) {

obj.lib.interface(qInterfaceName, 'slave', qInterface);

}
//=============================================================================
// CERR Threshold for Fault Checker
//=============================================================================

obj.lib.port('output', 'cerr_threshold', wResThreshold);

//=============================================================================
// Internal Fault Interface
//=============================================================================

obj.lib.interface(internalFaultInterfaceName, 'master', internalFaultInterface);

//=============================================================================
// SMI Interfaces
//=============================================================================

for (i=0; i < SMI_TX_INTF.length; i++) {
    obj.userLib.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].signals, obj.lib.port);
    // Ncore3.2 always has data present on this interface
    /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (SMI_TX_INTF[i].params.dpPresent) {
        obj.userLib.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].dpSignals, obj.lib.port);
    }
}
for (i=0; i < SMI_RX_INTF.length; i++) {
    obj.userLib.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].signals, obj.lib.port);
    if (SMI_RX_INTF[i].params.dpPresent) {
        obj.userLib.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].dpSignals, obj.lib.port);
    }
}

// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize>0) {
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Trace & Debug ram interface
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
obj.lib.port('output', 'f_hdr_cen',                      1);
obj.lib.port('output', 'f_hdr_wen',                      1);
obj.lib.port('output', 'f_hdr_caddr',    wMainTraceBufSize);
obj.lib.port('output', 'f_hdr_wdata',                   64+memErrWidth);
obj.lib.port('input',  'f_hdr_rdata',                   64+memErrWidth);

obj.lib.port('output', 'f_data_cen',                     1);
obj.lib.port('output', 'f_data_wen',                     1);
obj.lib.port('output', 'f_data_caddr',   wMainTraceBufSize+wTraceBanks);
obj.lib.port('output', 'f_data_wdata',                  64+memErrWidth);
obj.lib.port('input',  'f_data_rdata',                  64+memErrWidth);

}

//=============================================================================
// Master Trigger Interface
//=============================================================================
// master trigger interface always present on 3.4
/* istanbul ignore else env ncore_3p4,ncore_3p6,ncore_3p7 */
if( masterTriggerInterfaceJson && !masterTriggerInterfaceJson._SKIP_) {
  var masterTriggerInterface      = newToOldStyleInterface( masterTriggerInterfaceJson );
  obj.lib.interface( masterTriggerInterface.name, 'master', masterTriggerInterface.signals);
}

//=============================================================================
// PMON CSR interfaces and params generation
//=============================================================================

const smiTxStallEvents          = SMI_TX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_TX_INTF array
const smiRxStallEvents          = SMI_RX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_RX_INTF array

// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (nMainTraceBufSize > 0) {
var buf_accepted = "protman__dve_pmon_trace_packets_accepted";
var buf_dropped = "protman__dve_pmon_trace_packets_dropped";
} else {
var buf_accepted = "1'b0";
var buf_dropped = "1'b0";
}

const pmonEventTable                    = [
        { width: 1, expr: "1'b0"},
        smiTxStallEvents[0],
        smiTxStallEvents[1],
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"}, //4
        smiRxStallEvents[0],
        smiRxStallEvents[1],
        smiRxStallEvents[2],
        { width: 1, expr: "1'b0"}, //8
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"}, //16
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 8, expr: "{"+(8-wSttEntries)+"'b0,protman__dve_pmon_active_stt_entries}" }, // Extend if width is less than 8
        { width: 1, expr: "1'b0"},
        { width: 1, expr: buf_accepted},
        { width: 1, expr: buf_dropped},
        { width: 1, expr: "1'b0"}, // 24
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: "1'b0"},
        { width: 1, expr: clk16Interface.name+"clk" }, // "div16_counter"},
        { width: 1, expr: "1'b0"} //31
];

// Function to generate pmon evtInterfaces
function genPmonEvtInterfaces( table ) {
        const result                            = [];

        for(let i=0; i<table.length; i++) {
                result.push({
                        name:                   "evt"+i+"_",
                        direction:              "slave",
                        "interface":    "InterfaceEvt",
                        params:                 { width: table[i].width }
                });
        }

        return result;
}

const pmonRegisters                             = m.genNcorePmonRegisters(csr.spaceBlock[0].registers, "DVE", { nPerfCounters });
const pmonCsrIfGenerator                = m.createCSRInterfaceGenerator( pmonRegisters );
const oldStylePmonCsrInterface  = { name: "DVE", signals: pmonCsrIfGenerator.signalBundle("master") };

const pmonInterfaces    = {
        clkInterface: clkInterfaceJson,
        csrInterface: pmonCsrIfGenerator.interfaceGeneric("slave", "DVE"),     // Returns a new-style InterfaceGeneric instance
        evtInterfaces: genPmonEvtInterfaces( pmonEventTable ),
        masterTriggerInterface: masterTriggerInterfaceJson || /* istanbul ignore next env ncore_3p4,ncore_3p6,ncore_3p7 */{ _SKIP_: true }
};

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\jsbegin
//=============================================================================
// Wire Bundles
//=============================================================================
\jsend
    // Concerto Inputs
    // Request Interfaces
    \=bundleFunctions.wiresFromInterface('cmd_req_', CMDReqInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('dtw_req_', DTWReqInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('dtw_dbg_req_', DTWDBGReqInterface, [], obj.lib.bundle)=\
   
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
    \=bundleFunctions.wiresFromInterface('sys_req_rx_', SYSReqInterface, [], obj.lib.bundle)=\
\jsbegin }
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
    if (useSysEvtBroadcaster) { \jsend
     \=bundleFunctions.wiresFromInterface('sys_req_tx_', SYSReqInterface, [], obj.lib.bundle)=\
\js }
    // Response Interfaces
    \=bundleFunctions.wiresFromInterface('str_rsp_', STRRespInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('snp_rsp_', SNPRespInterface, [], obj.lib.bundle)=\
    // Concerto Outputs
    // Request Interfaces
    \=bundleFunctions.wiresFromInterface('str_req_', STRReqInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('snp_req_', SNPReqInterface, [], obj.lib.bundle)=\
    // Response Interface
    \=bundleFunctions.wiresFromInterface('cmd_rsp_', NCCMDRespInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('cmp_rsp_', CMPRespInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('dtw_rsp_', DTWRespInterface, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('dtw_dbg_rsp_', DTWDBGRespInterface, [], obj.lib.bundle)=\
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
    \=bundleFunctions.wiresFromInterface('sys_rsp_tx_', SYSRespInterface, [], obj.lib.bundle)=\
\jsbegin }
     
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
    if (useSysEvtBroadcaster) { \jsend
     \=bundleFunctions.wiresFromInterface('sys_rsp_rx_', SYSRespInterface, [], obj.lib.bundle)=\
     \=bundleFunctions.wiresFromInterface(reqAckEventInterface.name, reqAckEventInterface.signals, [], u.bundle)=\

     wire [\=nEvtReceivers-1=\:0] one_hot_initiator_id;
     wire [\=nEvtReceivers-1=\:0] one_hot_targets_excluded_initiator; \jsbegin
 } \jsend

\js pmonInterfaces.evtInterfaces.forEach( evtInterface => {
\=declareNewStyleInterface( evtInterface )=\
\js });
\js // Declare wires for div-by-16 clock interface
\=declareOldStyleInterface(clk16Interface)=\

\=bundleFunctions.wiresFromInterface(oldStylePmonCsrInterface.name, oldStylePmonCsrInterface.signals, [], obj.lib.bundle)=\

\jsbegin
//=============================================================================
// Wires
//=============================================================================
\jsend

wire csr_DvmTransActive;
wire [\=nDveAgents-1=\:0] csr_DvmSnoopDisable;
wire csr_MaxOneSyncDVMOp, csr_DeallocEarly, csr_AceDvmOrder, csr_RelaxDvmSnoopPairs;

wire [\=nDveAgents-1=\:0] agents_inactive_vec;

wire dve_uncorr_err_vld;
wire [3:0] dve_uncorr_err_type;
wire [19:0] dve_uncorr_err_info;

wire dve_corr_err_vld;
wire [3:0] dve_corr_err_type;
wire [15:0] dve_corr_err_info;

wire [\=wResThreshold-1=\:0] dve_res_cerr_threshold;

wire [\=wInitiatorId-1=\:0] MyId;

wire [\=wFUnitId-1=\:0] MyFUnitId;

wire csr_sys_evt_receiver_enable;
wire csr_sys_evt_receiver_err_vld;
wire csr_sys_evt_receiver_err_event_timeout;
wire [\=wFUnitId-1=\:0] csr_sys_evt_receiver_err_f_unit_id;
wire [\=wEventTimeout-1=\:0] csr_event_timeout_value;
wire [\=wProtocolTimeout-1=\:0] csr_protocol_timeout_value;
wire csr_sys_evt_sender_enable;
wire csr_sys_evt_sender_err_vld;
wire [\=wFUnitId-1=\:0] csr_sys_evt_sender_err_f_unit_id;
wire csr_sys_evt_sender_err_protocol_sys;
wire csr_sys_evt_sender_err_protocol_timeout;
wire csr_sys_evt_sender_err_event_timeout;


\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire csr_DVETASCR_BufferIsCircular;
wire csr_DVETASCR_BufferClear;
wire csr_DVETASCR_BufferRead;
wire dve_trace_buffer_empty;
wire dve_trace_buffer_full;
wire [7:0] dve_trace_funit_id;
wire dve_trace_read_data_valid;
wire [31:0] dve_trace_timestamp;
\js for (i=0;i<16;i++) {
wire dve_trace_capture_data_valid\=i=\;
wire [31:0] dve_trace_capture_data\=i=\;
\js }
\js }

\js // Ncore3 Sys Arch
\js // ===============
\js // If CMStatus[7]==0, then No Error is indicated.
\js // 
\js // Concerto protocol error detected by an Ncore unit: CMStatus[7:3]==5'b100xx
\js // 8'b100xx111 = Coherency error
\js // 8'b100xx110 = Target time-out
\js // 8'b100xx101 = Target signaled error
\js // 8'b100xx100 = Address error
\js // 8'b100xx011 = Data error
\js // 8'b100xx010 = Decode error (non-address)
\js // 8'b100xx001 = Reserved
\js // 8'b100xx000 = Reserved
\js // 
\js // Transport error detected by an Ncore unit: CMStatus[7:3]==5'b101xx
\js // 8'b101xx111 = Reserved
\js // 8'b101xx110 = Reserved
\js // 8'b101xx101 = Reserved
\js // 8'b101xx100 = Reserved
\js // 8'b101xx011 = Data error
\js // 8'b101xx010 = No-data error
\js // 8'b101xx001 = Delivery error
\js // 8'b101xx000 = Reserved
\js // 
\js // Transport error detected by a CTF component: CMStatus[7:3]==5'b11xxx
\js // 8'b11xxx111 = Reserved
\js // 8'b11xxx110 = Reserved
\js // 8'b11xxx101 = RX Terminal Block injected error (Boon: Concerto MUX uses this to signal SMI Header/Data/Message Protection Uncorrectable Error)
\js // 8'b11xxx100 = Transport privilege violation
\js // 8'b11xxx011 = Path disconnection error
\js // 8'b11xxx010 = Transport access violation
\js // 8'b11xxx001 = Route field error
\js // 8'b11xxx000 = Reserved

wire [7:0] cmstatus_protocol_data_err = 8'b10000011;

wire concerto_mux__busy;

wire [\=wSttEntries-1=\:0] protman__dve_pmon_active_stt_entries;
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire protman__dve_trace_busy;
wire protman__dve_pmon_trace_packets_dropped;
wire protman__dve_pmon_trace_packets_accepted;
\js }

wire csr_busy;
wire pma_busy;
wire sys_evt_coh_busy;
wire goto_sleep;
wire asleep;

\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
wire csr_sys_coh_receiver_err_vld;
wire [\=wFUnitId-1=\:0] csr_sys_coh_receiver_err_f_unit_id;
wire [\=wSnoopEnables-1=\:0] snoop_enables;
wire snoop_enables_update;
wire [\=wSnoopEnables-1=\:0] csr_snoop_enables;
wire csr_snoop_enables_update;
wire [\=nDveAgents-1=\:0] outstanding_snoop_count_zero;
wire sys_req_rx_target_id_mismatch = (sys_req_rx_target_id[\=wTargetId-1=\:\=wFPortId=\] != MyFUnitId);
\js }

wire dff_enable;

assign dff_enable = 1'b1;

assign MyId[\=wInitiatorId-1=\:0] = { \=unitIdInterfaceName=\my_f_unit_id[\=wFUnitId-1=\:0], \=wFPortId=\'b0 };

assign MyFUnitId[\=wFUnitId-1=\:0] = \=unitIdInterfaceName=\my_f_unit_id[\=wFUnitId-1=\:0];

\jsbegin
//=============================================================================
// DVE Clock Gating
//=============================================================================
\jsend

\=bundleFunctions.wiresFromInterface('gated_', clkInterface, [], obj.lib.bundle)=\

\js if (clkInterfaceJson.blkClkGateOn) {

wire gated_clk_en;

\jsbegin
// Ncore3.2 always has wTestEn > 0
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (clkInterfaceJson.params.wTestEn) { \jsend
assign gated_test_en = \=clkInterfaceName=\test_en;
    \js } else {
wire gated_test_en = 1'b0;
    \js }
assign gated_clk_en = pma_busy;

\=u.instance ({
               instanceName : 'blk_clk_gate',
               moduleName : 'cg',
               params : {
                           width : 1
                         },
               ports : {
                        clk_in  : clkInterfaceName+'clk',
                        clk_out : 'gated_clk',
                        test_en : 'gated_test_en',
                        en      : 'gated_clk_en'
                        }
               })=\

\js } else {
assign gated_clk = \=clkInterfaceName=\clk;
\js }

assign gated_reset_n = \=clkInterfaceName=\reset_n;

\jsbegin
//=============================================================================
// Module Instances
//=============================================================================
\jsend

assign pma_busy = csr_DvmTransActive | concerto_mux__busy | \=apbInterfaceName=\psel |
\jsbegin
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysEvtCoh) {
\jsend
                  sys_evt_coh_busy |
\js }
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
                  protman__dve_trace_busy;
\js } else {
                  1'b0;
\js }
assign csr_busy = csr_DvmTransActive | concerto_mux__busy;

\jsbegin

if (usePma ) {

//-----------------------------------------------------------------------------
// DVE PMA Slave Instance
//-----------------------------------------------------------------------------

// PMA Interfaces

var pma_interfaces = [];
var dve_num = 0;

pma_interfaces[dve_num] =     {
                                modulePrefix  : '',
                                localPrefix   :  clkInterfaceName ,
                                interface     :  myClkInterface
                              };

dve_num++;

pma_interfaces[dve_num] =     {
                                 modulePrefix  :  qInterfaceName,
                                 localPrefix   :  qInterfaceName,
                                 interface     :  qInterface 
                              };

dve_num++;

var interfaces   =  {};

interfaces["clkInt"]  =       {
                                 "name"      : "",
                                 "params"    : {},
                                 "direction" : "slave",
                                 "interface" : "InterfaceCLK"
                              };

interfaces["masterInt"] =     {
                                 "name"      : qInterfaceName,
                                 "params"    : {
                                                   "wActive"     : PmaInfo.wActive,
                                                   "channelType" : PmaInfo.fnPmaInterfaceType
                                               },
                                 "direction" : "slave",
                                 "interface" : "InterfacePQChannel"
                              };

interfaces["pmaControlInt"] = {
                                 "name"      : "pma_ctl_",
                                 "params"    : {},
                                 "direction" : "master",
                                 "interface" : "InterfacePMAControl"
			      };

\jsend

\=obj.lib.instance ({
                instanceName: 'dve_pma',
                moduleName: 'pma_slave',
                params : {
                             syncReq              : false,
                             channel              : "Q",
			     pipeActive           : true,
			     interfaces           : interfaces
                         },
	        ports:   {
                             "pma_ctl_asleep"     : 'asleep',
			     "pma_ctl_goto_sleep" : 'goto_sleep',
			     "pma_ctl_busy"       : 'pma_busy',
			     "pma_ctl_abort"      : '1\'b0'
			 },
                verilogParams : {},
                interfaces : pma_interfaces
	})=\

\js }

\jsbegin
//-----------------------------------------------------------------------------
// Concerto Mux Interfaces
//-----------------------------------------------------------------------------
\jsend

\jsbegin
    var concertoMuxFaultPorts = {};
    var concertoMuxInterfaces = [];
    var CONCERTO_MUX_INTF = [];
    var conc_intf_iterated = [];

    // Create CMUX/Tre Fault Ports if they Exist
    var create_UCE = false;
    for(let i=0; i<SMI_RX_INTF.length; i++)
    {
       for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
       {
         let name = SMI_RX_INTF[i].params.fnMsgClass[j];
         let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });

         var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
         var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
         var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
         var isDuplicate     = conc_intf_iterated.includes(name);

         /* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
         if( (hasMessageProt | hasDataProt | hasHeaderProt) & !isDuplicate ) {
            u.port('output', CONC_RX_INTF[index].name + 'CE', 1);
            concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'CE'] = 'dve_cmux_' + CONC_RX_INTF[index].name + 'CE';
         } else if (!isDuplicate) {
         \jsend
            assign  dve_cmux_\=CONC_RX_INTF[index].name=\CE = 1'b0;
         \jsbegin
         }

         if(hasHeaderProt & !isDuplicate ) {
            \jsend
            wire dve_cmux_\=CONC_RX_INTF[index].name=\header_UCE;
            \jsbegin
            concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'header_UCE'] = 'dve_cmux_' + CONC_RX_INTF[index].name + 'header_UCE';
            create_UCE = true;
         }

         if(hasMessageProt & !isDuplicate ) {
            \jsend
            wire dve_cmux_\=CONC_RX_INTF[index].name=\message_UCE;
            \jsbegin
            concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'message_UCE'] = 'dve_cmux_' + CONC_RX_INTF[index].name + 'message_UCE';
         }

         if(hasDataProt & !isDuplicate ) {
            \jsend
            wire dve_cmux_\=CONC_RX_INTF[index].name=\data_UCE;
            \jsbegin
            concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'data_UCE'] = 'dve_cmux_' + CONC_RX_INTF[index].name + 'data_UCE';
         }

         conc_intf_iterated.push(name);
       }
    }
    concertoMuxFaultPorts['busy'] = 'concerto_mux__busy';
    // Aggregate header Uncorretable errors into one UCE signal
    \jsend
        assign dve_cmux_UCE = 1'b0
        \jsbegin
        for(let i=0; i<SMI_RX_INTF.length; i++)
        {
          for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
          {
                 let name = SMI_RX_INTF[i].params.fnMsgClass[j];
                 let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });
                 var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
                 var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
                 var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
                 if( hasHeaderProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\header_UCE  \jsbegin
                 }
                 if( hasMessageProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\message_UCE  \jsbegin
                 }
                 if( hasDataProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\data_UCE  \jsbegin
                 }
          }
        } \jsend
        ;
        \jsbegin
        for(let i=0; i<SMI_RX_INTF.length; i++)
        {
          for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
          {
                 let name = SMI_RX_INTF[i].params.fnMsgClass[j];
                 let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });
                 var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
                 var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
                 var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
\jsend
                 wire \=SMI_RX_INTF[i].params.fnMsgClass[j]=\uce;
                 assign \=SMI_RX_INTF[i].params.fnMsgClass[j]=\uce = 1'b0
\jsbegin
                 if( hasHeaderProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\header_UCE  \jsbegin
                 }
                 if( hasMessageProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\message_UCE  \jsbegin
                 }
                 if( hasDataProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\data_UCE  \jsbegin
                 }
\jsend
                 ;
                 wire \=SMI_RX_INTF[i].params.fnMsgClass[j]=\ce;
                 assign \=SMI_RX_INTF[i].params.fnMsgClass[j]=\ce = 1'b0
\jsbegin
                 if( hasHeaderProt|hasMessageProt|hasDataProt ) { \jsend
                    | dve_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\CE  \jsbegin
                 }
\jsend
                 ;
\jsbegin
          }
        } \jsend

\jsbegin

    for (var i=0; i < SMI_TX_INTF.length; i++) {
        CONCERTO_MUX_INTF.push({
            modulePrefix: SMI_TX_INTF[i].name,
            localPrefix: SMI_TX_INTF[i].name,
            interface: SMI_TX_INTF[i].signals
        });
        // Ncore3.2 always has data present on this interface
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (SMI_TX_INTF[i].params.dpPresent) {
            CONCERTO_MUX_INTF.push({
                modulePrefix: SMI_TX_INTF[i].name,
                localPrefix: SMI_TX_INTF[i].name,
                interface: SMI_TX_INTF[i].dpSignals
            });
        }
    };
    for (var i=0; i < SMI_RX_INTF.length; i++) {
        CONCERTO_MUX_INTF.push({
            modulePrefix: SMI_RX_INTF[i].name,
            localPrefix: SMI_RX_INTF[i].name,
            interface: SMI_RX_INTF[i].signals
        });
        if (SMI_RX_INTF[i].params.dpPresent) {
            CONCERTO_MUX_INTF.push({
                modulePrefix: SMI_RX_INTF[i].name,
                localPrefix: SMI_RX_INTF[i].name,
                interface: SMI_RX_INTF[i].dpSignals
            });
        }
    };
    for (var i=0; i < CONC_TX_INTF.length; i++) {
        CONCERTO_MUX_INTF.push({
            modulePrefix: CONC_TX_INTF[i].name,
            localPrefix: CONC_TX_INTF[i].name,
            interface: CONC_TX_INTF[i].signals
        });
    };
    for (var i=0; i < CONC_RX_INTF.length; i++) {
        CONCERTO_MUX_INTF.push({
            modulePrefix: CONC_RX_INTF[i].name,
            localPrefix: CONC_RX_INTF[i].name,
            interface: CONC_RX_INTF[i].signals
        });
    };
    CONCERTO_MUX_INTF.push({
        modulePrefix: '',
        localPrefix: clkInterfaceName,
        interface: myClkInterface
    });

//console.log("111111\n"+JSON.stringify(SMI_TX_INTF,null,8));
//console.log("222222\n"+JSON.stringify(SMI_RX_INTF,null,8));

\jsend

    \=obj.lib.instance ({
        instanceName: 'dve_concerto_mux',
        moduleName: 'concerto_mux',
        params : {
            wFUnitId : wFUnitId,
            wFPortId : wFPortId,
            smiTxPortInterfaces : SMI_TX_INTF,
            smiRxPortInterfaces : SMI_RX_INTF,
            concertoTxInterfaces : CONC_TX_INTF,
            concertoRxInterfaces : CONC_RX_INTF
        },
        verilogParams : {},
        ports : concertoMuxFaultPorts,
        interfaces : CONCERTO_MUX_INTF
    })=\


\js if ( wDvmReqQos != 0 ) {
wire [\=wDvmReqQos-1=\:0] protman__dvm_cmdreq_qos;
wire [\=wDvmReqQos-1=\:0] protman__dvm_snpreq_qos;
\js }

\js if ( wDvmReqPriority != 0 ) {
wire [\=wDvmReqPriority-1=\:0] protman__dvm_cmdreq_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_cmdrsp_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_strreq_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_dtwreq_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_dtwrsp_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_snpreq_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_cmp_priority;
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (nMainTraceBufSize > 0) { \jsend
wire [\=wDvmReqPriority-1=\:0] protman__dvm_dbg_dtwreq_priority;
wire [\=wDvmReqPriority-1=\:0] protman__dvm_dbg_dtwrsp_priority;
    \js }
\js }

wire protman__dvm_cmdreq_valid;
wire protman__dvm_cmdreq_ready;
wire [7:0] protman__dvm_cmdreq_cmstatus;
wire [\=wDvmReqAddr-1=\:0] protman__dvm_cmdreq_addr;
wire [\=wDvmReqAttr-1=\:0] protman__dvm_cmdreq_attr;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_cmdreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_cmdreq_msgid;
wire protman__dvm_cmdrsp_valid;
wire protman__dvm_cmdrsp_ready;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_cmdrsp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_cmdrsp_msgid;
wire [\=wSttId-1=\:0] protman__dvm_cmdrsp_sttid;
wire [7:0] protman__dvm_cmdrsp_cmstatus;
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) { \jsend
wire protman__dvm_cmdrsp_tm;
\js }
wire protman__dvm_strreq_valid;
wire protman__dvm_strreq_ready;
wire [\=wSkidEntries-1=\:0] protman__dvm_strreq_rbid;
wire [\=wSttId-1=\:0] protman__dvm_strreq_sttid;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_strreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_strreq_msgid;
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) { \jsend
wire protman__dvm_strreq_tm;
\js }

wire protman__dvm_dtwreq_valid;
wire protman__dvm_dtwreq_ready;
wire protman__dvm_dtwreq_last;
wire [7:0] protman__dvm_dtwreq_cmstatus;
wire [\=wDvmReqData-1=\:0] protman__dvm_dtwreq_data;
wire protman__dvm_dtwreq_dbad;
wire [\=wSkidEntries-1=\:0] protman__dvm_dtwreq_rbid;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_dtwreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_dtwreq_msgid;
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe>0) { \jsend
wire protman__dvm_dtwreq_tm;
\js }
wire protman__dvm_dtwrsp_valid;
wire protman__dvm_dtwrsp_ready;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_dtwrsp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_dtwrsp_msgid;
wire [7:0] protman__dvm_dtwrsp_cmstatus;
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe>0) { \jsend
wire protman__dvm_dtwrsp_tm;
\js }
wire protman__dvm_dtwrsp_dbad;
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire protman__dvm_dbg_dtwreq_valid;
wire protman__dvm_dbg_dtwreq_ready;
wire protman__dvm_dbg_dtwreq_last;
wire [\=wDvmReqData-1=\:0] protman__dvm_dbg_dtwreq_data;
wire protman__dvm_dbg_dtwreq_dbad;
\js //wire [\=wSkidEntries-1=\:0] protman__dvm_dbg_dtwreq_rbid;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_dbg_dtwreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_dbg_dtwreq_msgid;
wire protman__dvm_dbg_dtwrsp_valid;
wire protman__dvm_dbg_dtwrsp_ready;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_dbg_dtwrsp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_dbg_dtwrsp_msgid;
wire [7:0] protman__dvm_dbg_dtwrsp_cmstatus;
wire protman__dvm_dbg_dtwrsp_dbad;
\js }
wire protman__dvm_snpreq_valid;
wire protman__dvm_snpreq_ready;
wire [7:0] protman__dvm_snpreq_cmstatus;
wire [\=wSttId-1=\:0] protman__dvm_snpreq_sttid;
wire [\=wDvmReqAddr-1=\:0] protman__dvm_snpreq_addr;
wire [7:0] protman__dvm_snpreq_mpf1;
wire [7:0] protman__dvm_snpreq_mpf3;
wire [\=wDvmReqAttr-1=\:0] protman__dvm_snpreq_attr;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_snpreq_aiuid;
wire protman__dvm_snprsp_valid;
wire protman__dvm_snprsp_ready;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_snprsp_aiuid;
wire [\=wSttId-1=\:0] protman__dvm_snprsp_sttid;
wire [7:0] protman__dvm_snprsp_cmstatus;
wire protman__dvm_cmp_valid;
wire protman__dvm_cmp_ready;
wire [\=wSttId-1=\:0] protman__dvm_cmp_sttid;
wire [\=wDvmReqAiuId-1=\:0] protman__dvm_cmp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] protman__dvm_cmp_msgid;
wire [7:0] protman__dvm_cmp_cmstatus;
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe > 0) { \jsend
wire protman__dvm_cmp_tm;
\js }
wire protman__dvm_strrsp_valid;
wire protman__dvm_strrsp_ready;
wire [\=wSttId-1=\:0] protman__dvm_strrsp_sttid;

\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire protman__dve_trace_buffer_empty;
wire protman__dve_trace_buffer_full;
wire [7:0] protman__dve_trace_funit_id;
wire protman__dve_trace_read_data_valid;
wire [31:0] protman__dve_trace_timestamp;
\js for (i=0;i<16;i++) {
wire protman__dve_trace_capture_data_valid\=i=\;
wire [31:0] protman__dve_trace_capture_data\=i=\;
\js }
wire protman__dve_trace_hdr_ecc_sb_error;
wire protman__dve_trace_hdr_ecc_db_error;
wire [\=wMainTraceBufSize-1=\:0] protman__dve_trace_hdr_ecc_addr;
wire protman__dve_trace_data_ecc_sb_error;
wire protman__dve_trace_data_ecc_db_error;
wire [\=wMainTraceBufSize+wTraceBanks-1=\:0] protman__dve_trace_data_ecc_addr;
\js }

    \jsbegin
        var protmanParams = {
            assertOn           : assertOn,
            memErrType         : memErrType,
            memErrWidth        : memErrWidth,
            nMainTraceBufSize  : nMainTraceBufSize,
            nTraceBanks        : nTraceBanks,
            wTraceMe           : wTraceMe,
            wFUnitId           : wFUnitId,
            wDvmReqAddr        : wDvmReqAddr,
            wDvmReqData        : wDvmReqData,
            wDvmReqAttr        : wDvmReqAttr,
            wDvmReqAiuId       : wDvmReqAiuId,
            wDvmReqMsgId       : wDvmReqMsgId,
            wDvmReqQos         : wDvmReqQos,
            wDvmReqPriority    : wDvmReqPriority,
            nDvmSnpCredits     : nDvmSnpCredits,
            nSkidEntries       : nSkidEntries,
            nSttEntries        : nSttEntries,
            nDveAgents         : nDveAgents,
            wSttId             : wSttId
        };
        var instance_ports_for_protman = {
            clk                             : 'gated_clk',
            reset_n                         : 'gated_reset_n',
            csr_DeallocEarly                : 'csr_DeallocEarly',
            csr_AceDvmOrder                 : 'csr_AceDvmOrder',
            csr_RelaxDvmSnoopPairs          : 'csr_RelaxDvmSnoopPairs',
            csr_DvmTransActive              : 'csr_DvmTransActive',
            csr_DvmSnoopDisable             : 'csr_DvmSnoopDisable',
            csr_MaxOneSyncDVMOp             : 'csr_MaxOneSyncDVMOp',
            agents_inactive_vec             : 'agents_inactive_vec',
            dvm_cmdreq_valid                : 'protman__dvm_cmdreq_valid',
            dvm_cmdreq_ready                : 'protman__dvm_cmdreq_ready',
            dvm_cmdreq_cmstatus             : 'protman__dvm_cmdreq_cmstatus',
            dvm_cmdreq_addr                 : 'protman__dvm_cmdreq_addr',
            dvm_cmdreq_attr                 : 'protman__dvm_cmdreq_attr',
            dvm_cmdreq_aiuid                : 'protman__dvm_cmdreq_aiuid',
            dvm_cmdreq_msgid                : 'protman__dvm_cmdreq_msgid',
            dvm_cmdrsp_valid                : 'protman__dvm_cmdrsp_valid',
            dvm_cmdrsp_ready                : 'protman__dvm_cmdrsp_ready',
            dvm_cmdrsp_aiuid                : 'protman__dvm_cmdrsp_aiuid',
            dvm_cmdrsp_msgid                : 'protman__dvm_cmdrsp_msgid',
            dvm_cmdrsp_sttid                : 'protman__dvm_cmdrsp_sttid',
            dvm_cmdrsp_cmstatus             : 'protman__dvm_cmdrsp_cmstatus',
            dvm_strreq_valid                : 'protman__dvm_strreq_valid',
            dvm_strreq_ready                : 'protman__dvm_strreq_ready',
            dvm_strreq_rbid                 : 'protman__dvm_strreq_rbid',
            dvm_strreq_sttid                : 'protman__dvm_strreq_sttid',
            dvm_strreq_aiuid                : 'protman__dvm_strreq_aiuid',
            dvm_strreq_msgid                : 'protman__dvm_strreq_msgid',
            dvm_dtwreq_valid                : 'protman__dvm_dtwreq_valid',
            dvm_dtwreq_ready                : 'protman__dvm_dtwreq_ready',
            dvm_dtwreq_last                 : 'protman__dvm_dtwreq_last',
            dvm_dtwreq_cmstatus             : 'protman__dvm_dtwreq_cmstatus',
            dvm_dtwreq_data                 : 'protman__dvm_dtwreq_data',
            dvm_dtwreq_dbad                 : 'protman__dvm_dtwreq_dbad',
            dvm_dtwreq_rbid                 : 'protman__dvm_dtwreq_rbid',
            dvm_dtwreq_aiuid                : 'protman__dvm_dtwreq_aiuid',
            dvm_dtwreq_msgid                : 'protman__dvm_dtwreq_msgid',
            dvm_dtwrsp_valid                : 'protman__dvm_dtwrsp_valid',
            dvm_dtwrsp_ready                : 'protman__dvm_dtwrsp_ready',
            dvm_dtwrsp_aiuid                : 'protman__dvm_dtwrsp_aiuid',
            dvm_dtwrsp_msgid                : 'protman__dvm_dtwrsp_msgid',
            dvm_dtwrsp_cmstatus             : 'protman__dvm_dtwrsp_cmstatus',
            dvm_dtwrsp_dbad                 : 'protman__dvm_dtwrsp_dbad',
            dvm_snpreq_valid                : 'protman__dvm_snpreq_valid',
            dvm_snpreq_ready                : 'protman__dvm_snpreq_ready',
            dvm_snpreq_cmstatus             : 'protman__dvm_snpreq_cmstatus',
            dvm_snpreq_sttid                : 'protman__dvm_snpreq_sttid',
            dvm_snpreq_addr                 : 'protman__dvm_snpreq_addr',
            dvm_snpreq_mpf1                 : 'protman__dvm_snpreq_mpf1',
            dvm_snpreq_mpf3                 : 'protman__dvm_snpreq_mpf3',
            dvm_snpreq_attr                 : 'protman__dvm_snpreq_attr',
            dvm_snpreq_aiuid                : 'protman__dvm_snpreq_aiuid',
            dvm_snprsp_valid                : 'protman__dvm_snprsp_valid',
            dvm_snprsp_ready                : 'protman__dvm_snprsp_ready',
            dvm_snprsp_aiuid                : 'protman__dvm_snprsp_aiuid',
            dvm_snprsp_sttid                : 'protman__dvm_snprsp_sttid',
            dvm_snprsp_cmstatus             : 'protman__dvm_snprsp_cmstatus',
            dvm_cmp_valid                   : 'protman__dvm_cmp_valid',
            dvm_cmp_ready                   : 'protman__dvm_cmp_ready',
            dvm_cmp_sttid                   : 'protman__dvm_cmp_sttid',
            dvm_cmp_aiuid                   : 'protman__dvm_cmp_aiuid',
            dvm_cmp_msgid                   : 'protman__dvm_cmp_msgid',
            dvm_cmp_cmstatus                : 'protman__dvm_cmp_cmstatus',
            dvm_strrsp_valid                : 'protman__dvm_strrsp_valid',
            dvm_strrsp_ready                : 'protman__dvm_strrsp_ready',
            dvm_strrsp_sttid                : 'protman__dvm_strrsp_sttid'
        };
        // Ncore3.2 always has a trace buffer
        /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (nMainTraceBufSize>0) {
            instance_ports_for_protman['ungated_clk']                     = clkInterfaceName+'clk',
            instance_ports_for_protman['ungated_reset_n']                 = clkInterfaceName+'reset_n',
            instance_ports_for_protman['csr_DVETASCR_BufferIsCircular']   = 'csr_DVETASCR_BufferIsCircular';
            instance_ports_for_protman['csr_DVETASCR_BufferClear']        = 'csr_DVETASCR_BufferClear';
            instance_ports_for_protman['csr_DVETASCR_BufferRead']         = 'csr_DVETASCR_BufferRead';
            instance_ports_for_protman['dve_trace_buffer_empty']          = 'protman__dve_trace_buffer_empty';
            instance_ports_for_protman['dve_trace_buffer_full']           = 'protman__dve_trace_buffer_full';
            instance_ports_for_protman['dve_trace_funit_id']              = 'protman__dve_trace_funit_id';
            instance_ports_for_protman['dve_trace_read_data_valid']       = 'protman__dve_trace_read_data_valid';
            instance_ports_for_protman['dve_trace_timestamp']             = 'protman__dve_trace_timestamp';
            instance_ports_for_protman['dve_trace_busy']                  = 'protman__dve_trace_busy';
            instance_ports_for_protman['dve_pmon_trace_packets_dropped']  = 'protman__dve_pmon_trace_packets_dropped';
            instance_ports_for_protman['dve_pmon_trace_packets_accepted'] = 'protman__dve_pmon_trace_packets_accepted';
          for (i=0;i<16;i++) {
            instance_ports_for_protman['dve_trace_capture_data_valid'+i]  = 'protman__dve_trace_capture_data_valid'+i;
            instance_ports_for_protman['dve_trace_capture_data'+i]        = 'protman__dve_trace_capture_data'+i;
          }
            instance_ports_for_protman['dve_trace_hdr_ecc_sb_error']    = 'protman__dve_trace_hdr_ecc_sb_error';
            instance_ports_for_protman['dve_trace_hdr_ecc_db_error']    = 'protman__dve_trace_hdr_ecc_db_error';
            instance_ports_for_protman['dve_trace_hdr_ecc_addr']        = 'protman__dve_trace_hdr_ecc_addr';
            instance_ports_for_protman['dve_trace_data_ecc_sb_error']   = 'protman__dve_trace_data_ecc_sb_error';
            instance_ports_for_protman['dve_trace_data_ecc_db_error']   = 'protman__dve_trace_data_ecc_db_error';
            instance_ports_for_protman['dve_trace_data_ecc_addr']       = 'protman__dve_trace_data_ecc_addr';
            instance_ports_for_protman['dvm_dbg_dtwreq_valid']        = 'protman__dvm_dbg_dtwreq_valid';
            instance_ports_for_protman['dvm_dbg_dtwreq_ready']        = 'protman__dvm_dbg_dtwreq_ready';
            instance_ports_for_protman['dvm_dbg_dtwreq_last']         = 'protman__dvm_dbg_dtwreq_last';
            instance_ports_for_protman['dvm_dbg_dtwreq_data']         = 'protman__dvm_dbg_dtwreq_data';
            instance_ports_for_protman['dvm_dbg_dtwreq_dbad']         = 'protman__dvm_dbg_dtwreq_dbad';
//          instance_ports_for_protman['dvm_dbg_dtwreq_rbid']         = 'protman__dvm_dbg_dtwreq_rbid';
            instance_ports_for_protman['dvm_dbg_dtwreq_aiuid']        = 'protman__dvm_dbg_dtwreq_aiuid';
            instance_ports_for_protman['dvm_dbg_dtwreq_msgid']        = 'protman__dvm_dbg_dtwreq_msgid';
            instance_ports_for_protman['dvm_dbg_dtwrsp_valid']        = 'protman__dvm_dbg_dtwrsp_valid';
            instance_ports_for_protman['dvm_dbg_dtwrsp_ready']        = 'protman__dvm_dbg_dtwrsp_ready';
            instance_ports_for_protman['dvm_dbg_dtwrsp_aiuid']        = 'protman__dvm_dbg_dtwrsp_aiuid';
            instance_ports_for_protman['dvm_dbg_dtwrsp_msgid']        = 'protman__dvm_dbg_dtwrsp_msgid';
            instance_ports_for_protman['dvm_dbg_dtwrsp_cmstatus']     = 'protman__dvm_dbg_dtwrsp_cmstatus';
            instance_ports_for_protman['dvm_dbg_dtwrsp_dbad']         = 'protman__dvm_dbg_dtwrsp_dbad';
        }
            instance_ports_for_protman['dve_pmon_active_stt_entries'] = 'protman__dve_pmon_active_stt_entries';
        // Ncore3.2 always has a trace bit
        /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe>0) {
            instance_ports_for_protman['dvm_dtwreq_tm']         = 'protman__dvm_dtwreq_tm';
            instance_ports_for_protman['dvm_dtwrsp_tm']         = 'protman__dvm_dtwrsp_tm';
            instance_ports_for_protman['dvm_cmp_tm']            = 'protman__dvm_cmp_tm';
            instance_ports_for_protman['dvm_strreq_tm']         = 'protman__dvm_strreq_tm';
        }
        for (i=0; i < nDveAgents; i++) {
    instance_ports_for_protman['dvm_aiu'+i+'_f_unit_id'] = sysUnitIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*wFUnitId)-1) + ':' + (i*wFUnitId) + ']';
        }

    if ( wDvmReqQos != 0 ) {
        instance_ports_for_protman['dvm_cmdreq_qos'] = 'protman__dvm_cmdreq_qos';
        instance_ports_for_protman['dvm_snpreq_qos'] = 'protman__dvm_snpreq_qos';
    }
    // Ncore3.2 always has a trace bit
    /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if ( wTraceMe != 0 ) {
        instance_ports_for_protman['dvm_cmdrsp_tm'] = 'protman__dvm_cmdrsp_tm';
    }
    if ( wDvmReqPriority != 0 ) {
        instance_ports_for_protman['dvm_cmdreq_priority'] = 'protman__dvm_cmdreq_priority';
        instance_ports_for_protman['dvm_cmdrsp_priority'] = 'protman__dvm_cmdrsp_priority';
        instance_ports_for_protman['dvm_dtwreq_priority'] = 'protman__dvm_dtwreq_priority';
        instance_ports_for_protman['dvm_dtwrsp_priority'] = 'protman__dvm_dtwrsp_priority';
        instance_ports_for_protman['dvm_strreq_priority'] = 'protman__dvm_strreq_priority';
        instance_ports_for_protman['dvm_snpreq_priority'] = 'protman__dvm_snpreq_priority';
        instance_ports_for_protman['dvm_cmp_priority']    = 'protman__dvm_cmp_priority';
      // Ncore3.2 always has a trace buffer
      /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
      if (nMainTraceBufSize>0) {
        instance_ports_for_protman['dvm_dbg_dtwreq_priority'] = 'protman__dvm_dbg_dtwreq_priority';
        instance_ports_for_protman['dvm_dbg_dtwrsp_priority'] = 'protman__dvm_dbg_dtwrsp_priority';
      }
    }
    // Ncore3.2 always has a trace buffer
    /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) {
    instance_ports_for_protman["f_wen_hdr"] = "f_hdr_wen";
    instance_ports_for_protman["f_cen_hdr"] = "f_hdr_cen";
    instance_ports_for_protman["f_caddr_hdr"] = "f_hdr_caddr";
    instance_ports_for_protman["f_wdata_hdr"] = "f_hdr_wdata";
    instance_ports_for_protman["f_rdata_hdr"] = "f_hdr_rdata";
    instance_ports_for_protman["f_wen_data"] = "f_data_wen";
    instance_ports_for_protman["f_cen_data"] = "f_data_cen";
    instance_ports_for_protman["f_caddr_data"] = "f_data_caddr";
    instance_ports_for_protman["f_wdata_data"] = "f_data_wdata";
    instance_ports_for_protman["f_rdata_data"] = "f_data_rdata";
    }

    \jsend
        \=obj.lib.instance({
            instanceName: 'u_protman',
            moduleName: 'dve_protocol_man',
            params: protmanParams,
            verilogParams: {},
            ports: instance_ports_for_protman,
            portsDelimiter: '\n    '
        })=\

\js // =========================================
\js // CMDreq receive
\js // =========================================

wire cmd_req_cm_status_transport_err;

assign cmd_req_cm_status_transport_err = (cmd_req_cm_status[7:6] == 2'b11);

wire cmd_req_target_id_mismatch;

assign cmd_req_target_id_mismatch = (cmd_req_target_id[\=wTargetId-1=\:\=wFPortId=\] != MyFUnitId);

assign protman__dvm_cmdreq_valid = cmd_req_valid & ~cmd_req_target_id_mismatch & ~cmd_req_cm_status_transport_err & ~cmd_req_uce;

assign cmd_req_ready = protman__dvm_cmdreq_ready;

assign protman__dvm_cmdreq_aiuid[\=wFUnitId-1=\:0] = cmd_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\];

assign protman__dvm_cmdreq_msgid = cmd_req_message_id[\=wMessageId-1=\:0];

\js if ( wDvmReqQos != 0 ) {
assign protman__dvm_cmdreq_qos = cmd_req_qos[\=wDvmReqQos-1=\:0];
\js }

\js if ( wDvmReqPriority != 0 ) {
assign protman__dvm_cmdreq_priority = cmd_req_priority[\=wDvmReqPriority-1=\:0];
\js }

\js // cmd_req_cm_type[7:0] is already decoded by SMI Interface Mux

assign protman__dvm_cmdreq_cmstatus = cmd_req_cm_status[7:0];

assign protman__dvm_cmdreq_addr[\=wDvmReqAddr-1=\:0] = cmd_req_addr[\=wDvmReqAddr-1=\:0];

assign protman__dvm_cmdreq_attr[0]     = cmd_req_vz;
assign protman__dvm_cmdreq_attr[1]     = cmd_req_ac;
assign protman__dvm_cmdreq_attr[2]     = cmd_req_ca;
assign protman__dvm_cmdreq_attr[3]     = cmd_req_ns;
assign protman__dvm_cmdreq_attr[4]     = cmd_req_pr;
assign protman__dvm_cmdreq_attr[6:5]   = cmd_req_rl[1:0];
assign protman__dvm_cmdreq_attr[7]     = cmd_req_tm;
assign protman__dvm_cmdreq_attr[10:8]  = cmd_req_tof[2:0];
    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wCmdReqAux > 0) {
    \jsend
assign protman__dvm_cmdreq_attr[\=wCmdReqAux-1+11=\:11] = cmd_req_aux[\=wCmdReqAux-1=\:0];
    \js }

\js // =========================================
\js // SNPreq transmit
\js // =========================================

assign snp_req_valid = protman__dvm_snpreq_valid;

assign protman__dvm_snpreq_ready = snp_req_ready;

\js //assign snp_req_last = 1'b1;

assign snp_req_target_id = { protman__dvm_snpreq_aiuid[\=wFUnitId-1=\:0], \=wFPortId=\'d0 };

assign snp_req_initiator_id = MyId[\=wInitiatorId-1=\:0];

assign snp_req_cm_type[7:0] = \=cmType.SnpDvmMsg=\;

assign snp_req_message_id[\=wSttId-1=\:0] = protman__dvm_snpreq_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign snp_req_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wHProt > 0) {
    \jsend
assign snp_req_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign snp_req_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign snp_req_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wDvmReqQos > 0) {
assign snp_req_qos = protman__dvm_snpreq_qos;
    \js }

    \js if (wHdrPriority > 0) {
assign snp_req_priority = protman__dvm_snpreq_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign snp_req_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign snp_req_cm_status = protman__dvm_snpreq_cmstatus[7:0];

assign snp_req_addr = protman__dvm_snpreq_addr[\=wAddr-1=\:0];

assign snp_req_vz = protman__dvm_snpreq_attr[0];
assign snp_req_ac = protman__dvm_snpreq_attr[1];
assign snp_req_ca = protman__dvm_snpreq_attr[2];
assign snp_req_ns = protman__dvm_snpreq_attr[3];
assign snp_req_pr = protman__dvm_snpreq_attr[4];
assign snp_req_up = 2'b0;
assign snp_req_rl = protman__dvm_snpreq_attr[6:5];
assign snp_req_tm = protman__dvm_snpreq_attr[7];

assign snp_req_mpf1[7:0] = protman__dvm_snpreq_mpf1;
    \jsbegin
        /* istanbul ignore next env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */ //changed to next from if bc of tool issue 
        if (wSnpReqMpf1 > 8) {
    \jsend
assign snp_req_mpf1[\=wSnpReqMpf1-1=\:8] = \=wSnpReqMpf1-8=\'b0;
    \js }


assign snp_req_mpf2[\=wSttId-1=\:0] = protman__dvm_snpreq_sttid[\=wSttId-1=\:0];
    \jsbegin
        // wSnpReqMpf2 now is always 9, and seems to always be > than wMsgId(=wSttId)
        /* istanbul ignore else env ncore_3p6,ncore_3p7 */
        if (wSnpReqMpf2 > wSttId) {
    \jsend
assign snp_req_mpf2[\=wSnpReqMpf2-1=\:\=wSttId=\] = \=wSnpReqMpf2-wSttId=\'b0;
    \js }

    \jsbegin
    /* istanbul ignore if env ncore_3p7 */
    if (wSnpReqMpf3 <= 8) { \jsend
assign snp_req_mpf3[\=wSnpReqMpf3-1=\:0] = protman__dvm_snpreq_mpf3[\=wSnpReqMpf3-1=\:0];
    \js } else {
assign snp_req_mpf3[7:0] = protman__dvm_snpreq_mpf3[7:0];
    \js }

    \jsbegin
        /* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wSnpReqMpf3 > 8) {
    \jsend
assign snp_req_mpf3[\=wSnpReqMpf3-1=\:8] = \=wSnpReqMpf3-8=\'b0;
    \js }


assign snp_req_intf_size = \=concParams.snpReqParams.wIntfSize=\'b0;
assign snp_req_d_id = \=concParams.snpReqParams.wDId=\'b0;
assign snp_req_tof = protman__dvm_snpreq_attr[10:8];

assign snp_req_rb_id = \=concParams.snpReqParams.wRBID=\'b0;
    \jsbegin
        //snpreq aux field removed in ncore3.4
        /* istanbul ignore if env ncore_3p0, ncore_3p4,ncore_3p6,ncore_3p7 */
        if ((wCmdReqAux > 0) && (wSnpReqAux > 0)) {
    \jsend
assign snp_req_aux = protman__dvm_snpreq_attr[\=wCmdReqAux-1+11=\:11];
    \js }

    \js if (wSnpReqMProt > 0) {
assign snp_req_m_prot = \=wSnpReqMProt=\'h0;
    \js }

\js // =========================================
\js // STRreq transmit
\js // =========================================

assign str_req_valid = protman__dvm_strreq_valid;

assign protman__dvm_strreq_ready = str_req_ready;

\js //assign str_req_last = 1'b1;

assign str_req_target_id = { protman__dvm_strreq_aiuid[\=wFUnitId-1=\:0], \=wFPortId=\'d0 };

assign str_req_initiator_id = MyId[\=wInitiatorId-1=\:0];

assign str_req_cm_type = \=cmType.StrReq=\;

assign str_req_message_id[\=wSttId-1=\:0] = protman__dvm_strreq_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign str_req_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0 */
        if (concParams.hdrParams.wHProt > 0) {
    \jsend
assign str_req_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign str_req_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign str_req_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign str_req_priority = protman__dvm_strreq_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign str_req_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign str_req_r_message_id = protman__dvm_strreq_msgid[\=wMessageId-1=\:0];

assign str_req_cm_status = 8'b0;

assign str_req_rb_id[\=wSkidEntries-1=\:0] = protman__dvm_strreq_rbid[\=wSkidEntries-1=\:0];
    \jsbegin
        /* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wRBufferId > wSkidEntries) {
    \jsend
assign str_req_rb_id[\=wRBufferId-1=\:\=wSkidEntries=\] = \=wRBufferId-wSkidEntries=\'b0;
    \js }

assign str_req_mpf1 = \=concParams.strReqParams.wMpf1=\'b0;
assign str_req_mpf2 = \=concParams.strReqParams.wMpf2=\'b0;
assign str_req_intf_size = \=concParams.strReqParams.wIntfSize=\'b0;

    \js if (wStrReqMProt > 0) {
assign str_req_m_prot = \=wStrReqMProt=\'h0;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign str_req_tm = protman__dvm_strreq_tm;
    \js }

\js // =========================================
\js // CMPrsp transmit
\js // =========================================

assign cmp_rsp_valid = protman__dvm_cmp_valid;

assign protman__dvm_cmp_ready = cmp_rsp_ready;

\js //assign cmp_rsp_last = 1'b1;

assign cmp_rsp_target_id = { protman__dvm_cmp_aiuid[\=wFUnitId-1=\:0], \=wFPortId=\'d0 };

assign cmp_rsp_initiator_id = MyId[\=wInitiatorId-1=\:0];

assign cmp_rsp_cm_type = \=cmType.CmpRsp=\;

assign cmp_rsp_message_id[\=wSttId-1=\:0] = protman__dvm_cmp_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign cmp_rsp_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0 */
        if (concParams.hdrParams.wHProt > 0) {
    \jsend
assign cmp_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign cmp_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign cmp_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wDvmReqPriority > 0) {
assign cmp_rsp_priority = protman__dvm_cmp_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign cmp_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign cmp_rsp_r_message_id = protman__dvm_cmp_msgid;

assign cmp_rsp_cm_status = protman__dvm_cmp_cmstatus[7:0];

    \js if (wCmpRspMProt > 0) {
assign cmp_rsp_m_prot = \=wCmpRspMProt=\'h0;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign cmp_rsp_tm = protman__dvm_cmp_tm;
    \js }

\js // =========================================
\js // DTWreq receive
\js // =========================================

wire dtw_req_cm_status_transport_err;

assign dtw_req_cm_status_transport_err = (dtw_req_cm_status[7:6] == 2'b11);

wire dtw_req_target_id_mismatch;

assign dtw_req_target_id_mismatch = (dtw_req_target_id[\=wTargetId-1=\:\=wFPortId=\] != MyFUnitId);


assign protman__dvm_dtwreq_valid = dtw_req_valid & ~dtw_req_target_id_mismatch & ~dtw_req_cm_status_transport_err & ~dtw_req_uce;

assign dtw_req_ready = protman__dvm_dtwreq_ready;

assign protman__dvm_dtwreq_last = dtw_req_last;

\js // dtw_req_cm_type[7:0] is already decoded by SMI Interface Mux

assign protman__dvm_dtwreq_cmstatus = dtw_req_cm_status[7:0];

assign protman__dvm_dtwreq_aiuid[\=wFUnitId-1=\:0] = dtw_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\];

assign protman__dvm_dtwreq_msgid = dtw_req_message_id[\=wMessageId-1=\:0];

\js //assign protman__dvm_dtwreq_rbid = dtw_req_rb_id[\=wRBufferId-1=\:0];

assign protman__dvm_dtwreq_rbid[\=wSkidEntries-1=\:0] = dtw_req_rb_id[\=wSkidEntries-1=\:0];

\js // dtw_req_rl[1:0]
\js // dtw_req_tm
\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wTraceMe) { \jsend
assign protman__dvm_dtwreq_tm = dtw_req_tm;
\js }
\js // dtw_req_primary
\js // dtw_req_mpf1[]
\js // dtw_req_mpf2[]

assign protman__dvm_dtwreq_data = dtw_req_data[\=wDvmReqData-1=\:0];

\js // dtw_req_be[]
\js // dtw_req_dwid[2:0]

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.dtwReqParams.wDBad > 1) {
    \jsend
assign protman__dvm_dtwreq_dbad = dtw_req_dbad[0];
    \js } else {
assign protman__dvm_dtwreq_dbad = dtw_req_dbad;
    \js }

\js // dtw_req_user[]

\js if ( wDvmReqPriority != 0 ) {
assign protman__dvm_dtwreq_priority = dtw_req_priority[\=wDvmReqPriority-1=\:0];
\js }

\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
\js // =========================================
\js // DTWreq debug receive
\js // =========================================

wire dtw_dbg_req_cm_status_transport_err;

assign dtw_dbg_req_cm_status_transport_err = (dtw_dbg_req_cm_status[7:6] == 2'b11);

wire dtw_dbg_req_target_id_mismatch;

assign dtw_dbg_req_target_id_mismatch = (dtw_dbg_req_target_id[\=wTargetId-1=\:\=wFPortId=\] != MyFUnitId);


assign protman__dvm_dbg_dtwreq_valid = dtw_dbg_req_valid & ~dtw_dbg_req_target_id_mismatch & ~dtw_dbg_req_cm_status_transport_err & ~dtw_dbg_req_uce;

assign dtw_dbg_req_ready = protman__dvm_dbg_dtwreq_ready;

assign protman__dvm_dbg_dtwreq_last = dtw_dbg_req_last;

\js // dtw_dbg_req_cm_type[7:0] is already decoded by SMI Interface Mux

assign protman__dvm_dbg_dtwreq_aiuid[\=wFUnitId-1=\:0] = dtw_dbg_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\];

assign protman__dvm_dbg_dtwreq_msgid = dtw_dbg_req_message_id[\=wMessageId-1=\:0];

\js //assign protman__dvm_dbg_dtwreq_rbid = dtw_dbg_req_rb_id[\=wRBufferId-1=\:0];

\js //assign protman__dvm_dbg_dtwreq_rbid[\=wSkidEntries-1=\:0] = dtw_dbg_req_rb_id[\=wSkidEntries-1=\:0];

\js // dtw_dbg_req_rl[1:0]
\js // dtw_dbg_req_tm
\js // dtw_dbg_req_primary
\js // dtw_dbg_req_mpf1[]
\js // dtw_dbg_req_mpf2[]

assign protman__dvm_dbg_dtwreq_data = dtw_dbg_req_data[\=wDvmReqData-1=\:0];

\js // dtw_dbg_req_be[]
\js // dtw_dbg_req_dwid[2:0]

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.dtwReqParams.wDBad > 1) {
    \jsend
assign protman__dvm_dbg_dtwreq_dbad = dtw_dbg_req_dbad[0];
    \js } else {
assign protman__dvm_dbg_dtwreq_dbad = dtw_dbg_req_dbad;
    \js }

\js // dtw_dbg_req_user[]

\js if ( wDvmReqPriority != 0 ) {
assign protman__dvm_dbg_dtwreq_priority = dtw_dbg_req_priority[\=wDvmReqPriority-1=\:0];
\js }

\js } else {
assign dtw_dbg_req_ready = 1'b1;
\js }

\js // =========================================
\js // SNPrsp receive
\js // =========================================

wire snp_rsp_cm_status_transport_err;

assign snp_rsp_cm_status_transport_err = (snp_rsp_cm_status[7:6] == 2'b11);

wire snp_rsp_target_id_mismatch;

assign snp_rsp_target_id_mismatch = (snp_rsp_target_id[\=wTargetId-1=\:\=wFPortId=\] != MyFUnitId);


assign protman__dvm_snprsp_valid = snp_rsp_valid & ~snp_rsp_target_id_mismatch & ~snp_rsp_cm_status_transport_err & ~snp_rsp_uce;

assign snp_rsp_ready = protman__dvm_snprsp_ready;

\js // snp_rsp_last

assign protman__dvm_snprsp_aiuid[\=wFUnitId-1=\:0] = snp_rsp_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\];

\js // snp_rsp_message_id[]

assign protman__dvm_snprsp_sttid = snp_rsp_r_message_id[\=wSttId-1=\:0];

assign protman__dvm_snprsp_cmstatus = snp_rsp_cm_status[7:0];

\js // snp_rsp_mpf1[]
\js // snp_rsp_intf_size[]

\js // =========================================
\js // NCCMDrsp transmit
\js // =========================================

assign cmd_rsp_valid = protman__dvm_cmdrsp_valid;

assign protman__dvm_cmdrsp_ready = cmd_rsp_ready;

\js //assign cmd_rsp_last = 1'b1;

assign cmd_rsp_target_id = { protman__dvm_cmdrsp_aiuid[\=wFUnitId-1=\:0], \=wFPortId=\'d0 };

assign cmd_rsp_initiator_id = MyId[\=wInitiatorId-1=\:0];

assign cmd_rsp_cm_type = \=cmType.NCCmdRsp=\;

assign cmd_rsp_message_id[\=wSttId-1=\:0] = protman__dvm_cmdrsp_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign cmd_rsp_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \js if (concParams.hdrParams.wHProt > 0) {
assign cmd_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign cmd_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign cmd_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign cmd_rsp_priority = protman__dvm_cmdrsp_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign cmd_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign cmd_rsp_r_message_id = protman__dvm_cmdrsp_msgid;

assign cmd_rsp_cm_status = protman__dvm_cmdrsp_cmstatus;

    \js if (wNcCmdRspMProt > 0) {
assign cmd_rsp_m_prot = \=wNcCmdRspMProt=\'h0;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign cmd_rsp_tm = protman__dvm_cmdrsp_tm;
    \js }
\js // =========================================
\js // DTWrsp transmit
\js // =========================================

assign dtw_rsp_valid = protman__dvm_dtwrsp_valid;

assign protman__dvm_dtwrsp_ready = dtw_rsp_ready;

\js //assign dtw_rsp_last = 1'b1;

assign dtw_rsp_target_id = { protman__dvm_dtwrsp_aiuid[\=wFUnitId-1=\:0], \=wFPortId=\'d0 };

assign dtw_rsp_initiator_id = MyId;

assign dtw_rsp_cm_type = \=cmType.DtwRsp=\;

assign dtw_rsp_message_id = \=concParams.hdrParams.wMsgId=\'b0;

    \js if (concParams.hdrParams.wHProt > 0) {
assign dtw_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign dtw_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign dtw_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign dtw_rsp_priority = protman__dvm_dtwrsp_priority;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign dtw_rsp_tm = protman__dvm_dtwrsp_tm;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign dtw_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign dtw_rsp_r_message_id = protman__dvm_dtwrsp_msgid;

\js //BOON: 2020/05/21 Khaleel confirmed dtw_rsp_cm_status is always 0 because AIU is not doing anything with dtw_rsp_cm_status.
\js //
\js //assign dtw_rsp_cm_status = protman__dvm_dtwrsp_cmstatus[7] ? protman__dvm_dtwrsp_cmstatus :
\js //                           protman__dvm_dtwrsp_dbad        ? cmstatus_protocol_data_err :
\js //                                                             8'b0;

assign dtw_rsp_cm_status = \=concParams.dtwRspParams.wCmStatus=\'b0;

assign dtw_rsp_rl = 2'b0;

    \js if (wDtwRspMProt > 0) {
assign dtw_rsp_m_prot = \=wDtwRspMProt=\'h0;
    \js }


\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
\js // =========================================
\js // DTWrsp debug transmit
\js // =========================================

assign dtw_dbg_rsp_valid = protman__dvm_dbg_dtwrsp_valid;

assign protman__dvm_dbg_dtwrsp_ready = dtw_dbg_rsp_ready;

\js //assign dtw_dbg_rsp_last = 1'b1;

assign dtw_dbg_rsp_target_id = { protman__dvm_dbg_dtwrsp_aiuid[\=wFUnitId-1=\:0], \=wFPortId=\'d0 };

assign dtw_dbg_rsp_initiator_id = MyId;

assign dtw_dbg_rsp_cm_type = 8'hFF;

assign dtw_dbg_rsp_message_id = \=concParams.dtwDbgRspParams.wMsgId=\'b0;

    \js if (concParams.hdrParams.wHProt > 0) {
assign dtw_dbg_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign dtw_dbg_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign dtw_dbg_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign dtw_dbg_rsp_priority = protman__dvm_dbg_dtwrsp_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign dtw_dbg_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign dtw_dbg_rsp_r_message_id = protman__dvm_dbg_dtwrsp_msgid;

\js //BOON: 2020/05/21 Khaleel confirmed dtw_dbg_rsp_cm_status is always 0 because AIU is not doing anything with dtw_dbg_rsp_cm_status.
\js //
\js //assign dtw_dbg_rsp_cm_status = protman__dvm_dbg_dtwrsp_cmstatus[7] ? protman__dvm_dbg_dtwrsp_cmstatus :
\js //                           protman__dvm_dbg_dtwrsp_dbad        ? cmstatus_protocol_data_err :
\js //                                                             8'b0;

assign dtw_dbg_rsp_cm_status = protman__dvm_dbg_dtwrsp_cmstatus;

assign dtw_dbg_rsp_rl = 2'b0;

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign dtw_dbg_rsp_tm = 1'b0;
    \js }
    \js if (wDtwRspMProt > 0) {
assign dtw_dbg_rsp_m_prot = \=wDtwRspMProt=\'h0;
    \js }
\js } else {
assign dtw_dbg_rsp_valid = 1'b0;

\js //assign dtw_dbg_rsp_last = 1'b0;

assign dtw_dbg_rsp_target_id = \=concParams.hdrParams.wTargetId=\'b0;

assign dtw_dbg_rsp_initiator_id = \=concParams.hdrParams.wInitiatorId=\'b0;

assign dtw_dbg_rsp_cm_type = \=concParams.hdrParams.wCmType=\'b0;

assign dtw_dbg_rsp_message_id = \=concParams.hdrParams.wMsgId=\'b0;

    \js if (concParams.hdrParams.wHProt > 0) {
assign dtw_dbg_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign dtw_dbg_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign dtw_dbg_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign dtw_dbg_rsp_priority = \=wHdrPriority=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign dtw_dbg_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign dtw_dbg_rsp_r_message_id = \=concParams.dtwDbgRspParams.wMsgId=\'b0;

\js //BOON: 2020/05/21 Khaleel confirmed dtw_dbg_rsp_cm_status is always 0 because AIU is not doing anything with dtw_dbg_rsp_cm_status.
\js //
\js //assign dtw_dbg_rsp_cm_status = protman__dvm_dbg_dtwrsp_cmstatus[7] ? protman__dvm_dbg_dtwrsp_cmstatus :
\js //                           protman__dvm_dbg_dtwrsp_dbad        ? cmstatus_protocol_data_err :
\js //                                                             8'b0;

assign dtw_dbg_rsp_cm_status = \=concParams.dtwDbgRspParams.wCmStatus=\'b0;

assign dtw_dbg_rsp_rl = 2'b0;

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign dtw_dbg_rsp_tm = 1'b0;
    \js }
    \js if (wDtwRspMProt > 0) {
assign dtw_dbg_rsp_m_prot = \=wDtwRspMProt=\'h0;
    \js }

\js }

\js // =========================================
\js // STRrsp receive
\js // =========================================

wire str_rsp_cm_status_transport_err;

assign str_rsp_cm_status_transport_err = (str_rsp_cm_status[7:6] == 2'b11);

wire str_rsp_target_id_mismatch;

assign str_rsp_target_id_mismatch = (str_rsp_target_id[\=wTargetId-1=\:\=wFPortId=\] != MyFUnitId);


assign protman__dvm_strrsp_valid = str_rsp_valid & ~str_rsp_target_id_mismatch & ~str_rsp_cm_status_transport_err & ~str_rsp_uce;

assign str_rsp_ready = protman__dvm_strrsp_ready;

\js // str_rsp_last;

\js // str_rsp_initiator_id[]

\js // str_rsp_message_id;

assign protman__dvm_strrsp_sttid = str_rsp_r_message_id[\=wSttId-1=\:0];

\js // str_rsp_cm_status[]

\jsbegin
//=============================================================================
// CSR
//=============================================================================
\jsend

\jsbegin
//-----------------------------------------------------------------------------
// Creating pmonCsrReg
//-----------------------------------------------------------------------------
const pmonCsrInputPorts                 = {};   // This is signal bundle of *in and *wr signals to PMON registers only

pmonCsrIfGenerator.inputs().forEach( port => {
        pmonCsrInputPorts[ port.name ]          = -port.width;
});

    var CSR_INTF = [];

    CSR_INTF.push({
        modulePrefix: apbInterfaceName,
        localPrefix: apbInterfaceName,
        interface: apbInterface
    });
    CSR_INTF.push({
        modulePrefix  : oldStylePmonCsrInterface.name,
        localPrefix   : oldStylePmonCsrInterface.name,
        interface     : oldStylePmonCsrInterface.signals
    });



    var csr_params = {
        clkInterface               : myClkInterface,
        clkInterfaceName           : clkInterfaceName,
        apbInterface               : apbInterface,
        apbInterfaceName           : apbInterfaceName,
        regProtectionInterface     : regProtectionInterface,
        regProtectionInterfaceName : regProtectionInterfaceName,
        regProtectionStyle         : regProtectionStyle,
        wFUnitId   : wFUnitId,
        wNUnitId   : wNUnitId,
        wRpn       : wRpn,
        wNrri      : wNrri,
        nDveAgents : nDveAgents,
        nAius      : nAius,
        useResiliency : useResiliency,
        wResThreshold : wResThreshold,
        nMainTraceBufSize : nMainTraceBufSize,
        nTraceBanks : nTraceBanks,
        useSysEvtCoh  : useSysEvtCoh,
        wSnoopEnables : wSnoopEnables,
        pmonCsrInputInterface: { name: "DVE", signals: pmonCsrInputPorts },
        nPerfCounters: nPerfCounters,
        csr: csr, 	
	wEventTimeout: wEventTimeout,
	wProtocolTimeout: wProtocolTimeout,
	nEventAgentsForSender: nDveAgents
    };

    var instance_ports_for_csr = {
        clk                    : clkInterfaceName+'clk',
        reset_n                : clkInterfaceName+'reset_n',
        csr_DeallocEarly       : 'csr_DeallocEarly',
        csr_AceDvmOrder        : 'csr_AceDvmOrder',
        csr_RelaxDvmSnoopPairs : 'csr_RelaxDvmSnoopPairs',
        csr_DvmTransActive     : 'csr_busy',
        csr_DvmSnoopDisable    : 'csr_DvmSnoopDisable',
        csr_MaxOneSyncDVMOp    : 'csr_MaxOneSyncDVMOp'
    };
    instance_ports_for_csr['my_n_unit_id'] = unitIdInterfaceName + 'my_n_unit_id';
    instance_ports_for_csr['my_f_unit_id'] = unitIdInterfaceName + 'my_f_unit_id';
    instance_ports_for_csr['my_csr_rpn']   = unitIdInterfaceName + 'my_csr_rpn';
    instance_ports_for_csr['my_csr_nrri']  = unitIdInterfaceName + 'my_csr_nrri';

    instance_ports_for_csr['csr_event_timeout_value'] = 'csr_event_timeout_value';
    instance_ports_for_csr['csr_protocol_timeout_value'] = 'csr_protocol_timeout_value';
    instance_ports_for_csr['csr_sys_evt_sender_enable'] = 'csr_sys_evt_sender_enable';
    instance_ports_for_csr['csr_sys_evt_sender_err_vld'] = 'csr_sys_evt_sender_err_vld';
//  instance_ports_for_csr['csr_sys_evt_sender_err_f_unit_id'] = 'csr_sys_evt_sender_err_f_unit_id';
//  instance_ports_for_csr['csr_sys_evt_sender_err_protocol_sys'] = 'csr_sys_evt_sender_err_protocol_sys';
    instance_ports_for_csr['csr_sys_evt_sender_err_protocol_timeout'] = 'csr_sys_evt_sender_err_protocol_timeout';
    instance_ports_for_csr['csr_sys_evt_sender_err_event_timeout'] = 'csr_sys_evt_sender_err_event_timeout';
    instance_ports_for_csr['csr_sys_evt_receiver_enable'] = 'csr_sys_evt_receiver_enable';
    instance_ports_for_csr['csr_sys_evt_receiver_err_vld'] = 'csr_sys_evt_receiver_err_vld';
    instance_ports_for_csr['csr_sys_evt_receiver_err_event_timeout'] = 'csr_sys_evt_receiver_err_event_timeout';
//  instance_ports_for_csr['csr_sys_evt_receiver_err_f_unit_id'] = 'csr_sys_evt_receiver_err_f_unit_id';


      
        for (i=0; i < nDveAgents; i++) {
            /* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
            if (wNUnitId > 1) {
    instance_ports_for_csr['dvm_aiu'+i+'_n_unit_id'] = sysNodeUnitIdInterfaceName + 'n_unit_id' + '[' + (((i+1)*wNUnitId)-1) + ':' + (i*wNUnitId) + ']';
            } else {
                if (nDveAgents > 1) {
    instance_ports_for_csr['dvm_aiu'+i+'_n_unit_id'] = sysNodeUnitIdInterfaceName + 'n_unit_id' + '[' + (i*wNUnitId) + ']';
                } else {
    instance_ports_for_csr['dvm_aiu'+i+'_n_unit_id'] = sysNodeUnitIdInterfaceName + 'n_unit_id';
                }
            }
        }
    instance_ports_for_csr['dve_uncorr_err_vld']     = 'dve_uncorr_err_vld';
    instance_ports_for_csr['dve_uncorr_err_type']    = 'dve_uncorr_err_type';
    instance_ports_for_csr['dve_uncorr_err_info']    = 'dve_uncorr_err_info';
    instance_ports_for_csr['dve_corr_err_vld']     = 'dve_corr_err_vld';
    instance_ports_for_csr['dve_corr_err_type']    = 'dve_corr_err_type';
    instance_ports_for_csr['dve_corr_err_info']    = 'dve_corr_err_info';
    instance_ports_for_csr['dve_res_cerr_threshold'] = 'dve_res_cerr_threshold';
    instance_ports_for_csr['IRQ_uc']                 = irqInterfaceName + 'uc';
    // Ncore3.2 will always have an uncorrectable error interface (due to debug)
    /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (irqInterface.c > 0) {
    instance_ports_for_csr['IRQ_c']                  = irqInterfaceName + 'c';
    }
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
  if (nMainTraceBufSize>0) {
    instance_ports_for_csr['dve_trace_mem_UCE']  = 'dve_trace_mem_UCE';
    instance_ports_for_csr['dve_trace_mem_CE']   = 'dve_trace_mem_CE';
    instance_ports_for_csr['csr_DVETASCR_BufferIsCircular']  = 'csr_DVETASCR_BufferIsCircular';
    instance_ports_for_csr['csr_DVETASCR_BufferClear']       = 'csr_DVETASCR_BufferClear';
    instance_ports_for_csr['csr_DVETASCR_BufferRead']        = 'csr_DVETASCR_BufferRead';
    instance_ports_for_csr['dve_trace_buffer_empty']            = 'protman__dve_trace_buffer_empty';
    instance_ports_for_csr['dve_trace_buffer_full']             = 'protman__dve_trace_buffer_full';
    instance_ports_for_csr['dve_trace_funit_id']                = 'protman__dve_trace_funit_id';
    instance_ports_for_csr['dve_trace_read_data_valid']         = 'protman__dve_trace_read_data_valid';
    instance_ports_for_csr['dve_trace_timestamp']               = 'protman__dve_trace_timestamp';
for (i=0;i<16;i++) {
    instance_ports_for_csr['dve_trace_capture_data_valid'+i] = 'protman__dve_trace_capture_data_valid'+i;
    instance_ports_for_csr['dve_trace_capture_data'+i]       = 'protman__dve_trace_capture_data'+i;
}
    instance_ports_for_csr['dve_trace_hdr_ecc_sb_error']    = 'protman__dve_trace_hdr_ecc_sb_error';
    instance_ports_for_csr['dve_trace_hdr_ecc_db_error']    = 'protman__dve_trace_hdr_ecc_db_error';
    instance_ports_for_csr['dve_trace_hdr_ecc_addr']        = 'protman__dve_trace_hdr_ecc_addr';
    instance_ports_for_csr['dve_trace_data_ecc_sb_error']   = 'protman__dve_trace_data_ecc_sb_error';
    instance_ports_for_csr['dve_trace_data_ecc_db_error']   = 'protman__dve_trace_data_ecc_db_error';
    instance_ports_for_csr['dve_trace_data_ecc_addr']       = 'protman__dve_trace_data_ecc_addr';
  }

// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysEvtCoh) {
    instance_ports_for_csr['csr_sys_coh_receiver_err_vld'] = 'csr_sys_coh_receiver_err_vld';
//  instance_ports_for_csr['csr_sys_coh_receiver_err_f_unit_id'] = 'csr_sys_coh_receiver_err_f_unit_id';
    instance_ports_for_csr['snoop_enables'] = 'snoop_enables';
    instance_ports_for_csr['snoop_enables_update'] = 'snoop_enables_update';
    instance_ports_for_csr['csr_snoop_enables'] = 'csr_snoop_enables';
    instance_ports_for_csr['csr_snoop_enables_update'] = 'csr_snoop_enables_update';
}
\jsend
    \=obj.lib.instance({
        instanceName: 'u_csr',
        moduleName: 'dve_csr',
        params: csr_params,
        verilogParams: {},
        ports: instance_ports_for_csr,
        interfaces: CSR_INTF,
        portsDelimiter: '\n'
    })=\

assign cerr_threshold       = dve_res_cerr_threshold;


\js //NOTE: Concerto Mux (Header/Data/Message protection) Correctable Errors are logged by Functional Safety Controller (FSC).

\js //DVE doesn't use correctable error logging register.

\js //NOTE: Concerto Mux (Header/Data/Message protection) Uncorrectable Errors are logged by Functional Safety Controller (FSC).

\js // DVE uses uncorrectable error logging register.

\js // DVE uncorrectable error logging only covers target_id_mismatch (i.e. wrong target id) error (with err_type = 0x4)

wire cmdreq_uncorr_err_vld = (cmd_req_valid & cmd_req_ready & (cmd_req_target_id_mismatch|cmd_req_uce));
wire dtwreq_uncorr_err_vld = (dtw_req_valid & dtw_req_ready & (dtw_req_target_id_mismatch|dtw_req_uce));
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire dtwdbgreq_uncorr_err_vld = (dtw_dbg_req_valid & dtw_dbg_req_ready & (dtw_dbg_req_target_id_mismatch|dtw_dbg_req_uce));
\js }
wire snprsp_uncorr_err_vld = (snp_rsp_valid & snp_rsp_ready & (snp_rsp_target_id_mismatch|snp_rsp_uce));
wire strrsp_uncorr_err_vld = (str_rsp_valid & str_rsp_ready & (str_rsp_target_id_mismatch|str_rsp_uce));
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
wire sys_req_rx_uncorr_err_vld = (sys_req_rx_valid & sys_req_rx_ready & (sys_req_rx_target_id_mismatch|sys_req_rx_uce));
\js }

assign dve_uncorr_err_vld     = cmdreq_uncorr_err_vld
                              | dtwreq_uncorr_err_vld
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
                              | dtwdbgreq_uncorr_err_vld
\js }
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
                              | sys_req_rx_uncorr_err_vld
\js }
                              | snprsp_uncorr_err_vld
                              | strrsp_uncorr_err_vld
                              ;

assign dve_uncorr_err_type    = 4'h8;

assign dve_uncorr_err_info =
    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
       if ((wInitiatorId-wFPortId) >= 12) {
    \jsend
        cmdreq_uncorr_err_vld ? { cmd_req_initiator_id[\=wFPortId+12-1=\:\=wFPortId=\], 7'b0, cmd_req_uce } :
        dtwreq_uncorr_err_vld ? { dtw_req_initiator_id[\=wFPortId+12-1=\:\=wFPortId=\], 7'b0, dtw_req_uce} :
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
        dtwdbgreq_uncorr_err_vld ? { dtw_dbg_req_initiator_id[\=wFPortId+12-1=\:\=wFPortId=\], 7'b0, dtw_dbg_req_uce } :
\js }
        snprsp_uncorr_err_vld ? { snp_rsp_initiator_id[\=wFPortId+12-1=\:\=wFPortId=\], 7'b0, snp_rsp_uce } :
        strrsp_uncorr_err_vld ? { str_rsp_initiator_id[\=wFPortId+12-1=\:\=wFPortId=\], 7'b0, str_rsp_uce } :
    \js } else {
        cmdreq_uncorr_err_vld ? { {\=12-(wInitiatorId-wFPortId)=\{1'b0}}, cmd_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 7'b0, cmd_req_uce } :
        dtwreq_uncorr_err_vld ? { {\=12-(wInitiatorId-wFPortId)=\{1'b0}}, dtw_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 7'b0, dtw_req_uce } :
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
        dtwdbgreq_uncorr_err_vld ? { {\=12-(wInitiatorId-wFPortId)=\{1'b0}}, dtw_dbg_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 7'b0, dtw_dbg_req_uce } :
\js }
        snprsp_uncorr_err_vld ? { {\=12-(wInitiatorId-wFPortId)=\{1'b0}}, snp_rsp_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 7'b0, snp_rsp_uce } :
        strrsp_uncorr_err_vld ? { {\=12-(wInitiatorId-wFPortId)=\{1'b0}}, str_rsp_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 7'b0, str_rsp_uce } :
    \js }
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
        sys_req_rx_uncorr_err_vld ? { {\=12-(wInitiatorId-wFPortId)=\{1'b0}}, sys_req_rx_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 7'b0, sys_req_rx_uce } :
\js }
                                20'h0;

wire [51:0] dve_uncorr_addr_full;

assign dve_target_id_UCE = dve_uncorr_err_vld;

\js // DVE uses correctable error logging register.

\js // DVE correctable error logging only covers SMI correctable error (i.e. transport error) (with err_type = 0x8)

wire cmdreq_corr_err_vld = (cmd_req_valid & cmd_req_ready & cmd_req_ce);
wire dtwreq_corr_err_vld = (dtw_req_valid & dtw_req_ready & dtw_req_ce);
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
wire dtwdbgreq_corr_err_vld = (dtw_dbg_req_valid & dtw_dbg_req_ready & dtw_dbg_req_ce);
\js }
wire snprsp_corr_err_vld = (snp_rsp_valid & snp_rsp_ready & snp_rsp_ce);
wire strrsp_corr_err_vld = (str_rsp_valid & str_rsp_ready & str_rsp_ce);
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
wire sys_req_rx_corr_err_vld = (sys_req_rx_valid & sys_req_rx_ready & sys_req_rx_ce);
\js }

assign dve_corr_err_vld     = cmdreq_corr_err_vld
                              | dtwreq_corr_err_vld
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
                              | dtwdbgreq_corr_err_vld
\js }
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
                              | sys_req_rx_corr_err_vld
\js }
                              | snprsp_corr_err_vld
                              | strrsp_corr_err_vld
                              ;

assign dve_corr_err_type    = 4'h8;

assign dve_corr_err_info =
    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
       if ((wInitiatorId-wFPortId) >= 10) {
    \jsend
        cmdreq_corr_err_vld ? { cmd_req_initiator_id[\=wFPortId+10-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
        dtwreq_corr_err_vld ? { dtw_req_initiator_id[\=wFPortId+10-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
        dtwdbgreq_corr_err_vld ? { dtw_dbg_req_initiator_id[\=wFPortId+10-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
\js }
        snprsp_corr_err_vld ? { snp_rsp_initiator_id[\=wFPortId+10-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
        strrsp_corr_err_vld ? { str_rsp_initiator_id[\=wFPortId+10-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
    \js } else {
        cmdreq_corr_err_vld ? { {\=10-(wInitiatorId-wFPortId)=\{1'b0}}, cmd_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
        dtwreq_corr_err_vld ? { {\=10-(wInitiatorId-wFPortId)=\{1'b0}}, dtw_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
\jsbegin
// Ncore3.2 always has a trace buffer
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (nMainTraceBufSize>0) { \jsend
        dtwdbgreq_corr_err_vld ? { {\=10-(wInitiatorId-wFPortId)=\{1'b0}}, dtw_dbg_req_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
\js }
        snprsp_corr_err_vld ? { {\=10-(wInitiatorId-wFPortId)=\{1'b0}}, snp_rsp_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
        strrsp_corr_err_vld ? { {\=10-(wInitiatorId-wFPortId)=\{1'b0}}, str_rsp_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
    \js }
\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend
        sys_req_rx_corr_err_vld ? { {\=10-(wInitiatorId-wFPortId)=\{1'b0}}, sys_req_rx_initiator_id[\=wInitiatorId-1=\:\=wFPortId=\], 5'b0, 1'b0 } :
\js }
                                16'h0;

\js //=============================================================================
\js // System Event and Coherency Wrapper
\js //=============================================================================

\jsbegin
// Ncore3.2 always has SysCo present
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
    if (useSysEvtCoh) { \jsend

assign outstanding_snoop_count_zero = agents_inactive_vec;

    \jsbegin
	 var sys_evt_coh_concerto_params = {
            wFUnitId                : wFUnitId,
            wFPortId                : wFPortId,
            wNUnitId                : wNUnitId,
            concParams              : concParams,
            cmType                  : cmType,
            sysReqRxInterface       : SYSReqInterface,
            sysRspTxInterface       : SYSRespInterface,

            useSysEvtSender         : useSysEvtBroadcaster,
            useSysEvtReceiver       : useSysEvtBroadcaster,
            useSysCoh               : 1,
            useSysCohSender         : 0,
            nSnoopAgents            : nDveAgents,
            wSnoopEnables           : wSnoopEnables,
	    useSysEvtBroadcaster     : useSysEvtBroadcaster
        };

         var instance_ports_for_sys_evt_coh_concerto = {
            clk                                    : clkInterfaceName+'clk',
            reset_n                                : 'gated_reset_n',
            busy                                   : 'sys_evt_coh_busy',
            my_f_unit_id                           : unitIdInterfaceName+'my_f_unit_id',
	    csr_sys_coh_receiver_err_vld           : 'csr_sys_coh_receiver_err_vld',
            csr_sys_coh_receiver_err_f_unit_id     : 'csr_sys_coh_receiver_err_f_unit_id',
            snoop_enables                          : 'snoop_enables',
            snoop_enables_update                   : 'snoop_enables_update',
            csr_snoop_enables                      : 'csr_snoop_enables',
            csr_snoop_enables_update               : 'csr_snoop_enables_update',
            outstanding_snoop_count_zero           : 'outstanding_snoop_count_zero'
        };
	
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
	if (useSysEvtBroadcaster) {
       sys_evt_coh_concerto_params['sysReqTxInterface'      ] = SYSReqInterface;
       sys_evt_coh_concerto_params['sysRspRxInterface'      ] = SYSRespInterface;
       sys_evt_coh_concerto_params['nEventAgentsForSender'  ]  = nEvtReceivers;
       sys_evt_coh_concerto_params['nEventAgentsForReceiver']  = nDveAgents;
       sys_evt_coh_concerto_params['wEventTimeout'          ]  = wEventTimeout;
       sys_evt_coh_concerto_params['wProtocolTimeout'       ]  = wProtocolTimeout;
        }

/* istanbul ignore else env ncore_3p6,ncore_3p7 */
	if (useSysEvtBroadcaster) {
	   //ports of the sys_evt_sender
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_protocol_timeout_value'] = 'csr_protocol_timeout_value';
          instance_ports_for_sys_evt_coh_concerto['csr_event_timeout_value'] = 'csr_event_timeout_value';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_enable'] = 'csr_sys_evt_sender_enable';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_vld'] = 'csr_sys_evt_sender_err_vld';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_f_unit_id'] = 'csr_sys_evt_sender_err_f_unit_id';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_protocol_sys'] = 'csr_sys_evt_sender_err_protocol_sys';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_protocol_timeout'] =  'csr_sys_evt_sender_err_protocol_timeout';
       	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_event_timeout'] = 'csr_sys_evt_sender_err_event_timeout';
       	  instance_ports_for_sys_evt_coh_concerto['event_in_req'] = reqAckEventInterface.name+"req";
     	  instance_ports_for_sys_evt_coh_concerto['event_in_ack'] = reqAckEventInterface.name+"ack";
    	  instance_ports_for_sys_evt_coh_concerto['event_in_targets'] = 'one_hot_targets_excluded_initiator';

         //ports of the sys_evt_receiver
    	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_receiver_enable'] = 'csr_sys_evt_receiver_enable';
    	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_receiver_err_vld'] = 'csr_sys_evt_receiver_err_vld';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_receiver_err_event_timeout'] = 'csr_sys_evt_receiver_err_event_timeout';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_receiver_err_f_unit_id'] = 'csr_sys_evt_receiver_err_f_unit_id';
      	  instance_ports_for_sys_evt_coh_concerto['event_out_req'] = reqAckEventInterface.name+"req";
      	  instance_ports_for_sys_evt_coh_concerto['event_out_ack'] = reqAckEventInterface.name+"ack";
      	  instance_ports_for_sys_evt_coh_concerto['event_out_initiator_id'] = reqAckEventInterface.name+"initiator_id";
	} else { \jsend

	assign csr_sys_evt_receiver_err_vld		 = 1'b0;
	assign csr_sys_evt_receiver_err_event_timeout 	 = 1'b0;
	assign csr_sys_evt_receiver_err_f_unit_id 	 = \=wFUnitId=\'b0;
	assign csr_sys_evt_sender_err_vld 		 = 1'b0;
	assign csr_sys_evt_sender_err_f_unit_id 	 = \=wFUnitId=\'b0;
	assign csr_sys_evt_sender_err_protocol_sys 	 = 1'b0;
	assign csr_sys_evt_sender_err_protocol_timeout 	 = 1'b0;
	assign csr_sys_evt_sender_err_event_timeout 	 = 1'b0; \jsbegin 
	} 
//input event needs to be defined as the input to this block
        for (i=0; i < nDveAgents; i++) {
    instance_ports_for_sys_evt_coh_concerto['aiu'+i+'_f_unit_id'] = sysUnitIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*wFUnitId)-1) + ':' + (i*wFUnitId) + ']';
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
	 // if (useSysEvtBroadcaster) {
     //instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = sysUnitIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*wFUnitId)-1) + ':' + (i*wFUnitId) + ']';
//	  }
        }

	//input event needs to come from the sysEvtReceivers
	var sysEvtReceiversVerilog =  numToVlogConstants(sysEvtReceivers, wFUnitId);
	for (i = 0; i < nEvtReceivers; i++) {
      /* istanbul ignore else env ncore_3p6,ncore_3p7 */
	  if (useSysEvtBroadcaster) {
     instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = sysEvtReceiversVerilog[i];
	  }
	}

        for (i=0; i < nDveAgents; i++) {
            /* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
            if (wNUnitId > 1) {
    instance_ports_for_sys_evt_coh_concerto['aiu'+i+'_n_unit_id'] = sysNodeUnitIdInterfaceName + 'n_unit_id' + '[' + (((i+1)*wNUnitId)-1) + ':' + (i*wNUnitId) + ']';
            } else {
                if (nDveAgents > 1) {
    instance_ports_for_sys_evt_coh_concerto['aiu'+i+'_n_unit_id'] = sysNodeUnitIdInterfaceName + 'n_unit_id' + '[' + (i*wNUnitId) + ']';
                } else {
    instance_ports_for_sys_evt_coh_concerto['aiu'+i+'_n_unit_id'] = sysNodeUnitIdInterfaceName + 'n_unit_id';
                }
            }
        }
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
	if (useSysEvtBroadcaster) {
	for (i=0; i < nEvtReceivers; i++) { \jsend
	  assign one_hot_initiator_id[\=i=\] = (\=sysEvtReceiversVerilog[i]=\ == \=reqAckEventInterface.name=\initiator_id); \jsbegin 
} \jsend
	assign one_hot_targets_excluded_initiator = ~one_hot_initiator_id; \jsbegin	
 	} 

	var sysEvtCohInterfaces = [];
	sysEvtCohInterfaces.push({modulePrefix: 'sys_req_rx_', localPrefix: 'sys_req_rx_', interface: SYSReqInterface});
    	sysEvtCohInterfaces.push({modulePrefix: 'sys_rsp_tx_', localPrefix: 'sys_rsp_tx_', interface: SYSRespInterface});

/* istanbul ignore else env ncore_3p6,ncore_3p7 */
	if (useSysEvtBroadcaster) {
          sysEvtCohInterfaces.push({modulePrefix: 'sys_req_tx_', localPrefix: 'sys_req_tx_', interface: SYSReqInterface});
          sysEvtCohInterfaces.push({modulePrefix: 'sys_rsp_rx_', localPrefix: 'sys_rsp_rx_', interface: SYSRespInterface});    
	} \jsend

        \=obj.lib.instance({
            instanceName: 'u_sys_evt_coh_concerto',
            moduleName: 'sys_evt_coh_concerto',
            params: sys_evt_coh_concerto_params,
            ports: instance_ports_for_sys_evt_coh_concerto,
            interfaces: sysEvtCohInterfaces 
        })=\

\js }

\js if (nPerfCounters>0) {
\jsbegin
//=============================================================================
// PMON CSR interfaces and params generation
//=============================================================================

for (let i=0; i< pmonEventTable.length; i++) { \jsend
        assign \=pmonInterfaces.evtInterfaces[i].name=\val              = \=pmonEventTable[i].expr=\; \jsbegin
} \jsend


\=u.nInstance({
    instanceName : 'u_ncr_pmon',
    moduleName : 'ncr_pmon',
    params: {
        nPerfCounters,
                interfaces: pmonInterfaces
    },
    interfaceObj: {
                interfaces: pmonInterfaces,
                prefixes: pmonInterfaces 
    }
})=\
\jsbegin
} else /* istanbul ignore else env ncore_3p7 */ if ( masterTriggerInterfaceJson && !masterTriggerInterfaceJson._SKIP_) { \jsend
assign \=masterTriggerInterface.name=\trigger = DVEMCNTCR_MasterCountEnable_out;
assign DVEMCNTCR_LocalCountClear_wr = 1'b0;
assign DVEMCNTCR_LocalCountClear_in = 1'b0;
\js }

\js if (nPerfCounters>0) {
\js //=============================================================================
\js // Divider by 16 
\js //=============================================================================
\=u.instance({
    instanceName: 'clk_divider' ,
    moduleName: 'clk_divider',
    params: {
        clkDivisors: [16],
        clkInterface : { name: clkInterfaceName, signals: clkInterface },       
        clkOutInterfaces: [clk16Interface]
    },
    interfaces :[
                { modulePrefix: clkInterfaceName, localPrefix: clkInterfaceName, "interface": clkInterface },
                { modulePrefix: clk16Interface.name, localPrefix: clk16Interface.name, "interface": clk16Interface.signals }
        ],
    portsDelimiter: '\n    '
})=\
\js }

endmodule
