\jsbegin
//=============================================================================
// Copyright(C) 2019 Arteris, Inc.
// All rights reserved
//=============================================================================
// Ncore 3 Address Map Interleave Functions
// Author: Boon Chuan
// ============================================================================

var u = obj.lib;

var utilFunctions = obj.userLib;

// ============================================================================
// Parameters
// ============================================================================

u.paramDefault('wSysAddr', 'int', 52);

//
// The unit2WIFV is a vector (i.e. array) of 2-Way Interleave Functions.
// Each Interleave Function comprises an array of integer for primary bits, and an array of string for secondary bits.
//
u.paramDefault('unit2WIFV', 'array',
    [ {PrimaryBits : [7], SecondaryBits: ["'h10000000"]},
      {PrimaryBits : [9], SecondaryBits: ["'h40000000"]}
    ] );

//
// The unit3WIFV is a vector (i.e. array) of 3-Way Interleave Functions.
// Each Interleave Function comprises an array of integer for primary bits, and an array of string for secondary bits.
//
u.paramDefault('unit3WIFV', 'array',
    [ {PrimaryBits : [7,  8], SecondaryBits: ["'h10000000", "'h20000000"]},
      {PrimaryBits : [9, 10], SecondaryBits: ["'h40000000", "'h80000000"]}
    ] );

//
// The unit4WIFV is a vector (i.e. array) of 4-Way Interleave Functions.
// Each Interleave Function comprises an array of integer for primary bits, and an array of string for secondary bits.
//
u.paramDefault('unit4WIFV', 'array',
    [ {PrimaryBits : [7,  8], SecondaryBits: ["'h10000000", "'h20000000"]},
      {PrimaryBits : [9, 10], SecondaryBits: ["'h40000000", "'h80000000"]}
    ] );

//
// The unit8WIFV is a vector (i.e. array) of 8-Way Interleave Functions.
// Each Interleave Function comprises an array of integer for primary bits, and an array of string for secondary bits.
//
u.paramDefault('unit8WIFV', 'array',
    [ {PrimaryBits : [6,  7,  8], SecondaryBits: ["'h10000000", "'h20000000", "'h40000000"]},
      {PrimaryBits : [9, 10, 11], SecondaryBits: ["'h40000000", "'h80000000", "'h20000000"]}
    ] );

//
// The unit16WIFV is a vector (i.e. array) of 16-Way Interleave Functions.
// Each Interleave Function comprises an array of integer for primary bits, and an array of string for secondary bits.
//
u.paramDefault('unit16WIFV', 'array',
    [ {PrimaryBits : [6,  7,  8,  9], SecondaryBits: ["'h10000000", "'h20000000", "'h40000000", "'h04000000"]},
      {PrimaryBits : [9, 10, 11, 12], SecondaryBits: ["'h40000000", "'h80000000", "'h20000000", "'h08000000"]}
    ] );

var wSysAddr = u.getParam('wSysAddr');

var unit2WIFV = u.getParam('unit2WIFV');
var unit3WIFV = u.getParam('unit3WIFV');
var unit4WIFV = u.getParam('unit4WIFV');
var unit8WIFV = u.getParam('unit8WIFV');
var unit16WIFV = u.getParam('unit16WIFV');

// ============================================================================
// Ports
// ============================================================================

u.port('input',  'address',           wSysAddr);
u.port('input',  'AMIFR_A16WIFId',    3);
u.port('input',  'AMIFR_A8WIFId',     3);
u.port('input',  'AMIFR_A4WIFId',     3);
u.port('input',  'AMIFR_A3WIFId',     3);
u.port('input',  'AMIFR_A2WIFId',     3);
u.port('output', 'f2_unit_id_offset', 5);
u.port('output', 'f3_unit_id_offset', 5);
u.port('output', 'f4_unit_id_offset', 5);
u.port('output', 'f8_unit_id_offset', 5);
u.port('output', 'f16_unit_id_offset', 5);

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\jsbegin
// =======================================================
// Unit 2-Way Interleave Functions
// =======================================================
\jsend

\js for (var k=0; k < unit2WIFV.length; k++) {

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (unit2WIFV[k].PrimaryBits.length) {    
\jsend
wire [\=unit2WIFV[k].PrimaryBits.length-1=\:0] unit2wif\=k=\_set_select__index_out;
wire [4:0] unit2wif\=k=\_id_offset;

    \=u.instance({
        instanceName: 'u_unit2wif'+k+'_set_select',
        moduleName: 'set_select',
        params : {
                     PriSubDiagAddrBits : unit2WIFV[k].PrimaryBits,
                     SecSubRows         : unit2WIFV[k].SecondaryBits,
                     wAddr              : wSysAddr
                 },
        verilogParams: {},
        ports: {
                   addr_in             : 'address',
                   index_out           : 'unit2wif'+k+'_set_select__index_out'
               },
        portsDelimiter: '\n    '
    })=\

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (unit2WIFV[k].PrimaryBits.length < 5) {
    \jsend

assign unit2wif\=k=\_id_offset[\=unit2WIFV[k].PrimaryBits.length-1=\:0] = unit2wif\=k=\_set_select__index_out;
assign unit2wif\=k=\_id_offset[4:\=unit2WIFV[k].PrimaryBits.length=\]   = \=4-unit2WIFV[k].PrimaryBits.length+1=\'b0;

    \js } else {

assign unit2wif\=k=\_id_offset[4:0] = unit2wif\=k=\_set_select__index_out[4:0];

    \js }

\js } else {
wire [4:0] unit2wif\=k=\_id_offset;
assign unit2wif\=k=\_id_offset[4:0] = 5'b0;                                                  

\js }
\js }

\js if (unit2WIFV.length > 0) {

assign f2_unit_id_offset = (unit2wif0_id_offset & {5{(AMIFR_A2WIFId[2:0] == 3'd0)}})
            \js for (var k=1; k < unit2WIFV.length; k++) {
                        | (unit2wif\=k=\_id_offset & {5{(AMIFR_A2WIFId[2:0] == 3'd\=k=\)}})
            \js }
                        ;

\js } else {

assign f2_unit_id_offset = 5'b0;

\js }

\jsbegin
// =======================================================
// Unit 3-Way Interleave Functions
// =======================================================
\jsend

\js for (var k=0; k < unit3WIFV.length; k++) {

\jsbegin
/* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (unit3WIFV[k].PrimaryBits.length) {                                        
\jsend

wire [\=unit3WIFV[k].PrimaryBits.length-1=\:0] unit3wif\=k=\_set_select__index_out;
wire [4:0] unit3wif\=k=\_id_offset;

    \=u.instance({
        instanceName: 'u_unit3wif'+k+'_set_select',
        moduleName: 'set_select',
        params : {
                     PriSubDiagAddrBits : unit3WIFV[k].PrimaryBits,
                     SecSubRows         : unit3WIFV[k].SecondaryBits,
                     wAddr              : wSysAddr
                 },
        verilogParams: {},
        ports: {
                   addr_in             : 'address',
                   index_out           : 'unit3wif'+k+'_set_select__index_out'
               },
        portsDelimiter: '\n    '
    })=\

    \jsbegin
    /* istanbul ignore else env ncore_3p4, ncore_3p6 */
     if (unit3WIFV[k].PrimaryBits.length < 5) {
    \jsend

assign unit3wif\=k=\_id_offset[\=unit3WIFV[k].PrimaryBits.length-1=\:0] = unit3wif\=k=\_set_select__index_out;
assign unit3wif\=k=\_id_offset[4:\=unit3WIFV[k].PrimaryBits.length=\]   = \=4-unit3WIFV[k].PrimaryBits.length+1=\'b0;

    \js } else {

assign unit3wif\=k=\_id_offset[4:0] = unit3wif\=k=\_set_select__index_out[4:0];

    \js }

\js } else {
wire [4:0] unit3wif\=k=\_id_offset;
assign unit3wif\=k=\_id_offset[4:0] = 5'b0;                                                  

\js }
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (unit3WIFV.length > 0) {
\jsend

assign f3_unit_id_offset = (unit3wif0_id_offset & {5{(AMIFR_A3WIFId[2:0] == 3'd0)}})
            \js for (var k=1; k < unit3WIFV.length; k++) {
                        | (unit3wif\=k=\_id_offset & {5{(AMIFR_A3WIFId[2:0] == 3'd\=k=\)}})
            \js }
                        ;

\js } else {

assign f3_unit_id_offset = 5'b0;

\js }

\jsbegin
// =======================================================
// Unit 4-Way Interleave Functions
// =======================================================
\jsend

\js for (var k=0; k < unit4WIFV.length; k++) {

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (unit4WIFV[k].PrimaryBits.length) {                                              
\jsend
wire [\=unit4WIFV[k].PrimaryBits.length-1=\:0] unit4wif\=k=\_set_select__index_out;
wire [4:0] unit4wif\=k=\_id_offset;

    \=u.instance({
        instanceName: 'u_unit4wif'+k+'_set_select',
        moduleName: 'set_select',
        params : {
                     PriSubDiagAddrBits : unit4WIFV[k].PrimaryBits,
                     SecSubRows         : unit4WIFV[k].SecondaryBits,
                     wAddr              : wSysAddr
                 },
        verilogParams: {},
        ports: {
                   addr_in             : 'address',
                   index_out           : 'unit4wif'+k+'_set_select__index_out'
               },
        portsDelimiter: '\n    '
    })=\

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (unit4WIFV[k].PrimaryBits.length < 5) {
    \jsend

assign unit4wif\=k=\_id_offset[\=unit4WIFV[k].PrimaryBits.length-1=\:0] = unit4wif\=k=\_set_select__index_out;
assign unit4wif\=k=\_id_offset[4:\=unit4WIFV[k].PrimaryBits.length=\]   = \=4-unit4WIFV[k].PrimaryBits.length+1=\'b0;

    \js } else {

assign unit4wif\=k=\_id_offset[4:0] = unit4wif\=k=\_set_select__index_out[4:0];

    \js }
                                                  
\js } else {
wire [4:0] unit4wif\=k=\_id_offset;            
assign unit4wif\=k=\_id_offset[4:0] = 5'b0;                                                    

\js }                                                  

\js }

\js if (unit4WIFV.length > 0) {

assign f4_unit_id_offset = (unit4wif0_id_offset & {5{(AMIFR_A4WIFId[2:0] == 3'd0)}})
            \js for (var k=1; k < unit4WIFV.length; k++) {
                        | (unit4wif\=k=\_id_offset & {5{(AMIFR_A4WIFId[2:0] == 3'd\=k=\)}})
            \js }
                        ;

\js } else {

assign f4_unit_id_offset = 5'b0;

\js }

\jsbegin
// =======================================================
// Unit 8-Way Interleave Functions
// =======================================================
\jsend

\js for (var k=0; k < unit8WIFV.length; k++) {

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (unit8WIFV[k].PrimaryBits.length) {                                              
\jsend

wire [\=unit8WIFV[k].PrimaryBits.length-1=\:0] unit8wif\=k=\_set_select__index_out;
wire [4:0] unit8wif\=k=\_id_offset;

    \=u.instance({
        instanceName: 'u_unit8wif'+k+'_set_select',
        moduleName: 'set_select',
        params : {
                     PriSubDiagAddrBits : unit8WIFV[k].PrimaryBits,
                     SecSubRows         : unit8WIFV[k].SecondaryBits,
                     wAddr              : wSysAddr
                 },
        verilogParams: {},
        ports: {
                   addr_in             : 'address',
                   index_out           : 'unit8wif'+k+'_set_select__index_out'
               },
        portsDelimiter: '\n    '
    })=\

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (unit8WIFV[k].PrimaryBits.length < 5) {
    \jsend

assign unit8wif\=k=\_id_offset[\=unit8WIFV[k].PrimaryBits.length-1=\:0] = unit8wif\=k=\_set_select__index_out;
assign unit8wif\=k=\_id_offset[4:\=unit8WIFV[k].PrimaryBits.length=\]   = \=4-unit8WIFV[k].PrimaryBits.length+1=\'b0;

    \js } else {

assign unit8wif\=k=\_id_offset[4:0] = unit8wif\=k=\_set_select__index_out[4:0];

    \js }
                                                  
\js } else {

wire [4:0] unit8wif\=k=\_id_offset;            
assign unit8wif\=k=\_id_offset[4:0] = 5'b0;                                                    

\js }                                                  

\jsbegin }
 /* istanbul ignore if env ncore_3p7 */
 if (unit8WIFV.length > 0) { \jsend

assign f8_unit_id_offset = (unit8wif0_id_offset & {5{(AMIFR_A8WIFId[2:0] == 3'd0)}})
            \js for (var k=1; k < unit8WIFV.length; k++) {
                        | (unit8wif\=k=\_id_offset & {5{(AMIFR_A8WIFId[2:0] == 3'd\=k=\)}})
            \js }
                        ;

\js } else {

assign f8_unit_id_offset = 5'b0;

\js }

\jsbegin
// =======================================================
// Unit 16-Way Interleave Functions
// =======================================================
\jsend

\js for (var k=0; k < unit16WIFV.length; k++) {

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (unit16WIFV[k].PrimaryBits.length) {                                              
\jsend

wire [\=unit16WIFV[k].PrimaryBits.length-1=\:0] unit16wif\=k=\_set_select__index_out;
wire [4:0] unit16wif\=k=\_id_offset;

    \=u.instance({
        instanceName: 'u_unit16wif'+k+'_set_select',
        moduleName: 'set_select',
        params : {
                     PriSubDiagAddrBits : unit16WIFV[k].PrimaryBits,
                     SecSubRows         : unit16WIFV[k].SecondaryBits,
                     wAddr              : wSysAddr
                 },
        verilogParams: {},
        ports: {
                   addr_in             : 'address',
                   index_out           : 'unit16wif'+k+'_set_select__index_out'
               },
        portsDelimiter: '\n    '
    })=\

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (unit16WIFV[k].PrimaryBits.length < 5) {
    \jsend

assign unit16wif\=k=\_id_offset[\=unit16WIFV[k].PrimaryBits.length-1=\:0] = unit16wif\=k=\_set_select__index_out;
assign unit16wif\=k=\_id_offset[4:\=unit16WIFV[k].PrimaryBits.length=\]   = \=4-unit16WIFV[k].PrimaryBits.length+1=\'b0;

    \js } else {

assign unit16wif\=k=\_id_offset[4:0] = unit16wif\=k=\_set_select__index_out[4:0];

    \js }
                                                  
\js } else {

wire [4:0] unit16wif\=k=\_id_offset;            
assign unit16wif\=k=\_id_offset[4:0] = 5'b0;                                                    

\js }                                                  

\jsbegin }
 /* istanbul ignore if env ncore_3p7 */
 if (unit16WIFV.length > 0) { \jsend

assign f16_unit_id_offset = (unit16wif0_id_offset & {5{(AMIFR_A16WIFId[2:0] == 3'd0)}})
            \js for (var k=1; k < unit16WIFV.length; k++) {
                        | (unit16wif\=k=\_id_offset & {5{(AMIFR_A16WIFId[2:0] == 3'd\=k=\)}})
            \js }
                        ;

\js } else {

assign f16_unit_id_offset = 5'b0;

\js }

endmodule
