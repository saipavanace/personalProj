\jsbegin
//=============================================================================
// Copyright(C) 2018 Arteris, Inc.
// All rights reserved
//=============================================================================
// System Coherency Receiver
//
// Author: Boon Chuan
//
// Descriptions:
// 
// The Sys.Coh Receiver has the following transaction flow:
// SysReq.Attach -> enable SnpCmd to CAIU[x] (i.e. Snoop Enable register or T register )
//               -> issue SysRsp as response
// SysReq.Detach -> disable SnpCmd to CAIU[x]
//               -> Wait for Outstanding Snoop Count OSC[x] == 0
//               -> issue SysRsp as response
//
// On receipt of SysReq.Attach:
// * Map the SourceID of the arriving SysReq to the associated T[i] and set the bit.
// * Issue a SysRsp.Ok if the CMStatus of SysReq is OK.
// * Issue a SysRsp.Error if
//   i. CMSatus or SysReq indicates an error
//   ii. target does not exist within the T-vector
//   iii. target is already set
//
// On receipt of SysReq.Detach:
// * Map the SourceID of the arriving SysReq to the associated T[i] and clear the bit
// * Issue a SysRsp.Ok if the CMStatus of SysReq is OK
// * Issue a SysRsp.Error if
//   i. CMStatus or SysReq indicates an error
//   ii. Target does not exist within the T-vector
//   iii. Target is already clear
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

var useSysEvtSender     = u.getParam('useSysEvtSender');

var wFUnitId            = u.getParam('wFUnitId');
var wNUnitId            = u.getParam('wNUnitId');
var wMessageId          = u.getParam('wMessageId');
var wSysReqOp           = u.getParam('wSysReqOp');
var nSnoopAgents        = u.getParam('nSnoopAgents');
var wSnoopEnables       = u.getParam('wSnoopEnables');

var nEntries            = nSnoopAgents;
var wEntries            = log2ceil(nEntries + 1);
var wSysReqFifo         = wFUnitId + wMessageId + 8 + 2;
var wSysRspFifo         = wFUnitId + wMessageId + 8 + 1;

\jsend

\jsbegin
//=============================================================================
// Ports
//=============================================================================
\jsend

\jsbegin

// Clock interface
u.port('input',  'clk',      1);
u.port('input',  'reset_n',  1);
u.port('output', 'coh_receiver_busy', 1);

// CSR interface
u.port('output', 'csr_sys_coh_receiver_err_vld', 1);
u.port('output', 'csr_sys_coh_receiver_err_f_unit_id', wFUnitId);

// FUnitId interface
for (var i=0; i < nSnoopAgents; i++) {
u.port('input', 'aiu'+i+'_f_unit_id', wFUnitId);
u.port('input', 'aiu'+i+'_n_unit_id', wNUnitId);
}

// Snoop Control Status 
u.port('output', 'snoop_enables', wSnoopEnables);
u.port('output', 'snoop_enables_update', 1);
u.port('input',  'csr_snoop_enables', wSnoopEnables);
u.port('input',  'csr_snoop_enables_update', 1);
u.port('input',  'outstanding_snoop_count_zero', nSnoopAgents);

// Input SysReq interface
u.port('input',  'sysreq_valid', 1);
u.port('output', 'sysreq_ready', 1);
u.port('input',  'sysreq_initiator_f_unit_id', wFUnitId);
u.port('input',  'sysreq_message_id', wMessageId);
u.port('input',  'sysreq_cmstatus', 8);
u.port('input',  'sysreq_op', wSysReqOp); // 0=NOP 1=Attach 2=Detach 3=Event

// Output SysRsp interface
u.port('output', 'sysrsp_valid',  1);
u.port('input',  'sysrsp_ready',  1);
u.port('output', 'sysrsp_target_f_unit_id', wFUnitId);
u.port('output', 'sysrsp_rmessage_id', wMessageId);
u.port('output', 'sysrsp_cmstatus', 8);

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtSender) {
u.port('input',  'sysrsp_detach_to_wait',  1);
}

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

\jsbegin
//=============================================================================
// Wires
//=============================================================================
\jsend

wire dff_enable = 1'b1;

wire [\=wSysReqOp-1=\:0] SYSREQ_OP_ATTACH = \=wSysReqOp=\'d1;
wire [\=wSysReqOp-1=\:0] SYSREQ_OP_DETACH = \=wSysReqOp=\'d2;

wire [2:0] ST_IDLE    = 3'b000;
wire [2:0] ST_SETSNP  = 3'b001;
wire [2:0] ST_CLRSNP  = 3'b010;
wire [2:0] ST_WFOSC   = 3'b011;
wire [2:0] ST_DONE    = 3'b100;

reg  [2:0] next_state;
wire [2:0] state;

wire state_is_IDLE;
wire state_is_SETSNP;
wire state_is_CLRSNP;
wire state_is_WFOSC;
wire state_is_DONE;

wire next_state_is_IDLE;
wire next_state_is_SETSNP;
wire next_state_is_CLRSNP;
wire next_state_is_WFOSC;
wire next_state_is_DONE;

wire [\=wSnoopEnables-1=\:0] snoop_enables_in;
wire [\=wSnoopEnables-1=\:0] snoop_enables_match_vec;
wire [\=wNUnitId-1=\:0] snoop_enables_nid;
wire [\=nSnoopAgents-1=\:0] snoop_enables_fid_match_vec;
wire snoop_enables_fid_matched;
wire outstanding_snoop_count_zero_matched;
wire [\=nSnoopAgents-1=\:0] snoop_enables_fid_match_vec_hold;

wire sysreq_op_attach;
wire sysreq_op_detach;
wire op_attach;
wire op_detach;

wire sysreq_fifo__push_valid;
wire sysreq_fifo__push_ready;
wire [\=wSysReqFifo-1=\:0] sysreq_fifo__push_data;
wire [\=wSysReqFifo-1=\:0] sysreq_fifo__pop_data;
wire sysreq_fifo__pop_valid;
wire sysreq_fifo__pop_ready;

wire sysrsp_fifo__push_valid;
wire sysrsp_fifo__push_ready;
wire [\=wSysRspFifo-1=\:0] sysrsp_fifo__push_data;
wire [\=wSysRspFifo-1=\:0] sysrsp_fifo__pop_data;
wire sysrsp_fifo__pop_valid;
wire sysrsp_fifo__pop_ready;

wire [\=wFUnitId-1=\:0] target_f_unit_id;
wire [\=wMessageId-1=\:0] rmessage_id;
wire [7:0] cmstatus;
wire [7:0] cmstatus_mod;

wire cmstatus_arrival_err;
wire cmstatus_target_not_found_err;

wire wfosc_counter_en;
wire [3:0] wfosc_counter, wfosc_counter_in;
wire wfosc_ready;

wire sysrsp_detach;

\jsbegin
//=============================================================================
// Input Queue for SysReq interface
//=============================================================================
\jsend

\jsbegin
    var sysreqFifoParams = {
        width       : wSysReqFifo,
        depth       : nEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_sysreq_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'sysreq_fifo__push_data',
        push_valid          : 'sysreq_fifo__push_valid',
        push_ready          : 'sysreq_fifo__push_ready',
        pop_data            : 'sysreq_fifo__pop_data',
        pop_valid           : 'sysreq_fifo__pop_valid',
        pop_ready           : 'sysreq_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'sysreq_fifo',
        moduleName: 'fifo',
        params : sysreqFifoParams,
        verilogParams: {},
        ports: instance_ports_for_sysreq_fifo,
        portsDelimiter: '\n    '
    })=\

assign sysreq_fifo__push_valid = sysreq_valid;

assign sysreq_ready = sysreq_fifo__push_ready;

assign sysreq_op_attach = (sysreq_op == SYSREQ_OP_ATTACH);
assign sysreq_op_detach = (sysreq_op == SYSREQ_OP_DETACH);

assign sysreq_fifo__push_data = { sysreq_op_detach, sysreq_op_attach, sysreq_cmstatus, sysreq_message_id, sysreq_initiator_f_unit_id };

assign { op_detach, op_attach, cmstatus, rmessage_id, target_f_unit_id } = sysreq_fifo__pop_data;

\jsbegin
//=============================================================================
// Scheduler
//=============================================================================
\jsend

assign sysreq_fifo__pop_ready = sysrsp_fifo__push_valid & sysrsp_fifo__push_ready;

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtSender) {
\jsend
assign sysrsp_fifo__push_valid = sysreq_fifo__pop_valid & state_is_DONE & (op_detach ? ~sysrsp_detach_to_wait : 1'b1);
\js } else {
assign sysrsp_fifo__push_valid = sysreq_fifo__pop_valid & state_is_DONE;
\js }

assign sysrsp_fifo__push_data = { op_detach, cmstatus_mod, rmessage_id, target_f_unit_id };

assign snoop_enables_update = sysreq_fifo__pop_valid & (state_is_SETSNP | state_is_CLRSNP); 

\jsbegin
//=============================================================================
// State Machine to execute Attach/Detach protocol
//=============================================================================
\jsend

always @(*)
case (state)
    ST_IDLE  : next_state = sysreq_fifo__pop_valid & ~cmstatus_arrival_err ? (op_attach ? ST_SETSNP : op_detach ? ST_CLRSNP : ST_DONE) :
                            sysreq_fifo__pop_valid & cmstatus_arrival_err ? ST_DONE : ST_IDLE;

    ST_SETSNP : next_state = ST_DONE;

    ST_CLRSNP : next_state = ST_WFOSC;

    ST_WFOSC  : next_state = outstanding_snoop_count_zero_matched & wfosc_ready ? ST_DONE : ST_WFOSC;

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtSender) {
\jsend
    ST_DONE  : next_state = sysrsp_fifo__push_ready & (op_detach ? ~sysrsp_detach_to_wait : 1'b1) ? ST_IDLE : ST_DONE;
\js } else {
    ST_DONE  : next_state = sysrsp_fifo__push_ready ? ST_IDLE : ST_DONE;
\js }

    default next_state = state;
endcase

\=u.dffre(3, 'state', 'next_state', "3'b0", 'dff_enable', 'clk', 'reset_n')=\

assign state_is_IDLE       = (state == ST_IDLE);
assign state_is_SETSNP     = (state == ST_SETSNP);
assign state_is_WFOSC      = (state == ST_WFOSC);
assign state_is_CLRSNP     = (state == ST_CLRSNP);
assign state_is_DONE       = (state == ST_DONE);

assign next_state_is_IDLE      = (next_state == ST_IDLE);
assign next_state_is_SETSNP    = (next_state == ST_SETSNP);
assign next_state_is_WFOSC     = (next_state == ST_WFOSC);
assign next_state_is_CLRSNP    = (next_state == ST_CLRSNP);
assign next_state_is_DONE      = (next_state == ST_DONE);

\jsbegin
//=============================================================================
// OUTPUT snoop_enables
//=============================================================================
\jsend

\=u.dffre(wSnoopEnables, 'snoop_enables', 'snoop_enables_in', wSnoopEnables+"'b0", 'dff_enable', 'clk', 'reset_n')=\

assign snoop_enables_in = csr_snoop_enables_update ? csr_snoop_enables :
                          next_state_is_SETSNP ? (snoop_enables |  snoop_enables_match_vec) :
                          next_state_is_CLRSNP ? (snoop_enables & ~snoop_enables_match_vec) :
                                                  snoop_enables;
                                
\js for (var i=0; i < nSnoopAgents; i++) {
assign snoop_enables_fid_match_vec[\=i=\] = (target_f_unit_id == aiu\=i=\_f_unit_id);
\js }

assign snoop_enables_nid = ({\=wNUnitId=\{snoop_enables_fid_match_vec[0]}} & aiu0_n_unit_id)
\js for (var i=1; i < nSnoopAgents; i++) {
                         | ({\=wNUnitId=\{snoop_enables_fid_match_vec[\=i=\]}} & aiu\=i=\_n_unit_id)
\js }
                         ;

assign snoop_enables_match_vec = snoop_enables_fid_matched ? \=wSnoopEnables=\'d1 << snoop_enables_nid : \=wSnoopEnables=\'b0;

assign snoop_enables_fid_matched = sysreq_fifo__pop_valid & {|{snoop_enables_fid_match_vec}};

assign outstanding_snoop_count_zero_matched = {|{snoop_enables_fid_match_vec_hold & outstanding_snoop_count_zero}};

\=u.dffre(nSnoopAgents, 'snoop_enables_fid_match_vec_hold', 'snoop_enables_fid_match_vec', nSnoopAgents+"'b0", 'sysreq_fifo__pop_valid', 'clk', 'reset_n')=\

\jsbegin
//=============================================================================
// Response Generator for SysRsp interface
//=============================================================================
\jsend

assign cmstatus_arrival_err = {|{cmstatus[7:6]}};

assign cmstatus_target_not_found_err = ~snoop_enables_fid_matched;

assign cmstatus_mod[7:6] = cmstatus_arrival_err           ? cmstatus[7:6] :
                           cmstatus_target_not_found_err  ? 2'b01:
                                                            2'b00 ;
assign cmstatus_mod[5:3] = 3'b000;
assign cmstatus_mod[2:0] = cmstatus_arrival_err          ? 3'b000 : //No operation performed
                           cmstatus_target_not_found_err ? 3'b000 : //No operation performed
                                                           3'b011 ; //OK

\jsbegin
    var sysrspFifoParams = {
        width       : wSysRspFifo,
        depth       : nEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_sysrsp_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'sysrsp_fifo__push_data',
        push_valid          : 'sysrsp_fifo__push_valid',
        push_ready          : 'sysrsp_fifo__push_ready',
        pop_data            : 'sysrsp_fifo__pop_data',
        pop_valid           : 'sysrsp_fifo__pop_valid',
        pop_ready           : 'sysrsp_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'sysrsp_fifo',
        moduleName: 'fifo',
        params : sysrspFifoParams,
        verilogParams: {},
        ports: instance_ports_for_sysrsp_fifo,
        portsDelimiter: '\n    '
    })=\


assign sysrsp_valid = sysrsp_fifo__pop_valid;

assign sysrsp_fifo__pop_ready = sysrsp_ready;

assign { sysrsp_detach, sysrsp_cmstatus, sysrsp_rmessage_id, sysrsp_target_f_unit_id } = sysrsp_fifo__pop_data;

\jsbegin
//=============================================================================
// Error Logging
//=============================================================================
\jsend

assign csr_sys_coh_receiver_err_vld = sysrsp_fifo__push_valid & sysrsp_fifo__push_ready & {|{cmstatus_mod[7:6]}};

assign csr_sys_coh_receiver_err_f_unit_id = target_f_unit_id;

\jsbegin
//=============================================================================
// Busy
//=============================================================================
\jsend

assign coh_receiver_busy = sysreq_fifo__pop_valid | sysrsp_fifo__pop_valid;

\jsbegin
//=============================================================================
// Wait 16 clocks (from snoop_enables_update to CSR to Concerto Unit pipelines) to sample Outstanding Counter Zero
//=============================================================================
\jsend

assign wfosc_ready      = wfosc_counter == 4'd15;
assign wfosc_counter_en = state_is_IDLE | (state_is_WFOSC & outstanding_snoop_count_zero_matched);
assign wfosc_counter_in = state_is_IDLE ? 4'b0 :
                          (state_is_WFOSC & outstanding_snoop_count_zero_matched) ? wfosc_counter + 4'd1 :
                                          wfosc_counter;

\=u.dffre(4, 'wfosc_counter', 'wfosc_counter_in', 4+"'b0", 'wfosc_counter_en', 'clk', 'reset_n')=\

endmodule
