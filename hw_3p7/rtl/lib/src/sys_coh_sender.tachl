\jsbegin
//=============================================================================
// Copyright(C) 2018 Arteris, Inc.
// All rights reserved
//=============================================================================
// System Coherency Sender
//
// Author: Boon Chuan
//
// Descriptions:
// 
// The Sys.Coh Sender has the following transaction flow:
// SysCo.Req asserts   -> fork  
//                broadcast SysReq.Attach to specified targets (all DCEs, DVE)
//                collect SysRsp from specified targets
//                        join
//                     -> assert SysCo.Ack
// SysCo.Req deasserts -> Wait for Coherent Transaction Counter == 0 
//                     -> fork  
//                broadcast SysReq.Detach to specified targets (all DCEs, DVE)
//                collect SysRsp from specified targets
//                        join
//                     -> deassert SysCo.Ack
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

var nCoherencyAgents   = u.getParam('nCoherencyAgents');
var wProtocolTimeout   = u.getParam('wProtocolTimeout');
var wFUnitId           = u.getParam('wFUnitId');
var wMessageId         = u.getParam('wMessageId');
var wSysReqOp          = u.getParam('wSysReqOp');

var nTargets = nCoherencyAgents;
var wTargets = log2ceil(nTargets + 1);

\jsend

\jsbegin
//=============================================================================
// Ports
//=============================================================================
\jsend

\jsbegin

// Clock interface
u.port('input',  'clk',      1);
u.port('input',  'reset_n',  1);
u.port('output', 'coh_sender_busy', 1);

// CSR interface
u.port('input',  'csr_protocol_timeout_value', wProtocolTimeout);
u.port('input',  'csr_sys_coh_sender_enable', 1);
u.port('output', 'csr_sys_coh_sender_connecting', 1);
u.port('output', 'csr_sys_coh_sender_attached', 1);
u.port('output', 'csr_sys_coh_sender_syscoerr_set', 1);
u.port('output', 'csr_sys_coh_sender_syscoerr_clr', 1);

u.port('output', 'csr_sys_coh_sender_err_detected', 1);
u.port('output', 'csr_sys_coh_sender_err_f_unit_id', wFUnitId);
u.port('output', 'csr_sys_coh_sender_err_protocol_sys', 1);
u.port('output', 'csr_sys_coh_sender_err_protocol_timeout', 1);

// FUnitId interface
for (i=0; i < nCoherencyAgents; i++) {
u.port('input', 'coherency'+i+'_f_unit_id', wFUnitId);
}

// Input SysCo interface
u.port('input',  'sysco_req', 1);
u.port('output', 'sysco_ack', 1);

u.port('input',  'outstanding_coherent_count_zero', 1);

// Output SysReq interface
u.port('output', 'sysreq_valid', 1);
u.port('input',  'sysreq_ready', 1);
u.port('output', 'sysreq_target_f_unit_id', wFUnitId);
u.port('output', 'sysreq_op', wSysReqOp); // 0=NOP 1=Attach 2=Detach 3=Event

// Input SysRsp interface
u.port('input',  'sysrsp_valid', 1);
u.port('output', 'sysrsp_ready', 1);
u.port('input',  'sysrsp_cmstatus', 8);
u.port('input',  'sysrsp_initiator_f_unit_id', wFUnitId);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

wire dff_enable = 1'b1;

wire [\=wSysReqOp-1=\:0] SYSREQ_OP_ATTACH = \=wSysReqOp=\'d1;
wire [\=wSysReqOp-1=\:0] SYSREQ_OP_DETACH = \=wSysReqOp=\'d2;

wire [2:0] ST_IDLE            = 3'b000;
wire [2:0] ST_CONNECT         = 3'b001;
wire [2:0] ST_ATTACHED        = 3'b010;
wire [2:0] ST_ATTACH_ERR      = 3'b011;
wire [2:0] ST_COHERENT_WAIT   = 3'b100;
wire [2:0] ST_DISCONNECT      = 3'b101;
wire [2:0] ST_DETACH_ERR      = 3'b110;

reg  [2:0] next_state;
wire [2:0] state;

wire state_is_IDLE;
wire state_is_CONNECT;
wire state_is_ATTACHED;
wire state_is_ATTACH_ERR;
wire state_is_COHERENT_WAIT;
wire state_is_DISCONNECT;
wire state_is_DETACH_ERR;

wire next_state_is_IDLE;
wire next_state_is_CONNECT;
wire next_state_is_ATTACHED;
wire next_state_is_ATTACH_ERR;
wire next_state_is_COHERENT_WAIT;
wire next_state_is_DISCONNECT;
wire next_state_is_DETACH_ERR;

wire all_requests_sent;
wire all_responses_received;
wire protocol_timeout;

wire sysco_ack_set;
wire sysco_ack_clr;
wire sysco_ack_en;
wire sysco_ack_in;

wire [\=wTargets-1=\:0] send_counter;
wire [\=wTargets-1=\:0] send_counter_in;
wire send_counter_en;
wire send_counter_is_last;

wire [\=wTargets-1=\:0] receive_counter;
wire [\=wTargets-1=\:0] receive_counter_in;
wire receive_counter_en;
wire receive_counter_is_last;

wire any_sys_rsp_error;
wire any_sys_rsp_error_in;
wire any_sys_rsp_error_en;
wire any_sys_rsp_error_set;
wire any_sys_rsp_error_clr;

wire [\=wFUnitId-1=\:0] sys_rsp_error_f_unit_id;
wire [\=wFUnitId-1=\:0] sys_rsp_error_f_unit_id_in;

wire [\=wProtocolTimeout-1=\:0] protocol_timeout_counter;
wire [\=wProtocolTimeout-1=\:0] protocol_timeout_counter_in;
wire protocol_timeout_counter_en;

wire protocol_timeout_hit;
wire protocol_timeout_flag;
wire protocol_timeout_flag_in;
wire protocol_timeout_flag_en;
wire protocol_timeout_flag_set;
wire protocol_timeout_flag_clr;

wire attached;
wire attached_in;
wire attached_en;
wire attached_set;
wire attached_clr;

assign attached_set = next_state_is_ATTACHED;
assign attached_clr = next_state_is_IDLE;
assign attached_en  = attached_set | attached_clr;
assign attached_in  = attached_set;

\=u.dffre(1, 'attached', 'attached_in', "1'b0", 'attached_en', 'clk', 'reset_n')=\

\jsbegin
//=============================================================================
// The State Machine has the following states to execute the SysCo Attach/Detach protocol:
//=============================================================================
\jsend

always @(*)
case (state)
ST_IDLE            : next_state = sysco_req ? (csr_sys_coh_sender_enable ? ST_CONNECT : ST_ATTACHED) : ST_IDLE;

ST_CONNECT         : next_state = all_requests_sent & ((all_responses_received & any_sys_rsp_error) | protocol_timeout) ? ST_ATTACH_ERR :
			      all_requests_sent & all_responses_received ? ST_ATTACHED : ST_CONNECT;

ST_ATTACHED        : next_state = ~sysco_req ? ST_COHERENT_WAIT : ST_ATTACHED;

ST_ATTACH_ERR      : next_state = ST_COHERENT_WAIT;

ST_COHERENT_WAIT   : next_state = outstanding_coherent_count_zero ? (csr_sys_coh_sender_enable ? ST_DISCONNECT : ST_IDLE) : ST_COHERENT_WAIT;

ST_DISCONNECT      : next_state = all_requests_sent & ((all_responses_received & any_sys_rsp_error) | protocol_timeout) ? ST_DETACH_ERR :
			      all_requests_sent & all_responses_received ? ST_IDLE : ST_DISCONNECT;

ST_DETACH_ERR      : next_state = ST_IDLE;

default next_state = state;
endcase

\=u.dffre(3, 'state', 'next_state', "3'b0", 'dff_enable', 'clk', 'reset_n')=\


assign state_is_IDLE           = (state == ST_IDLE);
assign state_is_CONNECT        = (state == ST_CONNECT);
assign state_is_ATTACHED       = (state == ST_ATTACHED);
assign state_is_ATTACH_ERR     = (state == ST_ATTACH_ERR);
assign state_is_COHERENT_WAIT  = (state == ST_COHERENT_WAIT);
assign state_is_DISCONNECT     = (state == ST_DISCONNECT);
assign state_is_DETACH_ERR     = (state == ST_DETACH_ERR);

assign next_state_is_IDLE           = (next_state == ST_IDLE);
assign next_state_is_CONNECT        = (next_state == ST_CONNECT);
assign next_state_is_ATTACHED       = (next_state == ST_ATTACHED);
assign next_state_is_ATTACH_ERR     = (next_state == ST_ATTACH_ERR);
assign next_state_is_COHERENT_WAIT  = (next_state == ST_COHERENT_WAIT);
assign next_state_is_DISCONNECT     = (next_state == ST_DISCONNECT);
assign next_state_is_DETACH_ERR     = (next_state == ST_DETACH_ERR);

\jsbegin
//=============================================================================
// OUTPUT sysco_ack
//=============================================================================
\jsend

\=u.dffre(1, 'sysco_ack', 'sysco_ack_in', "1'b0", 'sysco_ack_en', 'clk', 'reset_n')=\

assign sysco_ack_set = next_state_is_ATTACHED;
assign sysco_ack_clr = next_state_is_IDLE & state_is_DISCONNECT;
assign sysco_ack_en  = sysco_ack_set | sysco_ack_clr;
assign sysco_ack_in  = sysco_ack_set;

\jsbegin
//=============================================================================
// OUTPUT sysreq
//=============================================================================
\jsend

assign sysreq_valid = (state_is_CONNECT | state_is_DISCONNECT) & ~all_requests_sent;

assign sysreq_target_f_unit_id =

   ({\=wFUnitId=\{send_counter == \=wTargets=\'d0}} & coherency0_f_unit_id)
\js for (var i=1; i < nTargets; i++) {
 | ({\=wFUnitId=\{send_counter == \=wTargets=\'d\=i=\}} & coherency\=i=\_f_unit_id)
\js }
		       ;

assign sysreq_op = state_is_CONNECT ? SYSREQ_OP_ATTACH : SYSREQ_OP_DETACH;

\jsbegin
//=============================================================================
// send_counter
// receive_counter
// all_requests_sent
// all_responses_received
//=============================================================================
\jsend

wire counter_clr = state_is_IDLE | state_is_ATTACHED | state_is_ATTACH_ERR | state_is_DETACH_ERR;

\=u.dffre(wTargets, 'send_counter', 'send_counter_in', wTargets+"'b0", 'send_counter_en', 'clk', 'reset_n')=\

assign send_counter_en = counter_clr | (sysreq_valid & sysreq_ready & ~all_requests_sent);

assign send_counter_in = counter_clr ? \=wTargets=\'d0 : send_counter +  \=wTargets=\'d1;

assign send_counter_is_last = (send_counter == \=wTargets=\'d\=nTargets-1=\);

wire all_requests_sent_in = counter_clr ? 1'b0 : send_counter_is_last;
wire all_requests_sent_en = counter_clr | (sysreq_valid & sysreq_ready);

\=u.dffre(1, 'all_requests_sent', 'all_requests_sent_in', "1'b0", 'all_requests_sent_en', 'clk', 'reset_n')=\


\=u.dffre(wTargets, 'receive_counter', 'receive_counter_in', wTargets+"'b0", 'receive_counter_en', 'clk', 'reset_n')=\

assign receive_counter_en = counter_clr | ((state_is_CONNECT | state_is_DISCONNECT) & sysrsp_valid & sysrsp_ready & ~all_responses_received);

assign receive_counter_in = counter_clr ? \=wTargets=\'d0 : receive_counter +  \=wTargets=\'d1;

assign receive_counter_is_last = (receive_counter == \=wTargets=\'d\=nTargets-1=\);

wire all_responses_received_in = counter_clr ? 1'b0 : receive_counter_is_last;
wire all_responses_received_en = counter_clr | ((state_is_CONNECT | state_is_DISCONNECT) & sysrsp_valid & sysrsp_ready);

\=u.dffre(1, 'all_responses_received', 'all_responses_received_in', "1'b0", 'all_responses_received_en', 'clk', 'reset_n')=\

\jsbegin
//=============================================================================
// any_sys_rsp_error
//=============================================================================
\jsend

\=u.dffre(1, 'any_sys_rsp_error', 'any_sys_rsp_error_in', "1'b0", 'any_sys_rsp_error_en', 'clk', 'reset_n')=\

assign any_sys_rsp_error_set = (state_is_CONNECT | state_is_DISCONNECT) & sysrsp_valid & sysrsp_ready & (sysrsp_cmstatus[7:6] == 2'b01);
assign any_sys_rsp_error_clr = next_state_is_IDLE;
assign any_sys_rsp_error_en  = any_sys_rsp_error_set | any_sys_rsp_error_clr;
assign any_sys_rsp_error_in  = any_sys_rsp_error_set;

\=u.dffre(wFUnitId, 'sys_rsp_error_f_unit_id', 'sys_rsp_error_f_unit_id_in', wFUnitId+"'b0", 'dff_enable', 'clk', 'reset_n')=\

assign sys_rsp_error_f_unit_id_in = any_sys_rsp_error_set ? sysrsp_initiator_f_unit_id :
			    any_sys_rsp_error_clr ? \=wFUnitId=\'d0 :
						    sys_rsp_error_f_unit_id;

\jsbegin
//=============================================================================
// sysrsp_ready
//=============================================================================
\jsend

assign sysrsp_ready = 1'b1;

\jsbegin
//=============================================================================
// protocol_timeout
//=============================================================================
\jsend

assign protocol_timeout = protocol_timeout_hit | protocol_timeout_flag;

assign protocol_timeout_flag_set = protocol_timeout_hit;
assign protocol_timeout_flag_clr = counter_clr;
assign protocol_timeout_flag_en  = protocol_timeout_flag_set | protocol_timeout_flag_clr;
assign protocol_timeout_flag_in  = protocol_timeout_flag_set & ~protocol_timeout_flag_clr;

\=u.dffre(1, 'protocol_timeout_flag', 'protocol_timeout_flag_in', "1'b0", 'protocol_timeout_flag_en', 'clk', 'reset_n')=\


assign protocol_timeout_hit = {|{csr_protocol_timeout_value}} ? (protocol_timeout_counter == csr_protocol_timeout_value) : 1'b0;

\=u.dffre(wProtocolTimeout, 'protocol_timeout_counter', 'protocol_timeout_counter_in', wProtocolTimeout+"'b0", 'protocol_timeout_counter_en', 'clk', 'reset_n')=\

assign protocol_timeout_counter_en = counter_clr | state_is_CONNECT | state_is_DISCONNECT;

assign protocol_timeout_counter_in = counter_clr ? \=wProtocolTimeout=\'b0 :
                                     (state_is_CONNECT | state_is_DISCONNECT) ? protocol_timeout_counter + \=wProtocolTimeout=\'b1 : protocol_timeout_counter;

\jsbegin
//=============================================================================
// CSR outputs
//=============================================================================
\jsend

assign csr_sys_coh_sender_connecting = state_is_CONNECT;
assign csr_sys_coh_sender_attached   = attached;

assign csr_sys_coh_sender_err_detected = state_is_ATTACH_ERR | state_is_DETACH_ERR;

assign csr_sys_coh_sender_err_f_unit_id = sys_rsp_error_f_unit_id;
assign csr_sys_coh_sender_err_protocol_sys = any_sys_rsp_error;
assign csr_sys_coh_sender_err_protocol_timeout = protocol_timeout;

assign csr_sys_coh_sender_syscoerr_set = csr_sys_coh_sender_err_detected;
assign csr_sys_coh_sender_syscoerr_clr = (state_is_IDLE & sysco_req) | (state_is_ATTACHED & ~sysco_req);

\jsbegin
//=============================================================================
// busy
//=============================================================================
\jsend

wire coh_sender_busy_in = ~state_is_IDLE & ~(state_is_ATTACHED & sysco_req);

\=u.dffre(1, 'coh_sender_busy', 'coh_sender_busy_in', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

endmodule
