\jsbegin
//=============================================================================
// Copyright(C) 2019 Arteris, Inc.
// All rights reserved
//=============================================================================
// Ncore 3 Address Map Compare Address
// Author: Boon Chuan
// ============================================================================

var u = obj.lib;

// ============================================================================
// Ports
// ============================================================================

u.port('input',  'Valid',           1);
u.port('input',  'HUT',             1);
u.port('input',  'SizeOfIG',        4);
u.port('input',  'Size',            6);
u.port('input',  'BAR_AddrLo',      32);
u.port('input',  'BAR_AddrHi',      8);
u.port('input',  'address',         52);
u.port('output', 'region_hit',      1);
u.port('output', 'compare_addr_lo', 52);
u.port('output', 'compare_addr_hi', 52);

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\jsbegin
// =======================================================
// Wires
// =======================================================
\jsend

reg  [51:0] size_mask_lo;
wire [51:0] size_mask_lo_x1;
wire [51:0] size_mask_lo_x2;
wire [51:0] size_mask_lo_x3;
wire [51:0] size_mask_lo_x4;
wire [51:0] size_mask_lo_x8;
wire [51:0] size_mask_lo_x16;
reg  [51:0] size_mask_hi;
wire [51:0] size_mask_hi_x1;
wire [51:0] size_mask_hi_x2;
wire [51:0] size_mask_hi_x3;
wire [51:0] size_mask_hi_x4;
wire [51:0] size_mask_hi_x8;
wire [51:0] size_mask_hi_x16;

\jsbegin
// =======================================================
// Compare Address
// =======================================================
\jsend

assign size_mask_lo_x1 = { {40{1'b1}}, {12{1'b0}} } << Size;
assign size_mask_lo_x2 = size_mask_lo_x1 << 1'b1;
assign size_mask_lo_x3 = size_mask_lo_x1;
assign size_mask_lo_x4 = size_mask_lo_x1 << 2'b10;
assign size_mask_lo_x8 = size_mask_lo_x1 << 2'b11;
assign size_mask_lo_x16= size_mask_lo_x1 << 3'b100;

assign size_mask_hi_x1 = { {40{1'b1}}, {12{1'b0}} } << Size;
assign size_mask_hi_x2 = size_mask_hi_x1 << 1'b1;
assign size_mask_hi_x3 = size_mask_hi_x2;
assign size_mask_hi_x4 = size_mask_hi_x1 << 2'b10;
assign size_mask_hi_x8 = size_mask_hi_x1 << 2'b11;
assign size_mask_hi_x16= size_mask_hi_x1 << 3'b100;

always @* begin
    case ({HUT, SizeOfIG})
        5'b01111 :  size_mask_lo = size_mask_lo_x16;
        5'b00111 :  size_mask_lo = size_mask_lo_x8;
        5'b00011 :  size_mask_lo = size_mask_lo_x4;
        5'b00010 :  size_mask_lo = size_mask_lo_x3;
        5'b00001 :  size_mask_lo = size_mask_lo_x2;
        default:    size_mask_lo = size_mask_lo_x1;
    endcase
end

always @* begin
    case ({HUT, SizeOfIG})
        5'b01111 :  size_mask_hi = size_mask_hi_x16;
        5'b00111 :  size_mask_hi = size_mask_hi_x8;
        5'b00011 :  size_mask_hi = size_mask_hi_x4;
        5'b00010 :  size_mask_hi = size_mask_hi_x3;
        5'b00001 :  size_mask_hi = size_mask_hi_x2;
        default:    size_mask_hi = size_mask_hi_x1;
    endcase
end

assign compare_addr_lo = {BAR_AddrHi[7:0], BAR_AddrLo[31:0], 12'b0} & size_mask_lo;
assign compare_addr_hi = {BAR_AddrHi[7:0], BAR_AddrLo[31:0], 12'b0} | ~size_mask_hi;

assign region_hit = (address[51:0] >= compare_addr_lo[51:0])
                  & (address[51:0] <= compare_addr_hi[51:0])
                  & Valid;

endmodule
