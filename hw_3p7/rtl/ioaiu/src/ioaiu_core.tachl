\jsbegin
///////////////////////////////////////////////////////////////////////////
// Arteris Inc. 2021
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
// NCore 3.2
// Author : Nabil
// Date   : May 2021
//
// Description : IOAIU core.
//
//////////////////////////////////////////////////////////////////////////
//
var u = obj.lib;
var m = obj.userLib;
var utilFunctions = obj.userLib;
var newToOldStyleInterface = m.newToOldStyleInterface.bind(null, obj.userLib);
var bundleFunctions			= m.bundleFunctions;
var cloneDeep = utilFunctions.deepCopy; // Boon function
var log2ceil            = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };
var ioaiu_pos = function(n) { return Math.max(n,1); };

var assertOn = u.getParam('assertOn');
var newToOldStyleInterface	= m.newToOldStyleInterface.bind( null, obj.userLib );
var flattenInterface		= m.flattenInterface;

// Function that returns wire declarations of an old-style interface (with properties 'name' and 'signals')
function declareOldStyleInterface ( oldStyleInterface ) {
	return bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}


// Function that returns wire declarations of a new-style interface
function declareNewStyleInterface ( newStyleInterface ) {
	const oldStyleInterface		= newToOldStyleInterface( newStyleInterface );
	const flatOldInterface		= flattenInterface ( oldStyleInterface );
	return declareOldStyleInterface( flatOldInterface );
}

var halfSpeedOD = u.getParam('halfSpeedOD');
var owo = u.getParam('owo');
var COH_MSI = u.getParam('COH_MSI');
var COH_MOESI = u.getParam('COH_MOESI');
var nSelectBits = u.getParam('nSelectBits');
var CGE = u.getParam('CGE');
var LIDW = u.getParam('LIDW');
var PRIS = u.getParam('PRIS');
var SECS = u.getParam('SECS');
var ODEE = u.getParam('ODEE');
var ODEW = u.getParam('ODEW');
var QMAP = u.getParam('QMAP');
var P0E = u.getParam('P0E');
var DRST = u.getParam('DRST');
var XO = u.getParam('XO');
var CTW = u.getParam('CTW');
var eStarve = u.getParam('eStarve');
var QOSN = u.getParam('QOSN');
var CTKM = u.getParam('CTKM');
var MTKM = u.getParam('MTKM');
var ITKM = u.getParam('ITKM');
var VTKM = u.getParam('VTKM');
var CTKS = u.getParam('CTKS');
var MTKS = u.getParam('MTKS');
var ITKS = u.getParam('ITKS');
var VTKS = u.getParam('VTKS');
var CWKS = u.getParam('CWKS');
var MWKS = u.getParam('MWKS');
var IWKS = u.getParam('IWKS');
var VWKS = u.getParam('VWKS');
var enPoison = u.getParam('enPoison');
var checkType = u.getParam('checkType');
var isCachingAgent = u.getParam('isCachingAgent');
var isDvmAgent = u.getParam('isDvmAgent');
var cfgACE = u.getParam('cfgACE');
var useSharerPromotion = u.getParam('useSharerPromotion');
var useOwnerTransfer = u.getParam('useOwnerTransfer');
var useNoAXIDinterleave = u.getParam('useNoAXIDinterleave');
var fnDisableRdInterleave = u.getParam('fnDisableRdInterleave');
var useConnectivity = u.getParam('useConnectivity');
var useSoftwareCreditManagement = u.getParam('useSoftwareCreditManagement');
var useSysEvtReceiver = u.getParam('useSysEvtReceiver');
var useSysEvtSender   = u.getParam('useSysEvtSender');
var useSysCohSender   = u.getParam('useSysCohSender');
var useSysCohReceiver = u.getParam('useSysCohReceiver');
var haveMasterTriggerInterface = u.getParam('haveMasterTriggerInterface');
var useEventOutInt 	= u.getParam('useEventOutInt');
var useEventInInt 	= u.getParam('useEventInInt');
var enSRAMPipe       = u.getParam('enSRAMPipe');
var nProcs           = u.getParam('nProcs');

// Params for the event handling
if (useSysCohSender && isCachingAgent) {
var dceIdInterface         = u.getParam('dceIdInterface');
var dceIdInterfaceName     = u.getParam('dceIdInterfaceName');
}
if (useSysCohSender && isDvmAgent) {
var dveIdInterface         = u.getParam('dveIdInterface');
var dveIdInterfaceName     = u.getParam('dveIdInterfaceName');
}
var concParams       	   = u.getParam('concParams');
var concertoInterfaces 	   = u.getParam('CONC_INTF');
var cm_type    		   = u.getParam('cm_type');
var wFPortId 		   = u.getParam('PIDW');
var unit_id_width          = wFPortId;
var wNUnitId   		   = u.getParam('NIDW');
var NIDW       		   = u.getParam('NIDW');
var NRRW       		   = u.getParam('NRRW');
var RPNW       		   = u.getParam('RPNW');
var wFUnitId   		   = u.getParam('FIDW');
var wMsgId     		   = u.getParam('wMsgId');
var nAiuConnectedDces      = u.getParam('nAiuConnectedDces');
var nDCEs      		   = u.getParam('nDCEs');
var nDMIs      		   = u.getParam('nDMIs');
var nDIIs      		   = u.getParam('nDIIs');
var nDVEs		   = u.getParam('nDVEs');
var nCreditRegs            = Math.max(nDCEs, nDMIs, nDIIs);
var noCacheLineInterleave  = u.getParam('noCacheLineInterleave');
var useCache               = u.getParam('useCache');
var CLO                    = u.getParam('CLO');
var AxIdProcSelectBits     = u.getParam('AxIdProcSelectBits');
var ODB                    = u.getParam('ODB');
var ODN                    = u.getParam('ODN');
var useNsx                 = u.getParam('useNsx');
var nCoherencyAgents       = isCachingAgent && isDvmAgent ? nAiuConnectedDces + 1 :
                             isCachingAgent               ? nAiuConnectedDces :
/* istanbul ignore next env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
                                               isDvmAgent ? 1 :
                                                            1 ;
var nEventAgentsForReceiver= Math.max(nDVEs, nAiuConnectedDces);
var wEventTimeout 	   = 20; //must be the same as wProtocolTimeout
var wProtocolTimeout 	   = 20;
// Other params
var BWL = u.getParam('BWL');
var ODDW = u.getParam('ODDW');
var ODAW = u.getParam('ODAW');
var ODDRW = u.getParam('ODDRW');
var ccpParams = u.getParam('ccpParams');
var ccp_mnames = u.getParam('ccp_mnames');
var ccp_mports = u.getParam('ccp_mports');
var ccp_rp_en = u.getParam('ccp_rp_en');
var ccp_tinterface = u.getParam('ccp_tinterface');
var ccp_rpinterface = u.getParam('ccp_rpinterface');
var ccp_dinterface = u.getParam('ccp_dinterface');
var sselParams = u.getParam('sselParams');
var amapParams = u.getParam('amapParams');
var amc_ports = u.getParam('amc_ports');
var cm_ports = u.getParam('cm_ports');
var err_ports = u.getParam('err_ports');
var REGN = u.getParam('REGN');
var nPerfCounters 	= u.getParam('nPerfCounters');
var nTraceRegisters	= u.getParam('nTraceRegisters');
var nUnitTraceBufSize	= u.getParam('nUnitTraceBufSize');
var wTotalSmiPortsNum   = u.getParam('wTotalSmiPortsNum');
var PIDW = u.getParam('PIDW');
var FIDW = u.getParam('FIDW');
var STN = u.getParam('STN');
var STP = u.getParam('STP');
var P0E = u.getParam('P0E');
var OCN = u.getParam('OCN');
var CSW = u.getParam('CSW');
var CKB = u.getParam('CKB');
var CTB = u.getParam('CTB');
var wOCNpOne = log2ceil(OCN) + 1;
var axiParams = u.getParam('axiParams');
var modified_wData = (axiParams.wData == 512) ? 256 : axiParams.wData;
var pmaParams = u.getParam('pmaParams');
var usePma = u.getParam('usePma');
var QC_INTF = u.getParam('QC_INTF');
var PPH_INTF = u.getParam('PPH_INTF');
var CSR_INTF = u.getParam('CSR_INTF');
var csrHwPorts = u.getParam('csrHwPorts');
var RESI = u.getParam('RESI');
var CSRS = u.getParam('CSRS');
var clkInterface = u.getParam('clkInterface');
var clkInterfaceParams = u.getParam('clkInterfaceParams');
var blkClkGateOn = u.getParam('blkClkGateOn');
var axiInterfaceBundle = u.getParam('axiInterfaceBundle');
var axiInterfaceBundleNoChk = u.getParam('axiInterfaceBundleNoChk');
var pphInterfaceBundle = u.getParam('pphInterfaceBundle');
var pphInterfaceName = u.getParam('pphInterfaceName');
var pphInterfaceBundleSyn = u.getParam('pphInterfaceBundleSyn');
var qcInterfaceBundle = u.getParam('qcInterfaceBundle');
var apbInterfaceBundle = u.getParam('apbInterfaceBundle');
var extraCSRWireBundle = u.getParam('extraCSRWireBundle');
var CMP = u.getParam('CMP');
var smiTxParams = u.getParam('smiTxParams');
var smiRxParams = u.getParam('smiRxParams');
var SMI_TX_INTF = u.getParam('SMI_TX_INTF');
var SMI_RX_INTF = u.getParam('SMI_RX_INTF');
var CONC_TX_INTF = u.getParam('CONC_TX_INTF');
var CONC_RX_INTF = u.getParam('CONC_RX_INTF');
var CONCERTO_MUX_INTF = u.getParam('CONCERTO_MUX_INTF');
var masterTriggerInterfaceJson    = obj.lib.getParam('masterTriggerInterfaceJson');
var eventRequestInInterfaceJson   = obj.lib.getParam('eventRequestInInterfaceJson');
var eventRequestOutInterfaceJson  = obj.lib.getParam('eventRequestOutInterfaceJson');

const SYSREQ_OP_EVENT = 3;

var pphStr = (RESI.enableNativeIntfProtection) ? 'pph_' : '';
var chkStr = (checkType==="NONE") ? (RESI.enableNativeIntfProtection) ? 'pph_' : '' : 'chk_';
var shimStr = (axiParams.wData<512) ? ((checkType==="NONE") ? ((RESI.enableNativeIntfProtection) ? 'pph_' : '' ) : 'chk_' ) : 'shim_';

// Function to convert an interface {{name, signals}) to a { modulePrefix, localPrefix, interface} object
// that is used to specify how local interfaces are mapped to module interfaces of an instance
function getModuleLocalPrefixAndInterface (intrface) {
	const modulePrefix		= intrface.name;
	const localPrefix		= intrface.name;
	return { modulePrefix, localPrefix, "interface": intrface.signals };
}

//=============================================================================
// Create DTW Trace Interfaces
//=============================================================================

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'cmd_req_'; });
var CMDReqInterface    = CONC_TX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtr_req_tx_'; });
var DTRReqTXInterface  = CONC_TX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_req_'; });
var DTWReqInterface    = CONC_TX_INTF[index].signals;

index                  = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_rsp_'; });
var DTWRspInterface    = CONC_RX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'upd_req_'; });
var UPDReqInterface    = CONC_TX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'str_rsp_'; });
var STRRspInterface    = CONC_TX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtr_rsp_tx_'; });
var DTRRspTXInterface  = CONC_TX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'snp_rsp_'; });
var SNPRspInterface    = CONC_TX_INTF[index].signals;

var index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_dbg_rsp_'; });

// If the DTW Trace Channel Exists.
var trace_defined = (index != -1);

/* istanbul ignore else env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
if (trace_defined){ 
  var DTWDbgRspInterface    = CONC_RX_INTF[index].signals;
  
  index                     = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_dbg_req_'; });
  var DTWDbgReqInterface    = CONC_TX_INTF[index].signals;
} else {
  index                     = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_req_'; });
  var DTWDbgReqInterface    = CONC_TX_INTF[index].signals;

  index                     = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_rsp_'; });
  var DTWDbgRspInterface    = CONC_RX_INTF[index].signals;
}

var index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'snp_req_'; });
var SnpReqInterface    = CONC_RX_INTF[index].signals;

//=============================================================================
// Trace CSR Interface
//=============================================================================

const traceCaptureRegisters		= m.genTraceCaptureRegisters(CSRS.spaceBlock[0].registers, "XAIU");
const traceCaptureCsrIfGenerator   	= m.createCSRInterfaceGenerator( traceCaptureRegisters );

// Define interfaces for Trace blocks and create wires that connect them
const traceTriggerRegisters		= m.genTraceTriggerRegisters(CSRS.spaceBlock[0].registers, "XAIU", { nTraceRegisters });
const traceTriggerCsrIfGenerator	= m.createCSRInterfaceGenerator( traceTriggerRegisters );
const traceTrigCsrInterface	        = { name: "XAIU", signals: traceTriggerCsrIfGenerator.signalBundle("slave") };
const nativeTrigger			= {
	name: "native_trig_",
	signals: {
			trace: axiParams.eTrace ? 1 : 0,
			addr: axiParams.wAddr,
			dii_hit: 1,
			dmi_hit: 1,
			hui: 5,
			size_of_ig: 4,
			opcode: 15, // (AWBAR[0](1), AWDOMAIN(3), AWSNOOP(4))
			aw: 1,
			ar: 1,
			memattr: 4,
			user: axiParams.wAwUser ?  32 : 0
	}
};

//=============================================================================
// Create Event Table for PMON
//=============================================================================
//const smiTxStallEvents		= SMI_TX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_TX_INTF array
//const smiRxStallEvents		= SMI_RX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_RX_INTF array

var filterAttributesMap = [
  { eventIndex: 17, name: "pmon_cmdreq_write_BW" , signals: { "funit_id": wFUnitId, "user": CMDReqInterface.aux } },
  { eventIndex: 18, name: "pmon_cmdreq_read_BW"  , signals: { "funit_id": wFUnitId, "user": CMDReqInterface.aux } },
  { eventIndex: 19, name: "pmon_snprsp_BW"       , signals: { "funit_id": wFUnitId, "user": 1 } }
]; 

const pmonEventTable                    = [
        { width: 1, value: "1'b0"},
        { width: 1, value: "smi_tx_event_0"},//smiTxStallEvents[0].expr},
        { width: 1, value: "smi_tx_event_1"},//smiTxStallEvents[1].expr},
        { width: 1, value: "smi_tx_event_2"},//smiTxStallEvents[2].expr},
        { width: 1, value: "1'b0"}, //4
        { width: 1, value: "smi_rx_event_0"}, // smiRxStallEvents[0].expr},
        { width: 1, value: "smi_rx_event_1"}, // smiRxStallEvents[1].expr},
        { width: 1, value: "smi_rx_event_2"}, //smiRxStallEvents[2].expr},
        { width: 1, value: "1'b0"}, //8
        { width: 1, value: "("+shimStr+"aw_valid & ~"+shimStr+"aw_ready)"}, // AW Stall
        { width: 1, value: "("+shimStr+"w_valid & ~"+shimStr+"w_ready)"}, // W Stall
        { width: 1, value: "("+shimStr+"b_valid & ~"+shimStr+"b_ready)"}, // B Stall
        { width: 1, value: "("+shimStr+"ar_valid & ~"+shimStr+"ar_ready)"}, // AR Stall
        { width: 1, value: "("+shimStr+"r_valid & ~"+shimStr+"r_ready)"}, // RStall
        { width: 1, value: "("+shimStr+"ac_valid & ~"+shimStr+"ac_ready)"},
        { width: 1, value: "(t_cd_valid & ~t_cd_ready)"},
        { width: 1, value: "(t_cr_valid & ~t_cr_ready)"}, //16
        { width: 1, value: "pmon_cmdreq_write_BW"},
        { width: 1, value: "pmon_cmdreq_read_BW"},
        { width: 1, value: "pmon_snprsp_BW"},
        { width: 8, value: "pmon_ott_entries_q" }, // OTT Entries
        { width: 1, value: "1'b0"}, //21
        { width: wTotalSmiPortsNum, value: "pm_trace_messages_captured"}, // Captured SMI Packets
        { width: wTotalSmiPortsNum, value: "pm_trace_messages_dropped"}, // Dropped SMI Packets
        { width: 1, value: "pmon_address_collision"}, // Address Collision
        { width: 8, value: "pmon_interleaved_count"},
        { width: 1, value: "pmon_agent_event_out"}, // Agent Event 
        { width: 1, value: "pmon_noc_sys_req_event"}, // NoC Event
        { width: 1, value: "1'b0"}, //28
        { width: 1, value: "1'b0"}, //29
        { width: 1, value: "pmon_div_by_sixteen"}, // Divide by 16 free running Counter
        { width: 1, value: "pmon_starvation_event"}, //31 - Starvations
        { width: 1, value: "pmon_cache_r_hit_q"}, // Cache Read Hit
        { width: 1, value: "pmon_cache_w_hit_q"}, // Cache Write Hit
        { width: 1, value: "pmon_cache_s_hit_q"}, // Cache Snoop Hit
        { width: 1, value: "pmon_cache_evict_q"}, // Cache Eviction
        { width: 1, value: "pmon_no_ways_q"}, // Cache No Ways to Allocate
        { width: 1, value: "pmon_cache_fill_stall_q"}, // Cache Fill Stall
        { width: 1, value: "pmon_cache_read_stall_q"}, // Cache Read Stall
        { width: 1, value: "pmon_cache_write_stall_q"}, // Cache Write Stall
        { width: 1, value: "pmon_cache_replay_q"}, // Cache Replay
        { width: 1, value: "pmon_cache_r_miss_q"}, // Cache Read Miss
        { width: 1, value: "pmon_cache_w_miss_q"}, // Cache Write Miss
        { width: 1, value: "pmon_cache_s_miss_q"}  // Cache Snoop Miss
];

// Function to generate pmon evtInterfaces
function genPmonEvtInterfaces( table ) {
	const result				= [];

	for(let i=0; i<table.length; i++) {
		result.push({
			name:			"evt"+i+"_",
			direction:		"slave",
			"interface":	"InterfaceEvt",
			params:			{ width: table[i].width }
		});
	}
	
	return result;
}


const pmonRegisters		= m.genNcorePmonRegisters(CSRS.spaceBlock[0].registers, "XAIU", { nPerfCounters });
const pmonCsrIfGenerator	= m.createCSRInterfaceGenerator( pmonRegisters );
const oldStylePmonCsrInterface	= { name: "XAIU", signals: pmonCsrIfGenerator.signalBundle("master") };

const clkInterfaceJson = {
                                            "name"         : '',
                                            "params"       : clkInterfaceParams,
                                            "blkClkGateOn" : blkClkGateOn,
                                            "direction"    : "slave",
                                            "interface"    : "InterfaceCLK"
};

//=============================================================================
// Master Trigger Interface
//=============================================================================
/* istanbul ignore next env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
if(haveMasterTriggerInterface) {
  var masterTriggerInterface      = newToOldStyleInterface( masterTriggerInterfaceJson );
  //obj.lib.interface( masterTriggerInterface.name, 'slave', masterTriggerInterface.signals);
}

//=============================================================================
//EventRequestInterface
//=============================================================================
if( useEventOutInt ) {
  var eventRequestInInterface      = newToOldStyleInterface( eventRequestInInterfaceJson );
  // bj.lib.interface( eventRequestInInterface.name+"in__", 'slave', eventRequestInInterface.signals);
}
if (useEventInInt) {
  var eventRequestOutInterface      = newToOldStyleInterface( eventRequestOutInterfaceJson);
  // obj.lib.interface( eventRequestOutInterface.name+"out__", 'master', eventRequestOutInterface.signals);
} 

/* istanbul ignore next env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
const pmonInterfaces	= {
	clkInterface: clkInterfaceJson,
	csrInterface: pmonCsrIfGenerator.interfaceGeneric("slave", "XAIU"),	// Returns a new-style InterfaceGeneric instance
	evtInterfaces: genPmonEvtInterfaces( pmonEventTable ) ,
        masterTriggerInterface: masterTriggerInterfaceJson || { _SKIP_: true },
 	filterAttrInterfaces: m.genFilterAttrInterfaces(filterAttributesMap),
 	latencyInterfaces: [
          m.oldStyleToNewStyleGenericInterface("slave", { name: "read_latency_", signals: {alloc: OCN, dealloc:OCN} }),
          m.oldStyleToNewStyleGenericInterface("slave", { name: "wr_latency_", signals: {alloc: OCN, dealloc: OCN} })
 		] 
};

var err_port_keys = Object.keys(err_ports);

// checkType not supported for 3.7.0
//    if (checkType!=="NONE") {
// Interface Parity Check-Error signals are generated based on
// what channels exist in the the native interface signal bundle
function genChkErrSignals( nativeInterfaceBundle ) {
  var signals               = {};

  Object.entries( nativeInterfaceBundle ).forEach( ([key, value]) => {
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
    if( typeof value === 'object' && Math.abs(nativeInterfaceBundle[key]["valid"])==1) {  // This means its a channel bundle
      signals[key+"perr"]     = 1;

    } else if ( typeof value !== 'object') {  // this means its a signal
      signals["def_"+"perr"]     = 1;

    }
  });

  return signals;
}

//}

\jsend

module \=u.getModuleName()=\ (
	myid_i,
	fu_id_i,
	nu_id_i,
	rpn_id_i,
	nrr_id_i,
	dce_ids_i,
	dmi_ids_i,
	dii_ids_i,
	dve_ids_i,
	external_i,
	test_en_i,
	clk,
	reset_n,
	\=(useCache & ccpParams.nBeatsPerBank >1 )? "clkby2_en," : ""=\

	ioaiu_en_debug_bist,
        w_cm_busy,

        bist_timeout_trigger,

        hexAiuDceVec,
        hexAiuDmiVec,
        hexAiuDiiVec,

		hexAiuConnectedDceFunitId,

	od_we_o,
	od_waddr_o,
	od_wdata_o,
	od_wecc_o,
	od_re_o,
	od_raddr_o,
	od_rdata_i,
	od_recc_i,

        \=obj.userLib.bundleFunctions.listFromInterface('', axiInterfaceBundle, [], obj.lib.bundle, -1)=\

\js for (var i = 0; i < err_port_keys.length; i++) {
        \=err_port_keys[i]=\,
\js }

\js if (RESI.enableNativeIntfProtection) {
	\=obj.userLib.bundleFunctions.listFromInterface('pph_', pphInterfaceBundleSyn.signals, [], obj.lib.bundle, -1)=\
\js} else {}
	\=obj.userLib.bundleFunctions.listFromInterface('apb_', apbInterfaceBundle, [], obj.lib.bundle, -1)=\
	
\js for (var inner = 0; inner < ccp_tinterface.length; inner++) {
	\=obj.userLib.bundleFunctions.listFromInterface("tag_bank"+inner+"_", ccp_tinterface[inner].signals, [], obj.lib.bundle, 1)=\
\js }
\js for (var inner = 0; inner < ccp_rpinterface.length; inner++) {
        \=obj.userLib.bundleFunctions.listFromInterface("plru_bank"+inner+"_", ccp_rpinterface[inner].signals, [], obj.lib.bundle, 1)=\
\js }
\js for (var inner = 0; inner < ccp_dinterface.length; inner++) {
	\=obj.userLib.bundleFunctions.listFromInterface("data_bank"+inner+"_", ccp_dinterface[inner].signals, [], obj.lib.bundle, 1)=\
\js }
\js for (var i=0; i<CONC_TX_INTF.length; i++) {
  \js if (CONC_TX_INTF[i].name != 'dtw_dbg_req_') {
	\=m.defineListPortsFromInterface(CONC_TX_INTF[i].name, CONC_TX_INTF[i].signals, u.port)=\
  \js }	
\js }
\js for (var i=0; i<CONC_RX_INTF.length; i++) {
  \js if (CONC_RX_INTF[i].name != 'dtw_dbg_rsp_') {
	\=m.defineListPortsFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, u.port)=\
  \js }
\js }

        \=m.defineListPortsFromInterface('XAIU', traceCaptureCsrIfGenerator.signalBundle('slave'), u.port)=\

        dtw_dbg_rsp_valid,
        dtw_dbg_rsp_ready,
        dtw_dbg_rsp_target_id,
        dtw_dbg_rsp_initiator_id,

        pm_trace_messages_dropped,
        pm_trace_messages_captured,

        multiCoreValid,
	multiCoreId,

\jsbegin 
/* istanbul ignore next env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */ 
if (haveMasterTriggerInterface) { 
\jsend
       	\=obj.userLib.bundleFunctions.listFromInterface( masterTriggerInterface.name,  masterTriggerInterface.signals, [], obj.lib.bundle, -1)=\
\js }

\jsbegin 
if( useEventOutInt ) {
\jsend
    \=obj.userLib.bundleFunctions.listFromInterface(eventRequestInInterface.name+"in__", eventRequestInInterface.signals, [], obj.lib.bundle, -1)=\
\jsbegin }

if (useEventInInt) {
\jsend
    \=obj.userLib.bundleFunctions.listFromInterface(eventRequestOutInterface.name+"out__", eventRequestOutInterface.signals, [], obj.lib.bundle, 1)=\
\js } 



	\=u.getPorts('\n\t')=\,
	ufault_o, cfault_o,
	threshold_o,
	interrupt_o,

         pma_busy,
 
         smi_tx_event_0,
         smi_tx_event_1,
         smi_tx_event_2,
 
         smi_rx_event_0,
         smi_rx_event_1,
         smi_rx_event_2
 
);

input [\=concParams.hdrParams.wInitiatorId-1=\:0]	myid_i;
input [\=FIDW-1=\:0]	fu_id_i;
input [\=NIDW-1=\:0]	nu_id_i;
input [\=RPNW-1=\:0]	rpn_id_i;
input [\=NRRW-1=\:0]	nrr_id_i;
input [\=nDCEs*FIDW-1=\:0]	dce_ids_i;
input [\=nDMIs*FIDW-1=\:0]	dmi_ids_i;
input [\=nDIIs*FIDW-1=\:0]	dii_ids_i;
input [\=nDVEs*FIDW-1=\:0]	dve_ids_i;

input			external_i;
input			test_en_i;
input			clk;		//aclk,
input			reset_n;	//aresetn,
input			ioaiu_en_debug_bist;
input                   w_cm_busy;
\jsbegin
if (useCache & ccpParams.nBeatsPerBank >1) {
\jsend
input clkby2_en;
\jsbegin
}
\jsend
input [\=nDCEs-1=\:0]            hexAiuDceVec;
input [\=nDMIs-1=\:0]            hexAiuDmiVec;
input [\=nDIIs-1=\:0]            hexAiuDiiVec;

input                       bist_timeout_trigger;

input [(\=nAiuConnectedDces*FIDW=\)-1:0]              hexAiuConnectedDceFunitId;

input                   multiCoreValid;
input [1:0]     	multiCoreId;

input                   dtw_dbg_rsp_valid;
input                   dtw_dbg_rsp_ready;
input [\=concParams.hdrParams.wTargetId-1=\:0]        dtw_dbg_rsp_target_id;
input [\=concParams.hdrParams.wInitiatorId-1=\:0]        dtw_dbg_rsp_initiator_id;

input   [\=wTotalSmiPortsNum-1=\:0] pm_trace_messages_dropped;
input   [\=wTotalSmiPortsNum-1=\:0] pm_trace_messages_captured;

//input		csysreq		//not used in AceLite
//output	csysack		//not used in AceLite
//output	cactive		//not used in AceLite

output [\=ODB-1=\:0]	od_we_o;
output [\=(ODB*ODAW)-1=\:0]	od_waddr_o;
output [\=(ODB*ODDW)-1=\:0]	od_wdata_o;
output [\=(ODB*ODEW)-1=\:0]	od_wecc_o;
output [\=ODB-1=\:0]	od_re_o;
output [\=(ODB*ODAW)-1=\:0]	od_raddr_o;
input [\=(ODB*ODDW)-1=\:0]	od_rdata_i;
input [\=(ODB*ODEW)-1=\:0]	od_recc_i;


\js for (var i = 0; i < err_port_keys.length; i++) {
input                   \=err_port_keys[i]=\;
\js }

\=obj.userLib.bundleFunctions.portsFromInterface('', axiInterfaceBundle, [], obj.lib.bundle, -1)=\

\js if (RESI.enableNativeIntfProtection) {
\=obj.userLib.bundleFunctions.portsFromInterface('pph_', pphInterfaceBundleSyn.signals, [], obj.lib.bundle, 1)=\
\js} else {}
\=obj.userLib.bundleFunctions.portsFromInterface('apb_', apbInterfaceBundle, [], obj.lib.bundle, -1)=\

\js for (var inner = 0; inner < ccp_tinterface.length; inner++) {
	\=obj.userLib.bundleFunctions.portsFromInterface("tag_bank"+inner+"_", ccp_tinterface[inner].signals, [], obj.lib.bundle, 1)=\
\js }
\js for (var inner = 0; inner < ccp_rpinterface.length; inner++) {
        \=obj.userLib.bundleFunctions.portsFromInterface("plru_bank"+inner+"_", ccp_rpinterface[inner].signals, [], obj.lib.bundle, 1)=\
\js }
\js for (var inner = 0; inner < ccp_dinterface.length; inner++) {
	\=obj.userLib.bundleFunctions.portsFromInterface("data_bank"+inner+"_", ccp_dinterface[inner].signals, [], obj.lib.bundle, 1)=\
\js }

\js for (var i=0; i<CONC_TX_INTF.length; i++) {
  \js if (CONC_TX_INTF[i].name != 'dtw_dbg_req_') {
    \=m.bundleFunctions.portsFromInterface(CONC_TX_INTF[i].name, CONC_TX_INTF[i].signals, [], u.bundle, 1)=\
  \js }
\js }

\js for (var i=0; i<CONC_RX_INTF.length; i++) {
  \js if (CONC_RX_INTF[i].name != 'dtw_dbg_rsp_') {
    \=m.bundleFunctions.portsFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, [], u.bundle, -1)=\
  \js }
\js }

\jsbegin 
/* istanbul ignore next env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */ 
if (haveMasterTriggerInterface) { 
\jsend
       	\=obj.userLib.bundleFunctions.portsFromInterface( masterTriggerInterface.name,  masterTriggerInterface.signals, [], obj.lib.bundle, -1)=\
\jsbegin }

if( useEventOutInt ) {
\jsend
    \=obj.userLib.bundleFunctions.portsFromInterface(eventRequestInInterface.name+"in__", eventRequestInInterface.signals, [], obj.lib.bundle, -1)=\
\jsbegin }

if (useEventInInt) {
\jsend
    \=obj.userLib.bundleFunctions.portsFromInterface(eventRequestOutInterface.name+"out__", eventRequestOutInterface.signals, [], obj.lib.bundle, 1)=\
\js } 



\=m.bundleFunctions.portsFromInterface('XAIU', traceCaptureCsrIfGenerator.signalBundle('slave'), [], u.bundle, 1)=\

output [13:0]	ufault_o, cfault_o;
output [7:0]	threshold_o;
output [1:0]	interrupt_o;

output pma_busy;

input        smi_tx_event_0;
input        smi_tx_event_1;
input        smi_tx_event_2;

input        smi_rx_event_0;
input        smi_rx_event_1;
input        smi_rx_event_2;

wire dff_enable = 1'b1;

wire unconnected_dce_access;
wire unconnected_dmi_access;
wire unconnected_dii_access;


wire unconnected_dce_access_evict;
wire unconnected_dmi_access_evict;
wire unconnected_dii_access_evict;

wire [7:0]                       pmon_interleaved_count;

\js if (err_port_keys.length == 0) {
wire sys_req_rx_CE;
wire sys_req_rx_header_UCE;
wire sys_req_rx_message_UCE;

wire sys_rsp_rx_CE;
wire sys_rsp_rx_header_UCE;
wire sys_rsp_rx_message_UCE;
\js }

wire csr_sys_evt_receiver_enable;
wire csr_sys_evt_receiver_err_vld;
wire csr_sys_evt_receiver_err_event_timeout;
wire [\=wFUnitId-1=\:0] csr_sys_evt_receiver_err_f_unit_id;

wire csr_sys_coh_sender_enable;
wire csr_sys_coh_sender_activate;
wire csr_sys_coh_sender_connecting;
wire csr_sys_coh_sender_attached;
wire csr_sys_coh_sender_syscoerr_set;
wire csr_sys_coh_sender_syscoerr_clr;
wire csr_sys_coh_sender_err_detected;
wire [\=wFUnitId-1=\:0] csr_sys_coh_sender_err_f_unit_id;
wire csr_sys_coh_sender_err_protocol_sys;
wire csr_sys_coh_sender_err_protocol_timeout;

wire [\=wEventTimeout-1=\:0] csr_event_timeout_value;
wire [\=wProtocolTimeout-1=\:0] csr_sys_evt_protocol_timeout_value;
wire [\=wProtocolTimeout-1=\:0] csr_sys_coh_protocol_timeout_value;

wire outstanding_coherent_count_zero;


\js if (useSysEvtReceiver) {

wire event_out_req;
wire event_out_ack;

\js }

\js if (useSysCohSender) {
wire my_sysco_req = csr_sys_coh_sender_activate;
\js } else {
wire my_sysco_req = 1'b0;
\js }

\js if (useSysCohSender) {

wire my_sysco_ack;
wire my_co_state_disabled;
wire my_co_state_connect;
wire my_co_state_enabled;
wire my_co_state_disconnect;

\js }

wire            tracetag;

wire [31:0]	t_csr_id;
wire		t_cmr_init;
wire		w_cmr_ready;
wire		t_cmr_valid;
wire [1:0]	t_cmr_cmd;
wire [\=axiParams.wAddr-1=\:0]	t_cmr_addr, w_cmr_addr;
wire [19:0]	t_cmr_set;
wire [5:0]	t_cmr_way;
wire		t_cmr_security;
wire		t_cmr_last;
wire		w_cmr_done;
wire [\=RPNW-1=\:0]	XAIUIDR_RPN_in = rpn_id_i;
wire [\=NRRW-1=\:0]	XAIUIDR_NRRI_in = nrr_id_i;
wire [\=NIDW-1=\:0]	XAIUIDR_NUnitId_in = nu_id_i;
wire		XAIUIDR_Valid_in = 1'h0;
wire		XAIUIDR_MultiCoreValid_in = multiCoreValid;
wire [1:0]	XAIUIDR_CoreId_in = multiCoreId;
wire [\=FIDW-1=\:0]	XAIUFUIDR_FUnitId_in = fu_id_i;
wire		XAIUPCMAR_MntOpActv_in;
wire		XAIUPCMAR_MntOpActv_wr;
wire [31:0]	XAIUPCMDR_MntData_in;
wire		XAIUPCMDR_MntData_wr;
wire		XAIUTAR_TransActv_in;
wire		XAIUTAR_TransActv_wr;
wire		XAIUPCTAR_EvictActive_in;
wire		XAIUPCTAR_EvictActive_wr;
wire		XAIUPCTAR_AllocActive_in;
wire		XAIUPCTAR_AllocActive_wr;
wire		XAIUPCISR_TagInitDone_in;
wire		XAIUPCISR_TagInitDone_wr;
wire		XAIUPCISR_DataInitDone_in;
wire		XAIUPCISR_DataInitDone_wr;
wire		XAIUCESR_ErrVld_in;
wire		XAIUCESR_ErrVld_wr;
wire		XAIUCESR_ErrCountOverflow_in;
wire		XAIUCESR_ErrCountOverflow_wr;
wire [7:0]	XAIUCESR_ErrCount_in;
wire		XAIUCESR_ErrCount_wr;
wire [3:0]	XAIUCESR_ErrType_in;
wire		XAIUCESR_ErrType_wr;
wire [15:0]	XAIUCESR_ErrInfo_in;
wire		XAIUCESR_ErrInfo_wr;
wire [31:0]	XAIUCELR0_ErrAddr_in;
wire		XAIUCELR0_ErrAddr_wr;
wire [19:0]	XAIUCELR1_ErrAddr_in;
wire		XAIUCELR1_ErrAddr_wr;
wire		XAIUUESR_ErrVld_in;
wire		XAIUUESR_ErrVld_wr;
wire [3:0]	XAIUUESR_ErrType_in;
wire		XAIUUESR_ErrType_wr;
wire [19:0]	XAIUUESR_ErrInfo_in;
wire		XAIUUESR_ErrInfo_wr;
wire [31:0]	XAIUUELR0_ErrAddr_in;
wire		XAIUUELR0_ErrAddr_wr;
wire [19:0]	XAIUUELR1_ErrAddr_in;
wire		XAIUUELR1_ErrAddr_wr;
wire [31:0]	XAIUNRSBAR_NRSBA_in;
wire		XAIUNRSBAR_NRSBA_wr;
wire [9:0]	XAIUNRSBLR_NRSDIIId_in = 10'h0;//Value set in CSR: DIIN - 1'b1;
wire		XAIUNRSBLR_BALoaded_in;
wire		XAIUNRSBLR_BALoaded_wr;
wire [31:0]	XAIUENGIDR_EngVerId_in = 32'h0; //Value set in CSR: EVID;
wire [15:0]	XAIUINFOR_ImplVer_in = 16'h0;	//Value set in CSR: IVID;
wire [3:0]	XAIUINFOR_UT_in = 4'h0;		//Value set in CSR.
wire [3:0]	XAIUINFOR_UST_in = 4'h0;	//Value set in CSR.
wire		XAIUINFOR_Valid_in = 1'b0;	//Value set in CSR.
wire		XAIUQOSSR_EventStatus_in;
wire		XAIUQOSSR_EventStatus_wr;
wire		XAIUQOSSR_EventStatusCountOverflow_in;
wire		XAIUQOSSR_EventStatusCountOverflow_wr;
wire [15:0]	XAIUQOSSR_EventStatusCount_in;
wire		XAIUQOSSR_EventStatusCount_wr;
wire [1:0]      XAIUCR_WR_out;
wire [1:0]      XAIUCR_RD_out;
wire [1:0]      XAIUCR_WR_sw_wdata;
wire [1:0]      XAIUCR_RD_sw_wdata;
wire            XAIUCR_sw_wr;
wire            XAIUCR_sw_rd;
wire [7:0]      cfg_rd_pool;
wire [7:0]      cfg_rd_pool_ns;
wire [7:0]      cfg_wr_pool;
wire [7:0]      cfg_wr_pool_ns;
wire [\=RPNW-1=\:0]	XAIUIDR_RPN_out;
wire [\=NRRW-1=\:0]	XAIUIDR_NRRI_out;
wire [\=NIDW-1=\:0]	XAIUIDR_NUnitId_out;
wire		XAIUIDR_Valid_out;
wire            XAIUIDR_MultiCoreValid_out;
wire [1:0]      XAIUIDR_CoreId_out;
wire [\=FIDW-1=\:0]	XAIUFUIDR_FUnitId_out;
wire XAIUTAR_SysCoConnecting_out;
wire XAIUTAR_SysCoAttached_out;
wire XAIUTAR_SysCoError_out;
wire XAIUTCR_SysCoAttach_out;
wire XAIUTAR_SysCoConnecting_sw_wdata;
wire XAIUTAR_SysCoAttached_sw_wdata;
wire XAIUTAR_SysCoError_sw_wdata;
wire XAIUTCR_EventDisable_sw_wdata;
wire XAIUTCR_SysCoDisable_sw_wdata;
wire XAIUTCR_SysCoAttach_sw_wdata;
wire [1:0]	XAIUTCR_TransOrderModeRd_out,
		XAIUTCR_TransOrderModeWr_out;
wire [7:0]	XAIUEDR0_MRC_out;
wire [7:0]	XAIUEDR0_MRU_out;
wire [7:0]	XAIUEDR0_MRR_out;
wire [7:0]	XAIUEDR0_MRW_out;
wire [3:0]	XAIUEDR6_DCE_out;
wire [3:0]	XAIUEDR6_DMI_out;
wire [3:0]	XAIUEDR6_DII_out;
wire [3:0]	XAIUEDR6_DVE_out;
wire [3:0]	XAIUEDR6_QOS_out;
wire [30:0]	XAIUTOCR_TimeOutThreshold_out;
wire		XAIUTOCR_TimeOutRefEn_out;
wire [30:0]     XAIUSEPTOCR_TimeOutThreshold_out;
wire            XAIUSEPTOCR_TimeOutRefEn_out;
wire [30:0]     XAIUSCPTOCR_TimeOutThreshold_out;
wire            XAIUSCPTOCR_TimeOutRefEn_out;
wire [30:0]     XAIUEHTOCR_TimeOutThreshold_out;
wire            XAIUEHTOCR_TimeOutRefEn_out;
wire            XAIUQOSCR_useEvictionQoS_out;
wire [3:0]      XAIUQOSCR_EvictionQoS_out;
wire [15:0]	XAIUQOSCR_EventThreshold_out;
wire		XAIUQOSSR_EventStatus_out;
wire		XAIUQOSSR_EventStatusCountOverflow_out;
wire [15:0]	XAIUQOSSR_EventStatusCount_out;
wire [11:0]	XAIUEDR7_EVENT_out;
wire [19:0]	XAIUEDR7_TIME_out;
wire		XAIUTAR_TransActv_out;
wire		XAIUPCTAR_EvictActive_out;
wire		XAIUPCTAR_AllocActive_out;
wire		XAIUPCISR_TagInitDone_out;
wire		XAIUPCISR_DataInitDone_out;
wire [31:0]	XAIUEDR1_cfg_out;
wire [7:0]	XAIUEDR2_WR_out;
wire [7:0]	XAIUEDR2_RD_out;
wire [7:0]	XAIUEDR3_OTT_out;
wire [7:0]	XAIUEDR3_STT_out;
wire [7:0]	XAIUEDR4_WR_out;
wire [7:0]	XAIUEDR4_RD_out;
wire [7:0]	XAIUEDR5_EV_out;
wire		XAIUPCTCR_LookupEn_out;
wire		XAIUPCTCR_AllocEn_out;
wire		XAIUPCTCR_UpdateDis_out;
wire [3:0]	XAIUPCMCR_MntOp_out;
wire [5:0]	XAIUPCMCR_ArrayID_out;
wire		XAIUPCMCR_SecAttr_out;
wire		XAIUPCMAR_MntOpActv_out;
wire [19:0]	XAIUPCMLR0_MntSet_out;
wire [5:0]	XAIUPCMLR0_MntWay_out;
wire [5:0]	XAIUPCMLR0_MntWord_out;
wire [15:0]	XAIUPCMLR1_MntAddr_out;
wire [15:0]	XAIUPCMLR1_MntRange_out;
wire [31:0]	XAIUPCMDR_MntData_out;
wire		XAIUCECR_ErrDetEn_out;
wire		XAIUCECR_ErrIntEn_out;
wire [7:0]	XAIUCECR_ErrThreshold_out;
wire		XAIUCESR_ErrVld_out;
wire		XAIUCESR_ErrCountOverflow_out;
wire [7:0]	XAIUCESR_ErrCount_out;
wire [3:0]	XAIUCESR_ErrType_out;
wire [15:0]	XAIUCESR_ErrInfo_out;
wire		XAIUCESAR_ErrVld_out;
wire		XAIUCESAR_ErrCountOverflow_out;
wire [7:0]	XAIUCESAR_ErrCount_out;
wire [3:0]	XAIUCESAR_ErrType_out;
wire [15:0]	XAIUCESAR_ErrInfo_out;
wire [7:0]	XAIUCRTR_ResThreshold_out;
wire		XAIUUEDR_SoftwareProgConfigErrEn_out;
wire		XAIUUEDR_ProtErrDetEn_out;
wire		XAIUUEDR_TransErrDetEn_out;
wire		XAIUUEDR_DecErrDetEn_out;
wire		XAIUUEDR_TimeoutErrDetEn_out;
wire		XAIUUEDR_MemErrDetEn_out;
wire		XAIUUEDR_IntfCheckErrDetEn_out;
wire		XAIUUEIR_ProtErrIntEn_out;
wire		XAIUUEIR_TransErrIntEn_out;
wire		XAIUUEIR_MemErrIntEn_out;
wire		XAIUUEIR_DecErrIntEn_out;
wire		XAIUUEIR_SoftwareProgConfigErrIntEn_out;
wire		XAIUUEIR_TimeoutErrIntEn_out;
wire		XAIUUEIR_IntfCheckErrIntEn_out;
wire		XAIUUESR_ErrVld_out;
wire [3:0]	XAIUUESR_ErrType_out;
wire [19:0]	XAIUUESR_ErrInfo_out;
wire		XAIUUESAR_ErrVld_out;
wire [3:0]	XAIUUESAR_ErrType_out;
wire [19:0]	XAIUUESAR_ErrInfo_out;
wire            XAIUNRSAR_NRSAR_out;
wire            XAIUNRSAR_NRSAR_sw_wdata;
wire            XAIUNRSAR_sw_wr;
wire            XAIUNRSAR_sw_rd;

\js for (var i=0; i<REGN; i++) {
//wire [2:0]	XAIUGPRAR\=i=\_DIGId_out;
wire		XAIUGPRAR\=i=\_ReadID_out;
wire		XAIUGPRAR\=i=\_WriteID_out;
wire [1:0]	XAIUGPRAR\=i=\_Policy_out;
wire [4:0]	XAIUGPRAR\=i=\_HUI_out;
wire [5:0]	XAIUGPRAR\=i=\_Size_out;
wire		XAIUGPRAR\=i=\_HUT_out;
wire		XAIUGPRAR\=i=\_Valid_out;
wire [1:0]	XAIUGPRAR\=i=\_NSX_out;
\js if ((axiParams.eDomain?1:0)==0) {
wire            XAIUGPRAR\=i=\_NC_out;
\js }
wire [31:0]	XAIUGPRBLR\=i=\_AddrLow_out;
wire [7:0]	XAIUGPRBHR\=i=\_AddrHigh_out;
//wire [2:0]	XAIUGPRAR\=i=\_DIGId_sw_wdata;
wire		XAIUGPRAR\=i=\_ReadID_sw_wdata;
wire		XAIUGPRAR\=i=\_WriteID_sw_wdata;
wire [1:0]	XAIUGPRAR\=i=\_Policy_sw_wdata;
wire [4:0]	XAIUGPRAR\=i=\_HUI_sw_wdata;
wire [5:0]	XAIUGPRAR\=i=\_Size_sw_wdata;
wire		XAIUGPRAR\=i=\_HUT_sw_wdata;
wire		XAIUGPRAR\=i=\_Valid_sw_wdata;
wire [1:0]      XAIUGPRAR\=i=\_NSX_sw_wdata;
\js if ((axiParams.eDomain?1:0)==0) {
wire            XAIUGPRAR\=i=\_NC_sw_wdata;
\js }
wire [31:0]	XAIUGPRBLR\=i=\_AddrLow_sw_wdata;
wire [7:0]	XAIUGPRBHR\=i=\_AddrHigh_sw_wdata;
wire		XAIUGPRAR\=i=\_sw_wr;
wire		XAIUGPRBLR\=i=\_sw_wr;
wire		XAIUGPRBHR\=i=\_sw_wr;
wire		XAIUGPRAR\=i=\_sw_rd;
wire		XAIUGPRBLR\=i=\_sw_rd;
wire		XAIUGPRBHR\=i=\_sw_rd;
\js}
//wire [2:0]	XAIUBRAR_DIGId_out;
wire [4:0]	XAIUBRAR_HUI_out;
wire		XAIUBRAR_HUT_out;
wire [5:0]	XAIUBRAR_Size_out;
wire		XAIUBRAR_Valid_out;
\jsbegin 
/* istanbul ignore next env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */ 
if (useNsx) { 
\jsend
wire [1:0]	XAIUGPRAR_NSX_out;
wire [1:0]	XAIUGPRAR_NSX_evict_out;
\js }

\js if ((axiParams.eDomain?1:0)==0) {
wire            XAIUGPRAR_NC_out;
wire            XAIUGPRAR_NC_evict_out;
\js }
wire [31:0]	XAIUBRBLR_AddrLow_out;
wire [7:0]	XAIUBRBHR_AddrHigh_out;
wire [31:0]	XAIUNRSBAR_NRSBA_out;
wire [31:0]	XAIUNRSBHR_NRSBA_out;
wire [31:0]     XAIUNRSBHR_NRSBA_in = 32'h0;
wire [9:0]	XAIUNRSBLR_NRSDIIId_out;
wire		XAIUNRSBLR_BALoaded_out;
wire		XAIUNRSBLR_sw_wr;
wire		XAIUNRSBAR_sw_wr;
wire		XAIUNRSBHR_sw_wr;
wire		XAIUAMIGR_Valid_out;
wire [3:0]	XAIUAMIGR_AMIGS_out;
wire [2:0]	XAIUMIFSR_MIG2AIFId_out;
wire [2:0]	XAIUMIFSR_MIG3AIFId_out;
wire [2:0]	XAIUMIFSR_MIG4AIFId_out;
wire [2:0]	XAIUMIFSR_MIG8AIFId_out;
wire [2:0]	XAIUMIFSR_MIG16AIFId_out;
wire [31:0]	XAIUENGIDR_EngVerId_out;
wire [15:0]	XAIUINFOR_ImplVer_out;
wire [3:0]	XAIUINFOR_UT_out;
wire [3:0]	XAIUINFOR_UST_out;
wire		XAIUINFOR_Valid_out;
wire [\=RPNW-1=\:0]	XAIUIDR_RPN_sw_wdata;
wire [\=NRRW-1=\:0]	XAIUIDR_NRRI_sw_wdata;
wire [\=NIDW-1=\:0]	XAIUIDR_NUnitId_sw_wdata;
wire [2-1:0]	XAIUIDR_CoreId_sw_wdata;
wire		XAIUIDR_MultiCoreValid_sw_wdata;
wire		XAIUIDR_Valid_sw_wdata;
wire [\=FIDW-1=\:0]	XAIUFUIDR_FUnitId_sw_wdata;
wire [1:0]	XAIUTCR_TransOrderModeRd_sw_wdata,
		XAIUTCR_TransOrderModeWr_sw_wdata;
wire [7:0]	XAIUEDR0_MRC_sw_wdata;
wire [7:0]	XAIUEDR0_MRU_sw_wdata;
wire [7:0]	XAIUEDR0_MRR_sw_wdata;
wire [7:0]	XAIUEDR0_MRW_sw_wdata;
wire [3:0]	XAIUEDR6_DCE_sw_wdata;
wire [3:0]	XAIUEDR6_DMI_sw_wdata;
wire [3:0]	XAIUEDR6_DII_sw_wdata;
wire [3:0]	XAIUEDR6_DVE_sw_wdata;
wire [3:0]	XAIUEDR6_QOS_sw_wdata;
wire [30:0]	XAIUTOCR_TimeOutThreshold_sw_wdata;
wire		XAIUTOCR_TimeOutRefEn_sw_wdata;
wire [30:0]     XAIUSEPTOCR_TimeOutThreshold_sw_wdata;
wire            XAIUSEPTOCR_TimeOutRefEn_sw_wdata;
wire [30:0]     XAIUSCPTOCR_TimeOutThreshold_sw_wdata;
wire            XAIUSCPTOCR_TimeOutRefEn_sw_wdata;
wire [30:0]     XAIUEHTOCR_TimeOutThreshold_sw_wdata;
wire            XAIUEHTOCR_TimeOutRefEn_sw_wdata;
wire            XAIUQOSCR_useEvictionQoS_sw_wdata;
wire [3:0]      XAIUQOSCR_EvictionQoS_sw_wdata;
wire [15:0]	XAIUQOSCR_EventThreshold_sw_wdata;
wire		XAIUQOSSR_EventStatus_sw_wdata;
wire		XAIUQOSSR_EventStatusCountOverflow_sw_wdata;
wire [15:0]	XAIUQOSSR_EventStatusCount_sw_wdata;
wire [11:0]	XAIUEDR7_EVENT_sw_wdata;
wire [19:0]	XAIUEDR7_TIME_sw_wdata;
wire		XAIUTAR_TransActv_sw_wdata;
wire		XAIUPCTAR_EvictActive_sw_wdata;
wire		XAIUPCTAR_AllocActive_sw_wdata;
wire		XAIUPCISR_TagInitDone_sw_wdata;
wire		XAIUPCISR_DataInitDone_sw_wdata;
wire [31:0]	XAIUEDR1_cfg_sw_wdata;
wire [7:0]	XAIUEDR2_WR_sw_wdata;
wire [7:0]	XAIUEDR2_RD_sw_wdata;
wire [7:0]	XAIUEDR3_OTT_sw_wdata;
wire [7:0]	XAIUEDR3_STT_sw_wdata;
wire [7:0]	XAIUEDR4_WR_sw_wdata;
wire [7:0]	XAIUEDR4_RD_sw_wdata;
wire [7:0]	XAIUEDR5_EV_sw_wdata;
wire 		XAIUPCTCR_LookupEn_sw_wdata;
wire 		XAIUPCTCR_AllocEn_sw_wdata;
wire 		XAIUPCTCR_UpdateDis_sw_wdata;
wire [3:0]	XAIUPCMCR_MntOp_sw_wdata;
wire [5:0]	XAIUPCMCR_ArrayID_sw_wdata;
wire		XAIUPCMCR_SecAttr_sw_wdata;
wire		XAIUPCMAR_MntOpActv_sw_wdata;
wire [19:0]	XAIUPCMLR0_MntSet_sw_wdata;
wire [5:0]	XAIUPCMLR0_MntWay_sw_wdata;
wire [5:0]	XAIUPCMLR0_MntWord_sw_wdata;
wire [15:0]	XAIUPCMLR1_MntAddr_sw_wdata;
wire [15:0]	XAIUPCMLR1_MntRange_sw_wdata;
wire [31:0]	XAIUPCMDR_MntData_sw_wdata;
wire		XAIUCECR_ErrDetEn_sw_wdata;
wire		XAIUCECR_ErrIntEn_sw_wdata;
wire [7:0]	XAIUCECR_ErrThreshold_sw_wdata;
wire		XAIUCESR_ErrVld_sw_wdata;
wire		XAIUCESR_ErrCountOverflow_sw_wdata;
wire [7:0]	XAIUCESR_ErrCount_sw_wdata;
wire [3:0]	XAIUCESR_ErrType_sw_wdata;
wire [15:0]	XAIUCESR_ErrInfo_sw_wdata;
wire [31:0]	XAIUCELR0_ErrAddr_sw_wdata;
wire [19:0]	XAIUCELR1_ErrAddr_sw_wdata;
wire		XAIUCESAR_ErrVld_sw_wdata;
wire		XAIUCESAR_ErrCountOverflow_sw_wdata;
wire [7:0]	XAIUCESAR_ErrCount_sw_wdata;
wire [3:0]	XAIUCESAR_ErrType_sw_wdata;
wire [15:0]	XAIUCESAR_ErrInfo_sw_wdata;
wire [7:0]	XAIUCRTR_ResThreshold_sw_wdata;
wire		XAIUUEDR_ProtErrDetEn_sw_wdata;
wire		XAIUUEDR_TransErrDetEn_sw_wdata;
wire		XAIUUEDR_DecErrDetEn_sw_wdata;
wire		XAIUUEDR_SoftwareProgConfigErrEn_sw_wdata;
wire		XAIUUEDR_TimeoutErrDetEn_sw_wdata;
wire		XAIUUEDR_MemErrDetEn_sw_wdata;
wire		XAIUUEDR_IntfCheckErrDetEn_sw_wdata;
wire		XAIUUEIR_ProtErrIntEn_sw_wdata;
wire		XAIUUEIR_TransErrIntEn_sw_wdata;
wire		XAIUUEIR_MemErrIntEn_sw_wdata;
wire		XAIUUEIR_DecErrIntEn_sw_wdata;
wire		XAIUUEIR_SoftwareProgConfigErrIntEn_sw_wdata;
wire		XAIUUEIR_TimeoutErrIntEn_sw_wdata;
wire		XAIUUEIR_IntfCheckErrIntEn_sw_wdata;
wire		XAIUUESR_ErrVld_sw_wdata;
wire [3:0]	XAIUUESR_ErrType_sw_wdata;
wire [19:0]	XAIUUESR_ErrInfo_sw_wdata;
wire [31:0]	XAIUUELR0_ErrAddr_sw_wdata;
wire [19:0]	XAIUUELR1_ErrAddr_sw_wdata;
wire		XAIUUESAR_ErrVld_sw_wdata;
wire [3:0]	XAIUUESAR_ErrType_sw_wdata;
wire [19:0]	XAIUUESAR_ErrInfo_sw_wdata;
//wire [2:0]	XAIUBRAR_DIGId_sw_wdata;
wire [4:0]	XAIUBRAR_HUI_sw_wdata;
wire		XAIUBRAR_HUT_sw_wdata;
wire [5:0]	XAIUBRAR_Size_sw_wdata;
wire		XAIUBRAR_Valid_sw_wdata;
wire [31:0]	XAIUBRBLR_AddrLow_sw_wdata;
wire [7:0]	XAIUBRBHR_AddrHigh_sw_wdata;
wire [31:0]	XAIUNRSBAR_NRSBA_sw_wdata;
wire [31:0]	XAIUNRSBHR_NRSBA_sw_wdata;
wire [9:0]	XAIUNRSBLR_NRSDIIId_sw_wdata;
wire		XAIUNRSBLR_BALoaded_sw_wdata;
wire		XAIUAMIGR_Valid_sw_wdata;
wire [3:0]	XAIUAMIGR_AMIGS_sw_wdata;
wire [2:0]	XAIUMIFSR_MIG2AIFId_sw_wdata;
wire [2:0]	XAIUMIFSR_MIG3AIFId_sw_wdata;
wire [2:0]	XAIUMIFSR_MIG4AIFId_sw_wdata;
wire [2:0]	XAIUMIFSR_MIG8AIFId_sw_wdata;
wire [2:0]	XAIUMIFSR_MIG16AIFId_sw_wdata;
wire [31:0]	XAIUENGIDR_EngVerId_sw_wdata;
wire [15:0]	XAIUINFOR_ImplVer_sw_wdata;
wire [3:0]	XAIUINFOR_UT_sw_wdata;
wire [3:0]	XAIUINFOR_UST_sw_wdata;
wire		XAIUINFOR_Valid_sw_wdata;
wire		XAIUIDR_sw_wr;
wire		XAIUFUIDR_sw_wr;
wire		XAIUTCR_sw_wr;
wire		XAIUEDR0_sw_wr;
wire 		XAIUTOCR_sw_wr;
wire 		XAIUSEPTOCR_sw_wr;
wire 		XAIUSCPTOCR_sw_wr;
wire 		XAIUEHTOCR_sw_wr;
wire 		XAIUQOSCR_sw_wr;
wire 		XAIUQOSSR_sw_wr;
wire		XAIUEDR7_sw_wr;
wire		XAIUTAR_sw_wr;
wire		XAIUPCTAR_sw_wr;
wire		XAIUPCISR_sw_wr;
wire		XAIUEDR6_sw_wr;
wire		XAIUEDR1_sw_wr;
wire		XAIUEDR2_sw_wr;
wire		XAIUEDR3_sw_wr;
wire		XAIUEDR4_sw_wr;
wire		XAIUEDR5_sw_wr;
wire		XAIUPCTCR_sw_wr;
wire		XAIUPCMCR_sw_wr;
wire		XAIUPCMAR_sw_wr;
wire		XAIUPCMLR0_sw_wr;
wire		XAIUPCMLR1_sw_wr;
wire		XAIUPCMDR_sw_wr;
wire		XAIUCECR_sw_wr;
wire		XAIUCESR_sw_wr,	t_ucesr_clear;
wire		XAIUCELR0_sw_wr;
wire		XAIUCELR1_sw_wr;
wire		XAIUCESAR_sw_wr;
wire		XAIUCRTR_sw_wr;
wire		XAIUUEDR_sw_wr;
wire		XAIUUEIR_sw_wr;
wire		XAIUUESR_sw_wr,	t_uuesr_clear;
wire		XAIUUELR0_sw_wr;
wire		XAIUUELR1_sw_wr;
wire		XAIUUESAR_sw_wr;
wire		XAIUENGIDR_sw_wr;
wire		XAIUINFOR_sw_wr;
wire		XAIUBRAR_sw_wr;
wire		XAIUBRBLR_sw_wr;
wire		XAIUBRBHR_sw_wr;
wire		XAIUAMIGR_sw_wr;
wire		XAIUMIFSR_sw_wr;
wire		XAIUIDR_sw_rd;
wire		XAIUFUIDR_sw_rd;
wire		XAIUTCR_sw_rd;
wire		XAIUEDR0_sw_rd;
wire		XAIUEDR1_sw_rd;
wire		XAIUEDR2_sw_rd;
wire		XAIUEDR3_sw_rd;
wire		XAIUEDR4_sw_rd;
wire		XAIUEDR5_sw_rd;
wire		XAIUPCTCR_sw_rd;
wire		XAIUPCMCR_sw_rd;
wire		XAIUPCMAR_sw_rd;
wire		XAIUPCMLR0_sw_rd;
wire		XAIUPCMLR1_sw_rd;
wire		XAIUPCMDR_sw_rd;
wire		XAIUEDR6_sw_rd;
wire 		XAIUTOCR_sw_rd;
wire 		XAIUSEPTOCR_sw_rd;
wire 		XAIUSCPTOCR_sw_rd;
wire 		XAIUEHTOCR_sw_rd;
wire 		XAIUQOSCR_sw_rd;
wire 		XAIUQOSSR_sw_rd;
wire		XAIUEDR7_sw_rd;
wire		XAIUTAR_sw_rd;
wire		XAIUPCTAR_sw_rd;
wire		XAIUPCISR_sw_rd;
wire		XAIUUEDR_sw_rd;
wire		XAIUUEIR_sw_rd;
wire		XAIUUESR_sw_rd;
wire		XAIUUELR0_sw_rd;
wire		XAIUUELR1_sw_rd;
wire		XAIUUESAR_sw_rd;
wire		XAIUCECR_sw_rd;
wire		XAIUCESR_sw_rd;
wire		XAIUCELR0_sw_rd;
wire		XAIUCELR1_sw_rd;
wire		XAIUCESAR_sw_rd;
wire		XAIUCRTR_sw_rd;
wire		XAIUBRAR_sw_rd;
wire		XAIUBRBLR_sw_rd;
wire		XAIUBRBHR_sw_rd;
wire		XAIUNRSBAR_sw_rd;
wire		XAIUNRSBHR_sw_rd;
wire		XAIUNRSBLR_sw_rd;
wire		XAIUAMIGR_sw_rd;
wire		XAIUMIFSR_sw_rd;
wire		XAIUENGIDR_sw_rd;
wire		XAIUINFOR_sw_rd;
wire            XAIUCCTRLR_sw_wr;
wire            XAIUCCTRLR_sw_rd;

\js for (let i = 0; i < nTraceRegisters; i++) {
wire            XAIUTCTRLR\=i=\_sw_wr;
wire            XAIUTCTRLR\=i=\_sw_rd;
wire            XAIUTBALR\=i=\_sw_wr;
wire            XAIUTBALR\=i=\_sw_rd;
wire            XAIUTBAHR\=i=\_sw_wr;
wire            XAIUTBAHR\=i=\_sw_rd;
wire            XAIUTOPCR0\=i=\_sw_wr;
wire            XAIUTOPCR0\=i=\_sw_rd;
wire            XAIUTOPCR1\=i=\_sw_wr;
wire            XAIUTOPCR1\=i=\_sw_rd;
wire            XAIUTUBR\=i=\_sw_wr;
wire            XAIUTUBR\=i=\_sw_rd;
wire            XAIUTUBMR\=i=\_sw_wr;
wire            XAIUTUBMR\=i=\_sw_rd;
\js }

\js for ( let i = 0; i < nDCEs; i++ ) {
wire    [2:0]        XAIUCCR\=i=\_DCECounterState_in;
wire                 XAIUCCR\=i=\_DCECounterState_wr;
wire    [4:0]        XAIUCCR\=i=\_DCECreditLimit_out;
wire    [2:0]        XAIUCCR\=i=\_DCECounterState_out;
\js }

\js for ( let i = 0; i < nDMIs; i++ ) {
wire    [2:0]        XAIUCCR\=i=\_DMICounterState_in;
wire                 XAIUCCR\=i=\_DMICounterState_wr;
wire    [4:0]        XAIUCCR\=i=\_DMICreditLimit_out;
wire    [2:0]        XAIUCCR\=i=\_DMICounterState_out;
\js }

\js for ( let i = 0; i < nDIIs; i++ ) {
wire    [2:0]        XAIUCCR\=i=\_DIICounterState_in;
wire                 XAIUCCR\=i=\_DIICounterState_wr;
wire    [4:0]        XAIUCCR\=i=\_DIICreditLimit_out;
wire    [2:0]        XAIUCCR\=i=\_DIICounterState_out;
\js }

\jsbegin
// checkType not supported for 3.7.0
    if (checkType!=="NONE") { \jsend
\=m.bundleFunctions.wiresFromInterface(chkStr, axiInterfaceBundle, [], obj.lib.bundle)=\
\js }

\js if (!axiParams.eAc) {
  wire          \=shimStr=\ac_valid;
  wire          \=shimStr=\ac_ready = 1'b0;
  wire [\=axiParams.wAddr-1=\:0] \=shimStr=\ac_addr;
  wire [3:0]    \=shimStr=\ac_snoop;
  wire [2:0]    \=shimStr=\ac_prot;
  wire          \=shimStr=\ac_trace;
  wire [3:0]    \=shimStr=\ac_vmidext;
\js } else {
\js if (!axiParams.eTrace) {
  wire          \=shimStr=\ac_trace;
\js }
\js if (axiParams.wAcVmidext==0) {
  wire [3:0]    \=shimStr=\ac_vmidext;
\js }
\js }
\jsbegin
// wRUser not used for 3.7
/* istanbul ignore else env ncore_3p7 */
    if (axiParams.wRUser==0) { \jsend
  wire [0:0] \=shimStr=\r_user;
\js }
\jsbegin
// wBUser not used for 3.7
/* istanbul ignore else env ncore_3p7 */
    if (axiParams.wBUser==0) { \jsend
  wire [0:0] \=shimStr=\b_user;
\js }

\=m.bundleFunctions.wiresFromInterface('', extraCSRWireBundle, [], u.bundle)=\

\=m.bundleFunctions.wiresFromInterface(traceTrigCsrInterface.name, traceTrigCsrInterface.signals, [], u.bundle)=\
\=m.bundleFunctions.wiresFromInterface(nativeTrigger.name, nativeTrigger.signals, [], u.bundle)=\
\=m.bundleFunctions.wiresFromInterface('trace_', nativeTrigger.signals, [], u.bundle)=\


\jsbegin
if(!nativeTrigger.signals.trace) { \jsend
wire trace_trace; \jsbegin
} \jsend

wire  [\=wFUnitId-1=\:0] event_out_initiator_id; 

wire			ccp_init;
wire			ccp_maint;
wire			ccp_ready;
wire [\=CTB-1=\:0]		ccp_p0_ready;
wire [\=CTB-1=\:0]		ccp_p0_valid;
wire [\=axiParams.wAddr-1=\:0]		ccp_p0_addr;
wire			ccp_p0_security;
wire			ccp_p2_alloc;
wire			ccp_p2_rd;
wire			ccp_p2_wr;
wire			ccp_p2_port;
wire			ccp_p2_lru;
wire			ccp_p2_update;
wire [\=CSW-1=\:0]		ccp_p2_nstate;
wire [\=BWL-1=\:0]		ccp_p2_len;
wire [\=(ccpParams.nWays?ccpParams.nWays:1)-1=\:0]		ccp_p2_busy;
wire			ccp_p2_evict;
wire [\=axiParams.wAddr-1=\:0]		ccp_p2_eaddr;
wire			ccp_p2_esecurity;
wire [\=CSW-1=\:0]		ccp_p2_estate;
wire			ccp_p2_valid;
wire [\=CSW-1=\:0]		ccp_p2_cstate;
wire [\=(ccpParams.nWays?ccpParams.nWays:1)-1=\:0]		ccp_p2_cnru;
wire [\=(ccpParams.nWays?ccpParams.nWays:1)-1=\:0]		ccp_p2_hits;
wire [\=(ccpParams.nWays?ccpParams.nWays:1)-1=\:0]		ccp_p2_ways;
wire [3:0]		ccp_p2_nacks;
wire			ccp_p2_setw;
wire [19:0]		ccp_p2_setn;
wire [5:0]		ccp_p2_wayn;
wire			ccp_fd_ready;
wire			ccp_fd_valid;
wire [\=(enPoison?/* istanbul ignore next env ncore_3p7 */modified_wData/64:1)-1=\:0]		ccp_fd_poison;
wire [\=modified_wData-1=\:0]		ccp_fd_data;
wire [\=modified_wData/8-1=\:0]		ccp_fd_be;
wire [\=ioaiu_pos(log2ceil((ccpParams.nWays?ccpParams.nWays:1)))-1=\:0]		ccp_fd_way;
wire                    ccp_fd_full;
wire 			ccp_fd_last;
wire [\=BWL-1=\:0]		ccp_fd_beat;
wire [\=axiParams.wAddr-1=\:0]		ccp_fd_addr;
wire [\=log2ceil(OCN)-1=\:0]		ccp_fd_oid;
wire			ccp_fd_done;
wire [\=log2ceil(OCN)-1=\:0] 		ccp_fd_nid;
wire			ccp_ft_ready;
wire			ccp_ft_valid;
wire [\=CSW-1=\:0]		ccp_ft_state;
wire [\=axiParams.wAddr-1=\:0]		ccp_ft_addr;
wire			ccp_ft_security;
wire [\=ioaiu_pos(log2ceil((ccpParams.nWays?ccpParams.nWays:1)))-1=\:0]		ccp_ft_way;
wire			ccp_cd_ready;
wire			ccp_cd_valid;
wire [\=(enPoison?/* istanbul ignore next env ncore_3p7 */modified_wData/64:1)-1=\:0]		ccp_cd_poison;
wire [\=modified_wData-1=\:0]		ccp_cd_rdata;
wire [\=modified_wData/8-1=\:0]		ccp_cd_be;
wire			ccp_cd_last;
wire			ccp_cd_cancel;
wire			ccp_cw_ready;
wire			ccp_cw_valid;
wire [\=(enPoison?/* istanbul ignore next env ncore_3p7 */modified_wData/64:1)-1=\:0]		ccp_cw_poison;
wire [\=modified_wData-1=\:0]		ccp_cw_wdata;
wire [\=modified_wData/8-1=\:0]		ccp_cw_be;
wire [\=BWL-1=\:0]		ccp_cw_offset;
wire			ccp_cw_last;
wire			ccp_ce_ready;
wire			ccp_ce_valid;
wire [\=(enPoison?/* istanbul ignore next env ncore_3p7 */modified_wData/64:1)-1=\:0]		ccp_ce_poison;
wire [\=modified_wData-1=\:0]		ccp_ce_rdata;
wire [\=modified_wData/8-1=\:0]		ccp_ce_be;
wire			ccp_ce_last;
wire			ccp_ce_cancel;
wire			w_ccp_ec_valid,	w_ccp_eu_valid;
wire			w_ccp_ec_valid_unqual,w_ccp_eu_valid_unqual;
wire [3:0]		w_ccp_ec_type,	w_ccp_eu_type;
wire [7:0]		w_ccp_ec_info,	w_ccp_eu_info;
wire [19:0]		w_ccp_ec_entry,	w_ccp_eu_entry;
wire [5:0]		w_ccp_ec_way,	w_ccp_eu_way;
wire [5:0]		w_ccp_ec_word,	w_ccp_eu_word;
wire [11:0]		w_ccp_ec_addr,	w_ccp_eu_addr;
wire			w_ccp_busy;
wire [3:0]		t_ccp_cmd;

\js if (useSysCohSender || useSysEvtSender) {
\=obj.userLib.bundleFunctions.wiresFromInterface('sys_req_tx_' , concertoInterfaces.SYSReqTxInterface,[],obj.lib.bundle )=\
\=obj.userLib.bundleFunctions.wiresFromInterface('sys_rsp_rx_' , concertoInterfaces.SYSRspRxInterface,[],obj.lib.bundle )=\
\js }
\js if (useSysEvtReceiver || useSysCohReceiver) {
\=obj.userLib.bundleFunctions.wiresFromInterface('sys_req_rx_' , concertoInterfaces.SYSReqRxInterface,[],obj.lib.bundle )=\
\=obj.userLib.bundleFunctions.wiresFromInterface('sys_rsp_tx_' , concertoInterfaces.SYSRspTxInterface,[],obj.lib.bundle )=\
\js }

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (nPerfCounters>0) { \jsend
\jsbegin
pmonInterfaces.evtInterfaces.forEach( evtInterface => { \jsend
\=declareNewStyleInterface( evtInterface )=\ \jsbegin
}); \jsend

\=bundleFunctions.wiresFromInterface(oldStylePmonCsrInterface.name, oldStylePmonCsrInterface.signals, [], obj.lib.bundle)=\
\js }

\=bundleFunctions.wiresFromInterface('prequal_', traceCaptureCsrIfGenerator.signalBundle('slave'), ['CCTRLR_inc_wr','CCTRLR_inc_in','CCTRLR_inc_out','CCTRLR_gain_out'], obj.lib.bundle)=\

// Assigns from above
\js var  index                     = CONC_RX_INTF.findIndex(function(element) {return element.name === 'cmp_rsp_'; });

\js if (index == -1) {
wire [\=ioaiu_pos(concParams.hdrParams.wHProt)-1=\:0]	cmp_rsp_h_prot = {\=ioaiu_pos(concParams.hdrParams.wHProt)=\{1'b0}};
wire [\=ioaiu_pos(concParams.cmpRspParams.wMProt)-1=\:0]	cmp_rsp_m_prot = {\=ioaiu_pos(concParams.cmpRspParams.wMProt)=\{1'b0}};
wire [\=ioaiu_pos(concParams.hdrParams.wPriority)-1=\:0]	cmp_rsp_priority = {\=ioaiu_pos(concParams.hdrParams.wPriority)=\{1'b0}};
wire [7:0]	cmp_rsp_cm_status = {8{1'b0}};
wire [\=concParams.cmpRspParams.wMsgId-1=\:0]	cmp_rsp_r_message_id = {\=concParams.cmpRspParams.wMsgId=\{1'b0}};
wire [\=concParams.hdrParams.wTargetId-1=\:0]	cmp_rsp_target_id = {\=concParams.hdrParams.wTargetId=\{1'b0}};
wire [\=concParams.hdrParams.wInitiatorId-1=\:0]	cmp_rsp_initiator_id = {\=concParams.hdrParams.wInitiatorId=\{1'b0}};
wire [7:0]	cmp_rsp_cm_type = {8{1'b0}};
wire [\=concParams.hdrParams.wMsgId-1=\:0]	cmp_rsp_message_id = {\=concParams.hdrParams.wMsgId=\{1'b0}};
wire		cmp_rsp_tm = 1'b0;
wire		cmp_rsp_valid = 1'b0;
wire		cmp_rsp_ready;
\js }

assign          dtr_req_tx_mpf1 = \=DTRReqTXInterface.mpf1=\'h0;
wire [\=ioaiu_pos(concParams.dtrReqParams.wNdpAux)-1=\:0] dtr_req_tx_aux = {\=ioaiu_pos(concParams.dtrReqParams.wNdpAux)=\{1'b0}};
wire [\=ioaiu_pos(concParams.dtwReqParams.wNdpAux)-1=\:0] dtw_req_aux = {\=ioaiu_pos(concParams.dtwReqParams.wNdpAux)=\{1'b0}};
wire [1:0]      dtr_rsp_rx_rl = 2'h0;
assign          str_rsp_cm_type = \=cm_type.StrRsp=\;
assign          snp_rsp_intf_size = cmd_req_intf_size;

\js if (err_port_keys.length == 0) {
wire		cmd_rsp_CE, cmd_rsp_header_UCE, cmd_rsp_message_UCE;
wire		dtr_rsp_rx_CE, dtr_rsp_rx_header_UCE, dtr_rsp_rx_message_UCE;
wire		dtw_rsp_CE, dtw_rsp_header_UCE, dtw_rsp_message_UCE;
wire		upd_rsp_CE, upd_rsp_header_UCE, upd_rsp_message_UCE;
wire		str_req_CE, str_req_header_UCE, str_req_message_UCE;
wire		dtr_req_rx_CE, dtr_req_rx_header_UCE, dtr_req_rx_message_UCE,
						      dtr_req_rx_data_UCE;
wire		snp_req_CE, snp_req_header_UCE, snp_req_message_UCE;
wire            dtw_dbg_rsp_CE,dtw_dbg_rsp_header_UCE, dtw_dbg_rsp_message_UCE;
wire		cmp_rsp_CE, cmp_rsp_header_UCE, cmp_rsp_message_UCE;
\js }

wire            cmd_req_ql, dtr_req_tx_ql, dtw_req_ql, upd_req_ql, str_rsp_ql, dtr_rsp_tx_ql, snp_rsp_ql;

\js /* istanbul ignore if env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */ if (CMDReqInterface.aux == 0) {
   wire cmd_req_aux;
\js }

\js if (CMDReqInterface.priority == 0) {
   wire cmd_req_priority;
\js }

\js if (CMDReqInterface.qos == 0) {
   wire cmd_req_qos;
\js }

\jsbegin /* istanbul ignore next env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
 if (DTRReqTXInterface.user == 0) { \jsend
   wire dtr_req_tx_user;
\js }

\js if (DTRReqTXInterface.priority == 0) {
   wire dtr_req_tx_priority;
\js }

\jsbegin /* istanbul ignore next env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
 if (DTWReqInterface.user == 0) { \jsend
   wire dtw_req_user;
\js }

\js if (DTWReqInterface.priority == 0) {
   wire dtw_req_priority;
\js }

\js if (UPDReqInterface.priority == 0) {
   wire upd_req_priority;
\js }

\js if (UPDReqInterface.qos == 0) {
   wire upd_req_qos;
\js }

\js if (STRRspInterface.priority == 0) {
   wire str_rsp_priority;
\js }

\js if (DTRRspTXInterface.priority == 0) {
   wire dtr_rsp_tx_priority;
\js }

\js if (SNPRspInterface.priority == 0) {
   wire snp_rsp_priority;
\js }

//=============================================================================
// Create DTW Trace Wires
//=============================================================================

//obj.userLib.bundleFunctions.wiresFromInterface('dtw_dbg_req_', DTWDbgReqInterface, [], obj.lib.bundle)
//obj.userLib.bundleFunctions.wiresFromInterface('dtw_dbg_rsp_', DTWDbgRspInterface, [], obj.lib.bundle)

//wire dtw_dbg_rsp_CE;
//wire dtw_dbg_rsp_header_UCE;
//wire dtw_dbg_rsp_message_UCE;

wire chk_ar_perr;
wire chk_aw_perr;
wire chk_w_perr;
wire chk_cr_perr;
wire chk_cd_perr;
wire chk_r_perr;
wire chk_b_perr;
wire chk_ac_perr;
wire chk_rack_perr;
wire chk_wack_perr;
wire chk_perr;
wire            t_ar_trace,	t_aw_trace;
wire [\=(axiParams.wRegion?/* istanbul ignore next env ncore_3p7 */axiParams.wRegion:1)-1=\:0]	t_ar_region,	t_aw_region; 
wire [\=(axiParams.wQos?axiParams.wQos:1)-1=\:0]	t_ar_qos,	t_aw_qos;
wire [\=Math.max(axiParams.wArId,axiParams.wAwId)-1=\:0]	t_ar_id,	t_aw_id;
wire [\=ioaiu_pos(axiParams.eDomain?4:0)-1=\:0]	t_ar_snoop,	t_aw_snoop;
wire [\=Math.max(axiParams.wArUser,axiParams.wAwUser,1)=\-1:0]	t_ar_user,	t_aw_user;
wire [\=ioaiu_pos(axiParams.eDomain?2:0)-1=\:0]	t_ar_domain,	t_aw_domain, 
     t_ar_bar,	t_aw_bar;
wire				t_aw_unique;
wire [\=(axiParams.eAtomic?6:1)-1=\:0]			t_aw_atop;
wire [\=(axiParams.eStash?FIDW+7:1)-1=\:0]			t_aw_stashid;
wire [\=Math.max(axiParams.wWUser,1)-1=\:0]			t_w_user;
wire		t_rack,		t_wack;
wire [\=Math.max(axiParams.wArId,axiParams.wAwId)-1=\:0]	t_r_id;
wire [\=Math.max(axiParams.wArId,axiParams.wAwId)-1=\:0]	t_b_id;
wire            t_w_trace;
wire            t_r_trace;
wire            t_b_trace;

wire		t_ac_ready;
wire [\=axiParams.wAddr-1=\:0]   t_ac_addr;
wire [3:0]      t_ac_snoop;
wire [2:0]      t_ac_prot;
wire            t_ac_trace;
wire [3:0]      t_ac_vmidext;
wire [3:0]      t_ar_vmidext;
wire		t_cr_valid;
wire		t_cr_ready;
wire [4:0]	t_cr_resp;
wire		t_cd_valid;
wire		t_cd_ready;
wire [\=ioaiu_pos(axiParams.wCdData?axiParams.wCdData:0)-1=\:0]	t_cd_data;
wire [\=ioaiu_pos(enPoison?/* istanbul ignore next env ncore_3p7 */(axiParams.wCdData?axiParams.wCdData:0)/64:0)-1=\:0]	t_cd_poison;
wire		t_cd_last;

wire [\=axiParams.wAddr-1=\:0]	w_mrc_addr, w_mru_addr;
wire		w_pph_uerr, w_pph_cerr;
wire [5:0]	w_uerrs_unqual;
wire [5:0]	w_uerrs;
wire [2:0]	w_cerrs;
wire [2:0]	w_cerrs_unqual;
wire [19:0]	w_uinfo;
wire [15:6]	w_cinfo;
wire [19:0]	w_eindex;
wire [5:0]	w_eway;
wire		w_esecurity;
wire [63:0]	w_eaddr;
wire [1:0]	w_starve;
wire [1:0]	w_ctar;
wire		w_idle, w_cm_busy, t_pma_busy, t_busy;

wire			w_amc_val_evict;
wire [\=axiParams.wAddr-1=\:0]		w_amc_addr_evict;
wire [3:0]		w_amc_vals_evict;
wire [\=(3*FIDW)-1=\:0]	w_amc_fids_evict;
wire [(3*5)-1:0]	w_amc_tins_evict;
wire [4:0]		w_amc_order_evict;
wire [4:0]              w_amc_mig_evict;
wire [3:0]              w_amc_size_of_ig_evict;

wire			w_amc_val;
wire [\=axiParams.wAddr-1=\:0]		w_amc_addr;
wire			w_amc_ignore;
wire			w_amc_security;
wire [3:0]		w_amc_vals;
wire [\=(3*FIDW)-1=\:0]	w_amc_fids;
wire [(3*5)-1:0]	w_amc_tins;
wire [4:0]              w_amc_mig;
wire [3:0]		w_amc_errs;
wire [2:0]		w_amc_errs_evict;
wire [3:0]		w_amc_errs_qual;
wire [4:0]		w_amc_order;
wire [3:0]              w_amc_size_of_ig;

wire [1:0]		t_cmr_state;
wire [16:0]		t_cmr_count;

wire [1:0]		q_interrupt;

wire snp_req_uce_bus;
wire snp_req_ce_bus;
wire dtr_req_rx_uce_bus;
wire dtr_req_rx_ce_bus;
wire str_req_uce_bus;
wire str_req_ce_bus;
wire upd_rsp_uce_bus;
wire upd_rsp_ce_bus;
wire dtw_rsp_uce_bus;
wire dtw_rsp_ce_bus;
wire dtr_rsp_rx_uce_bus;
wire dtr_rsp_rx_ce_bus;
wire cmd_rsp_uce_bus;
wire cmd_rsp_ce_bus;
wire cmp_rsp_uce_bus;
wire cmp_rsp_ce_bus;
wire dtw_dbg_rsp_uce_bus;
wire dtw_dbg_rsp_ce_bus;
wire sys_req_rx_uce_bus;
wire sys_req_rx_ce_bus;
wire sys_rsp_rx_uce_bus;
wire sys_rsp_rx_ce_bus;

\js for (let i=0; i<nPerfCounters; i++) {
wire [19:0] XAIUBCNTFR\=i=\_FilterVal_sw_wdata;
wire [19:0] XAIUBCNTMR\=i=\_MaskVal_sw_wdata;
\js }
\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (nPerfCounters>0) { \jsend
wire  [1:0] XAIULCNTCR_LatencyPreScale_sw_wdata;
wire  [7:0] XAIULCNTCR_LatencyBinOffset_sw_wdata;
\js }
wire  [\=wFUnitId-1=\:0] pmon_cmdreq_write_BWfunit_id;
wire  [\=wFUnitId-1=\:0] pmon_cmdreq_read_BWfunit_id;
\js /* istanbul ignore if env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */ if (CMDReqInterface.aux == 0) {
wire pmon_cmdreq_write_BWuser;
wire pmon_cmdreq_read_BWuser;
\js } else {
wire [\=CMDReqInterface.aux-1=\:0] pmon_cmdreq_write_BWuser;
wire [\=CMDReqInterface.aux-1=\:0] pmon_cmdreq_read_BWuser;
\js }
wire  [\=wFUnitId-1=\:0] pmon_snprsp_BWfunit_id;
wire        pmon_snprsp_BWuser;
wire [\=OCN-1=\:0] read_latency_alloc;
wire [\=OCN-1=\:0] read_latency_dealloc;
wire [\=OCN-1=\:0] wr_latency_alloc;
wire [\=OCN-1=\:0] wr_latency_dealloc;

wire pmon_starvation_event;
wire pmon_div_by_sixteen;
wire pmon_address_collision;
wire pmon_agent_event_out;
wire pmon_noc_sys_req_event;
wire pmon_cache_r_hit;
wire pmon_cache_w_hit;
wire pmon_cache_s_hit;
wire pmon_cache_evict;
wire pmon_no_ways;
wire pmon_cache_f_stall;
wire pmon_cache_r_stall;
wire pmon_cache_w_stall;
wire pmon_cache_replay;
wire pmon_cache_r_miss;
wire pmon_cache_w_miss;
wire pmon_cache_s_miss;
wire [7:0] pmon_ott_entries;
wire [7:0] pmon_ott_entries_q;
wire [\=OCN-1=\:0] pmon_ott_read_latency_alloc;
wire [\=OCN-1=\:0] pmon_ott_read_latency_dealloc;
wire [\=OCN-1=\:0] pmon_ott_write_latency_alloc;
wire [\=OCN-1=\:0] pmon_ott_write_latency_dealloc;
\js for (let i=0; i<nPerfCounters; i++) {
wire XAIUBCNTFR\=i=\_FilterSel_sw_wdata;
wire XAIUBCNTFR\=i=\_FilterEn_sw_wdata;
wire XAIUBCNTFR\=i=\_sw_wr;
wire XAIUBCNTMR\=i=\_sw_wr;
wire XAIUBCNTFR\=i=\_sw_rd;
wire XAIUBCNTMR\=i=\_sw_rd;
\js }
\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (nPerfCounters>0) { \jsend
wire XAIULCNTCR_LatencyCountEn_sw_wdata;
wire XAIULCNTCR_RdWrLatency_sw_wdata;
wire XAIULCNTCR_sw_wr;
wire XAIULCNTCR_sw_rd;

wire XAIUMCNTCR_LocalCountEnable_sw_wdata;
wire XAIUMCNTCR_LocalCountClear_sw_wdata;
wire XAIUMCNTCR_sw_wr;
wire XAIUMCNTCR_sw_rd;
\js }

wire bra_region_hit;
wire gpr_region_hit;
wire nrs_region_hit;

wire bra_region_hit_evict;
wire gpr_region_hit_evict;
wire nrs_region_hit_evict;

wire csr_access_nrs_error;

wire XAIUTCR_EventDisable_out;
wire XAIUTCR_SysCoDisable_out;

wire		test_en = test_en_i;
wire		w_gtest_en = test_en_i;
wire		w_greset_n = reset_n;
wire		w_gclk;
wire		t_cfg_gce = XAIUEDR1_cfg_out[31];

wire csr_sys_evt_sender_enable;
wire csr_sys_evt_sender_err_vld;
wire [\=wFUnitId-1=\:0] csr_sys_evt_sender_err_f_unit_id;
wire csr_sys_evt_sender_err_protocol_sys;
wire csr_sys_evt_sender_err_protocol_timeout;
wire csr_sys_evt_sender_err_event_timeout;

\js if (useSysCohSender) {

wire csr_sys_coh_sender_connecting_q;
wire csr_sys_coh_sender_attached_q;

wire XAIUTAR_SysCoConnecting_in = csr_sys_coh_sender_connecting;
wire XAIUTAR_SysCoConnecting_wr = csr_sys_coh_sender_connecting ^ csr_sys_coh_sender_connecting_q;
wire XAIUTAR_SysCoAttached_in   = csr_sys_coh_sender_attached;
wire XAIUTAR_SysCoAttached_wr   = csr_sys_coh_sender_attached ^ csr_sys_coh_sender_attached_q;
wire XAIUTAR_SysCoError_in      = csr_sys_coh_sender_syscoerr_set & ~csr_sys_coh_sender_syscoerr_clr;
wire XAIUTAR_SysCoError_wr      = csr_sys_coh_sender_syscoerr_set | csr_sys_coh_sender_syscoerr_clr;

\js } else {

wire XAIUTAR_SysCoConnecting_in = 1'b0;
wire XAIUTAR_SysCoConnecting_wr = 1'b0;
wire XAIUTAR_SysCoAttached_in   = 1'b0;
wire XAIUTAR_SysCoAttached_wr   = 1'b0;
wire XAIUTAR_SysCoError_in      = 1'b0;
wire XAIUTAR_SysCoError_wr      = 1'b0;

\js }

\js if (useSysEvtReceiver || useSysCohSender || useSysEvtSender || useSysCohReceiver) {
wire sys_evt_coh_busy;
\jsbegin }

if (useEventOutInt) { \jsend
  wire event_in_targets = 1'b1; \jsbegin 
} \jsend


\js if (useSysCohSender) {

\=obj.lib.dffre(1, 'csr_sys_coh_sender_connecting_q', 'csr_sys_coh_sender_connecting', "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'csr_sys_coh_sender_attached_q',   'csr_sys_coh_sender_attached',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\

\js }

\js if (useSysEvtReceiver) {
assign csr_sys_evt_receiver_enable = ~XAIUTCR_EventDisable_out;
\js }

\js if (useSysCohSender) {
assign csr_sys_coh_sender_enable   = ~XAIUTCR_SysCoDisable_out;
\js } else {
assign csr_sys_coh_sender_enable   = 1'b0;
\js }

\js if (useSysCohSender) {
assign csr_sys_coh_sender_activate = XAIUTCR_SysCoAttach_out;
\js }

\js if (useEventOutInt) {
assign csr_sys_evt_sender_enable =  ~XAIUTCR_EventDisable_out;
\js }

\js if (useSysEvtSender || useSysEvtReceiver) {
assign csr_event_timeout_value     = {|{XAIUEHTOCR_TimeOutThreshold_out}} ? ({|{XAIUEHTOCR_TimeOutThreshold_out[30:8]}} ? {\=wProtocolTimeout=\{1'b1}} : {XAIUEHTOCR_TimeOutThreshold_out[7:0], {12{1'b0}}}) : {\=wProtocolTimeout=\{1'b0}};
\js }
\js if (useSysEvtSender) {
assign csr_sys_evt_protocol_timeout_value  = {|{XAIUSEPTOCR_TimeOutThreshold_out}} ? ({|{XAIUSEPTOCR_TimeOutThreshold_out[30:8]}} ? {\=wProtocolTimeout=\{1'b1}} : {XAIUSEPTOCR_TimeOutThreshold_out[7:0], {12{1'b0}}}) : {\=wProtocolTimeout=\{1'b0}};
\js }
\js if (useSysCohSender) {
assign csr_sys_coh_protocol_timeout_value  = {|{XAIUSCPTOCR_TimeOutThreshold_out}} ? ({|{XAIUSCPTOCR_TimeOutThreshold_out[30:8]}} ? {\=wProtocolTimeout=\{1'b1}} : {XAIUSCPTOCR_TimeOutThreshold_out[7:0], {12{1'b0}}}) : {\=wProtocolTimeout=\{1'b0}};
\js }

\js if (useSysEvtReceiver) {
   \js if (!useEventInInt) {
\=u.dffre(1, `event_out_ack`, `event_out_req`, `1'b0`, `dff_enable`, cm_ports.clk, cm_ports.reset_n)=\
    \js }
\js }

\jsbegin
var sys_evt_coh_concerto_params = {
   wFUnitId :          wFUnitId,
   wFPortId : 	       wFPortId,
   wNUnitId : 	       wNUnitId,
   concParams :        concParams,
   cmType :   	       cm_type,
   useSysEvtSender :   useSysEvtSender,
   useSysEvtReceiver : useSysEvtReceiver,
   useSysCoh : 	       useSysCohSender,
   useSysCohSender :   useSysCohSender,
   useSysCoHwInterface : 1,
   useSysCohEnable : 1,
   nCoherencyAgents :  nCoherencyAgents,
   nEventAgentsForReceiver : nEventAgentsForReceiver,
   wEventTimeout :     wEventTimeout,
   wProtocolTimeout :  wProtocolTimeout
};
if (useSysEvtSender || useSysCohSender) {
    sys_evt_coh_concerto_params["sysReqTxInterface"] = concertoInterfaces.SYSReqTxInterface;
    sys_evt_coh_concerto_params["sysRspRxInterface"] = concertoInterfaces.SYSRspRxInterface;
}
if (useSysEvtReceiver || useSysCohReceiver) {
    sys_evt_coh_concerto_params["sysReqRxInterface"] = concertoInterfaces.SYSReqRxInterface;
    sys_evt_coh_concerto_params["sysRspTxInterface"] = concertoInterfaces.SYSRspTxInterface;
}
if (useEventOutInt){
  sys_evt_coh_concerto_params['nEventAgentsForSender'] = nDVEs; 
}
var instance_ports_for_sys_evt_coh_concerto = {
   clk :                             cm_ports.clk,
   reset_n :                         cm_ports.reset_n,
   my_f_unit_id :                    'fu_id_i',
};
if (useSysEvtSender || useSysEvtReceiver) {
    instance_ports_for_sys_evt_coh_concerto["csr_event_timeout_value"] = 'csr_event_timeout_value';
}
if (useSysEvtSender) {
  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_protocol_timeout_value'] = 'csr_sys_evt_protocol_timeout_value';
}
if (useSysCohSender) {
  instance_ports_for_sys_evt_coh_concerto['csr_sys_coh_protocol_timeout_value'] = 'csr_sys_coh_protocol_timeout_value';
}
if (useSysEvtReceiver) {
    instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_enable"]            = 'csr_sys_evt_receiver_enable';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_err_vld"]           = 'csr_sys_evt_receiver_err_vld';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_err_event_timeout"] = 'csr_sys_evt_receiver_err_event_timeout';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_err_f_unit_id"]     = 'csr_sys_evt_receiver_err_f_unit_id';
}
if (useSysCohSender) {
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_enable"]              = 'csr_sys_coh_sender_enable';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_activate"]            = 'csr_sys_coh_sender_activate';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_connecting"]          = 'csr_sys_coh_sender_connecting';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_attached"]            = 'csr_sys_coh_sender_attached';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_syscoerr_set"]        = 'csr_sys_coh_sender_syscoerr_set';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_syscoerr_clr"]        = 'csr_sys_coh_sender_syscoerr_clr';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_err_detected"]        = 'csr_sys_coh_sender_err_detected';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_err_f_unit_id"]       = 'csr_sys_coh_sender_err_f_unit_id';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_err_protocol_sys"]    = 'csr_sys_coh_sender_err_protocol_sys';
    instance_ports_for_sys_evt_coh_concerto["csr_sys_coh_sender_err_protocol_timeout"]= 'csr_sys_coh_sender_err_protocol_timeout';
}
if (useSysEvtReceiver) {
  if (useEventInInt) {
    instance_ports_for_sys_evt_coh_concerto["event_out_req"] = eventRequestOutInterface.name+"out__req";
    instance_ports_for_sys_evt_coh_concerto["event_out_ack"] = eventRequestOutInterface.name+"out__ack";
    instance_ports_for_sys_evt_coh_concerto["event_out_initiator_id"] = 'event_out_initiator_id';
  } else{
    instance_ports_for_sys_evt_coh_concerto["event_out_req"] = 'event_out_req';
    instance_ports_for_sys_evt_coh_concerto["event_out_ack"] = 'event_out_ack';
    instance_ports_for_sys_evt_coh_concerto["event_out_initiator_id"] = 'event_out_initiator_id';
  }
 }
if (useSysCohSender) {
    instance_ports_for_sys_evt_coh_concerto["sysco_req"] = 'my_sysco_req';
    instance_ports_for_sys_evt_coh_concerto["sysco_ack"] = 'my_sysco_ack';
    instance_ports_for_sys_evt_coh_concerto["outstanding_coherent_count_zero"] = 'outstanding_coherent_count_zero';
}
if (useSysEvtSender || useSysEvtReceiver || useSysEvtSender || useSysCohSender) {
    instance_ports_for_sys_evt_coh_concerto["busy"] = 'sys_evt_coh_busy';
};
if (isCachingAgent && isDvmAgent) {
    for (var i=0; i < nCoherencyAgents; i++) {
        if (i < nAiuConnectedDces) {
instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = 'hexAiuConnectedDceFunitId' + '[' + (((i+1)*FIDW)-1) + ':' + (i*FIDW) + ']';
        } else {
instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = 'dve_ids_i';
        }
    }
} else if (isCachingAgent) {
    for (var i=0; i < nCoherencyAgents; i++) {
instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = 'hexAiuConnectedDceFunitId' + '[' + (((i+1)*FIDW)-1) + ':' + (i*FIDW) + ']';
    }
} else {
    /* istanbul ignore if env ncore_3p4,ncore_3p6,ncore_3p7*/
    if (isDvmAgent) {
      for (var i=0; i < nCoherencyAgents; i++) {
        instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = 'dve_ids_i';
      }
    } else {
        for (var i=0; i < nCoherencyAgents; i++) {
          instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = 'dve_ids_i';
        }
    }
}

if (useEventOutInt){
	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_enable'] = 'csr_sys_evt_sender_enable';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_vld'] = 'csr_sys_evt_sender_err_vld';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_f_unit_id'] = 'csr_sys_evt_sender_err_f_unit_id';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_protocol_sys'] = 'csr_sys_evt_sender_err_protocol_sys';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_protocol_timeout'] =  'csr_sys_evt_sender_err_protocol_timeout';
       	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_event_timeout'] = 'csr_sys_evt_sender_err_event_timeout';
       	  instance_ports_for_sys_evt_coh_concerto['event_in_req'] = eventRequestInInterfaceJson.name+"in__req";
     	  instance_ports_for_sys_evt_coh_concerto['event_in_ack'] = eventRequestInInterfaceJson.name+"in__ack";
    	  instance_ports_for_sys_evt_coh_concerto['event_in_targets'] = 'event_in_targets';

	  for (i=0; i < nDVEs; i++) {
	    instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = 'dve_ids_i';
	  }
	}
	else { \jsend
	assign csr_sys_evt_sender_err_vld 		 = 1'b0;
	assign csr_sys_evt_sender_err_f_unit_id 	 = \=wFUnitId=\'b0;
	assign csr_sys_evt_sender_err_protocol_sys 	 = 1'b0;
	assign csr_sys_evt_sender_err_protocol_timeout 	 = 1'b0;
	assign csr_sys_evt_sender_err_event_timeout 	 = 1'b0; \jsbegin
	}

var interfaces_for_sys_evt_coh_concerto = [];
if (useSysCohSender || useSysEvtSender) {
    interfaces_for_sys_evt_coh_concerto.push({modulePrefix: 'sys_req_tx_', localPrefix: 'sys_req_tx_', interface: concertoInterfaces.SYSReqTxInterface});
    interfaces_for_sys_evt_coh_concerto.push({modulePrefix: 'sys_rsp_rx_', localPrefix: 'sys_rsp_rx_', interface: concertoInterfaces.SYSRspRxInterface});
}
if (useSysCohReceiver || useSysEvtReceiver) {
    interfaces_for_sys_evt_coh_concerto.push({modulePrefix: 'sys_req_rx_', localPrefix: 'sys_req_rx_', interface: concertoInterfaces.SYSReqRxInterface});
    interfaces_for_sys_evt_coh_concerto.push({modulePrefix: 'sys_rsp_tx_', localPrefix: 'sys_rsp_tx_', interface: concertoInterfaces.SYSRspTxInterface});
}
\jsend

\js if (useSysCohSender || useSysEvtSender || useSysCohReceiver || useSysEvtReceiver) {

\=obj.lib.instance({
  instanceName: 'u_sys_evt_coh_concerto',
  moduleName:   'sys_evt_coh_concerto',
  params:       sys_evt_coh_concerto_params,
  ports:        instance_ports_for_sys_evt_coh_concerto,
  interfaces:    interfaces_for_sys_evt_coh_concerto
})=\

\js }

\js if (useSysCohSender) {
\js } else {
assign csr_sys_coh_sender_err_detected = 1'b0;
assign csr_sys_coh_sender_err_protocol_timeout = 1'b0;
\js }
\js if (useSysEvtReceiver) {
\js } else {
assign csr_sys_evt_receiver_err_vld = 1'b0;
assign csr_sys_evt_receiver_err_event_timeout = 1'b0;
\js }


\js if (useSysCohSender) {

assign my_co_state_disabled = ~my_sysco_req & ~my_sysco_ack;
assign my_co_state_connect = my_sysco_req & ~my_sysco_ack;
assign my_co_state_enabled = my_sysco_req & my_sysco_ack;
assign my_co_state_disconnect = ~my_sysco_req & my_sysco_ack;

\js }

\js if (useSysEvtReceiver) {
  \js if (useEventInInt) {
     wire \=eventRequestOutInterface.name=\out__req_q;

     \=u.dffre(1, eventRequestOutInterface.name+`out__req_q`, eventRequestOutInterface.name+`out__req`, `1'b0`, `1'b1`, `w_gclk`, `reset_n`)=\

     assign pmon_agent_event_out = \=eventRequestOutInterface.name=\out__req && ~\=eventRequestOutInterface.name=\out__req_q;
  
  \js } else {

 wire event_out_req_q;

 \=u.dffre(1, `event_out_req_q`, `event_out_req`, `1'b0`, `1'b1`, `w_gclk`, `reset_n`)=\

 assign pmon_agent_event_out = event_out_req & ~event_out_req_q;

 \js } 
\js} else {
assign pmon_agent_event_out = 1'b0;
\js }


\js if (useSysEvtReceiver) {
assign pmon_noc_sys_req_event = sys_req_rx_valid & sys_req_rx_ready & (sys_req_rx_sys_req_op == 4'd\=SYSREQ_OP_EVENT=\);
\js } else {
assign pmon_noc_sys_req_event = 1'b0;
\js }

  wire		t_gce;
\js if (CGE) {

  wire bist_timeout_trigger_q;
  \=u.dffre(1, `bist_timeout_trigger_q`, `bist_timeout_trigger`, `1'b0`, `1'b1`, `clk`, `reset_n`)=\


    assign t_gce = t_cfg_gce | t_busy | apb_penable | bist_timeout_trigger | bist_timeout_trigger_q;
\=obj.lib.instance ({
	moduleName: 'cg',
	instanceName: 'cg',
	params: {width: 1},
	verilogParams: {},
	ports: {
		clk_in:		'clk',
		clk_out:	'w_gclk',
		test_en:	'test_en_i',
		en:		't_gce'
	},
	portsDelimiter: '\n\t'
})=\
\js } else {
    assign w_gclk = clk;
    assign t_gce = 1'b0;
\js }

assign XAIUTAR_TransActv_in = t_busy;
assign XAIUTAR_TransActv_wr = 1'b1;

assign t_csr_id = 32'h0 |
		  (32'b1 << 31) |	//XAIUIDR_Valid
		  ({{\=32-NIDW=\{1'b0}},nu_id_i} << 12) |	//XAIUIDR_NUnitId
		  ({{\=32-NRRW=\{1'b0}},nrr_id_i} << 8) |	//XAIUIDR_NRRI
		  ({{\=32-RPNW=\{1'b0}},rpn_id_i} << 0);	//XAIUIDR_RPN

wire [\=ioaiu_pos(concParams.hdrParams.wPriority)-1=\:0]	snp_req_priority_bl;
wire [\=ioaiu_pos(concParams.hdrParams.wPriority)-1=\:0]	dtr_req_rx_priority_bl;

\js if (SnpReqInterface.priority == 0 | SnpReqInterface.priority == undefined) {
wire [\=ioaiu_pos(concParams.hdrParams.wPriority)-1=\:0]	snp_req_priority;
wire [\=ioaiu_pos(concParams.hdrParams.wPriority)-1=\:0]	dtr_req_rx_priority;
\js }

\js if (concParams.hdrParams.wPriority) {
assign dtr_req_rx_priority_bl = dtr_req_rx_priority;
assign snp_req_priority_bl = snp_req_priority;
\js } else {
assign dtr_req_rx_priority_bl = {\=ioaiu_pos(concParams.hdrParams.wPriority)=\{1'b0}};
assign snp_req_priority_bl = {\=ioaiu_pos(concParams.hdrParams.wPriority)=\{1'b0}};
\js }

\jsbegin
// Poison not supported on 3.7
/* istanbul ignore else env ncore_3p7 */
if (!enPoison) { \jsend
wire t_w_poison = 1'b0;
wire t_r_poison;
\js }

\jsbegin
var controlPorts = {
		myid_i:		'myid_i',
		dce_ids_i:	'dce_ids_i',
		dmi_ids_i:	'dmi_ids_i',
		dii_ids_i:	'dii_ids_i',
		dve_ids_i:	'dve_ids_i',
		external_i:	'external_i',
		csr_id_i:	't_csr_id',
//		clk_i:		'w_gclk', // remove for moving clkcg inside control
		clk_en:         't_gce', // add clk enable for clkcg
		clk_i_ng:	'clk',
                test_en_i:      'test_en_i',
		reset_ni:	'reset_n',

		ar_ready_o:	shimStr+'ar_ready',
		ar_valid_i:	shimStr+'ar_valid',
		ar_addr_i:	shimStr+'ar_addr',
		ar_len_i:	shimStr+'ar_len',
		ar_size_i:	shimStr+'ar_size',
		ar_burst_i:	shimStr+'ar_burst',
		ar_lock_i:	shimStr+'ar_lock',
		ar_cache_i:	shimStr+'ar_cache',
		ar_prot_i:	shimStr+'ar_prot',
		ar_region_i:	`1'b0`,	    //region not supported t_arregion',
		ar_qos_i:	't_ar_qos',
		ar_id_i:	't_ar_id',
		ar_bar_i:	't_ar_bar',
		ar_vmidext_i:	't_ar_vmidext',
		ar_snoop_i:	't_ar_snoop',
		ar_domain_i:	't_ar_domain',
		ar_user_i:	't_ar_user',
		ar_track_i:	't_ar_trace',
		
		dr_ready_i:	shimStr+'r_ready',
		dr_valid_o:	shimStr+'r_valid',
		dr_rdata_o:	shimStr+'r_data',
		dr_last_o:	shimStr+'r_last',
		dr_resp_o:	shimStr+'r_resp',
		dr_id_o:	't_r_id',
		dr_user_o:	shimStr+'r_user',
		dr_track_o:	't_r_trace',
		dr_poison_o:	't_r_poison',
		
		aw_ready_o:	shimStr+'aw_ready',
		aw_valid_i:	shimStr+'aw_valid',
		aw_addr_i:	shimStr+'aw_addr',
		aw_len_i:	shimStr+'aw_len',
		aw_size_i:	shimStr+'aw_size',
		aw_burst_i:	shimStr+'aw_burst',
		aw_lock_i:	shimStr+'aw_lock',
		aw_cache_i:	shimStr+'aw_cache',
		aw_prot_i:	shimStr+'aw_prot',
		aw_region_i:	`1'b0`,	    //region not supported t_awregion',
		aw_qos_i:	't_aw_qos',
		aw_id_i:	't_aw_id',
		aw_bar_i:	't_aw_bar',
		aw_snoop_i:	't_aw_snoop',
		aw_domain_i:	't_aw_domain',
		aw_user_i:	't_aw_user',
		aw_track_i:	't_aw_trace',
		aw_atop_i:	't_aw_atop',
		aw_stashid_i:	't_aw_stashid',
	
		dw_ready_o:	shimStr+'w_ready',
		dw_valid_i:	shimStr+'w_valid',
		dw_wdata_i:	shimStr+'w_data',
		dw_poison_i:	't_w_poison',
		dw_be_i:	shimStr+'w_strb',
		dw_last_i:	shimStr+'w_last',
		dw_user_i:	't_w_user',
		dw_trace_i:	't_w_trace',
		
		pw_ready_i:	shimStr+'b_ready',
		pw_valid_o:	shimStr+'b_valid',
		pw_resp_o:	shimStr+'b_resp',
		pw_id_o:	't_b_id',
		pw_user_o:	shimStr+'b_user',
		pw_track_o:	't_b_trace',
		
		wack_i:		't_wack',
		rack_i:		't_rack',
		
		ac_valid_o:	shimStr+'ac_valid',
		ac_ready_i:	shimStr+'ac_ready',
		ac_addr_o:	shimStr+'ac_addr',
		ac_snoop_o:	shimStr+'ac_snoop',
		ac_prot_o:	shimStr+'ac_prot',
		ac_track_o:	shimStr+'ac_trace',		
		ac_vmidext_o:	shimStr+'ac_vmidext',

		cr_ready_o:	't_cr_ready',
		cr_valid_i:	't_cr_valid',
		cr_resp_i:	't_cr_resp',
		
		cd_ready_o:	't_cd_ready',
		cd_valid_i:	't_cd_valid',
		cd_data_i:	't_cd_data',
		cd_poison_i:	't_cd_poison',
		cd_last_i:	't_cd_last',

	cmd_req_ready_i:	'cmd_req_ready',
	cmd_req_valid_o:	'cmd_req_valid',
	cmd_req_tid_o:	'cmd_req_target_id',
	cmd_req_iid_o:	'cmd_req_initiator_id',
	cmd_req_mid_o:	'cmd_req_message_id',
	cmd_req_cmd_o:	'cmd_req_cm_type',
	cmd_req_pri_o:	'cmd_req_priority',
	cmd_req_ql_o:	'cmd_req_ql',
	cmd_req_status_o:	'cmd_req_cm_status',
	cmd_req_addr_o:	'w_mrc_addr',
	cmd_req_attr_o:	`{cmd_req_tm, cmd_req_rl, cmd_req_lk, cmd_req_or, cmd_req_pr,
			  cmd_req_ns, cmd_req_es, cmd_req_en, cmd_req_st, cmd_req_ch,
			  cmd_req_ca, cmd_req_ac, cmd_req_vz}`,
	cmd_req_mpf1_o:	'cmd_req_mpf1',
	cmd_req_mpf2_o:	'cmd_req_mpf2',
	cmd_req_size_o:	'cmd_req_size',
	cmd_req_isize_o:	'cmd_req_intf_size',
	cmd_req_did_o:	'cmd_req_d_id',
	cmd_req_tof_o:	'cmd_req_tof',
	cmd_req_qos_o:	'cmd_req_qos',
	cmd_req_aux_o:	'cmd_req_aux',

	dtr_req_tx_ready_i:	'dtr_req_tx_ready',
	dtr_req_tx_valid_o:	'dtr_req_tx_valid',
	dtr_req_tx_last_o:	'dtr_req_tx_last',
	dtr_req_tx_tid_o:	'dtr_req_tx_target_id',
	dtr_req_tx_iid_o:	'dtr_req_tx_initiator_id',
	dtr_req_tx_mid_o:	'dtr_req_tx_message_id',
	dtr_req_tx_rid_o:	'dtr_req_tx_r_message_id',
	dtr_req_tx_cmd_o:	'dtr_req_tx_cm_type',
	dtr_req_tx_pri_o:	'dtr_req_tx_priority',
	dtr_req_tx_ql_o:	'dtr_req_tx_ql',
	dtr_req_tx_status_o:	'dtr_req_tx_cm_status',
	dtr_req_tx_attr_o:	'{dtr_req_tx_tm, dtr_req_tx_rl}',
	dtr_req_tx_dwid_o:	'dtr_req_tx_dwid',
	dtr_req_tx_poison_o:	'dtr_req_tx_dbad',
	dtr_req_tx_data_o:	'dtr_req_tx_data',
	dtr_req_tx_be_o:	'dtr_req_tx_be',
	dtr_req_tx_user_o:	'dtr_req_tx_user',

	dtw_req_ready_i:	'dtw_req_ready',
	dtw_req_valid_o:	'dtw_req_valid',
	dtw_req_last_o:	'dtw_req_last',
	dtw_req_tid_o:	'dtw_req_target_id',
	dtw_req_iid_o:	'dtw_req_initiator_id',
	dtw_req_mid_o:	'dtw_req_message_id',
	dtw_req_bid_o:	'dtw_req_rb_id',
	dtw_req_cmd_o:	'dtw_req_cm_type',
	dtw_req_pri_o:	'dtw_req_priority',
	dtw_req_ql_o:	'dtw_req_ql',
	dtw_req_status_o:	'dtw_req_cm_status',
	dtw_req_attr_o:	'{dtw_req_primary, dtw_req_tm, dtw_req_rl}',
	dtw_req_isize_o:	'dtw_req_intf_size',
	dtw_req_dwid_o:	'dtw_req_dwid',
	dtw_req_poison_o:	'dtw_req_dbad',
	dtw_req_mpf1_o:	'dtw_req_mpf1',
	dtw_req_mpf2_o:	'dtw_req_mpf2',
	dtw_req_data_o:	'dtw_req_data',
	dtw_req_be_o:	'dtw_req_be',
	dtw_req_user_o:	'dtw_req_user',

	upd_req_ready_i:	'upd_req_ready',
	upd_req_valid_o:	'upd_req_valid',
	upd_req_tid_o:	'upd_req_target_id',
	upd_req_iid_o:	'upd_req_initiator_id',
	upd_req_mid_o:	'upd_req_message_id',
	upd_req_cmd_o:	'upd_req_cm_type',
	upd_req_pri_o:	'upd_req_priority',
	upd_req_ql_o:	'upd_req_ql',
	upd_req_status_o:	'upd_req_cm_status',
	upd_req_addr_o:	'w_mru_addr',
	upd_req_attr_o:	'upd_req_ns',
	upd_req_qos_o:	'upd_req_qos',
	upd_req_trace_o:	'upd_req_tm',

	cmd_rsp_ready_o:	'cmd_rsp_ready',
	cmd_rsp_valid_i:	'cmd_rsp_valid',
	cmd_rsp_status_i:	'cmd_rsp_cm_status',
	cmd_rsp_mid_i:	'cmd_rsp_r_message_id',
	cmd_rsp_tid_i:	'cmd_rsp_target_id',
	cmd_rsp_iid_i:	'cmd_rsp_initiator_id',
	cmd_rsp_uce_i:	'cmd_rsp_uce_bus',
	cmd_rsp_ce_i:	'cmd_rsp_ce_bus',
	dtr_rsp_rx_ready_o:	'dtr_rsp_rx_ready',
	dtr_rsp_rx_valid_i:	'dtr_rsp_rx_valid',
	dtr_rsp_rx_status_i:	'dtr_rsp_rx_cm_status',
	dtr_rsp_rx_attr_i:	`{13'h0, dtr_rsp_rx_rl, 1'b0}`,
	dtr_rsp_rx_mid_i:	'dtr_rsp_rx_r_message_id',
	dtr_rsp_rx_tid_i:	'dtr_rsp_rx_target_id',
	dtr_rsp_rx_iid_i:	'dtr_rsp_rx_initiator_id',
	dtr_rsp_rx_uce_i:	'dtr_rsp_rx_uce_bus',
	dtr_rsp_rx_ce_i:	'dtr_rsp_rx_ce_bus',
	dtw_rsp_ready_o:	'dtw_rsp_ready',
	dtw_rsp_valid_i:	'dtw_rsp_valid',
	dtw_rsp_status_i:	'dtw_rsp_cm_status',
//	dtw_rsp_status_i:	`{dtw_rsp_cm_status[7:3],3'd0}`,
	dtw_rsp_mid_i:	'dtw_rsp_r_message_id',
	dtw_rsp_tid_i:	'dtw_rsp_target_id',
	dtw_rsp_iid_i:	'dtw_rsp_initiator_id',
	dtw_rsp_attr_i:	`{14'h0, dtw_rsp_rl}`,
	dtw_rsp_uce_i:	'dtw_rsp_uce_bus',
	dtw_rsp_ce_i:	'dtw_rsp_ce_bus',
	upd_rsp_ready_o:	'upd_rsp_ready',
	upd_rsp_valid_i:	'upd_rsp_valid',
	upd_rsp_status_i:	'upd_rsp_cm_status',
	upd_rsp_mid_i:	'upd_rsp_r_message_id',
	upd_rsp_tid_i:	'upd_rsp_target_id',
	upd_rsp_iid_i:	'upd_rsp_initiator_id',
	upd_rsp_uce_i:	'upd_rsp_uce_bus',
	upd_rsp_ce_i:	'upd_rsp_ce_bus',
	str_req_ready_o:	'str_req_ready',
	str_req_valid_i:	'str_req_valid',
	str_req_cmd_i:	'str_req_cm_type',
	str_req_iid_i:	'str_req_initiator_id',
	str_req_tid_i:	'str_req_target_id',
	str_req_mid_i:	'str_req_message_id',
	str_req_rid_i:	'str_req_r_message_id',
	str_req_bid_i:	'str_req_rb_id',
	str_req_status_i:	'str_req_cm_status',
	str_req_isize_i:	'str_req_intf_size',
	str_req_mpf1_i:	'str_req_mpf1',
	str_req_mpf2_i:	'str_req_mpf2',
	str_req_uce_i:	'str_req_uce_bus',
	str_req_ce_i:	'str_req_ce_bus',
	str_rsp_ready_i:	'str_rsp_ready',
	str_rsp_valid_o:	'str_rsp_valid',
	str_rsp_mid_o:	'str_rsp_message_id',
	str_rsp_trace_o:	'str_rsp_tm',	
	str_rsp_rid_o:	'str_rsp_r_message_id',
	str_rsp_iid_o:	'str_rsp_initiator_id',
	str_rsp_tid_o:	'str_rsp_target_id',
	str_rsp_pri_o:	'str_rsp_priority',
	str_rsp_ql_o:	'str_rsp_ql',
	str_rsp_status_o:	'str_rsp_cm_status',
	dtr_req_rx_ready_o:	'dtr_req_rx_ready',
	dtr_req_rx_valid_i:	'dtr_req_rx_valid',
	dtr_req_rx_last_i:	'dtr_req_rx_last',
	dtr_req_rx_cmd_i:	'dtr_req_rx_cm_type',
	dtr_req_rx_status_i:	'dtr_req_rx_cm_status',
	dtr_req_rx_iid_i:	'dtr_req_rx_initiator_id',
	dtr_req_rx_tid_i:	'dtr_req_rx_target_id',
	dtr_req_rx_mid_i:	'dtr_req_rx_message_id',
	dtr_req_rx_rid_i:	'dtr_req_rx_r_message_id',
	dtr_req_rx_dbad_i:	'dtr_req_rx_dbad',
	dtr_req_rx_data_i:	'dtr_req_rx_data',
	dtr_req_rx_pri_i:	'dtr_req_rx_priority_bl',
	dtr_req_rx_be_i:	'dtr_req_rx_be',
	dtr_req_rx_attr_i:	`{13'h0, dtr_req_rx_tm, dtr_req_rx_rl}`,
	dtr_req_rx_uce_i:	'dtr_req_rx_uce_bus',
	dtr_req_rx_ce_i:	'dtr_req_rx_ce_bus',
	dtr_rsp_tx_ready_i:	'dtr_rsp_tx_ready',
	dtr_rsp_tx_valid_o:	'dtr_rsp_tx_valid',
	dtr_rsp_tx_mid_o:	'dtr_rsp_tx_message_id',
	dtr_rsp_tx_rid_o:	'dtr_rsp_tx_r_message_id',
	dtr_rsp_tx_iid_o:	'dtr_rsp_tx_initiator_id',
	dtr_rsp_tx_tid_o:	'dtr_rsp_tx_target_id',
	dtr_rsp_tx_pri_o:	'dtr_rsp_tx_priority',
	dtr_rsp_tx_trace_o:	'dtr_rsp_tx_tm',	
	dtr_rsp_tx_ql_o:	'dtr_rsp_tx_ql',
	dtr_rsp_tx_cmd_o:	'dtr_rsp_tx_cm_type',
	dtr_rsp_tx_status_o:	'dtr_rsp_tx_cm_status',
	snp_req_ready_o:	'snp_req_ready',
	snp_req_valid_i:	'snp_req_valid',
	snp_req_cmd_i:	'snp_req_cm_type',
	snp_req_status_i:	'snp_req_cm_status',
	snp_req_pri_i:	'snp_req_priority_bl',
	snp_req_mid_i:	'snp_req_message_id',
	snp_req_bid_i:	'snp_req_rb_id',
	snp_req_mpf1_i:	'snp_req_mpf1',
	snp_req_mpf2_i:	'snp_req_mpf2',
	snp_req_mpf3_i:	'snp_req_mpf3',
	snp_req_did_i:	'snp_req_d_id',
	snp_req_iid_i:	'snp_req_initiator_id',
	snp_req_tid_i:	'snp_req_target_id',
	snp_req_addr_i:	'snp_req_addr',
	snp_req_isize_i:	'snp_req_intf_size',
	snp_req_tof_i:	'snp_req_tof',
	snp_req_attr_i:	`{snp_req_tm, snp_req_rl, snp_req_up, snp_req_pr, snp_req_ns,
			  snp_req_ca, snp_req_ac, snp_req_vz}`,
        snp_req_uce_i:      'snp_req_uce_bus',
        snp_req_ce_i:       'snp_req_ce_bus',
	snp_rsp_ready_i:	'snp_rsp_ready',
	snp_rsp_valid_o:	'snp_rsp_valid',
	snp_rsp_mid_o:	'snp_rsp_message_id',
	snp_rsp_rid_o:	'snp_rsp_r_message_id',
	snp_rsp_iid_o:	'snp_rsp_initiator_id',
	snp_rsp_tid_o:	'snp_rsp_target_id',
	snp_rsp_pri_o:	'snp_rsp_priority',
	snp_rsp_ql_o:	'snp_rsp_ql',
	snp_rsp_cmd_o:	'snp_rsp_cm_type',
	snp_rsp_trace_o:	'snp_rsp_tm',	
	snp_rsp_status_o:	'snp_rsp_cm_status',
	snp_rsp_mpf1_o:	'snp_rsp_mpf1',

	cmp_rsp_ready_o:	'cmp_rsp_ready',
	cmp_rsp_valid_i:	'cmp_rsp_valid',
	cmp_rsp_mid_i:	'cmp_rsp_r_message_id',
	cmp_rsp_tid_i:	'cmp_rsp_target_id',
	cmp_rsp_iid_i:	'cmp_rsp_initiator_id',
	cmp_rsp_status_i:	'cmp_rsp_cm_status',
	cmp_rsp_uce_i:	'cmp_rsp_uce_bus',
	cmp_rsp_ce_i:	'cmp_rsp_ce_bus',

		od_we_o:	'od_we_o',
		od_waddr_o:	'od_waddr_o',
		od_wdata_o:	'od_wdata_o',
		od_wecc_o:	'od_wecc_o',
		od_re_o:	'od_re_o',
		od_raddr_o:	'od_raddr_o',
		od_rdata_i:	'od_rdata_i',
		od_recc_i:	'od_recc_i',

		amc_val_evict_o:	 'w_amc_val_evict',
		amc_addr_evict_o:	 'w_amc_addr_evict',
		amc_vals_evict_i:	 'w_amc_vals_evict',

		amc_val_o:	 'w_amc_val',
		amc_addr_o:	 'w_amc_addr',
		amc_ignore_o:	 'w_amc_ignore',
		amc_security_o:	 'w_amc_security',
		amc_vals_i:	 'w_amc_vals',
		amc_fids_i:	 'w_amc_fids',
		amc_tins_i:	 'w_amc_tins',
		amc_mig_i:       'w_amc_mig',
		amc_errs_i:	 'w_amc_errs_qual',
		amc_order_i:	 `w_amc_val ? w_amc_order : 5'b0`,
		amc_size_of_ig_i:'w_amc_size_of_ig',
		amc_nrs_region_hit_i:'nrs_region_hit',
                amc_unconnected_dce_access : 'unconnected_dce_access',
                amc_unconnected_dmi_access : 'unconnected_dmi_access',
                amc_unconnected_dii_access : 'unconnected_dii_access',

		ccp_init_o:	'ccp_init',
		ccp_ready_i:	'ccp_ready',
		cp0_ready_i:	'ccp_p0_ready',
		cp0_valid_o:	'ccp_p0_valid',
		cp0_addr_o:	'ccp_p0_addr',
		cp0_security_o:	'ccp_p0_security',
		cp2_alloc_o:	'ccp_p2_alloc',
		cp2_rd_o:	'ccp_p2_rd',
		cp2_wr_o:	'ccp_p2_wr',
		cp2_port_o:	'ccp_p2_port',
		cp2_lru_o:	'ccp_p2_lru',
		cp2_update_o:	'ccp_p2_update',
		cp2_nstate_o:	'ccp_p2_nstate',
		cp2_len_o:	'ccp_p2_len',
		cp2_busy_o:	'ccp_p2_busy',
		cp2_evict_i:	'ccp_p2_evict',
		cp2_eaddr_i:	'ccp_p2_eaddr',
		cp2_esecurity_i:'ccp_p2_esecurity',
		cp2_estate_i:	'ccp_p2_estate',
		cp2_valid_i:	'ccp_p2_valid',
		cp2_cstate_i:	'ccp_p2_cstate',
		cp2_hits_i:	'ccp_p2_hits',
		cp2_ways_i:	'ccp_p2_ways',
		cp2_nacks_i:	'ccp_p2_nacks',
		cp2_setw_o:	'ccp_p2_setw',
		cp2_setn_o:	'ccp_p2_setn',
		cp2_wayn_o:	'ccp_p2_wayn',
		cfd_ready_i:	'ccp_fd_ready',
		cfd_valid_o:	'ccp_fd_valid',
                cfd_full_o:     'ccp_fd_full',
		cfd_poison_o:	'ccp_fd_poison',
		cfd_data_o:	'ccp_fd_data',
		cfd_be_o:	'ccp_fd_be',
		cfd_way_o:	'ccp_fd_way',
		cfd_last_o:	'ccp_fd_last',
		cfd_beat_o:	'ccp_fd_beat',
		cfd_addr_o:	'ccp_fd_addr',
		cfd_oid_o:	'ccp_fd_oid',
		cfd_done_i:	'ccp_fd_done',
		cfd_nid_i:	'ccp_fd_nid',
		cft_ready_i:	'ccp_ft_ready',
		cft_valid_o:	'ccp_ft_valid',
		cft_state_o:	'ccp_ft_state',
		cft_addr_o:	'ccp_ft_addr',
		cft_security_o:	'ccp_ft_security',
		cft_way_o:	'ccp_ft_way',
		ccd_ready_o:	'ccp_cd_ready',
		ccd_valid_i:	'ccp_cd_valid',
		ccd_poison_i:	'ccp_cd_poison',
		ccd_rdata_i:	'ccp_cd_rdata',
		ccd_be_i:	'ccp_cd_be',
		ccd_last_i:	'ccp_cd_last',
		ccd_cancel_i:	'ccp_cd_cancel',
		ccw_ready_i:	'ccp_cw_ready',
		ccw_valid_o:	'ccp_cw_valid',
		ccw_poison_o:	'ccp_cw_poison',
		ccw_wdata_o:	'ccp_cw_wdata',
		ccw_be_o:	'ccp_cw_be',
		ccw_offset_o:	'ccp_cw_offset',
		ccw_last_o:	'ccp_cw_last',
		cce_ready_o:	'ccp_ce_ready',
		cce_valid_i:	'ccp_ce_valid',
		cce_poison_i:	'ccp_ce_poison',
		cce_rdata_i:	'ccp_ce_rdata',
		cce_be_i:	'ccp_ce_be',
		cce_last_i:	'ccp_ce_last',
		cce_cancel_i:	'ccp_ce_cancel',
		cmr_init_i:	't_cmr_init',
		cmr_ready_o:	'w_cmr_ready',
		cmr_valid_i:	't_cmr_valid',
		cmr_cmd_i:	't_cmr_cmd',
		cmr_way_i:	't_cmr_way',
		cmr_addr_i:	't_cmr_addr',
		cmr_security_i:	't_cmr_security',
		cmr_last_i:	't_cmr_last',
		cmr_done_o:	'w_cmr_done',
		cfg_rproducer_i:'XAIUTCR_TransOrderModeRd_out',
		cfg_wproducer_i:'XAIUTCR_TransOrderModeWr_out',
		cfg_cmd_req_max_i:	'XAIUEDR0_MRC_out',	//CREDIT
		cfg_dtr_req_tx_max_i:	'XAIUEDR0_MRR_out',	//CREDIT
		cfg_dtw_req_max_i:	'XAIUEDR0_MRW_out',	//CREDIT
		cfg_upd_req_max_i:	'XAIUEDR0_MRU_out',	//CREDIT
		cfg_dcredit_i:	'XAIUEDR6_DCE_out',	//QOS
		cfg_mcredit_i:	'XAIUEDR6_DMI_out',	//QOS
		cfg_icredit_i:	'XAIUEDR6_DII_out',	//QOS
		cfg_vcredit_i:	'XAIUEDR6_DVE_out',	//QOS
		cfg_qcredit_i:	'XAIUEDR6_QOS_out',	//QOS
		cfg_external_i:	'XAIUTOCR_TimeOutRefEn_out',
		cfg_top_i:	'XAIUTOCR_TimeOutThreshold_out',
		cfg_evp_i:	'XAIUQOSCR_EventThreshold_out',
		cfg_useEvQos_i: 'XAIUQOSCR_useEvictionQoS_out',	
		cfg_evQos_i:    'XAIUQOSCR_EvictionQoS_out',
		cfg_tperiod_i:	'XAIUEDR7_TIME_out',
		cfg_eperiod_i:	'XAIUEDR7_EVENT_out',
		cfg_rd_pool_i:	'cfg_rd_pool',
		cfg_wr_pool_i:	'cfg_wr_pool',
		cfg_st_limit_i:	'XAIUEDR3_STT_out',
		cfg_oc_limit_i:	'XAIUEDR3_OTT_out',
		cfg_rd_limit_i:	'XAIUEDR4_RD_out',
		cfg_wr_limit_i:	'XAIUEDR4_WR_out',
		cfg_ev_limit_i:	'XAIUEDR5_EV_out',
		cfg_control_i:	'XAIUEDR1_cfg_out[29:0]',	//CONTROL
		cfg_cache_i:	'XAIUPCTCR_LookupEn_out',
		cfg_alloc_i:	'XAIUPCTCR_AllocEn_out',
		cfg_update_i:   'XAIUPCTCR_UpdateDis_out',
		uerrs_o:	'w_uerrs_unqual',
		uinfo_o:	'w_uinfo',
		cinfo_o:	'w_cinfo',
		cerrs_o:	'w_cerrs_unqual',
		elog_o:		'{w_eway, w_eindex}',
		eaddr_o:	`{w_esecurity, w_eaddr}`,
		starve_o:	'w_starve',
		ctar_o:		'w_ctar',
		interleaved_count_o:'pmon_interleaved_count',
		idle_o:		'w_idle'
	};
if ((ccpParams.RepPolicy !== 'RANDOM') && ((ccpParams.nWays?ccpParams.nWays:1)>1)) {
controlPorts['cp2_cnru_i'] = 'ccp_p2_cnru';
} else {
controlPorts['cp2_cnru_i'] = "{"+(ccpParams.nWays?ccpParams.nWays:1)+"{1'b0}}";
}
if ((axiParams.eDomain?1:0)==0) {
controlPorts['amc_nc_i'] = 'XAIUGPRAR_NC_out';
controlPorts['amc_nc_evict_i'] = 'XAIUGPRAR_NC_evict_out';
}
controlPorts['trace_addr'] = 'trace_addr';
controlPorts['trace_opcode'] = 'trace_opcode';
controlPorts['trace_dmi_hit'] = 'trace_dmi_hit';
controlPorts['trace_dii_hit'] = 'trace_dii_hit';
controlPorts['trace_hui'] = 'trace_hui';
controlPorts['trace_size_of_ig'] = 'trace_size_of_ig';
controlPorts['trace_aw'] = 'trace_aw';
controlPorts['trace_ar'] = 'trace_ar';
controlPorts['trace_memattr'] = 'trace_memattr';
controlPorts['trace_trace'] = 'trace_trace';

controlPorts['dtw_dbg_rsp_valid_i'] = "dtw_dbg_rsp_valid";
controlPorts['dtw_dbg_rsp_ready_i'] = "dtw_dbg_rsp_ready";
controlPorts['dtw_dbg_rsp_tid_i']   = "dtw_dbg_rsp_target_id";
controlPorts['dtw_dbg_rsp_iid_i']   = "dtw_dbg_rsp_initiator_id";
controlPorts['dtw_dbg_rsp_uce_i']   = "dtw_dbg_rsp_uce_bus";
controlPorts['dtw_dbg_rsp_ce_i']    = "dtw_dbg_rsp_ce_bus";

if (useSysEvtReceiver) {
controlPorts['sysrq_valid_i'] = 'sys_req_rx_valid';
controlPorts['sysrq_ready_i'] = 'sys_req_rx_ready';
controlPorts['sysrq_tid_i']   = 'sys_req_rx_target_id';
controlPorts['sysrq_iid_i']   = 'sys_req_rx_initiator_id';
controlPorts['sysrq_uce_i']   = 'sys_req_rx_uce_bus';
controlPorts['sysrq_ce_i']    = 'sys_req_rx_ce_bus';
} else {
controlPorts['sysrq_valid_i'] = `1'b0`;
controlPorts['sysrq_ready_i'] = `1'b0`;
controlPorts['sysrq_tid_i']   = `{`+concParams.hdrParams.wTargetId+`{1'b0}}`;
controlPorts['sysrq_iid_i']   = `{`+concParams.hdrParams.wInitiatorId+`{1'b0}}`;
controlPorts['sysrq_uce_i']   = `1'b0`;
controlPorts['sysrq_ce_i']    = `1'b0`;
}

if (useSysCohSender) {
controlPorts['sysrp_valid_i'] = 'sys_rsp_rx_valid';
controlPorts['sysrp_ready_i'] = 'sys_rsp_rx_ready';
controlPorts['sysrp_tid_i']   = 'sys_rsp_rx_target_id';
controlPorts['sysrp_iid_i']   = 'sys_rsp_rx_initiator_id';
controlPorts['sysrp_uce_i']   = 'sys_rsp_rx_uce_bus';
controlPorts['sysrp_ce_i']    = 'sys_rsp_rx_ce_bus';
} else {
controlPorts['sysrp_valid_i'] = `1'b0`;
controlPorts['sysrp_ready_i'] = `1'b0`;
controlPorts['sysrp_tid_i']   = `{`+concParams.hdrParams.wTargetId+`{1'b0}}`;
controlPorts['sysrp_iid_i']   = `{`+concParams.hdrParams.wInitiatorId+`{1'b0}}`;
controlPorts['sysrp_uce_i']   = `1'b0`;
controlPorts['sysrp_ce_i']    = `1'b0`;
}

controlPorts['pmon_address_collision'] = 'pmon_address_collision';
controlPorts['pmon_cache_r_hit']       = 'pmon_cache_r_hit';
controlPorts['pmon_cache_w_hit']       = 'pmon_cache_w_hit';
controlPorts['pmon_cache_s_hit']       = 'pmon_cache_s_hit';
controlPorts['pmon_cache_evict']       = 'pmon_cache_evict';
controlPorts['pmon_no_ways']           = 'pmon_no_ways';
controlPorts['pmon_cache_f_stall']     = 'pmon_cache_f_stall';
controlPorts['pmon_cache_r_stall']     = 'pmon_cache_r_stall';
controlPorts['pmon_cache_w_stall']     = 'pmon_cache_w_stall';
controlPorts['pmon_cache_replay']      = 'pmon_cache_replay';
controlPorts['pmon_cache_r_miss']      = 'pmon_cache_r_miss';
controlPorts['pmon_cache_w_miss']      = 'pmon_cache_w_miss';
controlPorts['pmon_cache_s_miss']      = 'pmon_cache_s_miss';
controlPorts['pmon_ott_entries']       = 'pmon_ott_entries';
controlPorts['pmon_ott_read_latency_alloc']       = 'pmon_ott_read_latency_alloc';
controlPorts['pmon_ott_read_latency_dealloc']     = 'pmon_ott_read_latency_dealloc';
controlPorts['pmon_ott_write_latency_alloc']      = 'pmon_ott_write_latency_alloc';
controlPorts['pmon_ott_write_latency_dealloc']    = 'pmon_ott_write_latency_dealloc';
	
if(nativeTrigger.signals.user) {
controlPorts['trace_user'] = 'trace_user';
}

controlPorts['tracetag']   = 'tracetag';

controlPorts['outstanding_coherent_count_zero'] = 'outstanding_coherent_count_zero';


for ( let i = 0; i < nDCEs; i++ ) {
   controlPorts['XAIUCCR'+i+'_DCECounterState_in'] = 'XAIUCCR'+i+'_DCECounterState_in';
   controlPorts['XAIUCCR'+i+'_DCECounterState_wr'] = 'XAIUCCR'+i+'_DCECounterState_wr';
   controlPorts['XAIUCCR'+i+'_DCECreditLimit_out'] = 'XAIUCCR'+i+'_DCECreditLimit_out';
   controlPorts['XAIUCCR'+i+'_DCECounterState_out'] = 'XAIUCCR'+i+'_DCECounterState_out';
}

for ( let i = 0; i < nDMIs; i++ ) {
   controlPorts['XAIUCCR'+i+'_DMICounterState_in'] = 'XAIUCCR'+i+'_DMICounterState_in';
   controlPorts['XAIUCCR'+i+'_DMICounterState_wr'] = 'XAIUCCR'+i+'_DMICounterState_wr';
   controlPorts['XAIUCCR'+i+'_DMICreditLimit_out'] = 'XAIUCCR'+i+'_DMICreditLimit_out';
   controlPorts['XAIUCCR'+i+'_DMICounterState_out'] = 'XAIUCCR'+i+'_DMICounterState_out';
}

for ( let i = 0; i < nDIIs; i++ ) {
   controlPorts['XAIUCCR'+i+'_DIICounterState_in'] = 'XAIUCCR'+i+'_DIICounterState_in';
   controlPorts['XAIUCCR'+i+'_DIICounterState_wr'] = 'XAIUCCR'+i+'_DIICounterState_wr';
   controlPorts['XAIUCCR'+i+'_DIICreditLimit_out'] = 'XAIUCCR'+i+'_DIICreditLimit_out';
   controlPorts['XAIUCCR'+i+'_DIICounterState_out'] = 'XAIUCCR'+i+'_DIICounterState_out';
}

controlPorts['hexAiuDceVec'] = 'hexAiuDceVec';
controlPorts['hexAiuDmiVec'] = 'hexAiuDmiVec';
controlPorts['hexAiuDiiVec'] = 'hexAiuDiiVec';

controlPorts['bist_timeout_trigger'] = 'bist_timeout_trigger';

\jsend

\jsbegin /* istanbul ignore next env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
 if (useNsx) { \jsend
      assign w_amc_errs[3]   = ~nrs_region_hit & gpr_region_hit & ~XAIUGPRAR_NSX_out[0] ? w_amc_security : 1'b0;
\js } else {
      assign w_amc_errs[3]   = 1'b0;
\js }

assign w_amc_errs_qual = w_amc_errs & {4{~w_amc_ignore}};

\js var usePLRU = ccpParams['usePLRU'] ? 1 : 0;

\jsbegin
// For 3.7, there's a restriction that these must be the same
/* istanbul ignore if env ncore_3p7 */
    if(concParams.cmdReqParams.wAddr>axiParams.wAddr) { \jsend
	assign cmd_req_addr = {{\=concParams.cmdReqParams.wAddr-axiParams.wAddr=\{1'b0}}, w_mrc_addr}; 
\js } else {
	assign cmd_req_addr = w_mrc_addr[\=concParams.cmdReqParams.wAddr=\-1:0];
\js }
\jsbegin
// For 3.7, there's a restriction that these must be the same
/* istanbul ignore if env ncore_3p7 */
    if(concParams.updReqParams.wAddr>axiParams.wAddr) { \jsend
	assign upd_req_addr = {{\=concParams.updReqParams.wAddr-axiParams.wAddr=\{1'b0}}, w_mru_addr}; 
\js } else {
	assign upd_req_addr = w_mru_addr[\=concParams.updReqParams.wAddr=\-1:0];
\js }

assign XAIUQOSSR_EventStatus_wr = (| w_starve);
assign XAIUQOSSR_EventStatus_in = w_starve[1];
assign XAIUQOSSR_EventStatusCountOverflow_wr = w_starve[1] & 
					    (& XAIUQOSSR_EventStatusCount_out);
assign XAIUQOSSR_EventStatusCountOverflow_in = 1'b1;
assign XAIUQOSSR_EventStatusCount_wr = w_starve[1];
assign XAIUQOSSR_EventStatusCount_in = XAIUQOSSR_EventStatusCount_out + 1'b1;

assign pmon_starvation_event = w_starve[1];

assign t_cmr_init = XAIUPCMCR_sw_wr & (~| XAIUPCMCR_MntOp_sw_wdata);

\js if (useCache) {
wire [16:0]	t_cmr_max;
wire		t_cmr_loopv;

wire [1:0]	q_cmr_state;
wire [16:0]	q_cmr_count, q_cmr_range;
wire [6:0]	q_cmr_loopw;

assign XAIUPCMAR_MntOpActv_wr = 1'b1;
assign XAIUPCMAR_MntOpActv_in = |q_cmr_state;

assign XAIUPCTAR_EvictActive_wr = (w_ctar[0] ^ XAIUPCTAR_EvictActive_out);
assign XAIUPCTAR_EvictActive_in = w_ctar[0];

assign XAIUPCTAR_AllocActive_wr = (w_ctar[1] ^ XAIUPCTAR_AllocActive_out);
assign XAIUPCTAR_AllocActive_in = w_ctar[1];

assign XAIUPCISR_TagInitDone_wr = (ccp_init & XAIUPCISR_TagInitDone_out) |
				  (ccp_ready & ~XAIUPCISR_TagInitDone_out);
assign XAIUPCISR_TagInitDone_in = ~ccp_init;

assign XAIUPCISR_DataInitDone_wr = (ccp_init & XAIUPCISR_DataInitDone_out) |
				   (ccp_ready & ~XAIUPCISR_DataInitDone_out);
assign XAIUPCISR_DataInitDone_in = ~ccp_init;

wire [2-1:0] q_cmr_state_ns = (XAIUPCMCR_sw_wr & (q_cmr_state==2'h0)) ? 2'h1 : (q_cmr_state==2'h1) ? 2'h3 : (((ccp_ready & (~| XAIUPCMCR_MntOp_out)) | w_cmr_done) & (q_cmr_state==2'h3)) ? 2'h2 : ((q_cmr_state==2'h2) & ((~| XAIUPCMCR_MntOp_out)| ~ccp_maint)) ? 2'h0 : q_cmr_state;
\=u.dffre(2, `q_cmr_state`, `q_cmr_state_ns`, `2'd0`, `1'b1`, `w_gclk`, `reset_n`)=\


assign t_cmr_max = //1'b1 ? 17'hf :
		   ((XAIUPCMCR_MntOp_out==4'h7) |
		    (XAIUPCMCR_MntOp_out==4'h8)) ? {(~|XAIUPCMLR1_MntRange_out),
						       XAIUPCMLR1_MntRange_out}:
		   (XAIUPCMCR_MntOp_out == 4'h4) ? 17'd\=ccpParams.nSets=\ :
						  17'h1;
assign t_cmr_loopv = (XAIUPCMCR_MntOp_out==4'h4) | 
		     (XAIUPCMCR_MntOp_out==4'h8);
assign t_cmr_valid = (q_cmr_state==2'h3) & (t_cmr_count < t_cmr_max) &
		     (| XAIUPCMCR_MntOp_out);
assign t_ccp_cmd = ((XAIUPCMCR_MntOp_out==4'h4) |
		    (XAIUPCMCR_MntOp_out==4'h8)) ? 4'h5 : 
		   (XAIUPCMCR_MntOp_out==4'h7) ? 4'h6 :
						 XAIUPCMCR_MntOp_out;
assign t_cmr_cmd = ((XAIUPCMCR_MntOp_out==4'h4) |	     //Flush All Entries
		    (XAIUPCMCR_MntOp_out==4'h5) | 	     //Flush Entry
		    (XAIUPCMCR_MntOp_out==4'h8)) ? 2'h3 :    //Flush Entry Range
		   ((XAIUPCMCR_MntOp_out==4'h6) | 	     //Flush Addr
		    (XAIUPCMCR_MntOp_out==4'h7)) ? 2'h2 :    //Flush Addr Range
		    (XAIUPCMCR_MntOp_out==4'he) ? 2'h1 :     //Write Entry
		    (XAIUPCMCR_MntOp_out==4'hc) ? 2'h0 :     //Read Entry
						     2'h0;   //Reserved command
\js if (axiParams.wAddr>54) {
	assign t_cmr_addr = ((XAIUPCMCR_MntOp_out==4'h6) |          //Flush Address with auto zero fill
                     	(XAIUPCMCR_MntOp_out==4'h7)) ? {{\=axiParams.wAddr=\-54{1'b0}},//spyglass w164a fix
						 	 XAIUPCMLR1_MntAddr_out,
						     XAIUPCMLR0_MntWord_out,
						     XAIUPCMLR0_MntWay_out,
						     XAIUPCMLR0_MntSet_out,6'h0}+
						    {q_cmr_count, 6'h0} :
						    w_cmr_addr;
\js } else {
        wire t_cmr_addr_tmp_carry;
        wire [53:0] t_cmr_addr_tmp;
	assign {t_cmr_addr_tmp_carry,t_cmr_addr_tmp} =  {1'b0,XAIUPCMLR1_MntAddr_out,//spyglass w164a fix
						     XAIUPCMLR0_MntWord_out,
						     XAIUPCMLR0_MntWay_out,
						     XAIUPCMLR0_MntSet_out,6'h0}+
						    {1'b0,31'b0,q_cmr_count, 6'h0};
	assign t_cmr_addr = ((XAIUPCMCR_MntOp_out==4'h6) |	(XAIUPCMCR_MntOp_out==4'h7)) ? t_cmr_addr_tmp[\=axiParams.wAddr-1=\:0] : w_cmr_addr;
\js }
assign t_cmr_security = XAIUPCMCR_SecAttr_out;
assign t_cmr_last = ((t_cmr_count + 1'b1) == t_cmr_max) &
		    ((q_cmr_loopw == (7'd\=(ccpParams.nWays?ccpParams.nWays:/* istanbul ignore next env ncore_3p7 */1)-1=\)) | ~t_cmr_loopv);
wire t_cmr_set_carry;
assign {t_cmr_set_carry,t_cmr_set} = {1'b0,XAIUPCMLR0_MntSet_out} + {1'b0,3'b0,q_cmr_count};
\js // FIXME 3.4 spyglass W164a: the loops value maxs out at WAY-1. Fix Done
wire t_cmr_way_tmp_carry;
wire [6:0] t_cmr_way_tmp;
assign {t_cmr_way_tmp_carry,t_cmr_way_tmp} = {1'b0,1'b0,XAIUPCMLR0_MntWay_out} + {1'b0,q_cmr_loopw};
assign t_cmr_way = t_cmr_way_tmp[5:0];

   wire [16:0] q_cmr_range_p1;
   wire q_cmr_range_carry;
   assign {q_cmr_range_carry,q_cmr_range_p1} = {1'b0,q_cmr_range} + 1'b1;
wire [17-1:0] q_cmr_range_ns = (q_cmr_state==2'h1) ? 17'h0 : (t_cmr_valid & w_cmr_ready) ? q_cmr_range_p1: q_cmr_range;
\=u.dffre(17, `q_cmr_range`, `q_cmr_range_ns`, `17'h0`, `1'b1`, `w_gclk`, `reset_n`)=\
   wire [16:0] q_cmr_count_p1;
   wire q_cmr_count_carry;
   assign {q_cmr_count_carry,q_cmr_count_p1} = {1'b0,q_cmr_count} + 1'b1;
wire [17-1:0] q_cmr_count_ns = (q_cmr_state==2'h1) ? 17'h0 : (((q_cmr_loopw == (7'd\=(ccpParams.nWays?ccpParams.nWays:/* istanbul ignore next env ncore_3p7 */1)-1=\)) | ~t_cmr_loopv) & t_cmr_valid & w_cmr_ready) ? q_cmr_count_p1: q_cmr_count;
\=u.dffre(17, `q_cmr_count`, `q_cmr_count_ns`, `17'h0`, `1'b1`, `w_gclk`, `reset_n`)=\
   wire [6:0] q_cmr_loopw_p1;
   wire q_cmr_loopw_carry;
   assign {q_cmr_loopw_carry,q_cmr_loopw_p1} = {1'b0,q_cmr_loopw} + 1'b1;
wire [7-1:0] q_cmr_loopw_ns = ((q_cmr_state==2'h1) | ((q_cmr_loopw == (7'd\=(ccpParams.nWays?ccpParams.nWays:/* istanbul ignore next env ncore_3p7 */1)-1=\)) & t_cmr_valid & w_cmr_ready)) ? 7'h0 : (t_cmr_valid & w_cmr_ready & t_cmr_loopv) ? q_cmr_loopw_p1 : q_cmr_loopw;
\=u.dffre(7, `q_cmr_loopw`, `q_cmr_loopw_ns`, `7'h0`, `1'b1`, `w_gclk`, `reset_n`)=\

assign t_cmr_state = q_cmr_state;
assign t_cmr_count = (XAIUPCMCR_MntOp_out==4'h8) ? q_cmr_range : q_cmr_count;
\js } else {
assign t_cmr_valid = 1'b0;
assign t_cmr_cmd = 2'h0;
assign t_cmr_addr = {\=axiParams.wAddr=\{1'b0}};
assign t_cmr_set = 20'h0;
assign t_cmr_way = 6'h0;
assign t_cmr_security = 1'b0;
assign t_cmr_last = 1'b0;
assign t_cmr_state = 2'h0;
assign t_cmr_count = 17'h0;
assign {XAIUPCMCR_sw_wr, XAIUPCMCR_sw_rd} = {2{1'b0}};
assign {XAIUPCMCR_MntOp_sw_wdata, XAIUPCMCR_MntOp_out} = {2{4'h0}};
assign {XAIUPCMCR_ArrayID_sw_wdata, XAIUPCMCR_ArrayID_out} = {2{6'h0}};
assign {XAIUPCMCR_SecAttr_sw_wdata, XAIUPCMCR_SecAttr_out} = {2{1'b0}};

assign {XAIUPCMLR0_sw_wr, XAIUPCMLR0_sw_rd} = {2{1'b0}};
assign {XAIUPCMLR0_MntSet_sw_wdata, XAIUPCMLR0_MntSet_out} = {2{20'h0}};
assign {XAIUPCMLR0_MntWay_sw_wdata, XAIUPCMLR0_MntWay_out} = {2{6'h0}};
assign {XAIUPCMLR0_MntWord_sw_wdata, XAIUPCMLR0_MntWord_out} = {2{6'h0}};

assign {XAIUPCMLR1_sw_wr, XAIUPCMLR1_sw_rd} = {2{1'b0}};
assign {XAIUPCMLR1_MntAddr_sw_wdata, XAIUPCMLR1_MntAddr_out} = {2{16'h0}};
assign {XAIUPCMLR1_MntRange_sw_wdata, XAIUPCMLR1_MntRange_out} = {2{16'h0}};

assign {XAIUPCMAR_sw_wr, XAIUPCMAR_sw_rd, XAIUPCMAR_MntOpActv_wr} = {3{1'b0}};
assign {XAIUPCMAR_MntOpActv_sw_wdata, XAIUPCMAR_MntOpActv_out,
				      XAIUPCMAR_MntOpActv_in} = {3{1'b0}};

assign {XAIUPCMDR_sw_wr, XAIUPCMDR_sw_rd, XAIUPCMDR_MntData_wr} = {3{1'b0}};
assign {XAIUPCMDR_MntData_sw_wdata, XAIUPCMDR_MntData_out,
				    XAIUPCMDR_MntData_in} = {3{32'h0}};

assign XAIUPCTCR_LookupEn_out = 1'b0;
assign XAIUPCTCR_AllocEn_out = 1'b0;
assign XAIUPCTCR_UpdateDis_out = 1'b0;
\js }

\js /* istanbul ignore if env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
\js if (useCache) {
wire                    w_ccp_eu_valid_pre_unqual;
wire [3:0]              w_ccp_eu_type_pre;
wire [7:0]              w_ccp_eu_info_pre;
wire [19:0]             w_ccp_eu_entry_pre;
wire [5:0]              w_ccp_eu_way_pre;
wire [5:0]              w_ccp_eu_word_pre;
wire [11:0]             w_ccp_eu_addr_pre;

\=obj.lib.dffre( 1, 'w_ccp_eu_valid_unqual', 'w_ccp_eu_valid_pre_unqual',  "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre( 4, 'w_ccp_eu_type',         'w_ccp_eu_type_pre',          "4'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre( 8, 'w_ccp_eu_info',         'w_ccp_eu_info_pre',          "8'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(20, 'w_ccp_eu_entry',        'w_ccp_eu_entry_pre',        "20'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre( 6, 'w_ccp_eu_way',          'w_ccp_eu_way_pre',           "6'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre( 6, 'w_ccp_eu_word',         'w_ccp_eu_word_pre',          "6'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(12, 'w_ccp_eu_addr',         'w_ccp_eu_addr_pre',         "12'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\

\=obj.lib.instance({
	instanceName: 'addr_gen',
	moduleName: 'addr_gen',
	params : {
		SecSubRowsIsArrayOfString: "true",
		PortPriSubDiagAddrBits : ccpParams.PortPriSubDiagAddrBits,
		PortSecSubRows         : ccpParams.PortSecSubRows,
		PriSubDiagAddrBits     : ccpParams.PriSubDiagAddrBits,
		SecSubRows             : ccpParams.SecSubRows,
		num_ports              : ccpParams.num_ports,
		wAddr                  : ccpParams.wAddr,
		wCacheLineOffset       : ccpParams.wCacheLineOffset
	},
	verilogParams: {},
	ports: {
		tag_in:		`{`+(axiParams.wAddr-CTW-CLO)+`{1'b0}}`,
		index_in:	't_cmr_set['+CTW+'-1:0]',
		addr_out:	'w_cmr_addr'
	},
	portsDelimiter: '\n\t'
})=\

\jsbegin

var ccp_ports = {
        clk                         : 'w_gclk',
        reset_n                     : 'reset_n',
        cache_op_ready_p0           : 'ccp_p0_ready',
        ctrl_op_valid_p0            : 'ccp_p0_valid',
        ctrl_op_address_p0          : 'ccp_p0_addr',
        ctrl_op_allocate_p2         : 'ccp_p2_alloc',
        ctrl_op_read_data_p2        : 'ccp_p2_rd',
        ctrl_op_write_data_p2       : 'ccp_p2_wr',
        ctrl_op_port_sel_p2         : 'ccp_p2_port',
        ctrl_op_bypass_p2           : `1'b0`,
        ctrl_op_rp_update_p2        : 'ccp_p2_lru',
        ctrl_op_tag_state_update_p2 : 'ccp_p2_update',
        ctrl_op_state_p2            : 'ccp_p2_nstate',
        ctrl_op_burst_len_p2        : 'ccp_p2_len',
        ctrl_op_setway_debug_p2     : 'ccp_p2_setw',
        ctrl_op_ways_busy_vec_p2    : 'ccp_p2_busy',
        ctrl_op_ways_stale_vec_p2   : 'ccp_p2_busy',

        cache_valid_p2            : 'ccp_p2_valid',
        cache_current_state_p2    : 'ccp_p2_cstate',
        cache_hit_way_vec_p2      : 'ccp_p2_hits',
        cache_alloc_way_vec_p2    : 'ccp_p2_ways',
        cache_set_index_p2        : '',
        cache_nack_p2             : 'ccp_p2_nacks[0]',
        cache_nack_no_allocate_p2 : 'ccp_p2_nacks[1]',
        cache_nack_ce_p2          : 'ccp_p2_nacks[2]',
        cache_nack_uce_p2         : 'ccp_p2_nacks[3]',

        cache_fill_data_ready   : 'ccp_fd_ready',
        ctrl_fill_data_valid    : 'ccp_fd_valid',
        ctrl_fill_data_full     : 'ccp_fd_full',
        ctrl_fill_data          : '{ccp_fd_poison, ccp_fd_data}',
        ctrl_fill_data_byteen   : 'ccp_fd_be',
        ctrl_fill_data_last     : 'ccp_fd_last',
        ctrl_fill_data_beat_num : 'ccp_fd_beat',
        ctrl_fill_data_address  : 'ccp_fd_addr',
        ctrl_fill_data_id       : 'ccp_fd_oid_pad',
        cache_fill_done         : 'ccp_fd_done',
        cache_fill_done_id      : 'ccp_fd_nid_pad',

        cache_fill_ready  : 'ccp_ft_ready',
        ctrl_fill_valid   : 'ccp_ft_valid',
        ctrl_fill_state   : 'ccp_ft_state',
        ctrl_fill_address : 'ccp_ft_addr',

        cache_rdrsp_ready  : 'ccp_cd_ready',
        cache_rdrsp_valid  : 'ccp_cd_valid',
        cache_rdrsp_data   : '{ccp_cd_poison, ccp_cd_rdata}',
        cache_rdrsp_byteen : 'ccp_cd_be',
        cache_rdrsp_last   : 'ccp_cd_last',
        cache_rdrsp_cancel : 'ccp_cd_cancel',

        cache_wr_ready   : 'ccp_cw_ready',
        ctrl_wr_valid    : 'ccp_cw_valid',
        ctrl_wr_data     : '{ccp_cw_poison, ccp_cw_wdata}',
        ctrl_wr_byte_en  : 'ccp_cw_be',
        ctrl_wr_beat_num : 'ccp_cw_offset',
        ctrl_wr_last     : 'ccp_cw_last',

        cache_evict_valid_p2   : 'ccp_p2_evict',
        cache_evict_address_p2 : 'ccp_p2_eaddr',
        cache_evict_state_p2   : 'ccp_p2_estate',
        cache_evict_ready      : 'ccp_ce_ready',
        cache_evict_valid      : 'ccp_ce_valid',
        cache_evict_data       : '{ccp_ce_poison, ccp_ce_rdata}',
        cache_evict_byteen     : 'ccp_ce_be',
        cache_evict_last       : 'ccp_ce_last',
        cache_evict_cancel     : 'ccp_ce_cancel',

        trans_active        : 'w_ccp_busy',
        CorrErrDetectEn     : `1'b1`,
        UnCorrErrDetectEn   : `1'b1`,
        reinit              : 'ccp_init',
        maint_req_opcode    : 't_ccp_cmd',
        maint_req_array_sel : 'XAIUPCMCR_ArrayID_out[0]',
        maint_req_data      : 'XAIUPCMDR_MntData_out',
        maint_req_way       : `{26'h0, ccp_p2_wayn}`,
        maint_req_entry     : 'ccp_p2_setn',
        maint_req_word      : 'XAIUPCMLR0_MntWord_out',

        init_done                        : 'ccp_ready',
        maint_active                     : 'ccp_maint',
        maint_read_data                  : 'XAIUPCMDR_MntData_in',
        maint_read_data_en               : 'XAIUPCMDR_MntData_wr',
        correctible_error_valid          : 'w_ccp_ec_valid_unqual',
        correctible_error_type           : 'w_ccp_ec_type',
        correctible_error_info           : 'w_ccp_ec_info',
        correctible_error_entry          : 'w_ccp_ec_entry',
        correctible_error_way            : 'w_ccp_ec_way',
        correctible_error_word           : 'w_ccp_ec_word',
        correctible_error_double_error   : '',
        correctible_error_addr_hi        : 'w_ccp_ec_addr[11:0]',
        uncorrectible_error_valid        : 'w_ccp_eu_valid_pre_unqual',
        uncorrectible_error_type         : 'w_ccp_eu_type_pre',
        uncorrectible_error_info         : 'w_ccp_eu_info_pre',
        uncorrectible_error_entry        : 'w_ccp_eu_entry_pre',
        uncorrectible_error_way          : 'w_ccp_eu_way_pre',
        uncorrectible_error_word         : 'w_ccp_eu_word_pre',
        uncorrectible_error_double_error : '',
        uncorrectible_error_addr_hi      : 'w_ccp_eu_addr_pre[11:0]'
};
if ((ccpParams.RepPolicy !== 'RANDOM') && (ccpParams.nWays?ccpParams.nWays:/* istanbul ignore next env ncore_3p7 */1)>1) {
        ccp_ports['cache_current_nru_vec_p2']        = 'ccp_p2_cnru';
}
// wSecurity always > 1
/* istanbul ignore else env ncore_3p7 */
if (ccpParams.wSecurity > 0) {
        ccp_ports['ctrl_fill_security']      = 'ccp_ft_security';
        ccp_ports['cache_evict_security_p2'] = 'ccp_p2_esecurity';
        ccp_ports['ctrl_op_security_p0']     = 'ccp_p0_security';
}
// nWays always > 1
/* istanbul ignore else env ncore_3p7 */
if ((ccpParams.nWays?ccpParams.nWays:/* istanbul ignore next env ncore_3p7 */1) > 1) {
        ccp_ports['ctrl_fill_way_num']       = 'ccp_ft_way';
        ccp_ports['ctrl_fill_data_way_num']  = 'ccp_fd_way';
}
if (ccpParams.nBeatsPerBank > 1){
        ccp_ports["clkby2_en"] = "clkby2_en";
}
 /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (ccpParams.num_ports >  1) {
        ccp_ports['instance_id'] = 'ccp_instance_id';
}

  var CCP_INTF = [];
  for( var inner = 0; inner < ccp_tinterface.length; inner++) {
      CCP_INTF.push({modulePrefix:  "tag_bank"+inner+"_"+inner+"_",
		  localPrefix:      "tag_bank"+inner+"_",
		  interface:        ccp_tinterface[inner].signals});
  }
 /* replacement not currently used for 3.6 */
 /* istanbul ignore next env ncore_3p6,ncore_3p7 */
 if (ccpParams['usePLRU']) {
  for( var inner = 0; inner < ccp_rpinterface.length; inner++) {
         ccp_ports["plru_mem"+inner+"_"+"read_en"] = "plru_bank"+inner+"_"+"int_chip_en_read";
         ccp_ports["plru_mem"+inner+"_"+"write_en"] = "plru_bank"+inner+"_"+"int_chip_en_write";
         ccp_ports["plru_mem"+inner+"_"+"read_addr"] = "plru_bank"+inner+"_"+"int_address_read";
         ccp_ports["plru_mem"+inner+"_"+"write_addr"] = "plru_bank"+inner+"_"+"int_address_write";
         ccp_ports["plru_mem"+inner+"_"+"read_data"] = "plru_bank"+inner+"_"+"int_data_out";
         ccp_ports["plru_mem"+inner+"_"+"write_data"] = "plru_bank"+inner+"_"+"int_data_in";
  }
 }
  for( var inner = 0; inner < ccp_dinterface.length; inner++) {
      CCP_INTF.push({modulePrefix:  "data_bank"+inner+"_"+inner+"_",
		  localPrefix:      "data_bank"+inner+"_",
		  interface:        ccp_dinterface[inner].signals});
  }  
\jsend

\js var pad_amount = log2ceil(ccpParams.nTableEntries) - log2ceil(OCN);
\jsbegin
//maestro presumable always sets ccpParams.nTableEntries==OTT for 3.6
/* istanbul ignore if env ncore_3p6,ncore_3p7 */
    if ( pad_amount != 0) { \jsend
wire [\=log2ceil(ccpParams.nTableEntries)=\-1:0] ccp_fd_oid_pad = {\=pad_amount=\'b0,ccp_fd_oid};
\js } else {
wire [\=log2ceil(ccpParams.nTableEntries)=\-1:0] ccp_fd_oid_pad = ccp_fd_oid;
\js }

wire [\=log2ceil(ccpParams.nTableEntries)=\-1:0] ccp_fd_nid_pad;

assign ccp_fd_nid = ccp_fd_nid_pad[\=log2ceil(OCN)=\-1:0];

\js /* istanbul ignore next env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
\=u.instance({
	instanceName: 'ccp_top',
	moduleName: 'ccp_top',
	params: ccpParams,
	verilogParams: {},
	ports: ccp_ports,
	interfaces: CCP_INTF,
	portsDelimiter: '\n\t'
})=\

\js } else {
assign ccp_ready = 1'b1;
assign ccp_p0_ready = {\=CTB=\{1'b0}};
assign ccp_p2_evict = 1'b0;
assign ccp_p2_eaddr = {\=axiParams.wAddr=\{1'b0}};
assign ccp_p2_esecurity = 1'b0;
assign ccp_p2_estate = {\=CSW=\{1'b0}};
assign ccp_p2_valid = 1'b0;
assign ccp_p2_cstate = {\=CSW=\{1'b0}};
assign ccp_p2_hits = {1{1'b0}};
assign ccp_p2_ways = {1{1'b0}};
assign ccp_p2_nacks = 4'h0;
assign ccp_fd_ready = 1'b0;
assign ccp_fd_done = 1'b0;
assign ccp_fd_nid = {\=log2ceil(OCN)=\{1'b0}};
assign ccp_ft_ready = 1'b0;
assign ccp_cd_valid = 1'b0;
assign ccp_cd_poison = {1{1'b0}};
assign ccp_cd_rdata = {\=modified_wData=\{1'b0}};
assign ccp_cd_be = {\=modified_wData/8=\{1'b0}};
assign ccp_cd_last = 1'b0;
assign ccp_cd_cancel = 1'b0;
assign ccp_cw_ready = 1'b0;
assign ccp_ce_valid = 1'b0;
assign ccp_ce_poison = {1{1'b0}};
assign ccp_ce_rdata = {\=modified_wData=\{1'b0}};
assign ccp_ce_be = {\=modified_wData/8=\{1'b0}};
assign ccp_ce_last = 1'b0;
assign ccp_ce_cancel = 1'b0;
assign {w_ccp_ec_valid_unqual,	w_ccp_eu_valid_unqual} = {2{1'b0}};
assign {w_ccp_ec_type,	w_ccp_eu_type} = {2{4'h0}};
assign {w_ccp_ec_info,	w_ccp_eu_info} = {2{8'h0}};
assign {w_ccp_ec_entry,	w_ccp_eu_entry} = {2{20'h0}};
assign {w_ccp_ec_way,	w_ccp_eu_way} = {2{6'h0}};
assign {w_ccp_ec_word,	w_ccp_eu_word} = {2{6'h0}};
assign {w_ccp_ec_addr,	w_ccp_eu_addr} = {2{12'h0}};
assign w_ccp_busy = 1'b0;
\js }

\js if (err_port_keys.length == 0) {
assign {cmd_rsp_header_UCE,	cmd_rsp_message_UCE, 	cmd_rsp_CE,
	dtr_rsp_rx_header_UCE,	dtr_rsp_rx_message_UCE, dtr_rsp_rx_CE, 
	dtw_rsp_header_UCE,	dtw_rsp_message_UCE,	dtw_rsp_CE, 
	upd_rsp_header_UCE,	upd_rsp_message_UCE,	upd_rsp_CE, 
	cmp_rsp_header_UCE,	cmp_rsp_message_UCE,	cmp_rsp_CE, 
	str_req_header_UCE,	str_req_message_UCE,	str_req_CE,
	dtr_req_rx_header_UCE,	dtr_req_rx_message_UCE,
				dtr_req_rx_data_UCE,	dtr_req_rx_CE, 
	snp_req_header_UCE,	snp_req_message_UCE,	snp_req_CE,
        sys_req_rx_header_UCE,  sys_req_rx_message_UCE, sys_req_rx_CE,
        sys_rsp_rx_header_UCE,  sys_rsp_rx_message_UCE, sys_rsp_rx_CE,
        dtw_dbg_rsp_header_UCE, dtw_dbg_rsp_message_UCE, dtw_dbg_rsp_CE
        } = 34'h0;
\js }

\jsbegin
index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_req_'; });
var DTWReqInterface    = CONC_TX_INTF[index].signals;
\jsend

\js if (DTWReqInterface.m_prot != 0) {
assign cmd_req_m_prot = {\=ioaiu_pos(concParams.cmdReqParams.wMProt)=\{1'b0}};
assign dtr_req_tx_m_prot = {\=ioaiu_pos(concParams.dtrReqParams.wMProt)=\{1'b0}};
assign dtw_req_m_prot = {\=ioaiu_pos(concParams.dtwReqParams.wMProt)=\{1'b0}};
assign upd_req_m_prot = {\=ioaiu_pos(concParams.updReqParams.wMProt)=\{1'b0}};
assign str_rsp_m_prot = {\=ioaiu_pos(concParams.strRspParams.wMProt)=\{1'b0}};
assign dtr_rsp_tx_m_prot = {\=ioaiu_pos(concParams.dtrRspParams.wMProt)=\{1'b0}};
assign snp_rsp_m_prot = {\=ioaiu_pos(concParams.snpRspParams.wMProt)=\{1'b0}};
\js }

\js if (DTWReqInterface.dprot != 0) {
assign dtr_req_tx_dprot = {\=ioaiu_pos(concParams.dtrReqParams.wDProt)=\{1'b0}};
assign dtw_req_dprot = {\=ioaiu_pos(concParams.dtwReqParams.wDProt)=\{1'b0}};
\js }

\js if (DTWReqInterface.h_prot != 0) {
assign {cmd_req_h_prot, dtr_req_tx_h_prot, dtw_req_h_prot, upd_req_h_prot,
	str_rsp_h_prot, dtr_rsp_tx_h_prot, snp_rsp_h_prot} = {\=7*ioaiu_pos(concParams.hdrParams.wHProt)=\{1'b0}};
\js }

\js if (RESI.enableNativeIntfProtection) {
\js //=============================================================================
\js // Protection placeholder
\js //=============================================================================

\=m.bundleFunctions.wiresFromInterface(pphStr, axiInterfaceBundle, [], obj.lib.bundle)=\

\=obj.lib.instance({
	moduleName: pphInterfaceName + 'placeholder',
    tachlName: 'protection_placeholder',
	instanceName: 'pph',
	params: {
		nativeInterface: axiInterfaceBundle,
		clkInterface: clkInterface.signals,
		placeHolderDirection: "master",
		useResiliency: 1,
		protectionEnable: RESI.enableNativeIntfProtection,
		nativeIntfProtectionInterface: {"name":'', "signals" : pphInterfaceBundleSyn.signals}
	},
	verilogParams: {},
	ports: {
		interface_fault:	'w_pph_uerr',
		cerr_fault:		'w_pph_cerr'
	},
	interfaces: PPH_INTF,
	portsDelimiter: '\n\t'
})=\

\js } else {
assign w_pph_uerr = 1'b0;
assign w_pph_cerr = 1'b0;
\js }

\jsbegin
// checkType not supported for 3.7.0
    if (checkType!=="NONE") { \jsend

\js //=============================================================================
\js // AMBA interface parity protection instance
\js //=============================================================================

\jsbegin
var chkErrInterface            = { name: "chk_", signals: genChkErrSignals( axiInterfaceBundle ) };
var chkErrSignalList                 = [];
Object.keys( chkErrInterface.signals ).forEach( key => {
  chkErrSignalList.push( chkErrInterface.name+key );
});

var axiIChkInterface    = { name: pphStr, signals: axiInterfaceBundle };
var axiOChkInterface    = { name: 'chk_', signals: axiInterfaceBundleNoChk };

if (!axiParams.wCdData) {
var chk_ports = {};
} else {
var chk_ports = {
                    chk_rack_perr                  : "chk_rack_perr",
                    chk_wack_perr                  : "chk_wack_perr"
        };
}

\jsend

      \=obj.lib.instance({
        instanceName: 'u_amba_axi_interface_protection',
        moduleName: 'amba_axi_interface_protection',
        params: {
                    pphStr                         : pphStr,
                    inAxiInterface                    : axiIChkInterface,
                    outAxiInterface                   : axiOChkInterface,
                    errInterface                   : chkErrInterface,
                    direction                      : "slave",
                    checkType                      : checkType
        },
        ports: chk_ports,
        interfaces: [
                           axiIChkInterface,
                           axiOChkInterface,
                           chkErrInterface
        ].map( getModuleLocalPrefixAndInterface ) // Returns array of {modulePrefix, localPrefix, interface} objects
    })=\

\js if (!axiParams.eAc) {
assign chk_cr_perr = 1'b0;
assign chk_ac_perr = 1'b0;
\js }
\js if (!axiParams.wCdData) {
assign chk_cd_perr = 1'b0;
assign chk_rack_perr = 1'b0;
assign chk_wack_perr = 1'b0;
\js }

\js } else {
assign chk_ar_perr = 1'b0;
assign chk_aw_perr = 1'b0;
assign chk_w_perr  = 1'b0;
assign chk_ac_perr = 1'b0;
assign chk_cr_perr = 1'b0;
assign chk_cd_perr = 1'b0;
assign chk_rack_perr = 1'b0;
assign chk_wack_perr = 1'b0;
assign chk_r_perr = 1'b0;
assign chk_b_perr = 1'b0;
\js }

wire amba_axi_oor, amba_axi_oor_ns;
assign amba_axi_oor_ns = ~amba_axi_oor ? 1'b1 : amba_axi_oor;
\=u.dffre(1, `amba_axi_oor`, `amba_axi_oor_ns`, `1'b0`, `1'b1`, `clk`, `reset_n`)=\

assign chk_perr = amba_axi_oor & (
                  chk_ar_perr |
                  chk_aw_perr |
                  chk_w_perr  |
                  chk_r_perr  |
                  chk_b_perr  |
                  chk_rack_perr  |
                  chk_wack_perr  |
                  chk_ac_perr  |
                  chk_cr_perr |
                  chk_cd_perr);

\js let axiParamsOut = utilFunctions.deepCopy(axiParams);
\js if (axiParams.wData==512) {
\js ///////////////////////////////////////////////////////////////////////////////////
\js // IOAIU DATWIDTH ADAPTION
\js ///////////////////////////////////////////////////////////////////////////////////

\jsbegin

let shimInterfaceIn  = axiInterfaceBundleNoChk;
let shimInterfaceOut = utilFunctions.deepCopy(shimInterfaceIn);

//console.log("CONSOLE 0000 interfaces = \n"+JSON.stringify(axiParamsOut,null,8));

// Just take from a SMI Channel for now. 
axiParamsOut.wData = concParams.dtrReqParams.wData;

shimInterfaceOut["w_"].data = axiParamsOut.wData;
/* istanbul ignore if env ncore_3p7 */
if (shimInterfaceIn["w_"].poison) {
shimInterfaceOut["w_"].poison = enPoison?/* istanbul ignore next env ncore_3p7 */axiParamsOut.wData/64:1;
}
shimInterfaceOut["w_"].strb = axiParamsOut.wData/8;

shimInterfaceOut["r_"].data = -axiParamsOut.wData;
/* istanbul ignore if env ncore_3p7 */
if (shimInterfaceIn["r_"].poison) {
shimInterfaceOut["r_"].poison = -(enPoison?/* istanbul ignore next env ncore_3p7 */axiParamsOut.wData/64:1);
}

/* istanbul ignore if env ncore_3p7 */
if (shimInterfaceIn["r_"].poison) {
shimInterfaceOut["r_"].user = shimInterfaceIn["r_"].user*Math.max((axiParamsOut.wData / axiParams.wData),1);
}
/* istanbul ignore if env ncore_3p7 */
if (shimInterfaceIn["w_"].poison) {
shimInterfaceOut["w_"].user = shimInterfaceIn["w_"].user*Math.max((axiParamsOut.wData / axiParams.wData),1);
}

var shim_interfaces = [];

shim_interfaces.push({
            modulePrefix  : '',
            localPrefix   : '',
            interface     : clkInterface.signals
});

shim_interfaces.push({
            modulePrefix  : 'in_',
            localPrefix   : chkStr,
            interface     : shimInterfaceIn
});

shim_interfaces.push({
            modulePrefix  : 'out_',
            localPrefix   : 'shim_',
            interface     : shimInterfaceOut
});

\jsend

\=m.bundleFunctions.wiresFromInterface('shim_', shimInterfaceOut, [], u.bundle)=\

\=u.instance({
            instanceName : 'datawidth_axi_shim' ,
            moduleName   : 'ioaiu_axi_shim',
            params: {
               inWidth              : axiParams.wData,
               outWidth             : axiParamsOut.wData,
               maxOutstanding       : OCN,
               clkInterface         : clkInterface,
               inInterface          : shimInterfaceIn,
               outInterface         : shimInterfaceOut,
               multiBeat            : true
            } ,
            verilogParams: {},
            interfaces      : shim_interfaces,
	    ports: '',
            portsDelimiter  : '\n    '
})=\
\js }

\js ///////////////////////////////////////////////////////////////////////////////////
\js // AXI Ties
\js ///////////////////////////////////////////////////////////////////////////////////
\jsbegin
// wRegion always 0 on 3.7
/* istanbul ignore if env ncore_3p7 */
    if (axiParams.wRegion) { \jsend
	assign t_ar_region = \=shimStr=\ar_region;
\js } else {
	assign t_ar_region = 1'b0;
\js }
\js if (axiParams.wQos) {
	assign t_ar_qos = \=shimStr=\ar_qos;
\js } else {
	assign t_ar_qos = 1'b0;
\js }
\jsbegin
// wArId/wAwId set to minimum 1 in parameter spec
/* istanbul ignore else env ncore_3p7 */
    if (axiParams.wArId || axiParams.wAwId) { \jsend
\jsbegin
// 3.7 restriction says these must be the same
/* istanbul ignore if env ncore_3p7 */
      if (axiParams.wAwId > axiParams.wArId) { \jsend
        assign t_ar_id = {{\=axiParams.wAwId-axiParams.wArId=\{1'b0}},\=shimStr=\ar_id};
\js   } else {
        assign t_ar_id = \=shimStr=\ar_id;
\js   }
\js } else {
	assign t_ar_id = 1'b0;     
\js }
\js if (axiParams.eDomain) {
	assign t_ar_bar = \=shimStr=\ar_bar;
	assign t_ar_snoop = \=shimStr=\ar_snoop; 
	assign t_ar_domain = \=shimStr=\ar_domain; 
\js } else {
	assign t_ar_bar = 1'b0;   
	assign t_ar_snoop = 1'b0;
	assign t_ar_domain = 1'b1;
\js }
\js if (axiParams.wArUser || axiParams.wAwUser) {
\jsbegin
// if one is non-zero, they must both be non-zero
/* istanbul ignore else env ncore_3p7 */
      if(axiParams.wArUser >= axiParams.wAwUser) { \jsend
	assign t_ar_user = \=shimStr=\ar_user;  
\js   } else {
\js     if (axiParams.wArUser) {
          assign t_ar_user = {{\=axiParams.wAwUser-axiParams.wArUser=\{1'b0}}, \=shimStr=\ar_user};
\js     } else {
	  assign t_ar_user = {\=axiParams.wAwUser=\{1'b0}};
\js     }
\js   }
\js } else {
	assign t_ar_user = 1'b0; 
\js }
assign \=shimStr=\r_id = t_r_id[\=axiParams.wArId-1=\:0];
\js if (axiParams.eAc && axiParams.wCdData) {
assign t_rack = \=shimStr=\r_ack;
\js } else {
assign t_rack = 1'b1;
\js }

\jsbegin
// wRegion always 0 on 3.7
/* istanbul ignore if env ncore_3p7 */
    if (axiParams.wRegion) { \jsend
	assign t_aw_region = \=shimStr=\aw_region;
\js } else {
	assign t_aw_region = 1'b0;
\js }
\js if (axiParams.wQos) {
	assign t_aw_qos = \=shimStr=\aw_qos;
\js } else {
	assign t_aw_qos = 1'b0;
\js }
\jsbegin
// wArId/wAwId set to minimum 1 in parameter spec
/* istanbul ignore else env ncore_3p7 */
    if (axiParams.wArId || axiParams.wAwId) { \jsend
\jsbegin
// 3.7 restriction says these must be the same
/* istanbul ignore if env ncore_3p7 */
      if (axiParams.wArId > axiParams.wAwId) { \jsend
        assign t_aw_id = {{\=axiParams.wArId-axiParams.wAwId=\{1'b0}},\=shimStr=\aw_id};
\js   } else {
        assign t_aw_id = \=shimStr=\aw_id;
\js   }
\js } else {
	assign t_aw_id = 1'b0;     
\js }
\js if (axiParams.eDomain) {
\js   if (axiParams.eStash) {
	assign t_aw_snoop = \=shimStr=\aw_snoop; 
\js   } else {
	assign t_aw_snoop = {1'b0,\=shimStr=\aw_snoop}; 
\js   }
	assign t_aw_domain = \=shimStr=\aw_domain; 
\js } else {
	assign t_aw_snoop = 1'b0;
	assign t_aw_domain = 1'b1;
\js }
\js if (axiParams.wArUser || axiParams.wAwUser) {
\js   if(axiParams.wAwUser >= axiParams.wArUser) {
	assign t_aw_user = \=shimStr=\aw_user;  
\js   } else {
\js     if (axiParams.wAwUser) {
          assign t_aw_user = {{\=axiParams.wArUser-axiParams.wAwUser=\{1'b0}}, \=shimStr=\aw_user};
\js     } else {
	  assign t_aw_user = {\=axiParams.wArUser=\{1'b0}};
\js     }
\js   }
\js } else {
	assign t_aw_user = 1'b0; 
\js }
\js if (axiParams.wCdData) {
	assign t_aw_bar = {t_aw_unique, \=shimStr=\aw_bar[0]};
	assign t_aw_unique = \=shimStr=\aw_unique;
\js } else if (axiParams.eDomain) {
	assign t_aw_bar = \=shimStr=\aw_bar;
	assign t_aw_unique = 1'b0;
\js } else {
	assign t_aw_bar = 1'b0;
	assign t_aw_unique = 1'b0;
\js }
\js if (axiParams.eAc && axiParams.wCdData) {
assign t_wack = \=shimStr=\w_ack;
\js } else {
assign t_wack = 1'b1;
\js }
\js if (axiParams.eAtomic) {
	assign t_aw_atop = \=shimStr=\aw_atop;
\js } else {
        assign t_aw_atop = 1'b0;
\js }
\js if (axiParams.eStash) {
	assign t_aw_stashid = {\=shimStr=\aw_stashnid[\=FIDW-1=\:0], \=shimStr=\aw_stashniden, \=shimStr=\aw_stashlpid, \=shimStr=\aw_stashlpiden};
\js } else {
	assign t_aw_stashid = 1'b0;
\js }
\jsbegin
// WUser not used on 3.7
/* istanbul ignore if env ncore_3p7 */
    if (axiParams.wWUser) { \jsend
	assign t_w_user = \=shimStr=\w_user;
\js } else {
	assign t_w_user = 1'b0;
\js }

\js if (axiParams.eAc) {
assign t_ac_ready = \=shimStr=\ac_ready;

assign t_cr_valid = \=shimStr=\cr_valid;
assign \=shimStr=\cr_ready = t_cr_ready;
assign t_cr_resp = \=shimStr=\cr_resp;
\js } else {
assign t_ac_ready = 1'b1;

assign t_cr_valid = 1'b0;
assign t_cr_resp = 5'h0;
\js }
\js if (axiParams.wCdData) {
assign t_cd_valid = \=shimStr=\cd_valid;
assign \=shimStr=\cd_ready = t_cd_ready;
assign t_cd_data = \=shimStr=\cd_data;
\jsbegin
// Poison not enabled on 3.7
/* istanbul ignore else env ncore_3p7 */
    if (!enPoison) { \jsend
assign t_cd_poison = {1{1'b0}};
\js } else {
assign t_cd_poison = {\=axiParams.wCdData/64=\{1'b0}};
\js }
assign t_cd_last = \=shimStr=\cd_last;
\js } else {
assign t_cd_valid = 1'b0;
assign t_cd_data = {1{1'b0}};
assign t_cd_poison = {1{1'b0}};
assign t_cd_last = 1'b0;
\js }
\js if (axiParams.eTrace) {
assign t_ar_trace = \=shimStr=\ar_trace;
assign t_aw_trace = \=shimStr=\aw_trace;
//assign t_w_trace = \=shimStr=\w_trace;
assign t_w_trace = 1'b0;
assign \=shimStr=\r_trace = t_r_trace;
assign \=shimStr=\b_trace = t_b_trace;
\js } else {
assign t_ar_trace = 1'b0;
assign t_aw_trace = 1'b0; 
assign t_w_trace =  1'b0;
\js }
\js if (axiParams.wArVmidext) {
assign t_ar_vmidext = \=shimStr=\ar_vmidext;
\js } else {
assign t_ar_vmidext = 4'b0;
\js }
assign \=shimStr=\b_id = t_b_id[\=axiParams.wAwId=\-1:0];

\js ///////////////////////////////////////////////////////////////////////////////////
\js // IOAIU CONTROL
\js ///////////////////////////////////////////////////////////////////////////////////

assign cfg_rd_pool_ns = (|XAIUEDR2_RD_out) ? XAIUEDR2_RD_out :
                          (((XAIUCR_RD_out==2'b00) ? 8'd0                    : 8'd0) | 
                           ((XAIUCR_RD_out==2'b01) ? 8'd\=Math.ceil(OCN/6)=\ : 8'd0) | 
                           ((XAIUCR_RD_out==2'b10) ? 8'd\=Math.ceil(OCN/3)=\ : 8'd0) | 
                           ((XAIUCR_RD_out==2'b11) ? 8'd\=Math.ceil(OCN/2)=\ : 8'd0));
\=obj.lib.dffre(8, 'cfg_rd_pool', 'cfg_rd_pool_ns',   "8'b0", "1'b1", 'clk', 'reset_n')=\ 
assign cfg_wr_pool_ns = (|XAIUEDR2_WR_out) ? XAIUEDR2_WR_out : 
                          (((XAIUCR_WR_out==2'b00) ? 8'd2                    : 8'd0) |
                           ((XAIUCR_WR_out==2'b01) ? 8'd\=Math.max(2,Math.ceil(OCN/6))=\ : 8'd0) |
                           ((XAIUCR_WR_out==2'b10) ? 8'd\=Math.ceil(OCN/3)=\ : 8'd0) |
                           ((XAIUCR_WR_out==2'b11) ? 8'd\=Math.ceil(OCN/2)=\ : 8'd0));
\=obj.lib.dffre(8, 'cfg_wr_pool', 'cfg_wr_pool_ns',   "8'b0", "1'b1", 'clk', 'reset_n')=\ 

\=u.instance({
	moduleName: 'ioaiu_control',
	instanceName: 'ioaiu_control',
	params: {
                 sselParams : sselParams,
	         halfSpeedOD : halfSpeedOD,
	         owo : owo,
                 cmType : cm_type,
                 COH_MSI : COH_MSI,
                 COH_MOESI : COH_MOESI,
                 nSelectBits : nSelectBits,
                 CGE : CGE,
                 LIDW : LIDW,
                 PRIS : PRIS,
                 SECS : SECS,
                 ODEE : ODEE,
                 ODEW : ODEW,
                 QMAP : QMAP,
                 STP : STP,
                 P0E : P0E,
                 DRST : DRST,
                 XO : XO,
                 CTW : CTW,
                 eStarve : eStarve,
                 PIDW : PIDW,
                 FIDW : FIDW,
                 QOSN : QOSN,
                CTKM: CTKM,
                MTKM: MTKM,
                ITKM: ITKM,
                VTKM: VTKM,
                CTKS: CTKS,
                MTKS: MTKS,
                ITKS: ITKS,
                VTKS: VTKS,
                CWKS: CWKS,
                MWKS: MWKS,
                IWKS: IWKS,
                VWKS: VWKS,
                 cm_type: cm_type,
                 concParams : concParams,
                 axiParams : axiParamsOut,
                 ccpParams : ccpParams,
                 nProcs : nProcs,
                 enPoison : enPoison,
                 enSRAMPipe: enSRAMPipe,
                 useCache: useCache,
                 CLO: CLO,
                 AxIdProcSelectBits: AxIdProcSelectBits,
                 ODB: ODB,
                 ODN: ODN,
		 ODDW: ODDW,
		 ODAW: ODAW,		 
		 ODDRW: ODDRW,
		 OCN: OCN,
		 STN: STN,
		 STP: STP,
		 P0E: P0E,
		 CSW: CSW,
		 CKB: CKB,
		 CTB: CTB,
                 BWL: BWL,
                 usePLRU: usePLRU,
                 isDvmAgent: isDvmAgent,
		 noCacheLineInterleave: noCacheLineInterleave,
		 useSysEvtReceiver: useSysEvtReceiver,
		 useSysCohSender: useSysCohSender,
		 nativeTrigger: nativeTrigger,
		 assertOn: assertOn,
		 useSharerPromotion: useSharerPromotion,
		 useOwnerTransfer : useOwnerTransfer,		 
                 useNoAXIDinterleave : useNoAXIDinterleave,
		 fnDisableRdInterleave : fnDisableRdInterleave,
                 useConnectivity : useConnectivity,
                 useSoftwareCreditManagement : useSoftwareCreditManagement,
                 nCreditRegs : nCreditRegs,
                 nDCEs : nDCEs,
                 nDIIs : nDIIs,
                 nDMIs : nDMIs,
                 nDVEs : nDVEs,
                 cfgACE : cfgACE
		 },
	verilogParams: {
	},
	ports: controlPorts,
	portsDelimiter: '\n\t'
})=\

wire \=shimStr=\ar_valid_r, \=shimStr=\aw_valid_r ,\=shimStr=\w_valid_r;

wire [2:0] native_valids;
wire [2:0] native_valids_in = {\=shimStr=\ar_valid, \=shimStr=\aw_valid, \=shimStr=\w_valid};

assign { \=shimStr=\ar_valid_r, \=shimStr=\aw_valid_r ,\=shimStr=\w_valid_r } = native_valids;

\=obj.lib.dffre(3, 'native_valids', 'native_valids_in',   "3'b0", "1'b1", 'clk', 'reset_n')=\ 

assign t_busy = ~w_idle | \=shimStr=\ar_valid_r | \=shimStr=\aw_valid_r | \=shimStr=\w_valid_r | w_ccp_busy | w_cm_busy | (|t_cmr_state | XAIUPCMAR_MntOpActv_out)
//assign t_busy =  ~w_idle | w_cm_busy  | \=shimStr=\ar_valid | \=shimStr=\aw_valid | \=shimStr=\w_valid | w_ccp_busy | trace_capture_busy

\js if (useSysEvtReceiver || useSysEvtSender || useSysCohReceiver || useSysCohSender) {
          | sys_evt_coh_busy
\js }
;

// Need to have non piped version control the PMA. Piped versions go to clock gater.
assign t_pma_busy = t_busy | apb_penable | \=shimStr=\ar_valid | \=shimStr=\aw_valid | \=shimStr=\w_valid;
assign pma_busy = t_pma_busy;

\js if (useSysEvtReceiver || useSysCohReceiver) {
assign sys_req_rx_uce_bus =  sys_req_rx_header_UCE | sys_req_rx_message_UCE;
assign sys_req_rx_ce_bus  = sys_req_rx_CE;
\js } else {
assign sys_req_rx_uce_bus =  1'h0;
assign sys_req_rx_ce_bus  = 1'h0;
\js }

\js if (useSysEvtSender || useSysCohSender) {
assign sys_rsp_rx_uce_bus =  sys_rsp_rx_header_UCE | sys_rsp_rx_message_UCE;
assign sys_rsp_rx_ce_bus  = sys_rsp_rx_CE;
\js } else {
assign sys_rsp_rx_uce_bus =  1'h0;
assign sys_rsp_rx_ce_bus  = 1'h0;
\js }

// Dont check CHK signals until a cycle after RESET
wire reset_mask;
\=obj.lib.dffre(1, "reset_mask", "1'b1",   "1'b0", "1'b1", 'clk', 'reset_n')=\

assign ufault_o = { ( w_uerrs_unqual[3] | csr_sys_coh_sender_err_detected | csr_sys_evt_sender_err_vld | csr_sys_evt_receiver_err_vld),
                    ((| w_uerrs_unqual[1:0]) | w_pph_uerr | (chk_perr & reset_mask)), w_ccp_eu_valid_unqual,
\js if (err_port_keys.includes("snp_req_header_UCE")) {
		    (snp_req_header_UCE | snp_req_message_UCE),
\js } else {
                    1'b0, 
\js }
		    (dtr_req_rx_header_UCE | dtr_req_rx_message_UCE |
					    dtr_req_rx_data_UCE),
		    (str_req_header_UCE | str_req_message_UCE),
\js if (err_port_keys.includes("upd_rsp_header_UCE")) {
		    (upd_rsp_header_UCE | upd_rsp_message_UCE),
\js } else {
		    1'b0,
\js }
		    (dtw_rsp_header_UCE | dtw_rsp_message_UCE),
\js if (err_port_keys.includes("dtr_rsp_rx_header_UCE")) {
		    (dtr_rsp_rx_header_UCE | dtr_rsp_rx_message_UCE),
\js } else {
                    1'b0, 
\js }
		    (cmd_rsp_header_UCE | cmd_rsp_message_UCE), sys_req_rx_uce_bus, sys_rsp_rx_uce_bus, (dtw_dbg_rsp_header_UCE | dtw_dbg_rsp_message_UCE), cmp_rsp_uce_bus
};


assign cfault_o = {1'b0, ((| w_cerrs_unqual[1:0]) | w_pph_cerr), w_ccp_ec_valid_unqual,
\js if (err_port_keys.includes("snp_req_CE")) {
		   snp_req_CE, 
\js } else {
                   1'b0, 
\js }
                   dtr_req_rx_CE, str_req_CE,
\jsbegin /* istanbul ignore next env ncore_3p0,ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
  if (err_port_keys.includes("upd_rsp_CE")) { \jsend
		   upd_rsp_CE, 
\js } else {
		   1'b0,
\js }
		   dtw_rsp_CE, 
\js if (err_port_keys.includes("dtr_rsp_rx_CE")) {
                   dtr_rsp_rx_CE, 
\js } else {
                   1'b0, 
\js }
                   cmd_rsp_CE, sys_req_rx_ce_bus, sys_rsp_rx_ce_bus, dtw_dbg_rsp_CE, cmp_rsp_ce_bus  

};

\js if (err_port_keys.includes("snp_req_header_UCE")) {
assign snp_req_uce_bus    = snp_req_header_UCE | snp_req_message_UCE;
assign snp_req_ce_bus     = snp_req_CE;
\js } else {
assign snp_req_uce_bus    = 1'b0;
assign snp_req_ce_bus     = 1'b0;
\js }
assign dtr_req_rx_uce_bus = dtr_req_rx_header_UCE | dtr_req_rx_message_UCE | dtr_req_rx_data_UCE;
assign dtr_req_rx_ce_bus  = dtr_req_rx_CE;
assign str_req_uce_bus    = str_req_header_UCE | str_req_message_UCE;
assign str_req_ce_bus     = str_req_CE;
\js if (err_port_keys.includes("upd_rsp_header_UCE")) {
assign upd_rsp_uce_bus    = upd_rsp_header_UCE | upd_rsp_message_UCE;
assign upd_rsp_ce_bus     = upd_rsp_CE;
\js } else {
assign upd_rsp_uce_bus    = 1'b0;
assign upd_rsp_ce_bus     = 1'b0;
\js }
assign dtw_rsp_uce_bus    = dtw_rsp_header_UCE | dtw_rsp_message_UCE;
assign dtw_rsp_ce_bus     = dtw_rsp_CE;
\js if (err_port_keys.includes("dtr_rsp_rx_header_UCE")) {
assign dtr_rsp_rx_uce_bus = dtr_rsp_rx_header_UCE | dtr_rsp_rx_message_UCE;
assign dtr_rsp_rx_ce_bus  = dtr_rsp_rx_CE;
\js } else {
assign dtr_rsp_rx_uce_bus = 1'b0;
assign dtr_rsp_rx_ce_bus  = 1'b0;
\js }
assign cmd_rsp_uce_bus    = cmd_rsp_header_UCE | cmd_rsp_message_UCE;
assign cmd_rsp_ce_bus     = cmd_rsp_CE;
\js if (err_port_keys.includes("cmp_rsp_header_UCE")) {
assign cmp_rsp_uce_bus    = cmp_rsp_header_UCE | cmp_rsp_message_UCE;
assign cmp_rsp_ce_bus     = cmp_rsp_CE;
\js } else {
assign cmp_rsp_uce_bus = 1'b0;
assign cmp_rsp_ce_bus = 1'b0;
\js }
assign dtw_dbg_rsp_uce_bus= dtw_dbg_rsp_header_UCE | dtw_dbg_rsp_message_UCE;
assign dtw_dbg_rsp_ce_bus = dtw_dbg_rsp_CE;

assign threshold_o = XAIUCRTR_ResThreshold_out;


assign interrupt_o = q_interrupt;

wire [\=nPerfCounters-1=\:0] corr_pmon_ovf_int;

\jsbegin
// Loop through CSR registers and fields to grab information
var csrSearchResults = {};

CSRS.spaceBlock[0].registers.forEach( register => {
  register.fields.forEach( field => {
    if((register.name === "XAIUNRSAR") && (field.name === "NRSAR")) {
      csrSearchResults["XAIUNRSAR_NRSAR_access"] = field.access;
    }
  });
});


for(let i=0; i<nPerfCounters; i++) { \jsend
assign corr_pmon_ovf_int[\=i=\] = XAIUCNTCR\=i=\_InterruptEn_out & XAIUCNTCR\=i=\_OverFlowStatus_out; \jsbegin
} \jsend

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (nPerfCounters>0) { \jsend
wire corr_pmon_int = |corr_pmon_ovf_int;
\js } else {
wire corr_pmon_int = 1'b0;
\js }

wire [2-1:0] q_interrupt_ns = {(XAIUUESR_ErrVld_out & (((XAIUUESR_ErrType_out==4'h4) & XAIUUEIR_ProtErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'h9) & XAIUUEIR_TimeoutErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'ha) & XAIUUEIR_TimeoutErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'hb & ~XAIUUESR_ErrInfo_out[0]) & XAIUUEIR_TimeoutErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'hb &  XAIUUESR_ErrInfo_out[0]) & XAIUUEIR_ProtErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'h7) & XAIUUEIR_DecErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'hc) & XAIUUEIR_SoftwareProgConfigErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'hd) & XAIUUEIR_IntfCheckErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'h8) & XAIUUEIR_TransErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'h0) & XAIUUEIR_MemErrIntEn_out) |
                                                       ((XAIUUESR_ErrType_out==4'h1) & XAIUUEIR_MemErrIntEn_out))), (XAIUCECR_ErrIntEn_out & XAIUCESR_ErrVld_out) | corr_pmon_int};
\=u.dffre(2, `q_interrupt`, `q_interrupt_ns`, `2'd0`, `1'b1`, `clk`, `reset_n`)=\

assign w_cerrs[2:0] = w_cerrs_unqual & {3{XAIUCECR_ErrDetEn_out}};
assign w_ccp_ec_valid = w_ccp_ec_valid_unqual & XAIUCECR_ErrDetEn_out;

assign t_ucesr_clear = XAIUCESR_sw_wr & XAIUCESR_ErrVld_sw_wdata;
assign {XAIUCESR_ErrCountOverflow_wr, 
	XAIUCESR_ErrCount_wr} = {2{((w_ccp_ec_valid | (| w_cerrs)) &
				 ~XAIUCESR_ErrCountOverflow_out) | 
				t_ucesr_clear |
				XAIUCESAR_sw_wr}};
assign {XAIUCESR_ErrVld_wr, 
	XAIUCESR_ErrType_wr, 
	XAIUCESR_ErrInfo_wr} = {3{((w_ccp_ec_valid | (| w_cerrs)) &
				~XAIUCESR_ErrVld_out) | 
				t_ucesr_clear |
				XAIUCESAR_sw_wr}};
assign XAIUCELR0_ErrAddr_wr = ((w_ccp_ec_valid | (| w_cerrs)) &
				 ~XAIUCESR_ErrVld_out) | t_ucesr_clear;
assign XAIUCELR1_ErrAddr_wr = XAIUCELR0_ErrAddr_wr;
assign XAIUCESR_ErrVld_in = XAIUCESAR_sw_wr ? XAIUCESAR_ErrVld_sw_wdata :
			   ~t_ucesr_clear & (w_ccp_ec_valid | (| w_cerrs)) & 
			   (XAIUCESR_ErrCount_out>=XAIUCECR_ErrThreshold_out);
assign XAIUCESR_ErrType_in = XAIUCESAR_sw_wr ? XAIUCESAR_ErrType_sw_wdata :
			      t_ucesr_clear ? 4'h0 :
			      w_ccp_ec_valid ? 4'h1://{w_ccp_ec_type[3:0]}:
                              w_cerrs[1]     ? 4'h8 :
					       4'h0;
assign XAIUCESR_ErrInfo_in = XAIUCESAR_sw_wr ? XAIUCESAR_ErrInfo_sw_wdata :
			      t_ucesr_clear ? 16'h0 :
			      w_ccp_ec_valid ? {8'h0, w_ccp_ec_info[7:0]} :
                              w_cerrs[1]     ? {w_cinfo,6'b0} :
					       16'h0;
assign XAIUCESR_ErrCountOverflow_in = XAIUCESAR_sw_wr ? 
					   XAIUCESAR_ErrCountOverflow_sw_wdata:
				        t_ucesr_clear ? 1'b0 : 
							(XAIUCESR_ErrVld_out &
						         (w_ccp_ec_valid | (| w_cerrs)));
assign XAIUCESR_ErrCount_in = XAIUCESAR_sw_wr ? XAIUCESAR_ErrCount_sw_wdata :
			       t_ucesr_clear ? 8'h0 :
			       (~& XAIUCESR_ErrCount_out & ~(XAIUCESR_ErrCount_out == XAIUCECR_ErrThreshold_out)) ? 
						 XAIUCESR_ErrCount_out + 1'b1 :
						 XAIUCESR_ErrCount_out;

\js // FIXME 3.4 spyglass W164c: ccp addresses (and 20'h0) will expand to zero-fill the rest of the error address register
assign {XAIUCELR1_ErrAddr_in, XAIUCELR0_ErrAddr_in} = 
                                 w_ccp_ec_valid ? {8'b0, //spyglass w164a fix
							w_ccp_ec_addr[11:0],
						   w_ccp_ec_word[5:0],
						   w_ccp_ec_way[5:0],
						   w_ccp_ec_entry[19:0]} :
                                 w_cerrs[1]     ? 52'b0 :
						{20'h0, 6'h0, w_eway, w_eindex};

assign w_uerrs[5:0] = { (w_uerrs_unqual[5] & XAIUUEDR_SoftwareProgConfigErrEn_out),
                        (w_uerrs_unqual[4] & XAIUUEDR_ProtErrDetEn_out),
                        (w_uerrs_unqual[3] & XAIUUEDR_TimeoutErrDetEn_out),
                        (w_uerrs_unqual[2] & XAIUUEDR_DecErrDetEn_out),
                        (w_uerrs_unqual[1] & XAIUUEDR_TransErrDetEn_out),
                        (w_uerrs_unqual[0] & XAIUUEDR_MemErrDetEn_out)};

assign w_ccp_eu_valid = w_ccp_eu_valid_unqual & XAIUUEDR_MemErrDetEn_out;

assign t_uuesr_clear = XAIUUESR_sw_wr & XAIUUESR_ErrVld_sw_wdata;
\js // FIXME 3.4 spyglass W164a: the replication on the RHS should be 3 bits instead of 7. Fix Done
assign {XAIUUESR_ErrVld_wr, XAIUUESR_ErrType_wr, XAIUUESR_ErrInfo_wr} = 
	  {3{((w_ccp_eu_valid | (| w_uerrs) | chk_perr | (csr_sys_evt_receiver_err_vld & csr_sys_evt_receiver_err_event_timeout & XAIUUEDR_TimeoutErrDetEn_out) | (csr_sys_evt_sender_err_vld & (csr_sys_evt_sender_err_protocol_timeout | csr_sys_evt_sender_err_event_timeout) & XAIUUEDR_TimeoutErrDetEn_out) | (csr_sys_coh_sender_err_detected & csr_sys_coh_sender_err_protocol_timeout & XAIUUEDR_TimeoutErrDetEn_out) | (csr_sys_coh_sender_err_detected & ~csr_sys_coh_sender_err_protocol_timeout & XAIUUEDR_ProtErrDetEn_out) & (chk_perr & XAIUUEDR_IntfCheckErrDetEn_out)) &
	  ~XAIUUESR_ErrVld_out) | 
	  t_uuesr_clear |
	  XAIUUESAR_sw_wr}};

\js // FIXME 3.4 spyglass W164a: the replication on the RHS should be 4 bits instead of 7
assign {XAIUUELR0_ErrAddr_wr, XAIUUELR1_ErrAddr_wr} = 
          {2{((w_ccp_eu_valid | (| w_uerrs)) & ~XAIUUESR_ErrVld_out) | t_uuesr_clear}};

assign XAIUUESR_ErrVld_in = XAIUUESAR_sw_wr ? XAIUUESAR_ErrVld_sw_wdata :
						~t_uuesr_clear & 
						(w_ccp_eu_valid | (| w_uerrs) | chk_perr | (csr_sys_evt_receiver_err_vld & csr_sys_evt_receiver_err_event_timeout) | (csr_sys_evt_sender_err_vld & (csr_sys_evt_sender_err_protocol_timeout | csr_sys_evt_sender_err_event_timeout)) | csr_sys_coh_sender_err_detected);
assign XAIUUESR_ErrType_in = XAIUUESAR_sw_wr ? XAIUUESAR_ErrType_sw_wdata :
			      t_uuesr_clear ? 4'h0 :
			      w_ccp_eu_valid ? 4'h1://{w_ccp_eu_type[3:0]}:
                               csr_sys_coh_sender_err_detected ? 4'hb :
                              (csr_sys_evt_receiver_err_vld & csr_sys_evt_receiver_err_event_timeout | csr_sys_evt_sender_err_vld & (csr_sys_evt_sender_err_event_timeout|csr_sys_evt_sender_err_protocol_timeout)) ? 4'ha :
			      w_uerrs[5] ? 4'hc :
			      w_uerrs[4] ? 4'h4 :
			      w_uerrs[3] ? 4'h9 :
			      w_uerrs[2] ? 4'h7 :
			      w_uerrs[1] ? 4'h8 :
                              chk_perr ? 4'hd :
					   4'h0;
assign XAIUUESR_ErrInfo_in = XAIUUESAR_sw_wr ? XAIUUESAR_ErrInfo_sw_wdata :
			      t_uuesr_clear ? 20'h0 :
			      w_ccp_eu_valid ? {4'h0,8'h0, w_ccp_eu_info[7:0]} :
			      w_uerrs[4] ? {4'h0,13'h0, w_esecurity, w_uinfo[1:0]} :
			      w_uerrs[3] ? w_uinfo :
                               csr_sys_coh_sender_err_detected ? {4'h0,15'b0, ~csr_sys_coh_sender_err_protocol_timeout} :
                              ((csr_sys_evt_receiver_err_vld & csr_sys_evt_receiver_err_event_timeout) | (csr_sys_evt_sender_err_vld & csr_sys_evt_sender_err_event_timeout)) ? {4'h0,15'b0, 1'b1} :
                              chk_perr ? {16'b0,
                                                chk_ar_perr ? 4'h0 :
                                                chk_aw_perr ? 4'h1 :
                                                chk_w_perr  ? 4'h2 :
                                                chk_r_perr  ? 4'h3 :
                                                chk_b_perr  ? 4'h4 :
                                                chk_cr_perr ? 4'h5 :
                                                chk_cd_perr ? 4'h6 :
                                                chk_ac_perr ? 4'h7 :
                                                chk_rack_perr ? 4'h8 :
                                                chk_wack_perr ? 4'h9 :
                                                              4'h0
                                                        } :
						w_uinfo;

\js // FIXME 3.4 spyglass W164a: non-ccp address can be too big to fit in error register, but should truncate fine
\js // FIXME 3.4 spyglass W164c: ccp addresses (and 20'h0) will expand to zero-fill the rest of the error address register
assign {XAIUUELR1_ErrAddr_in, XAIUUELR0_ErrAddr_in} = 
       			         w_ccp_eu_valid ? {8'b0,w_ccp_eu_addr[11:0], w_ccp_eu_word[5:0], w_ccp_eu_way[5:0], w_ccp_eu_entry[19:0]} :
                                    w_uerrs[1]    ? 52'b0 :
				 (| w_uerrs[5:2]) ? w_eaddr[51:0] : {20'h0, 6'h0, w_eway, w_eindex};

// Unconnected Tieoffs
\js for (let i = 0; i < nCreditRegs; i++) {
    wire XAIUCCR\=i=\_sw_wr;
    wire XAIUCCR\=i=\_sw_rd;

    wire [2:0] XAIUCCR\=i=\_DCECounterState_sw_wdata;
    wire [2:0] XAIUCCR\=i=\_DMICounterState_sw_wdata;
    wire [2:0] XAIUCCR\=i=\_DIICounterState_sw_wdata;

    wire [4:0] XAIUCCR\=i=\_DCECreditLimit_sw_wdata;
    wire [4:0] XAIUCCR\=i=\_DMICreditLimit_sw_wdata;
    wire [4:0] XAIUCCR\=i=\_DIICreditLimit_sw_wdata;
\js }
\jsbegin
// NRSAR is always hardware read-only for 3.6
/* istanbul ignore else env ncore_3p6,ncore_3p7 */
if(csrSearchResults["XAIUNRSAR_NRSAR_access"] === "RO") { \jsend
    wire XAIUNRSAR_NRSAR_in  = 1'b0; \jsbegin
}

csrHwPorts['XAIUCCTRLR_ndn0Tx_out'] = 'prequal_CCTRLR_ndn0Tx_out';
csrHwPorts['XAIUCCTRLR_ndn0Rx_out'] = 'prequal_CCTRLR_ndn0Rx_out';
csrHwPorts['XAIUCCTRLR_ndn1Tx_out'] = 'prequal_CCTRLR_ndn1Tx_out';
csrHwPorts['XAIUCCTRLR_ndn1Rx_out'] = 'prequal_CCTRLR_ndn1Rx_out';
csrHwPorts['XAIUCCTRLR_ndn2Tx_out'] = 'prequal_CCTRLR_ndn2Tx_out';
csrHwPorts['XAIUCCTRLR_ndn2Rx_out'] = 'prequal_CCTRLR_ndn2Rx_out';
csrHwPorts['XAIUCCTRLR_dn0Tx_out'] = 'prequal_CCTRLR_dn0Tx_out';
csrHwPorts['XAIUCCTRLR_dn0Rx_out'] = 'prequal_CCTRLR_dn0Rx_out';

\jsend

\=m.bundleFunctions.wiresFromInterface('apb_mask_', apbInterfaceBundle, [], obj.lib.bundle)=\
\=m.bundleFunctions.assignByBundle('apb_mask_','apb_', apbInterfaceBundle, ['paddr'], u.bundle)=\

assign apb_mask_paddr[11:0] = apb_paddr[11:0];

\jsbegin
// apb address is always <= 12 bits for 3.6
/* istanbul ignore if env ncore_3p6,ncore_3p7 */
    if ( apbInterfaceBundle.paddr > 12) { \jsend
assign apb_mask_paddr[\=apbInterfaceBundle.paddr=\-1:12] = \=apbInterfaceBundle.paddr-12=\'h0;
\js }

\=obj.lib.instance({
	moduleName: 'apb_csr',
	instanceName: 'apb_csr',
	params: {
		clkInterface,
		cfgInterface: {"name" : 'apb_',
			       "signals" : apbInterfaceBundle},
		protectionInterface: {"name" : '', 
				      "signals" : {}},
		protectionStyle: null,
		flopAPB: "yes",
		enSwReadPorts: 1,
		csr: CSRS
	},
	ports: csrHwPorts,
	interfaces: CSR_INTF
})=\
assign XAIUCCTRLR_ndn0Tx_out = prequal_CCTRLR_ndn0Tx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_ndn0Rx_out = prequal_CCTRLR_ndn0Rx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_ndn1Tx_out = prequal_CCTRLR_ndn1Tx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_ndn1Rx_out = prequal_CCTRLR_ndn1Rx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_ndn2Tx_out = prequal_CCTRLR_ndn2Tx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_ndn2Rx_out = prequal_CCTRLR_ndn2Rx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_dn0Tx_out = prequal_CCTRLR_dn0Tx_out && ioaiu_en_debug_bist;
assign XAIUCCTRLR_dn0Rx_out = prequal_CCTRLR_dn0Rx_out && ioaiu_en_debug_bist;

assign XAIUNRSBAR_NRSBA_wr = XAIUNRSBLR_sw_rd & XAIUNRSBLR_BALoaded_out;
assign XAIUNRSBAR_NRSBA_in = XAIUNRSBHR_NRSBA_out;

assign XAIUNRSBLR_BALoaded_wr = XAIUNRSBHR_sw_wr | XAIUNRSBLR_sw_rd;
assign XAIUNRSBLR_BALoaded_in = XAIUNRSBHR_sw_wr;

\=u.instance({
	moduleName: 'ncore3_addr_map',
	instanceName: 'amc_amap',
        params: amapParams,
	verilogParams: {},
	ports: amc_ports,
	portsDelimiter: '\n\t'
})=\

\jsbegin
var amapEvictParams = utilFunctions.deepCopy(amapParams);
var amc_evict_ports = utilFunctions.deepCopy(amc_ports);

amc_evict_ports['unconnected_dce_access'] =  'unconnected_dce_access_evict';
amc_evict_ports['unconnected_dmi_access'] =  'unconnected_dmi_access_evict';
amc_evict_ports['unconnected_dii_access'] =  'unconnected_dii_access_evict';

amc_evict_ports['csr_access_nrs_error'] =  'w_amc_errs_evict[2]';

amc_evict_ports['bra_region_hit'] =  'bra_region_hit_evict';
amc_evict_ports['gpr_region_hit'] =  'gpr_region_hit_evict';
amc_evict_ports['nrs_region_hit'] =  'nrs_region_hit_evict';

amc_evict_ports['address_valid'] =   'w_amc_val_evict';
amc_evict_ports['address'] =         'w_amc_addr_evict';
amc_evict_ports['dce_id_valid'] =    'w_amc_vals_evict[0]';
amc_evict_ports['dce_f_unit_id'] =   'w_amc_fids_evict[0*'+FIDW+' +: '+FIDW+']';
amc_evict_ports['dce_id'] =          'w_amc_tins_evict[0*5 +: 5]';
amc_evict_ports['dmi_id_valid'] =    'w_amc_vals_evict[1]';
amc_evict_ports['dmi_f_unit_id'] =   'w_amc_fids_evict[1*'+FIDW+' +: '+FIDW+']';
amc_evict_ports['dmi_id'] =          'w_amc_tins_evict[1*5 +: 5]';
amc_evict_ports['dii_id_valid'] =    'w_amc_vals_evict[2]';
amc_evict_ports['dii_f_unit_id'] =   'w_amc_fids_evict[2*'+FIDW+' +: '+FIDW+']';
amc_evict_ports['dii_id'] =          'w_amc_tins_evict[2*5 +: 5]';
amc_evict_ports['dmi_mig'] =         'w_amc_mig_evict';
amc_evict_ports['nrs_selfidr_hit'] = 'w_amc_vals_evict[3]';
amc_evict_ports['Order_Policy'] =    'w_amc_order_evict[4:3]';
amc_evict_ports['Order_WriteID'] =   'w_amc_order_evict[2]';
amc_evict_ports['Order_ReadID'] =    'w_amc_order_evict[1]';
amc_evict_ports['Order_Hazard'] =    'w_amc_order_evict[0]';
amc_evict_ports['size_of_ig'] =      'w_amc_size_of_ig_evict';
amc_evict_ports['addressing_error_hit_multi'] =      'w_amc_errs_evict[1]';
amc_evict_ports['addressing_error_hit_none'] =       'w_amc_errs_evict[0]';

if ((axiParams.eDomain?1:0)==0) {
        amc_evict_ports['GPRAR_NC'] = 'XAIUGPRAR_NC_evict_out';
}
/* istanbul ignore next env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useNsx) {
        amc_evict_ports['GPRAR_NSX'] = 'XAIUGPRAR_NSX_evict_out';
}

\jsend

\=u.instance({
	moduleName: 'ncore3_addr_map',
	instanceName: 'evict_amap',
        params: amapEvictParams,
	verilogParams: {},
	ports: amc_evict_ports,
	portsDelimiter: '\n\t'
})=\

//=============================================================================
// IOAIU Trace Trigger Instance
//=============================================================================

// Drive nativeTrigger interface
assign \=nativeTrigger.name=\addr		= trace_addr;
assign \=nativeTrigger.name=\size_of_ig         = trace_size_of_ig;
assign \=nativeTrigger.name=\opcode		= trace_opcode;
assign \=nativeTrigger.name=\dmi_hit		= trace_dmi_hit;
assign \=nativeTrigger.name=\dii_hit		= trace_dii_hit;
assign \=nativeTrigger.name=\hui		= trace_hui;
assign \=nativeTrigger.name=\aw			= trace_aw;
assign \=nativeTrigger.name=\ar			= trace_ar;
assign \=nativeTrigger.name=\memattr		= trace_memattr;

\js if (nativeTrigger.signals.trace) {
assign \=nativeTrigger.name=\trace	        = trace_trace;
\js }

\js if (nativeTrigger.signals.user) {
assign \=nativeTrigger.name=\user	        = trace_user;
\js }

\=u.instance({
    instanceName : 'u_trace_trigger',
    moduleName   : 'trace_trigger',
    params: {
        nTraceRegisters : nTraceRegisters,
        clkInterface : clkInterface,
        nativeTrigger : nativeTrigger, 
        csrInterface : traceTrigCsrInterface
    },
    ports: {
        tracetag : "tracetag"
    },
    interfaces : [clkInterface, nativeTrigger, traceTrigCsrInterface].map( getModuleLocalPrefixAndInterface ) // Array of trace-trigger interfaces is converted to array of {modulePrefix, localPrefix, interface} objects
})=\

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (nPerfCounters>0) { \jsend
//=============================================================================
// IOAIU PMON Instance
//=============================================================================

\jsbegin
const clk16Interface = {
      name : clkInterface.name+"st_",
      signals: clkInterface.signals
};
\jsend

\=m.bundleFunctions.wiresFromInterface(clk16Interface.name, clk16Interface.signals, [], u.bundle)=\

assign pmon_div_by_sixteen = \=clk16Interface.name=\clk;

\=u.instance({
    instanceName: 'clk_divider' ,
    moduleName: 'clk_divider',
    params: {
	clkDivisors: [16],
	clkInterface :clkInterface,	
	clkOutInterfaces: [clk16Interface]
    },
    interfaces :[clkInterface, clk16Interface].map(getModuleLocalPrefixAndInterface),
    portsDelimiter: '\n    '
})=\

wire pmon_cache_fill_stall  = ccp_fd_valid & ~ccp_fd_ready;
wire pmon_cache_read_stall  = ccp_cd_valid & ~ccp_cd_ready;
wire pmon_cache_write_stall = ccp_cw_valid & ~ccp_cw_ready;

wire pmon_cache_r_hit_q;
wire pmon_cache_w_hit_q;
wire pmon_cache_s_hit_q;
wire pmon_cache_evict_q;
wire pmon_no_ways_q;
wire pmon_cache_fill_stall_q;
wire pmon_cache_read_stall_q;
wire pmon_cache_write_stall_q;
wire pmon_cache_replay_q;
wire pmon_cache_r_miss_q;
wire pmon_cache_w_miss_q;
wire pmon_cache_s_miss_q;

wire pmon_cmdreq_read_BW;
wire pmon_cmdreq_write_BW;
wire pmon_snprsp_BW;

assign pmon_cmdreq_write_BW = cmd_req_valid & cmd_req_ready & ((cmd_req_cm_type>=8'h10 & cmd_req_cm_type<=8'h25) | (cmd_req_cm_type>=8'h29 & cmd_req_cm_type<=8'h2a));
assign pmon_cmdreq_read_BW  = cmd_req_valid & cmd_req_ready & ((                         cmd_req_cm_type<=8'h0b) | (cmd_req_cm_type>=8'h26 & cmd_req_cm_type<=8'h28));
assign pmon_snprsp_BW       = snp_rsp_valid & snp_rsp_ready;

\=obj.lib.dffre(1, 'pmon_cache_r_hit_q',   'pmon_cache_r_hit',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_w_hit_q',   'pmon_cache_w_hit',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_s_hit_q',   'pmon_cache_s_hit',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_evict_q',   'pmon_cache_evict',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\

\=obj.lib.dffre(1, 'pmon_no_ways_q',            'pmon_no_ways',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_fill_stall_q',   'pmon_cache_fill_stall',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_read_stall_q',   'pmon_cache_read_stall',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_write_stall_q',  'pmon_cache_write_stall',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\

\=obj.lib.dffre(1, 'pmon_cache_replay_q',  'pmon_cache_replay',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_r_miss_q',  'pmon_cache_r_miss',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_w_miss_q',  'pmon_cache_w_miss',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\
\=obj.lib.dffre(1, 'pmon_cache_s_miss_q',  'pmon_cache_s_miss',   "1'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\

\jsbegin
var bwEvtMapping = m.generateBwEvtMapping(filterAttributesMap);

for (let i=0; i< pmonEventTable.length; i++) { \jsend
	assign \=pmonInterfaces.evtInterfaces[i].name=\val		= \=pmonEventTable[i].value=\; \jsbegin if (i==25) { \jsend  \jsbegin } \jsend \jsbegin
} \jsend

// Assign filter-attribute interfaces
assign \=pmonInterfaces.filterAttrInterfaces[0].name=\funit_id 		    = cmd_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];
assign \=pmonInterfaces.filterAttrInterfaces[0].name=\user 		    = cmd_req_aux;
 
assign \=pmonInterfaces.filterAttrInterfaces[1].name=\funit_id 		    = cmd_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];
assign \=pmonInterfaces.filterAttrInterfaces[1].name=\user 		    = cmd_req_aux;
 
assign \=pmonInterfaces.filterAttrInterfaces[2].name=\funit_id              = snp_rsp_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];
assign \=pmonInterfaces.filterAttrInterfaces[2].name=\user                  = 1'b0;

//Assign latency interfaces
assign \=pmonInterfaces.latencyInterfaces[0].name=\alloc                     = pmon_ott_read_latency_alloc;
assign \=pmonInterfaces.latencyInterfaces[0].name=\dealloc                   = pmon_ott_read_latency_dealloc;

assign \=pmonInterfaces.latencyInterfaces[1].name=\alloc                     = pmon_ott_write_latency_alloc;
assign \=pmonInterfaces.latencyInterfaces[1].name=\dealloc                   = pmon_ott_write_latency_dealloc;

\=obj.lib.dffre(8, 'pmon_ott_entries_q',   'pmon_ott_entries',   "8'b0", "1'b1", cm_ports.clk, cm_ports.reset_n)=\

\=u.nInstance({
    instanceName : 'u_ncr_pmon',
    moduleName : 'ncr_pmon',
    params: {
        nPerfCounters,
        bwEvtMapping: bwEvtMapping,
        nLatencyCounters : 16,
                interfaces: pmonInterfaces
    },
    interfaceObj: {
                interfaces: pmonInterfaces,
                prefixes: pmonInterfaces 
    }
})=\

\js }

//
/////////////////////////////////////////////////////////////////////////////
\jsbegin
/* istanbul ignore else env ncore_3p7 */
    if (assertOn) { 
var ioaiu_power2        = function(n) { return ((n & (n-1)) == 0) ? 1 : /* istanbul ignore next env ncore_3p7 */0; };
\jsend
`ifdef OVL_ASSERT_ON
// pragma synthesis_off
// synthesis_off
// coverage off
reg  a_error_test;
initial begin
	if ($test$plusargs("error_test")) begin
		a_error_test = 1'b1;
	end else begin
		a_error_test = 1'b0;
	end
end

\jsbegin
var CMH = concParams.hdrParams;
var CMmrc = concParams.cmdReqParams;
var CMmpc = concParams.cmdRspParams;
var CMmrr = concParams.dtrReqParams;
var CMmpr = concParams.dtrRspParams;
var CMmrw = concParams.dtwReqParams;
var CMmpw = concParams.dtwRspParams;
var CMmru = concParams.updReqParams;
var CMmpu = concParams.updRspParams;

var CMsrc = concParams.strReqParams;
var CMspc = concParams.strRspParams;
var CMsrr = concParams.dtrReqParams;
var CMspr = concParams.dtrRspParams;
var CMsrn = concParams.snpReqParams;
var CMspn = concParams.snpRspParams;
var CMspv = concParams.cmpRspParams;

var CMHT = CMH.wTargetId;
var CMHI = CMH.wInitiatorId;
var CMHM = CMH.wMsgId;
var CMHH = CMH.wHProt;
var CMHP = CMH.wPriority;
var CMHL = CMH.wQl;

var MRCA = CMmrc.wAddr;
var MRC1 = CMmrc.wMpf1;
var MRC2 = CMmrc.wMpf2;
var MRCF = CMmrc.wTof;
var MRCQ = CMmrc.wQos;
var MRCX = CMmrc.wNdpAux;
var MRCD = CMmrc.wDId;
var MRCH = CMmrc.wMProt;

var MRRR = CMmrr.wMsgId;
var MRRD = CMmrr.wData;
var MRRB = MRRD/8;
var MRRZ = MRRD/64;
var MRRU = CMmrr.wUser;
var MRRX = CMmrr.wNdpAux;
var MRRH = CMmrr.wMProt;
var MRRO = CMmrr.wDProt;

var MRWV = CMmrw.wRBID;
var MRW1 = CMmrw.wMpf1;
var MRW2 = CMmrw.wMpf2;
var MRWD = CMmrw.wData;
var MRWB = MRWD/8;
var MRWZ = MRWD/64;
var MRWU = CMmrw.wUser;
var MRWX = CMmrw.wNdpAux;
var MRWH = CMmrw.wMProt;
var MRWO = CMmrw.wDProt;

var MRUA = CMmru.wAddr;
var MRUQ = CMmru.wQos;
var MRUH = CMmru.wMProt;

\jsend

assert_never #(0) assert_param(
	.clk		(clk),
	.reset_n	(reset_n),
	.test_expr	((\=axiParams.eTrace?axiParams.eTrace:1=\>1) | (\=axiParams.wAddr=\<16) |
			 ((\=axiParams.eStash?axiParams.eStash:1=\>0) & (\=FIDW=\>11)) | 
			 ((\=axiParams.eStash?axiParams.eStash:1=\>0) & (\=(FIDW+1)=\>\=MRC1=\)))
);

assert_never #(0) assert_amap(
	.clk		(clk),
	.reset_n	(reset_n),
	.test_expr	(XAIUNRSBHR_sw_wr & XAIUNRSBLR_sw_rd)
);

wire [2:0] assert_cmr_vec;
assign assert_cmr_vec[2] =   ((| t_cmr_state) & (& t_cmr_count)) ;
assign assert_cmr_vec[1] =   (ccp_maint & ~t_cmr_state[1]) ;
assign assert_cmr_vec[0] =   (w_cmr_done & (t_cmr_state != 2'h3));

assert_never #(0) assert_cmr(
	.clk		(clk),
	.reset_n	(reset_n),
	.test_expr	(|assert_cmr_vec)
);

assert_never #(0) assert_top(
	.clk		(clk),
	.reset_n	(reset_n),
	.test_expr	((\=(axiParams.eDomain?1:0)=\==99) |
			 (\=(axiParams.eDomain?1:0)=\>1) | ((\=axiParams.wResp=\!=2) & (\=axiParams.wResp=\!=4)) |
			 (\=axiParams.wCdData?1:0=\ && (\=axiParams.wResp=\ != 4)) |
			 (! \=ioaiu_power2(nDCEs)=\) | // \=nDCEs=\
			 (w_starve[1] & w_idle) | (& w_starve))
);

assert_never_unknown #(0, 28) assert_unknown_mux(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(reset_n),
	.test_expr	({cmd_req_ready, dtr_req_tx_ready, dtw_req_ready,
			  upd_req_ready,
			  cmd_req_valid, dtr_req_tx_valid, dtw_req_valid,
			  upd_req_valid,
			  cmd_rsp_ready, dtr_rsp_rx_ready, dtw_rsp_ready,
			  upd_rsp_ready,
			  cmd_rsp_valid, dtr_rsp_rx_valid, dtw_rsp_valid, 
			  upd_rsp_valid, 
			  str_req_ready, dtr_req_rx_ready, snp_req_ready, 
			  str_req_valid, dtr_req_rx_valid, snp_req_valid, 
			  str_rsp_ready, dtr_rsp_tx_ready, snp_rsp_ready, 
			  str_rsp_valid, dtr_rsp_tx_valid, snp_rsp_valid})
);

assert_never_unknown #(0, \=10+CTB*2+ODB*2+12+6=\) assert_unknown_control(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(reset_n),
	.test_expr	({cmd_req_valid, dtr_req_tx_valid, dtw_req_valid,
			  upd_req_valid, od_we_o, od_re_o, test_en_i, apb_psel,
			  t_cmr_state, w_cmr_done, w_starve, w_idle, t_busy,
			  ccp_ready, ccp_p0_ready, ccp_p0_valid,
			  ccp_fd_valid, ccp_fd_ready, ccp_ft_ready,
			  ccp_ft_valid, ccp_cd_ready, ccp_cd_valid,
			  ccp_cw_ready, ccp_cw_valid, ccp_ce_ready,
			  ccp_ce_valid, ccp_p2_nacks})
);

assert_never_unknown #(0, 14) assert_unknown_apb(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(apb_psel),
	.test_expr	({apb_paddr[11:0], apb_penable, apb_pwrite})
);

assert_never_unknown #(0, \=37+CMHT+CMHI+CMHM+CMHP+CMHL+MRCA+
			     MRC1+MRC2+MRCD+MRCF+MRCQ+MRCX+1+2=\) assert_unknown_cmd_req(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(cmd_req_valid),
	.test_expr	({cmd_req_target_id, cmd_req_initiator_id,
			  cmd_req_message_id, cmd_req_cm_type,
			  cmd_req_priority, cmd_req_ql,
			  cmd_req_cm_status, cmd_req_addr, cmd_req_tm, 
			  cmd_req_rl, cmd_req_lk, cmd_req_or, cmd_req_pr,
			  cmd_req_ns, cmd_req_es, cmd_req_en, cmd_req_st, 
			  cmd_req_ch, cmd_req_ca, cmd_req_ac, cmd_req_vz,
			  cmd_req_mpf1, cmd_req_mpf2, cmd_req_size,
			  cmd_req_intf_size, cmd_req_d_id, cmd_req_tof, 
			  cmd_req_qos, cmd_req_aux})
);
assert_never_unknown #(0, \=20+CMHT+CMHI+CMHM+CMHP+CMHL+
			     (MRRZ*3)+MRRZ+MRRD+MRRB+MRRU+2+1=\) assert_unknown_dtr_req_tx(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(dtr_req_tx_valid),
	.test_expr	({dtr_req_tx_last, dtr_req_tx_target_id, 
			  dtr_req_tx_initiator_id, dtr_req_tx_message_id, 
			  dtr_req_tx_cm_type, dtr_req_tx_priority, 
			  dtr_req_tx_ql, dtr_req_tx_cm_status, dtr_req_tx_tm, 
			  dtr_req_tx_rl, dtr_req_tx_dwid, dtr_req_tx_dbad, 
			  dtr_req_tx_data, dtr_req_tx_be, dtr_req_tx_user})
);
assert_never_unknown #(0, \=23+CMHT+CMHI+CMHM+MRWV+
			     CMHP+CMHL+(MRWZ*3)+MRWZ+
			     MRW1+MRW2+MRWD+MRWB+MRWU+2+1=\) assert_unknown_dtw_req(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(dtw_req_valid),
	.test_expr	({dtw_req_last, dtw_req_target_id, dtw_req_initiator_id,
			  dtw_req_message_id, dtw_req_rb_id, dtw_req_cm_type, 
			  dtw_req_priority, dtw_req_ql, dtw_req_cm_status,
			  dtw_req_primary, dtw_req_tm, dtw_req_rl, 
			  dtw_req_intf_size, dtw_req_dwid, dtw_req_dbad, 
			  dtw_req_mpf1, dtw_req_mpf2, dtw_req_data, 
			  dtw_req_be, dtw_req_user})
);
assert_never_unknown #(0, \=17+CMHT+CMHI+CMHM+MRUQ+
			     CMHP+CMHL+MRUA+1+1+2=\) assert_unknown_upd_req(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(upd_req_valid),
	.test_expr	({upd_req_target_id, upd_req_initiator_id,
			  upd_req_message_id, upd_req_cm_type, upd_req_qos, upd_req_tm,
			  upd_req_priority, upd_req_ql, upd_req_cm_status, 
			  upd_req_addr, upd_req_ns})
);

assert_never_unknown #(0, \=1+axiParams.wAddr=\) assert_unknown_ccp0(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	((| ccp_p0_valid)),
	.test_expr	({ccp_p0_addr, ccp_p0_security})
);
assert_never_unknown #(0, 36+\=axiParams.wAddr+CSW*3+BWL+(ccpParams.nWays?ccpParams.nWays:1)*3=\) assert_unknown_ccp2(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	((| ccp_p2_valid)),
	.test_expr	({ccp_p2_alloc, ccp_p2_setn, ccp_p2_wayn,
			  ccp_p2_rd, ccp_p2_wr, ccp_p2_port, ccp_p2_lru,
			  ccp_p2_update, 
			  ({\=CSW=\{ccp_p2_update}} & ccp_p2_nstate), ccp_p2_setw,
			  ccp_p2_len, ccp_p2_busy, ccp_p2_evict, ccp_p2_eaddr,
			  ccp_p2_esecurity, ccp_p2_estate, ccp_p2_valid,
			  ccp_p2_cstate, ccp_p2_hits, ccp_p2_ways})
);
assert_never_unknown #(0, 1+\=(enPoison?/* istanbul ignore next env ncore_3p7 */axiParams.wData/64:1)+axiParams.wData+ioaiu_pos(log2ceil((ccpParams.nWays?ccpParams.nWays:1)))+BWL+axiParams.wAddr+log2ceil(OCN)*2+1+axiParams.wData/8=\) assert_unknown_cfd(
	.clk		(clk),
	.reset_n	(reset_n & ~a_error_test),
	.qualifier	(ccp_fd_valid),
	.test_expr	({ccp_fd_poison, ccp_fd_data, ccp_fd_way, ccp_fd_beat,
			  ccp_fd_addr, ccp_fd_oid, ccp_fd_done, ccp_fd_nid,
			  ccp_fd_last, ccp_fd_be})
);
assert_never_unknown #(0, \=1+CSW+axiParams.wAddr+ioaiu_pos(log2ceil((ccpParams.nWays?ccpParams.nWays:1)))=\) assert_unknown_cft(
	.clk		(clk),
	.reset_n	(reset_n & ~a_error_test),
	.qualifier	(ccp_ft_valid),
	.test_expr	({ccp_ft_state, ccp_ft_addr, ccp_ft_security, 
			  ccp_ft_way})
);
assert_never_unknown #(0, 2+\=(enPoison?/* istanbul ignore next env ncore_3p7 */axiParams.wData/64:1)+axiParams.wData+(axiParams.wData/8)=\) assert_unknown_ccd(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(ccp_cd_valid),
	.test_expr	({ccp_cd_poison, ccp_cd_rdata, ccp_cd_be, 
			  ccp_cd_last, ccp_cd_cancel})
);
assert_never_unknown #(0, 1+\=(enPoison?/* istanbul ignore next env ncore_3p7 */axiParams.wData/64:1)+axiParams.wData+(axiParams.wData/8)+BWL=\) assert_unknown_ccw(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(ccp_cw_valid),
	.test_expr	({ccp_cw_poison, ccp_cw_wdata, ccp_cw_be, 
			  ccp_cw_offset, ccp_cw_last})
);
assert_never_unknown #(0, 2+\=(enPoison?/* istanbul ignore next env ncore_3p7 */axiParams.wData/64:1)+axiParams.wData+(axiParams.wData/8)=\) assert_unknown_cce(
	.clk		(clk),
	.reset_n	(reset_n),
	.qualifier	(ccp_ce_valid),
	.test_expr	({ccp_ce_poison, ccp_ce_rdata, ccp_ce_be,
			  ccp_ce_last, ccp_ce_cancel})
);

assert_never #(0) assert_error(
	.clk		(clk),
	.reset_n	(reset_n & ~a_error_test),
	.test_expr	((w_amc_val & (| w_amc_errs_qual)) | 
			 (| w_uerrs) | (| w_cerrs))
);

wire [2:0] assert_dvm_vec;
assign assert_dvm_vec[2] =   (cmp_rsp_valid & (cmp_rsp_initiator_id !=
                                               {dve_ids_i, {\=PIDW=\{1'b0}}})) ;
assign assert_dvm_vec[1] =   (cmp_rsp_valid & (cmp_rsp_cm_type != \=cm_type.CmpRsp=\)) ;
assign assert_dvm_vec[0] =   (cmp_rsp_valid & cmp_rsp_cm_status[7]);

assert_never #(0) assert_dvm(
	.clk		(clk),
	.reset_n	(reset_n & ~a_error_test),
	.test_expr	(|assert_dvm_vec)
);
// coverage on
// pragma synthesis_on
// synthesis_on
`endif

\js }

endmodule
