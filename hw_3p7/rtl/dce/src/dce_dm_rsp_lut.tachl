\jsbegin
//=============================================================================
// Copyright(C) 2022 Arteris, Inc.
// All rights reserved
//=============================================================================
// DCE Directory Response Lookup Table
// Filename: dce_dm_rsp_lut.tachl
//=============================================================================

var u = obj.lib;

//=============================================================================
// Parameters
//=============================================================================

var assertOn  = u.getParam('assertOn');
var N_ATT     = u.getParam('N_ATT');
var W_INIT_ID = u.getParam('W_INIT_ID');
var W_CM_TYPE = u.getParam('W_CM_TYPE');
var W_MPF2    = u.getParam('W_MPF2');
var W_ES      = u.getParam('W_ES');
var W_ADDR    = u.getParam('W_ADDR');
var W_NS      = u.getParam('W_NS');

var N_DM_RSP_LOOKUP_ENTRIES = 5;

//=============================================================================
// Ports
//=============================================================================

u.port('input',  'clk', 1);
u.port('input',  'reset_n', 1);

// Allocate during P1 cycle
u.port('input',  'p1_dm_rtr_att_vec', N_ATT);
u.port('input',  'p1_tm_cmd_valid', 1);
u.port('input',  'p1_req_wakeup_valid', 1);
u.port('input',  'p1_req_retry_valid', 1);
u.port('input',  'p1_dm_req_cancel', 1);

u.port('input',  'p1_req_att_alloc',            N_ATT);
u.port('input',  'p1_req_cmd_req_initiator_id', W_INIT_ID);
u.port('input',  'p1_req_cmd_cm_type',          W_CM_TYPE);
u.port('input',  'p1_req_cmd_req_mpf2',         W_MPF2);
u.port('input',  'p1_req_cmd_req_es',           W_ES);
u.port('input',  'p1_req_cmd_req_addr',         W_ADDR);
u.port('input',  'p1_req_cmd_req_ns',           W_NS);

// Lookup during P2 cycle
u.port('input',  'dm_rsp_valid', 1);
u.port('input',  'dm_rsp_ready', 1);
u.port('input',  'dm_rsp_att_vec', N_ATT);

u.port('output', 'dm_rsp_lookup_initiator_id', W_INIT_ID);
u.port('output', 'dm_rsp_lookup_cm_type',      W_CM_TYPE);
u.port('output', 'dm_rsp_lookup_mpf2',         W_MPF2);
u.port('output', 'dm_rsp_lookup_es',           W_ES);
u.port('output', 'dm_rsp_lookup_addr',         W_ADDR);
u.port('output', 'dm_rsp_lookup_ns',           W_NS);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

localparam N_ATT     = \=N_ATT=\;
localparam W_INIT_ID = \=W_INIT_ID=\;
localparam W_CM_TYPE = \=W_CM_TYPE=\;
localparam W_MPF2    = \=W_MPF2=\;
localparam W_ES      = \=W_ES=\;
localparam W_ADDR    = \=W_ADDR=\;
localparam W_NS      = \=W_NS=\;

localparam N_DM_RSP_LOOKUP_ENTRIES = \=N_DM_RSP_LOOKUP_ENTRIES=\;

// p1 alloc
// retry, dm_rsp dealloc

\js for (let i = 0 ; i < N_DM_RSP_LOOKUP_ENTRIES ; i++) {
wire [N_ATT-1 : 0] dm_rsp_lookup_entry_att_vec\=i=\;
wire [W_INIT_ID-1 : 0] dm_rsp_lookup_entry_initiator_id\=i=\;
wire [W_CM_TYPE-1 : 0] dm_rsp_lookup_entry_cm_type\=i=\;
wire [W_MPF2-1 : 0] dm_rsp_lookup_entry_mpf2\=i=\;
wire [W_ES-1 : 0] dm_rsp_lookup_entry_es\=i=\;
wire [W_NS-1 : 0] dm_rsp_lookup_entry_ns\=i=\;
wire [W_ADDR-1 : 0] dm_rsp_lookup_entry_addr\=i=\;
wire dm_rsp_lookup_entry_valid\=i=\;
\js }
wire [N_DM_RSP_LOOKUP_ENTRIES-1 : 0] dm_rsp_lookup_entry_valid_set, dm_rsp_lookup_entry_valid_clr, dm_rsp_lookup_entry_valid_en;
wire [N_DM_RSP_LOOKUP_ENTRIES-1 : 0] dm_rsp_lookup_entry_alloc_ptr;
wire [N_DM_RSP_LOOKUP_ENTRIES-1 : 0] dm_rsp_lookup_vec;
wire [N_DM_RSP_LOOKUP_ENTRIES-1 : 0] dm_rtr_lookup_vec;
wire [N_DM_RSP_LOOKUP_ENTRIES-1 : 0] dm_rsp_lookup_entry_valid;

\js for ( let i = 0 ; i < N_DM_RSP_LOOKUP_ENTRIES ; i++ ) {
\=u.dffre(N_ATT,    'dm_rsp_lookup_entry_att_vec'+i,      'p1_req_att_alloc',                     N_ATT+"'d0",     'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(W_INIT_ID,'dm_rsp_lookup_entry_initiator_id'+i, 'p1_req_cmd_req_initiator_id',          W_INIT_ID+"'d0", 'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(W_CM_TYPE,'dm_rsp_lookup_entry_cm_type'+i,      'p1_req_cmd_cm_type',                   W_CM_TYPE+"'d0", 'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(W_MPF2,   'dm_rsp_lookup_entry_mpf2'+i,         'p1_req_cmd_req_mpf2',                  W_MPF2+"'d0",    'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(W_ES,     'dm_rsp_lookup_entry_es'+i,           'p1_req_cmd_req_es',                    W_ES+"'d0",      'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR,   'dm_rsp_lookup_entry_addr'+i,         'p1_req_cmd_req_addr',                  W_ADDR+"'d0",    'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(W_NS,     'dm_rsp_lookup_entry_ns'+i,           'p1_req_cmd_req_ns',                    W_NS+"'d0",      'dm_rsp_lookup_entry_valid_set['+i+']', 'clk', 'reset_n')=\
\=u.dffre(1,        'dm_rsp_lookup_entry_valid'+i,        'dm_rsp_lookup_entry_valid_set['+i+']', "1'd0",          'dm_rsp_lookup_entry_valid_en['+i+']',  'clk', 'reset_n')=\

assign dm_rsp_lookup_entry_valid[\=i=\] = dm_rsp_lookup_entry_valid\=i=\;
assign dm_rsp_lookup_vec[\=i=\] = (dm_rsp_lookup_entry_valid\=i=\ & |(dm_rsp_lookup_entry_att_vec\=i=\ & dm_rsp_att_vec));
assign dm_rtr_lookup_vec[\=i=\] = (dm_rsp_lookup_entry_valid\=i=\ & |(dm_rsp_lookup_entry_att_vec\=i=\ & p1_dm_rtr_att_vec));
\js }

// p1_tm_cmd_valid does not include wakeup & retry. <= wrong, only need to exclude retry

assign dm_rsp_lookup_entry_valid_set = dm_rsp_lookup_entry_alloc_ptr & {N_DM_RSP_LOOKUP_ENTRIES{((p1_tm_cmd_valid | p1_req_wakeup_valid) & ~p1_req_retry_valid & ~p1_dm_req_cancel)}};
assign dm_rsp_lookup_entry_valid_clr = (dm_rsp_lookup_vec & {N_DM_RSP_LOOKUP_ENTRIES{dm_rsp_valid & dm_rsp_ready}}) 
                                     | (dm_rtr_lookup_vec & {N_DM_RSP_LOOKUP_ENTRIES{p1_req_retry_valid & p1_dm_req_cancel}}); 
assign dm_rsp_lookup_entry_valid_en = dm_rsp_lookup_entry_valid_set | dm_rsp_lookup_entry_valid_clr;

\=u.instance({
    instanceName : 'dm_rsp_lookup_ff',
    moduleName : 'find_first_one',
    params : {
        width :  N_DM_RSP_LOOKUP_ENTRIES
    },
    ports : {
        invec : '~dm_rsp_lookup_entry_valid',
        outvec : 'dm_rsp_lookup_entry_alloc_ptr'
    }
})=\

assign dm_rsp_lookup_initiator_id =
    \js for (let i=0; i< N_DM_RSP_LOOKUP_ENTRIES ; i++) {
        ({W_INIT_ID{dm_rsp_lookup_vec[\=i=\]}} & dm_rsp_lookup_entry_initiator_id\=i=\) |
    \js }
        {W_INIT_ID{1'b0}};

assign dm_rsp_lookup_mpf2 =
\js for (let i=0; i< N_DM_RSP_LOOKUP_ENTRIES ; i++) {
        ({W_MPF2{dm_rsp_lookup_vec[\=i=\]}} & dm_rsp_lookup_entry_mpf2\=i=\) |
\js }
        {W_MPF2{1'b0}};

assign dm_rsp_lookup_es =
\js for (let i=0; i< N_DM_RSP_LOOKUP_ENTRIES ; i++) {
        ({W_ES{dm_rsp_lookup_vec[\=i=\]}} & dm_rsp_lookup_entry_es\=i=\) |
\js }
        {W_ES{1'b0}};

assign dm_rsp_lookup_cm_type =
\js for (let i=0; i< N_DM_RSP_LOOKUP_ENTRIES ; i++) {
        ({W_CM_TYPE{dm_rsp_lookup_vec[\=i=\]}} & dm_rsp_lookup_entry_cm_type\=i=\) |
\js }
        {W_CM_TYPE{1'b0}};    

assign dm_rsp_lookup_ns =
\js for (let i=0; i< N_DM_RSP_LOOKUP_ENTRIES ; i++) {
        ({W_NS{dm_rsp_lookup_vec[\=i=\]}} & dm_rsp_lookup_entry_ns\=i=\) |
\js }
        {W_NS{1'b0}};

assign dm_rsp_lookup_addr =
\js for (let i=0; i< N_DM_RSP_LOOKUP_ENTRIES ; i++) {
        ({W_ADDR{dm_rsp_lookup_vec[\=i=\]}} & dm_rsp_lookup_entry_addr\=i=\) |
\js }
        {W_ADDR{1'b0}};



\js if (assertOn) {

`ifdef OVL_ASSERT_ON

//coverage off
//pragma synthesis_off

assert_implication #(0) assert_dm_rsp_lookup_onehot (
    .clk(clk),
    .reset_n(reset_n),
    .antecedent_expr(dm_rsp_valid & dm_rsp_ready),
    .consequent_expr($onehot(dm_rsp_lookup_vec))
);

assert_implication #(0) assert_lookup_table_valid_multi_set (
    .clk(clk),
    .reset_n(reset_n),
    .antecedent_expr((&dm_rsp_lookup_entry_valid)),
    .consequent_expr(~(|dm_rsp_lookup_entry_valid_set))
);

//coverage on
//pragma synthesis_on

`endif

\js }

endmodule
