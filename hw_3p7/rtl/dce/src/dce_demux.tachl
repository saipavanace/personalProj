\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
// Filename: dce_demux.tachl
//=============================================================================

var u = obj.lib;

var assertOn = u.getParam('assertOn');

var DW = u.getParam('DW');
var NUM = u.getParam('NUM');

u.port('input',  'clk_i', 1);
u.port('input',  'reset_ni', 1);
u.port('output', 'ready_o', 1);
u.port('input',  'valid_i', 1);
u.port('input',  'data_i', DW);
u.port('input',  'ready_i', NUM);
u.port('output', 'valid_o', NUM);
u.port('output', 'data_o', NUM*DW);
u.port('input',  'bvsel_i', NUM);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

localparam DW = \=DW=\;
localparam NUM = \=NUM=\;

wire [NUM-1:0]	t_ready;
reg [NUM-1:0]	t_valid;

integer i;

assign t_ready = (ready_i & bvsel_i) | ~bvsel_i;

assign ready_o = (& t_ready) & (| bvsel_i);
assign valid_o = t_valid & bvsel_i;
assign data_o = {NUM{data_i}};

always @ (*) begin
	for(i=0; i<NUM; i=i+1) begin
		t_valid[i] = valid_i & (&(t_ready | ({{NUM-1{1'b0}},1'b1}<<i)));
	end
end

////////////////////////////////////////////////////////////////////
\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (assertOn) { \jsend
`ifdef OVL_ASSERT_ON
// pragma synthesis_off
// synopsys translate_off
// coverage off

//assert_never #(0) assert_param(
//	.clk		(clk_i),
//	.reset_n	(reset_ni),
//	.test_expr	(NUM<2)
//);

assert_never_unknown #(0,((NUM+1)*2)+NUM) assert_control(
	.clk		(clk_i),
	.reset_n	(reset_ni),
	.qualifier	(reset_ni),
	.test_expr	({(((NUM+1)*2)+NUM){reset_ni}} & 
			 {ready_o, valid_i, ready_i, valid_o, bvsel_i})
);

assert_never_unknown #(0,DW+NUM) assert_data(
	.clk		(clk_i),
	.reset_n	(reset_ni),
	.qualifier	(reset_ni),
	.test_expr	({DW+NUM{reset_ni}} &
			 {bvsel_i, ({DW{valid_i}} & data_i)})
);

// coverage on
// synopsys translate_on
// pragma synthesis_on
`endif
\js }

endmodule

