\jsbegin
//=============================================================================
// Copyright (C) 2018 Arteris, Inc.
// All rights reserved.
//=============================================================================
//
// NAME: DCE Unit
//
// AUTHOR : Mohammed Khaleeluddin 
//
// DESCRIPTION:
//
//=============================================================================


//      
// Variables
// 
   
const u							= obj.lib;
const m							= obj.userLib;
const vlogGen					= m.vlogGen();
const vlogPkdArray				= vlogGen.vlogPkdArray;
const newToOldStyleInterface	= m.newToOldStyleInterface.bind( null, obj.userLib );
const flattenInterface			= m.flattenInterface;

var bundleFunctions = obj.userLib.bundleFunctions;

function tieoffsFromInterface(prefix, bundle) {
  const keys = Object.keys(bundle);
  var res = '';
  for (let i = 0; i < keys.length; i++) {
    res = res + 'assign ' + prefix + keys[i] + ' = ' + bundle[keys[i]] + "'h0;\n";
  }
  return res;
}

//
// Params
//

let ASSERT_ON = m.ParamDefaultGet(u, 'assertOn', 'int', 0);

let useSramInputFlop = u.getParam('useSramInputFlop');

let useSaveLatency = u.getParam('useSaveLatency');

let useMoveFlopsToTop = m.ParamDefaultGet(u, 'useMoveFlopsToTop', 'int', 0);
let useMoveCmuxToTop  = m.ParamDefaultGet(u, 'useMoveCmuxToTop', 'int', 0);
let useMoveCsrToTop   = m.ParamDefaultGet(u, 'useMoveCsrToTop', 'int', 0);
let useMoveSbToTop    = m.ParamDefaultGet(u, 'useMoveSbToTop', 'int', 0);
let useMovePmonToTop  = m.ParamDefaultGet(u, 'useMovePmonToTop', 'int', 0);

let att_req_alloc_bundle = m.ParamDefaultGet(u, 'att_req_alloc_bundle', 'object', {});
let att_alloc_bundle     = m.ParamDefaultGet(u, 'att_alloc_bundle', 'object', {});

let att_req_alloc_bundle_width = bundleFunctions.getBundleWidth(att_req_alloc_bundle, [], u.bundle);
let att_alloc_bundle_width     = bundleFunctions.getBundleWidth(att_alloc_bundle, [], u.bundle);

let hasHeaderProt              = m.ParamDefaultGet(u, 'hasHeaderProt', 'int', 0);
let hasMessageProt             = m.ParamDefaultGet(u, 'hasMessageProt', 'int', 0);
let hasDataProt                = m.ParamDefaultGet(u, 'hasDataProt', 'int', 0);
let isDuplicate                = m.ParamDefaultGet(u, 'isDuplicate', 'int', 0);
let concertoMuxFaultPorts      = m.ParamDefaultGet(u, 'concertoMuxFaultPorts', 'object', {});
let dce_cmux_CE_tieoffs        = m.ParamDefaultGet(u, 'dce_cmux_CE_tieoffs', 'object', {});
let dce_cmux_header_UCE_wires  = m.ParamDefaultGet(u, 'dce_cmux_header_UCE_wires', 'object', {});
let dce_cmux_message_UCE_wires = m.ParamDefaultGet(u, 'dce_cmux_message_UCE_wires', 'object', {});
let dce_cmux_data_UCE_wires    = m.ParamDefaultGet(u, 'dce_cmux_data_UCE_wires', 'object', {});
let CONCERTO_MUX_INTF          = m.ParamDefaultGet(u, 'CONCERTO_MUX_INTF', 'object', {});

let CSR_INTF                   = m.ParamDefaultGet(u, 'CSR_INTF', 'object', {});
let csr_params                 = m.ParamDefaultGet(u, 'csr_params', 'object', {});
let instance_ports_for_csr     = m.ParamDefaultGet(u, 'instance_ports_for_csr', 'object', {});
let oldStylePmonCsrInterface   = m.ParamDefaultGet(u, 'oldStylePmonCsrInterface', 'object', {});
let dce_unit_csr_intf          = m.ParamDefaultGet(u, 'dce_unit_csr_intf', 'object', {});
let pmonInterfaces             = m.ParamDefaultGet(u, 'pmonInterfaces', 'object', {});
let pmonEventTable             = m.ParamDefaultGet(u, 'pmonEventTable', 'object', {});
let clk16Interface             = m.ParamDefaultGet(u, 'clk16Interface', 'object', {});

let SKID_BUFFER_PORTS          = m.ParamDefaultGet(u, 'SKID_BUFFER_PORTS', 'object', {});

let usePLRU = u.getParam('usePLRU');

let useSysEvtCoh = u.getParam('useSysEvtCoh');

let clkInterfaceNewStyle		= u.getParam('clkInterfaceNewStyle');
let clkInterfaceOldStyle		= newToOldStyleInterface(clkInterfaceNewStyle);
var clkAndResetOnlyBundle		= { clk: 1, reset_n: 1 };

let unitIdInterface				= u.getParam('unitIdInterface');
let unitIdInterfaceName			= u.getParam('unitIdInterfaceName');
let regProtectionInterface		= u.getParam('regProtectionInterface');
let regProtectionInterfaceName	= u.getParam('regProtectionInterfaceName');
let regProtectionStyle			= u.getParam('regProtectionStyle');
let apbInterface				= u.getParam('apbInterface');
let apbInterfaceName			= u.getParam('apbInterfaceName');
let irqInterface				= u.getParam('irqInterface');
let irqInterfaceName			= u.getParam('irqInterfaceName');
let internalFaultInterface		= u.getParam('internalFaultInterface');
let dce_cmux_ce_ports       		= u.getParam('dce_cmux_ce_ports');
let useResiliency				= u.getParam('useResiliency');
let usePma						= u.getParam('usePma');
let nPerfCounters				= u.getParam('nPerfCounters');
let CSR							= u.getParam('csr');
 
var nSkidBufSize          = obj.lib.getParam('nSkidBufSize');
var nSkidBufArb           = obj.lib.getParam('nSkidBufArb');

let SMI_TX_INTF = m.ParamDefaultGet(u, 'smiTxPortInterfaces', 'array', []);
let SMI_RX_INTF = m.ParamDefaultGet(u, 'smiRxPortInterfaces', 'array', []);
let CONC_TX_INTF = m.ParamDefaultGet(u, 'concertoTxInterfaces', 'array', []);
let CONC_RX_INTF = m.ParamDefaultGet(u, 'concertoRxInterfaces', 'array', []);
let CMD_SB_DEPTH = m.ParamDefaultGet(u, 'cmdSkidBufferDepth', 'int', 4);
let UPD_SB_DEPTH = m.ParamDefaultGet(u, 'updSkidBufferDepth', 'int', 4);


let SF_INFO = m.ParamDefaultGet(u, 'SnoopFilterInfo', 'array', []);
let C_AGENTS = m.ParamDefaultGet(u, 'CachingAgents', 'array', []);
let CLO = m.ParamDefaultGet(u, 'wCacheLineOffset', 'int', 4);
let ARST = m.ParamDefaultGet(u, 'AsyncReset', 'int', 0);
let DRST = m.ParamDefaultGet(u, 'DataReset', 'int', 0);
let RRD = m.ParamDefaultGet(u, 'RetryDepth', 'int', 4);
let PIPEDEPTH = m.ParamDefaultGet(u, 'PipeDepth', 'int', 3);
let NF = m.ParamDefaultGet(u, 'NullFilter', 'int', 4);
let N_ATT =m.ParamDefaultGet(u, 'nAttCtrlEntries', 'int', 32);
let CM_TYPE = m.ParamDefaultGet(u, 'cmType', 'object', {});
let N_AIUS = m.ParamDefaultGet(u, 'nAius', 'int', 4);
let N_CHIE_AIUS = m.ParamDefaultGet(u, 'nChieAius', 'int', 0);
let N_C_AGENTS = m.ParamDefaultGet(u, 'nCachingAgents', 'int', 4);
let N_WAYS = m.ParamDefaultGet(u, 'nWays', 'int', 4);
let N_DMIS = m.ParamDefaultGet(u, 'nDmis', 'int', 4);
let N_CONNECTED_DMIS = m.ParamDefaultGet(u, 'nConnectedDmis', 'int', 4);
let DIDS = m.ParamDefaultGet(u, 'DidEncoding', 'array', []);
let W_FUNIT_ID = m.ParamDefaultGet(u, 'wFUnitId', 'int', 4);
let W_NUNIT_ID = m.ParamDefaultGet(u, 'wNUnitId', 'int', 4);
let W_FPORT_ID = m.ParamDefaultGet(u, 'wFPortId', 'int', 4);
let W_RPN      = m.ParamDefaultGet(u, 'wRpn', 'int', 8);
let W_NRRI     = m.ParamDefaultGet(u, 'wNrri', 'int', 4);
let W_LP_ID = m.ParamDefaultGet(u, 'wLpId', 'int', 4);
let N_LP_IDS = m.ParamDefaultGet(u, 'nLpIdPerCaAgent', 'int', 2);
let N_PROCS = m.ParamDefaultGet(u, 'nProcs', 'int', 12);
let N_TAG_MONS = m.ParamDefaultGet(u, 'nTaggedMonitors', 'int', 8);
let LP_IDS = m.ParamDefaultGet(u, 'CachingAgentsLpIds', 'string', "{4'h0, 4'h1, 4'h2, 4'h3, 4'h4, 4'h5, 4'h6, 4'h7, 4'h8, 4'h9, 4'ha, 4'hb, 4'hc, 4'hd}");
let N_MRD_CREDITS = m.ParamDefaultGet(u, 'nMrdsPerDmi', 'int', 18);
let N_SNP_CREDITS = m.ParamDefaultGet(u, 'nSnpsPerAiu', 'int', 18);
let N_RBS = m.ParamDefaultGet(u, 'nRbsPerDmi', 'int', 8);
let N_GPRA = m.ParamDefaultGet(u, 'nGPRA', 'int', 2);
let DMI_IGSV = m.ParamDefaultGet(u, 'dmiIGSV', 'array', []);
let DMI_2WIFV = m.ParamDefaultGet(u, 'dmi2WIFV', 'array', []);
let DMI_3WIFV = m.ParamDefaultGet(u, 'dmi3WIFV', 'array', []);
let DMI_4WIFV = m.ParamDefaultGet(u, 'dmi4WIFV', 'array', []);
let DMI_8WIFV = m.ParamDefaultGet(u, 'dmi8WIFV', 'array', []);
let DMI_16WIFV = m.ParamDefaultGet(u, 'dmi16WIFV', 'array', []);

var dveIdInterface         = m.ParamDefaultGet(u, 'dveIdInterface', 'object', null);

let N_DVES = m.ParamDefaultGet(u, 'nDve', 'int', 1);

let STASH_EN_VEC = m.ParamDefaultGet(u, 'StashEnable', 'string', "7'd0");
let CachingAgentIsCHI = m.ParamDefaultGet(u, 'CachingAgentIsCHI', 'string', "7'd0");

let W_N_C_AGENTS = Math.max(m.log2ceil(N_C_AGENTS), 1);

let fnEnableQos     = m.ParamDefaultGet(u, 'fnEnableQos',       'int',     0);
let QosInfo         = m.ParamDefaultGet(u, 'QosInfo',           'object',  {qosMap:[]});
let useQos          = fnEnableQos;
let wStarvThreshold = useQos * 16;
let wResThreshold = m.ParamDefaultGet(u, 'wResThreshold', 'int', 8);
let wSnoopEnables = u.getParam('wSnoopEnables');
let concParams = u.getParam('concParams');
let wEventTimeout = 20; //must be the same as wProtocolTimeout
let wProtocolTimeout = 20;
let W_N_ATT			= Math.max(m.log2ceil(N_ATT), 1);
let W_N_ATT_plusone		= W_N_ATT + 1;
let wpmon_event_att_pad0 	= 8 - W_N_ATT_plusone;

var EnableSysEvtToDve = obj.lib.getParam('EnableSysEvtToDve'); 	

if (usePma) {
   var qInterface                 = u.getParam('qInterface');
   var qInterfaceName             = u.getParam('qInterfaceName');
   var PmaInfo                    = u.getParam('PmaInfo');
}

var masterTriggerInterfaceJson    = obj.lib.getParam('masterTriggerInterfaceJson');
var haveMasterTriggerInterface = u.getParam('haveMasterTriggerInterface');

//=============================================================================
// Perfmon data-structures, interfaces and params generation
//=============================================================================

// Function that returns the stall event expression for a given SMI interface (old-style)
// Function that returns wire declarations of an old-style interface (with properties 'name' and 'signals')
function declareOldStyleInterface ( oldStyleInterface ) {
	return m.bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}


// Function that returns wire declarations of a new-style interface
function declareNewStyleInterface ( newStyleInterface ) {
	const oldStyleInterface		= newToOldStyleInterface( newStyleInterface );
	const flatOldInterface		= flattenInterface ( oldStyleInterface );
	return declareOldStyleInterface( flatOldInterface );
}



//=============================================================================
// Master Trigger Interface
//=============================================================================

/* istanbul ignore else env ncore_3p7 */
if (!useMovePmonToTop) {

/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if(haveMasterTriggerInterface) {
  var masterTriggerInterface      = newToOldStyleInterface( masterTriggerInterfaceJson );
  obj.lib.interface( masterTriggerInterface.name, 'slave', masterTriggerInterface.signals);
}

}


const pmonRegisters				= m.genNcorePmonRegisters(CSR.spaceBlock[0].registers, "DCE", { nPerfCounters });
const pmonCsrIfGenerator		= m.createCSRInterfaceGenerator( pmonRegisters );
//const oldStylePmonCsrInterface	= { name: "DCE", signals: pmonCsrIfGenerator.signalBundle("slave") };


//=============================================================================
// CCR (Credit control) CSR Interface
//=============================================================================
var nCCR                        = Math.max( N_DMIS ); // Number of CCR (credit control) registers
var ccrRegisters                = m.genNcoreCCRRegisters(CSR.spaceBlock[0].registers, "DCEU", { nCCR });
var ccrCsrIfGenerator           = m.createCSRInterfaceGenerator( ccrRegisters );
var ccrCsrInterface             = { name: "DCEU", signals: ccrCsrIfGenerator.signalBundle('slave') };

//=============================================================================
// Concerto MUX
//=============================================================================

let index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'cmd_req_'; }); 
let CMD_REQ_INTF = CONC_RX_INTF[index].signals;

index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'upd_req_'; }); 
let UPD_REQ_INTF = CONC_RX_INTF[index].signals;
   
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'cmd_rsp_'; });
let CMD_RSP_INTF = CONC_TX_INTF[index].signals;
   
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'upd_rsp_'; });
let UPD_RSP_INTF = CONC_TX_INTF[index].signals;
   
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'snp_req_'; });
let SNP_REQ_INTF = CONC_TX_INTF[index].signals;
   
index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'snp_rsp_'; });
let SNP_RSP_INTF = CONC_RX_INTF[index].signals;
   
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'str_req_'; });
let STR_REQ_INTF = CONC_TX_INTF[index].signals;
   
index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'str_rsp_'; });
let STR_RSP_INTF = CONC_RX_INTF[index].signals;
   
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'mrd_req_'; });
let MRD_REQ_INTF = CONC_TX_INTF[index].signals;
   
index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'mrd_rsp_'; });
let MRD_RSP_INTF = CONC_RX_INTF[index].signals;
   
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'rbr_req_'; });
let RBR_REQ_INTF = CONC_TX_INTF[index].signals;
   
index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'rbr_rsp_'; });
let RBR_RSP_INTF = CONC_RX_INTF[index].signals;
   

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {

index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'sys_req_rx_'; });
var SYS_REQ_RX_INTF = CONC_RX_INTF[index].signals;
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'sys_rsp_tx_'; });
var SYS_RSP_TX_INTF = CONC_TX_INTF[index].signals;

index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'sys_rsp_rx_'; });
var SYS_RSP_RX_INTF = CONC_RX_INTF[index].signals;
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'sys_req_tx_'; });
var SYS_REQ_TX_INTF = CONC_TX_INTF[index].signals;

}

let W_ADDR = CMD_REQ_INTF.addr;
let W_NS = CMD_REQ_INTF.ns;
let W_CM_TYPE = CMD_REQ_INTF.cm_type;
let W_INIT_ID = CMD_REQ_INTF.initiator_id;
let W_MPF1 = CMD_REQ_INTF.mpf1;   
let W_MPF2 = CMD_REQ_INTF.mpf2;   
let W_ES = CMD_REQ_INTF.es;
let N_SF = SF_INFO.length;
let W_MSG_ID = CMD_REQ_INTF.message_id;
let W_RB_ID = RBR_REQ_INTF.rb_id - 1;

var useSramFifo           = u.getParam('useSramFifo');
var sb_width              = u.getParam('sb_width');
var sb_depth              = u.getParam('sb_depth');
var sb_memoryType         = u.getParam('sb_memoryType');
var sb_fnErrDetectCorrect = u.getParam('sb_fnErrDetectCorrect');
var sb_mem_addr_width     = u.getParam('sb_mem_addr_width');
var sb_mem_data_width     = u.getParam('sb_mem_data_width');

//
// ports
//

/* istanbul ignore else env ncore_3p7 */
if (useSramFifo && (sb_memoryType === 'SYNOPSYS')) {

u.port('output', 'sb_mem_write_en', 1);
u.port('output', 'sb_mem_write_addr', sb_mem_addr_width);
u.port('output', 'sb_mem_write_data', sb_mem_data_width);
u.port('output', 'sb_mem_read_en', 1);
u.port('output', 'sb_mem_read_addr', sb_mem_addr_width);
u.port('input',  'sb_mem_read_data', sb_mem_data_width);

}

u.port('input',  'hexDceDmiVec', N_DMIS);
u.port('input',  'hexDceConnectedDmiRbOffset', N_CONNECTED_DMIS*W_RB_ID);

u.interface(unitIdInterfaceName, 'slave', unitIdInterface);

u.port('input', 'ca_f_unit_id', N_C_AGENTS*W_FUNIT_ID);
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
u.port('input', 'ca_n_unit_id', N_C_AGENTS*W_NUNIT_ID);
}
//u.port('input', 'ca_lp_id', N_PROCS*W_LP_ID);
u.port('input', 'dmi_f_unit_id', N_DMIS*W_FUNIT_ID);
u.port('input', 'connected_dmi_f_unit_id', N_CONNECTED_DMIS*W_FUNIT_ID);
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCsrToTop) {
    if (useResiliency) {
u.port('output', 'dce_res_cerr_threshold', wResThreshold);
    }
}
u.port('input', 'bist_timeout_trigger', 1);

/* istanbul ignore if env ncore_3p7 */
if (useMoveCmuxToTop) {

for (let i=0; i<CONC_TX_INTF.length; i++) {
  /* istanbul ignore if env ncore_3p7 */
  if (useMoveSbToTop) {
    if ((CONC_TX_INTF[i].name === 'cmd_rsp_') || (CONC_TX_INTF[i].name === 'upd_rsp_')) {
    } else {
    m.defineMasterPortsFromInterface(CONC_TX_INTF[i].name, CONC_TX_INTF[i].signals, u.port);
    }
  } else {
    m.defineMasterPortsFromInterface(CONC_TX_INTF[i].name, CONC_TX_INTF[i].signals, u.port);
  }
}
for (let i=0; i<CONC_RX_INTF.length; i++) {
  /* istanbul ignore if env ncore_3p7 */
  if (useMoveSbToTop) {
    if (CONC_RX_INTF[i].name === 'cmd_req_') {
    } else if (CONC_RX_INTF[i].name === 'upd_req_') {
    m.defineSlavePortsFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, u.port, ['ready']);
    } else {
    m.defineSlavePortsFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, u.port);
    }
  } else {
    m.defineSlavePortsFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, u.port);
  }
}
    for (let i=0; i<SMI_TX_INTF.length; i++) {
    u.port('input', SMI_TX_INTF[i].name+'ndp_msg_valid', 1);
    u.port('input', SMI_TX_INTF[i].name+'ndp_msg_ready', 1);
    }
    for (let i=0; i<SMI_RX_INTF.length; i++) {
    u.port('input', SMI_RX_INTF[i].name+'ndp_msg_valid', 1);
    u.port('input', SMI_RX_INTF[i].name+'ndp_msg_ready', 1);
    }

    m.defineSlavePortsFromInterface('dce_cmux_', dce_cmux_header_UCE_wires, u.port);
    m.defineSlavePortsFromInterface('dce_cmux_', dce_cmux_message_UCE_wires, u.port);
    m.defineSlavePortsFromInterface('dce_cmux_', dce_cmux_data_UCE_wires, u.port);

    u.port('input', 'cmux_busy', 1);

    if (JSON.stringify(dce_cmux_CE_tieoffs) === '{}') {
        u.interface('dce_', 'slave', dce_cmux_ce_ports);
    }

} else {

for (let i=0; i<SMI_TX_INTF.length; i++) {
    m.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].signals, u.port);
    }
for (let i=0; i<SMI_RX_INTF.length; i++) {
    m.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].signals, u.port);
    }

    if (JSON.stringify(dce_cmux_CE_tieoffs) === '{}') {
        u.interface('dce_', 'master', dce_cmux_ce_ports);
    }

} // useMoveCmuxToTop

for (let f=0; f<SF_INFO.length; f++) {
        for (let w=0; w<SF_INFO[f].nMemory; w++) {
u.port('output', 'f'+f+'m'+w+'_ce', 1);
u.port('output', 'f'+f+'m'+w+'_we', 1);
u.port('output', 'f'+f+'m'+w+'_addr', Math.max(m.log2ceil(SF_INFO[f].nSets), 1));
u.port('output', 'f'+f+'m'+w+'_biten', SF_INFO[f].wMemory);
u.port('output', 'f'+f+'m'+w+'_wdata', SF_INFO[f].wMemory);
u.port('input', 'f'+f+'m'+w+'_rdata', SF_INFO[f].wMemory);
        }
        if (usePLRU) {
u.port('output', 'f'+f+'_plru_mem_read_en', 1);
u.port('output', 'f'+f+'_plru_mem_read_addr', m.log2ceil(SF_INFO[f].nSets));
u.port('input',  'f'+f+'_plru_mem_read_data', SF_INFO[f].nWays);
u.port('output', 'f'+f+'_plru_mem_write_en', 1);
u.port('output', 'f'+f+'_plru_mem_write_addr', m.log2ceil(SF_INFO[f].nSets));
u.port('output', 'f'+f+'_plru_mem_write_data', SF_INFO[f].nWays);
        }
}
 
u.interface(clkInterfaceOldStyle.name, 'slave', clkInterfaceOldStyle.signals);
u.interface('dce_', 'master',   internalFaultInterface);
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCsrToTop) {
u.interface(irqInterfaceName, 'master', irqInterface);
u.interface(apbInterfaceName, 'slave',  apbInterface);
}

/* istanbul ignore if env ncore_3p7 */
if (useMovePmonToTop) {
    /* istanbul ignore next env ncore_3p6, ncore_3p7 */
    if(!nPerfCounters) {
 
    } else { 

        var evtInterfaces = [];
        pmonInterfaces.evtInterfaces.forEach( evtInterface => {
            /* istanbul ignore if env ncore_3p7 */
            if (useMoveCsrToTop) {
        evtInterfaces.push({name: evtInterface.name, direction: 'master', interface: evtInterface.interface, params: evtInterface.params });
            }
        });
        u.nInterfaces(evtInterfaces);
    }
}

/* istanbul ignore if env ncore_3p7 */
if (useMoveCsrToTop) {
    if (!useMovePmonToTop) {
u.interface(oldStylePmonCsrInterface.name, 'slave', oldStylePmonCsrInterface.signals);
    }
}
/* istanbul ignore if env ncore_3p7 */
if (useMoveCsrToTop) {
u.interface(ccrCsrInterface.name,          'slave', ccrCsrInterface.signals);
}

//=============================================================================
// Q Channel Interface
//=============================================================================
if (usePma) {
u.interface(qInterfaceName, 'slave', qInterface);
}
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (dveIdInterface) {
u.interface(dveIdInterface.name,  'slave' , dveIdInterface.signals);  
}


/* istanbul ignore if env ncore_3p7 */
if (useMoveFlopsToTop) {

u.port('input',  'out_att_req_alloc_bundle_vec', N_ATT*att_req_alloc_bundle_width);
u.port('output', 'in_att_req_alloc_bundle_vec',  N_ATT*att_req_alloc_bundle_width);
u.port('output', 'en_att_req_alloc_bundle_vec', N_ATT);
u.port('output', 'att_req_alloc_bundle_clk', 1);
u.port('output', 'att_req_alloc_bundle_reset_n', 1);

u.port('input',  'out_att_alloc_bundle_vec', N_ATT*att_alloc_bundle_width);
u.port('output', 'in_att_alloc_bundle_vec',  N_ATT*att_alloc_bundle_width);
u.port('output', 'en_att_alloc_bundle_vec', N_ATT);
u.port('output', 'att_alloc_bundle_clk', 1);
u.port('output', 'att_alloc_bundle_reset_n', 1);

}

/* istanbul ignore if env ncore_3p7 */
if (useMoveCsrToTop) {

u.interface('', 'master', dce_unit_csr_intf);

}

/* istanbul ignore if env ncore_3p7 */
if (useMoveSbToTop) {

u.port('output', 'dce_skid_buffer__clk', 1);
u.port('output', 'dce_skid_buffer__reset_n', 1);

u.port('output', 'dce_skid_buffer__cmd_rsp_out_ready', 1);

u.port('output', 'skid_buf_cmd_req_fifo__clk', 1);
u.port('output', 'skid_buf_cmd_req_fifo__reset_n', 1);
u.port('output', 'skid_buf_cmd_req_fifo__pop_ready', 1);

u.port('output', 'cmd_rsp_fifo__clk', 1);
u.port('output', 'cmd_rsp_fifo__reset_n', 1);
u.port('output', 'cmd_rsp_fifo__push_valid', 1);

u.port('output', 'cmux_cmd_req_UCE',  1);
u.port('output', 'cmux_upd_req_UCE',  1);

u.interface('skid_buf_cmd_req_', 'slave', CMD_REQ_INTF);  
u.interface('skid_buf_upd_req_', 'slave', UPD_REQ_INTF);  

u.port('input', 'cmd_rsp_valid', 1);
u.port('input', 'cmd_req_valid', 1);
u.port('input', 'cmd_req_ready', 1);

u.port('input', 'skid_target_ue_valid', 1);
u.port('input', 'skid_target_ue_init_id', W_FUNIT_ID);

u.port('input', 'pmon_starvation_event', 1);
u.port('input', 'skid_buffer_busy', 1);
u.port('input', 'cmd_rsp_int_ready', 1);
u.port('input', 'upd_req_ready', 1);

}

// 
// Module
//

\jsend
module \=u.getModuleName()=\
         (\=u.getPorts('\n    ')=\
          );

// Declare wires for div-by-16 clock interface
\=declareOldStyleInterface(clk16Interface)=\

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCsrToTop) {
\jsend

// Declare wires connecting Credit Control Register (CCR) interface
\=m.bundleFunctions.wiresFromInterface(ccrCsrInterface.name, ccrCsrInterface.signals, [], u.bundle)=\

\js }

\jsbegin
//=============================================================================
// DCE PMON Instance
//=============================================================================
/* istanbul ignore next env ncore_3p6, ncore_3p7 */
if(!nPerfCounters) {
 
} else { 

pmonInterfaces.evtInterfaces.forEach( evtInterface => {
\jsend
    /* istanbul ignore else env ncore_3p7 */
    \js if (!useMovePmonToTop) {
\=declareNewStyleInterface( evtInterface )=\
    \js }
\jsbegin
});
\jsend

    /* istanbul ignore else env ncore_3p7 */
    \js if (!useMoveCsrToTop) {
\=declareNewStyleInterface( pmonInterfaces.csrInterface )=\
    \js }

\jsbegin
 
}
//=========================================================================
//
//=========================================================================

// Represent input bit-vectors ca_f_unit_id and ca_n_unit_id as packed arrays
const nUnitID = vlogPkdArray({ length: N_C_AGENTS, width: W_NUNIT_ID }, 'ca_n_unit_id');
const fUnitID = vlogPkdArray({ length: N_C_AGENTS, width: W_FUNIT_ID }, 'ca_f_unit_id');
	
// Define local reqAckEventInterface
const reqAckEventInterface		= { name: "event_in_", signals: { req: 1, ack: -1 } }; \jsend
\=m.bundleFunctions.wiresFromInterface(reqAckEventInterface.name, reqAckEventInterface.signals, [], u.bundle)=\

//
// concerto MUX
//

\js if (!useResiliency) {
\=m.bundleFunctions.wiresFromInterface('dce_cmux_', dce_cmux_CE_tieoffs, [], obj.lib.bundle)=\
\js }

\=tieoffsFromInterface('dce_cmux_', dce_cmux_CE_tieoffs)=\

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCmuxToTop) {
\jsend

\=m.bundleFunctions.wiresFromInterface('dce_cmux_', dce_cmux_header_UCE_wires, [], obj.lib.bundle)=\
\=m.bundleFunctions.wiresFromInterface('dce_cmux_', dce_cmux_message_UCE_wires, [], obj.lib.bundle)=\
\=m.bundleFunctions.wiresFromInterface('dce_cmux_', dce_cmux_data_UCE_wires, [], obj.lib.bundle)=\

\js }

    // aggregate header uncorrectable errors into one UCE signal
	assign dce_cmux_UCE = 1'b0 
\jsbegin
        for(let i=0; i<SMI_RX_INTF.length; i++){    
            for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++){
                //var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
                if(hasHeaderProt) { 
\jsend
		            | dce_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\header_UCE  
\jsbegin
		        }
                //var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
		        if( hasMessageProt ) { 
\jsend
		            | dce_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\message_UCE  
\jsbegin
                }
            }
	    } 
\jsend
                ;

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCmuxToTop) {
\jsend

\js for (let i=0; i<CONC_TX_INTF.length; i++) {
\=m.bundleFunctions.wiresFromInterface(CONC_TX_INTF[i].name, CONC_TX_INTF[i].signals, [], u.bundle)=\
\js}


\js for (let i=0; i<CONC_RX_INTF.length; i++) {                                             
\=m.bundleFunctions.wiresFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, [], u.bundle)=\    
\js}

\js }

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveSbToTop) {
\jsend
\=m.bundleFunctions.wiresFromInterface('cmd_rsp_int_', CMD_RSP_INTF, [], u.bundle)=\
\js }

\=m.bundleFunctions.wiresFromInterface("snp_rsp_", { success: 2, rv: 1, rs: 1, dc: 1, dt:2, snarf: 1 }, [], u.bundle)=\
assign { snp_rsp_success, snp_rsp_rv, snp_rsp_rs, snp_rsp_dc, snp_rsp_dt, snp_rsp_snarf }	=	snp_rsp_cm_status;


localparam
  N_ATT = \=N_ATT=\,
  W_ADDR = \=W_ADDR=\,
  W_NS = \=W_NS=\,
  W_CM_TYPE = \=W_CM_TYPE=\,
  W_INIT_ID = \=W_INIT_ID=\,
  W_MPF1 = \=W_MPF1=\,
  W_MPF2 = \=W_MPF2=\,
  W_ES = \=W_ES=\,
  N_WAYS = \=N_WAYS=\,
  N_DMIS = \=N_DMIS=\,
  N_CONNECTED_DMIS = \=N_CONNECTED_DMIS=\,
  W_RB_ID = \=W_RB_ID=\,
  W_N_C_AGENTS = \=W_N_C_AGENTS=\,
  N_C_AGENTS = \=N_C_AGENTS=\,
  W_NUNIT_ID = \=W_NUNIT_ID=\,
  W_FUNIT_ID = \=W_FUNIT_ID=\,
  W_FPORT_ID = \=W_FPORT_ID=\,
  N_SF = \=N_SF=\,
  N_LP_IDS = \=N_LP_IDS=\,
  W_LP_ID = \=W_LP_ID=\,
  N_PROCS = \=N_PROCS=\,
  N_TAG_MONS = \=N_TAG_MONS=\;


\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCsrToTop) {
\jsend
wire csr_DceTransActive;
wire csr_DceMntOpActive;
wire apb_busy;

wire tm_timeout_ue_valid;
wire [W_ADDR-1:0] tm_timeout_ue_addr;
wire [W_NS-1:0] tm_timeout_ue_ns;

wire [30:0] csr_timeout_threshold;
wire csr_timeout_ref_en;
wire csr_timeout_count_reset;

wire csr_addr_map_multi_hit;
wire csr_addr_map_no_hit;
wire csr_addr_map_req_wr;
wire [\=W_MSG_ID-1=\:0] csr_addr_map_trans_id;
wire [\=W_ADDR-1=\:0] csr_addr_map_addr;
wire csr_addr_map_unconnected_dmi_access;

wire no_credits_access_err;
wire [W_ADDR-1:0] no_credits_access_err_addr;
wire err_p1_tm_cmd_req_d_id_valid;
wire [W_ADDR-1:0] err_p1_tm_cmd_req_d_id_addr;

wire csr_target_ue_valid;
wire [W_FUNIT_ID-1:0] csr_target_ue_init_id;

    \js if(useQos) {
wire [\=wStarvThreshold-1=\:0] csr_starv_count_threshold;
wire [3:0] csr_eviction_qos;
wire csr_use_eviction_qos;
    \js }

wire cmux_UCE_err_vld;
wire cmux_CE_err_vld;

wire csr_sf_init;
wire [31:0] csr_dm_debg_cfg;
wire csr_dm_ue_valid;
wire [N_WAYS-1:0] csr_dm_ue_way_vec;
wire [W_ADDR:0] csr_dm_ue_index;	
wire csr_dm_ce_valid;   
wire [N_WAYS-1:0] csr_dm_ce_way_vec;
wire [W_ADDR:0] csr_dm_ce_index;
wire [W_ADDR:0] csr_dm_addr;   

wire csr_sb_ce_valid;
wire csr_sb_ue_valid;
wire [19:0] csr_sb_err_index;

wire BRAR_Valid;
wire [5:0] BRAR_Size;
wire BRAR_HUT;
wire[4:0] BRAR_HUI;
wire[31:0] BRBAR_AddrLo;
wire[7:0] BRBAR_AddrHi;
wire [3:0] AMIGR_AMIGS;
wire AMIGR_Valid;
wire [2:0] MIFSR_A16WIFId;
wire [2:0] MIFSR_A8WIFId;
wire [2:0] MIFSR_A4WIFId;
wire [2:0] MIFSR_A3WIFId;
wire [2:0] MIFSR_A2WIFId;

    \js for (var i = 0; i < N_GPRA; i++) {
wire GPRAR\=i=\_Valid;
wire GPRAR\=i=\_HUT;
wire [5:0] GPRAR\=i=\_Size;
wire [4:0] GPRAR\=i=\_HUI;
wire [31:0] GPRBAR\=i=\_AddrLo;
wire [7:0] GPRBAR\=i=\_AddrHi;
    \js }

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (useSysEvtCoh) {
    \jsend
wire csr_sys_coh_receiver_err_vld;
wire [\=W_FUNIT_ID-1=\:0] csr_sys_coh_receiver_err_f_unit_id;
wire [\=wSnoopEnables-1=\:0] snoop_enables;
wire snoop_enables_update;
wire [\=wSnoopEnables-1=\:0] csr_snoop_enables;
wire csr_snoop_enables_update;
wire [\=N_C_AGENTS-1=\:0] ca_SnoopEnable;

wire [\=wProtocolTimeout-1=\:0] csr_protocol_timeout_value;
wire csr_sys_evt_sender_enable;
wire csr_sys_evt_sender_err_vld;
wire [\=W_FUNIT_ID-1=\:0] csr_sys_evt_sender_err_f_unit_id;
wire csr_sys_evt_sender_err_protocol_sys;
wire csr_sys_evt_sender_err_protocol_timeout;
wire csr_sys_evt_sender_err_event_timeout;
    \js }

\js }


\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

wire [\=N_C_AGENTS-1=\:0] tieOffSnoopEnable = {\=N_C_AGENTS=\{1'b1}};

wire [\=N_C_AGENTS-1=\:0] att_entry_agent_inactive;
wire [\=W_N_ATT=\:0] att_count;
wire pmon_addr_collisions;
wire [7:0] pmon_att_evt;
wire snp_rsp_miss;
wire snp_rsp_owner_transfer;
wire snoop_filter_hit;
wire snoop_filter_miss;
wire snoop_filter_recall;

wire [\=wEventTimeout-1=\:0] csr_event_timeout_value;
wire sys_evt_coh_busy;
    \jsbegin
    /* istanbul ignore else env ncore_3p6, ncore_3p7 */
    if (EnableSysEvtToDve && dveIdInterface) {
    \jsend
wire event_in_targets = 1'b1;
    \jsbegin
    } else {
    \jsend
wire [\=N_C_AGENTS-1=\:0] event_in_targets = ca_SnoopEnable;
    \jsbegin
    } 
    \jsend

\jsbegin
}
\jsend


wire [\=W_CM_TYPE-1=\:0] dm_rtr_req_cm_type;
wire [\=W_NS-1=\:0]      dm_rtr_req_ns;
wire [\=W_ADDR-1=\:0]    dm_rtr_req_addr;
wire [\=W_INIT_ID-1=\:0] dm_rtr_req_initiator_id;
wire [\=W_MPF1-1=\:0]    dm_rtr_req_mpf1;
wire [\=W_MPF2-1=\:0]    dm_rtr_req_mpf2;
wire [\=W_ES-1=\:0]      dm_rtr_req_es;

wire [\=W_CM_TYPE-1=\:0] dm_rsp_lookup_cm_type;
wire [\=W_NS-1=\:0]      dm_rsp_lookup_ns;
wire [\=W_ADDR-1=\:0]    dm_rsp_lookup_addr;
wire [\=W_INIT_ID-1=\:0] dm_rsp_lookup_initiator_id;
wire [\=W_MPF2-1=\:0]    dm_rsp_lookup_mpf2;
wire [\=W_ES-1=\:0]      dm_rsp_lookup_es;

wire tm_req_alloc_ready, tm_req_alloc_valid;
wire dce_busy;
wire sys_req_rx_ue_valid, sys_rsp_rx_ue_valid, sys_req_rx_target_id_mismatch, sys_rsp_rx_target_id_mismatch;
wire [W_FUNIT_ID-1:0] sys_req_rx_ue_init_id, sys_rsp_rx_ue_init_id;

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCmuxToTop) {
\jsend
wire cmux_busy;
\js }

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveSbToTop) {
\jsend
wire skid_buffer_busy;
\js }

// CLK and reset

wire int_clk, int_reset_n; 
wire dm_int_clk;
wire tm_int_clk;
wire sb_int_clk;

\jsbegin
/* istanbul ignore if env ncore_3p7 */
if (useMoveFlopsToTop) {
\jsend

assign att_req_alloc_bundle_clk = tm_int_clk;
assign att_req_alloc_bundle_reset_n = int_reset_n;

assign att_alloc_bundle_clk = tm_int_clk;
assign att_alloc_bundle_reset_n = int_reset_n;

\js }

 
\js if (clkInterfaceNewStyle.blkClkGateOn) {

wire int_test_en, int_clk_en;
//
\jsbegin
/* istanbul ignore else env ncore_3p0, ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (clkInterfaceNewStyle.params.wTestEn) { \jsend                                          
assign int_test_en = \=clkInterfaceOldStyle.name=\test_en; \jsbegin
} else { \jsend     
assign int_test_en = 1'b0; \jsbegin
} \jsend
assign int_clk_en = dce_busy;            
                                          
\=u.instance ({
               instanceName : 'blk_clk_gate',
               moduleName : 'cg',
               params : {
                           width : 1
                         },
               ports : {
                        clk_in : clkInterfaceOldStyle.name+'clk',
                        clk_out : 'int_clk',
                        test_en : 'int_test_en',
                        en : 'int_clk_en'
                        }               
               })=\

\=u.instance ({
               instanceName : 'dm_blk_clk_gate',
               moduleName : 'cg',
               params : {
                           width : 1
                         },
               ports : {
                        clk_in : clkInterfaceOldStyle.name+'clk',
                        clk_out : 'dm_int_clk',
                        test_en : 'int_test_en',
                        en : 'int_clk_en'
                        }               
               })=\

\=u.instance ({
               instanceName : 'tm_blk_clk_gate',
               moduleName : 'cg',
               params : {
                           width : 1
                         },
               ports : {
                        clk_in : clkInterfaceOldStyle.name+'clk',
                        clk_out : 'tm_int_clk',
                        test_en : 'int_test_en',
                        en : 'int_clk_en'
                        }               
               })=\

\=u.instance ({
               instanceName : 'sb_blk_clk_gate',
               moduleName : 'cg',
               params : {
                           width : 1
                         },
               ports : {
                        clk_in : clkInterfaceOldStyle.name+'clk',
                        clk_out : 'sb_int_clk',
                        test_en : 'int_test_en',
                        en : 'int_clk_en'
                        }               
               })=\

\js } else {
assign int_clk = \=clkInterfaceOldStyle.name=\clk;
assign dm_int_clk = \=clkInterfaceOldStyle.name=\clk;
assign tm_int_clk = \=clkInterfaceOldStyle.name=\clk;
assign sb_int_clk = \=clkInterfaceOldStyle.name=\clk;
\js }           
assign int_reset_n = \=clkInterfaceOldStyle.name=\reset_n;



\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCmuxToTop) {
\jsend

\= u.instance ({
                instanceName: 'dce_conc_mux',
                moduleName: 'concerto_mux',
                params : {
                          wFPortId: W_FPORT_ID,
                          wFUnitId: W_FUNIT_ID,
                          smiTxPortInterfaces : SMI_TX_INTF,
                          smiRxPortInterfaces : SMI_RX_INTF,
                          concertoTxInterfaces : CONC_TX_INTF,
                          concertoRxInterfaces : CONC_RX_INTF
                          },
                verilogParams : {},
                ports : concertoMuxFaultPorts,
                interfaces : CONCERTO_MUX_INTF})=\

\js }

//
// Timeout UCE
//
assign dce_timeout_UCE = tm_timeout_ue_valid | csr_sys_evt_sender_err_protocol_timeout | csr_sys_evt_sender_err_event_timeout;

//
// Skid buffer
//
\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveSbToTop) {
\jsend
wire skid_target_ue_valid;
wire [W_FUNIT_ID-1:0] skid_target_ue_init_id;
wire pmon_starvation_event;
\js }
wire tm_target_ue_valid;
wire [W_FUNIT_ID-1:0] tm_target_ue_init_id;

assign dce_target_id_UCE = csr_target_ue_valid;
assign csr_target_ue_valid = skid_target_ue_valid | tm_target_ue_valid | sys_req_rx_ue_valid | sys_rsp_rx_ue_valid;
assign csr_target_ue_init_id = skid_target_ue_valid ? skid_target_ue_init_id : tm_target_ue_valid ? tm_target_ue_init_id : sys_req_rx_ue_valid ? sys_req_rx_ue_init_id : sys_rsp_rx_ue_init_id;

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveSbToTop) {
\jsend

\=m.bundleFunctions.wiresFromInterface('skid_buf_cmd_req_', CMD_REQ_INTF, [], u.bundle)=\
\=m.bundleFunctions.wiresFromInterface('skid_buf_cmd_req_int_', CMD_REQ_INTF, [], u.bundle)=\
\=m.bundleFunctions.wiresFromInterface('skid_buf_upd_req_', UPD_REQ_INTF, ['ready'], u.bundle)=\

wire skid_buf_upd_req_ready;
wire cmux_cmd_req_UCE;
wire cmux_upd_req_UCE;

\js }

assign cmux_cmd_req_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_cmd_req_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_cmd_req_message_UCE
    \js }
                      ;

assign cmux_upd_req_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_upd_req_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_upd_req_message_UCE
    \js }
                      ;

wire cmux_mrd_rsp_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_mrd_rsp_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_mrd_rsp_message_UCE
    \js }
                      ;

wire cmux_snp_rsp_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_snp_rsp_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_snp_rsp_message_UCE
    \js }
                      ;

wire cmux_str_rsp_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_str_rsp_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_str_rsp_message_UCE
    \js }
                      ;

wire cmux_rbr_rsp_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_rbr_rsp_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_rbr_rsp_message_UCE
    \js }
                      ;

wire cmux_sys_req_rx_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_sys_req_rx_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_sys_req_rx_message_UCE
    \js }
                      ;

wire cmux_sys_rsp_rx_UCE = 1'b0
    \js if (hasHeaderProt & !isDuplicate ) {
                      | dce_cmux_sys_rsp_rx_header_UCE
    \js }
    \js if (hasMessageProt & !isDuplicate ) {
                      | dce_cmux_sys_rsp_rx_message_UCE
    \js }
                      ;

wire cmux_cmd_req_UCE_err_vld = cmd_req_valid & cmd_req_ready & cmux_cmd_req_UCE;
wire cmux_upd_req_UCE_err_vld = upd_req_valid & upd_req_ready & cmux_upd_req_UCE;
wire cmux_mrd_rsp_UCE_err_vld = mrd_rsp_valid & mrd_rsp_ready & cmux_mrd_rsp_UCE;
wire cmux_snp_rsp_UCE_err_vld = snp_rsp_valid & snp_rsp_ready & cmux_snp_rsp_UCE;
wire cmux_str_rsp_UCE_err_vld = str_rsp_valid & str_rsp_ready & cmux_str_rsp_UCE;
wire cmux_rbr_rsp_UCE_err_vld = rbr_rsp_valid & rbr_rsp_ready & cmux_rbr_rsp_UCE;

wire cmux_sys_req_rx_UCE_err_vld = sys_req_rx_valid & sys_req_rx_ready & cmux_sys_req_rx_UCE;
wire cmux_sys_rsp_rx_UCE_err_vld = sys_rsp_rx_valid & sys_rsp_rx_ready & cmux_sys_rsp_rx_UCE;

assign cmux_UCE_err_vld = cmux_cmd_req_UCE_err_vld
                      | cmux_upd_req_UCE_err_vld
                      | cmux_mrd_rsp_UCE_err_vld
                      | cmux_snp_rsp_UCE_err_vld
                      | cmux_str_rsp_UCE_err_vld
                      | cmux_rbr_rsp_UCE_err_vld
                      | cmux_sys_req_rx_UCE_err_vld
                      | cmux_sys_rsp_rx_UCE_err_vld
                      ;

wire cmux_cmd_req_CE_err_vld = cmd_req_valid & cmd_req_ready & dce_cmux_cmd_req_CE;
wire cmux_upd_req_CE_err_vld = upd_req_valid & upd_req_ready & dce_cmux_upd_req_CE;
wire cmux_mrd_rsp_CE_err_vld = mrd_rsp_valid & mrd_rsp_ready & dce_cmux_mrd_rsp_CE;
wire cmux_snp_rsp_CE_err_vld = snp_rsp_valid & snp_rsp_ready & dce_cmux_snp_rsp_CE;
wire cmux_str_rsp_CE_err_vld = str_rsp_valid & str_rsp_ready & dce_cmux_str_rsp_CE;
wire cmux_rbr_rsp_CE_err_vld = rbr_rsp_valid & rbr_rsp_ready & dce_cmux_rbr_rsp_CE;

wire cmux_sys_req_rx_CE_err_vld = sys_req_rx_valid & sys_req_rx_ready & dce_cmux_sys_req_rx_CE;
wire cmux_sys_rsp_rx_CE_err_vld = sys_rsp_rx_valid & sys_rsp_rx_ready & dce_cmux_sys_rsp_rx_CE;

assign cmux_CE_err_vld = cmux_cmd_req_CE_err_vld
                     | cmux_upd_req_CE_err_vld
                     | cmux_mrd_rsp_CE_err_vld
                     | cmux_snp_rsp_CE_err_vld
                     | cmux_str_rsp_CE_err_vld
                     | cmux_rbr_rsp_CE_err_vld
                     | cmux_sys_req_rx_CE_err_vld
                     | cmux_sys_rsp_rx_CE_err_vld
                     ;

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveSbToTop) {
\jsend

wire dce_skid_buffer__clk;
wire dce_skid_buffer__reset_n;

wire dce_skid_buffer__cmd_rsp_out_ready;

wire skid_buf_cmd_req_fifo__clk;
wire skid_buf_cmd_req_fifo__reset_n;
wire skid_buf_cmd_req_fifo__pop_ready;

wire cmd_rsp_fifo__clk;
wire cmd_rsp_fifo__reset_n;
wire cmd_rsp_fifo__push_valid;

\js }

assign dce_skid_buffer__clk     = sb_int_clk;
assign dce_skid_buffer__reset_n = int_reset_n;

assign dce_skid_buffer__cmd_rsp_out_ready = skid_buf_cmd_req_valid & skid_buf_cmd_req_ready & cmd_rsp_int_ready;

assign skid_buf_cmd_req_fifo__clk       = int_clk;
assign skid_buf_cmd_req_fifo__reset_n   = int_reset_n;
assign skid_buf_cmd_req_fifo__pop_ready = skid_buf_cmd_req_ready & cmd_rsp_int_ready;

assign cmd_rsp_fifo__clk        = int_clk;
assign cmd_rsp_fifo__reset_n    = int_reset_n;
assign cmd_rsp_fifo__push_valid = skid_buf_cmd_req_valid & skid_buf_cmd_req_ready;

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveSbToTop) {
\jsend

\=u.instance ({
               instanceName: 'dce_skid_buffer',
               moduleName: 'dce_skid_buffer',
               params: {

                        useSramFifo           : useSramFifo,
                        sb_width              : sb_width,
                        sb_depth              : sb_depth,
                        sb_memoryType         : sb_memoryType,
                        sb_fnErrDetectCorrect : sb_fnErrDetectCorrect,
                        sb_mem_addr_width     : sb_mem_addr_width,
                        sb_mem_data_width     : sb_mem_data_width,

                        nSkidBufSize : nSkidBufSize,
                        assertOn        : ASSERT_ON,
                        cmdReqInterface : CMD_REQ_INTF,
                        updReqInterface : UPD_REQ_INTF,
                        cmdRspInterface : CMD_RSP_INTF,
                        updRspInterface : UPD_RSP_INTF,
                        cmdSkidBufferDepth : nSkidBufArb,
                        updSkidBufferDepth : UPD_SB_DEPTH,
                        wFUnitId : W_FUNIT_ID,
                        wFPortId : W_FPORT_ID,
                        cmType : CM_TYPE,
                        QosInfo: QosInfo,
                        wStarvThreshold: wStarvThreshold,
                        fnEnableQos: fnEnableQos
                        },
               ports : SKID_BUFFER_PORTS,
               interfaces : [
                             {modulePrefix: 'cmd_req_in_', localPrefix: 'cmd_req_', interface: CMD_REQ_INTF},
                             {modulePrefix: 'cmd_req_out_', localPrefix: 'skid_buf_cmd_req_int_', interface: CMD_REQ_INTF},
                             {modulePrefix: 'upd_req_in_', localPrefix: 'upd_req_', interface: UPD_REQ_INTF},
                             {modulePrefix: 'upd_req_out_', localPrefix: 'skid_buf_upd_req_', interface: UPD_REQ_INTF},
                             {modulePrefix: 'cmd_rsp_out_', localPrefix: 'cmd_rsp_int_', interface: CMD_RSP_INTF, exclude: ['ready']},
                             {modulePrefix: 'upd_rsp_out_', localPrefix: 'upd_rsp_', interface: UPD_RSP_INTF}
                             ]
               })=\

    \=u.instance ({
        instanceName: 'skid_buf_cmd_req_fifo',
        moduleName: 'fifo_bundle',
        params: {
            width: m.bundleFunctions.getBundleWidth(CMD_REQ_INTF, ['valid', 'ready'], u.bundle),
            depth: 2,
            zerodepth:  useSaveLatency ? /* istanbul ignore next env ncore_3p7 */ 1 : 0,
            bypass_mode: 0,
            interface: CMD_REQ_INTF
        },
        ports: {
            clk       : 'skid_buf_cmd_req_fifo__clk',
            reset_n   : 'skid_buf_cmd_req_fifo__reset_n',
            pop_ready :  useSaveLatency ? /* istanbul ignore next env ncore_3p7 */ 'skid_buf_cmd_req_ready' : 'skid_buf_cmd_req_fifo__pop_ready'
        },
        interfaces: [
            {modulePrefix: 'push_', localPrefix: 'skid_buf_cmd_req_int_', interface: CMD_REQ_INTF},
            {modulePrefix: 'pop_',  localPrefix: 'skid_buf_cmd_req_',     interface: CMD_REQ_INTF, exclude: ['ready']}]
        })=\  

    \=u.instance ({
        instanceName: 'cmd_rsp_fifo',
        moduleName: 'fifo_bundle',
        params: {
            width: m.bundleFunctions.getBundleWidth(CMD_RSP_INTF, ['valid', 'ready'], u.bundle),
            depth: 2,
            zerodepth:  useSaveLatency ? /* istanbul ignore next env ncore_3p7 */ 1 : 0,
            bypass_mode: 0,
            interface: CMD_RSP_INTF
        },
        ports: {
            clk        : 'cmd_rsp_fifo__clk',
            reset_n    : 'cmd_rsp_fifo__reset_n',
            push_valid :  useSaveLatency ? /* istanbul ignore next env ncore_3p7 */ 'cmd_rsp_int_valid' : 'cmd_rsp_fifo__push_valid'
        },
        interfaces: [
            {modulePrefix: 'push_', localPrefix: 'cmd_rsp_int_', interface: CMD_RSP_INTF, exclude: ['valid']},
            {modulePrefix: 'pop_',  localPrefix: 'cmd_rsp_',     interface: CMD_RSP_INTF}]
        })=\  

\js }

//
// IH ARB
//

wire dm_req_alloc_ready, dm_req_alloc_valid;
wire [N_ATT-1:0] tm_req_alloc_vec, dm_req_alloc_vec;
wire dm_recall_alloc_ready, dm_recall_alloc_valid;
wire dm_req_wakeup_valid, dm_rsp_wr_required, dm_rsp_error;   

wire dm_req_ready, dm_req_valid, dm_upd_req_ready, dm_upd_req_valid, dm_write_ready, dm_write_valid, dm_write_valid_dup;
wire [W_NS-1:0] dm_req_ns, dm_upd_req_ns, dm_recall_ns, dm_write_ns, dm_write_ns_dup;
wire [W_ES-1:0] dm_req_es;   
wire [W_ADDR-1:0] dm_req_addr, dm_upd_req_addr, dm_recall_addr, dm_write_addr, dm_write_addr_dup;
wire [W_CM_TYPE-1:0] dm_req_type;
wire [W_INIT_ID-1:0] dm_req_initiator_id, dm_upd_req_initiator_id;
wire [N_WAYS-1:0] p1_dm_busy_way_vec;
wire p1_dm_req_alloc, p1_dm_req_cancel;
wire [N_SF-1:0] p1_req_sf_num_vec;   
   
wire                 tm_cmd_wakeup_req_arb_valid;
wire                 tm_cmd_wakeup_req_arb_ready;
wire [W_CM_TYPE-1:0] att_entry_wakeup_req_cm_type;
wire [W_NS-1:0]      att_entry_wakeup_req_ns;
wire [W_ES-1:0]      att_entry_wakeup_req_es;
wire [W_ADDR-1:0]    att_entry_wakeup_req_addr;
wire [W_INIT_ID-1:0] att_entry_wakeup_req_initiator_id;
wire [W_MPF1-1:0]    att_entry_wakeup_req_mpf1;   
wire [W_MPF2-1:0]    att_entry_wakeup_req_mpf2;   
wire [N_ATT-1:0]     att_entry_wakeup_req_att_vec;

wire [N_PROCS*W_LP_ID-1:0] ca_lp_id = \=LP_IDS=\;

wire dm_rsp_ready, dm_rsp_valid;   
wire [N_ATT-1:0] dm_rsp_att_vec;
wire [N_WAYS-1:0] dm_rsp_way_vec, dm_write_way_vec, dm_write_way_vec_dup;
wire dm_rsp_owner_valid, dm_recall_owner_valid, dm_write_owner_valid, dm_write_owner_valid_dup;
wire [W_N_C_AGENTS-1:0] dm_rsp_owner_num, dm_recall_owner_num, dm_write_owner_num, dm_write_owner_num_dup;   
wire [N_C_AGENTS-1:0] dm_rsp_sharer_vec, dm_recall_sharer_vec, dm_write_sharer_vec, dm_write_sharer_vec_dup, dm_write_change_vec, dm_write_change_vec_dup;
wire [W_INIT_ID-1:0] dm_req_stash_id;
wire [W_MPF1-1:0] dm_req_mpf1;   
wire [W_MPF2-1:0] dm_req_mpf2;   

wire dm_rtr_valid, dm_rtr_ready;
wire [N_ATT-1:0]  dm_rtr_att_vec;
   
\=u.instance ({
               instanceName : 'dce_ih',
               moduleName : 'dce_ih',
               params : {
                         useSramInputFlop : useSramInputFlop,
                         wFUnitId : W_FUNIT_ID,
                         wFPortId : W_FPORT_ID,
                         nAttEntries : N_ATT,
                         cmdReqInterface : CMD_REQ_INTF,
                         updReqInterface : UPD_REQ_INTF
                         },
               ports : {
                        clk : 'int_clk',
                        reset_n : 'int_reset_n',
                        
                        dm_req_ready : 'dm_req_ready',
                        dm_req_valid : 'dm_req_valid',
                        dm_req_ns : 'dm_req_ns',
                        dm_req_addr : 'dm_req_addr',
                        dm_req_type : 'dm_req_type',
                        dm_req_initiator_id : 'dm_req_initiator_id',
                        dm_req_stash_id : 'dm_req_stash_id',
                        dm_req_mpf1 : 'dm_req_mpf1',
                        dm_req_mpf2 : 'dm_req_mpf2',
                        dm_req_es : 'dm_req_es',
                        dm_req_alloc_vec : 'dm_req_alloc_vec',
                        dm_req_wakeup_valid : 'dm_req_wakeup_valid',
                        
                        dm_upd_req_ready : 'dm_upd_req_ready',
                        dm_upd_req_valid : 'dm_upd_req_valid',
                        dm_upd_req_ns : 'dm_upd_req_ns',
                        dm_upd_req_addr : 'dm_upd_req_addr',
                        dm_upd_req_initiator_id : 'dm_upd_req_initiator_id',

                        ih_alloc_ready : 'tm_req_alloc_ready',
                        ih_alloc_valid : 'tm_req_alloc_valid',
                        ih_req_alloc_vec : 'tm_req_alloc_vec',

                        ih_upd_req_valid : 'skid_buf_upd_req_valid',
                        ih_upd_req_ready : 'skid_buf_upd_req_ready',
                        ih_upd_req_ns : 'skid_buf_upd_req_ns',
                        ih_upd_req_addr : 'skid_buf_upd_req_addr',
                        ih_upd_req_initiator_id : 'skid_buf_upd_req_initiator_id',

                        ih_cmd_req_valid :  useSaveLatency ? /* istanbul ignore next env ncore_3p7 */ 'skid_buf_cmd_req_valid' : 'skid_buf_cmd_req_valid & cmd_rsp_int_ready',
                        ih_cmd_req_ready : 'skid_buf_cmd_req_ready',
                        ih_cmd_req_cm_type : 'skid_buf_cmd_req_cm_type',
                        ih_cmd_req_ns : 'skid_buf_cmd_req_ns',
                        ih_cmd_req_addr : 'skid_buf_cmd_req_addr',
                        ih_cmd_req_initiator_id : 'skid_buf_cmd_req_initiator_id',
                        ih_cmd_req_mpf1 : 'skid_buf_cmd_req_mpf1',
                        ih_cmd_req_mpf2 : 'skid_buf_cmd_req_mpf2',
                        ih_cmd_req_es : 'skid_buf_cmd_req_es',

                        dm_rtr_valid :            'dm_rtr_valid',
                        dm_rtr_ready :            'dm_rtr_ready',
                        dm_rtr_att_vec :          'dm_rtr_att_vec',
                        dm_rtr_req_cm_type :      'dm_rtr_req_cm_type',
                        dm_rtr_req_ns :           'dm_rtr_req_ns',
                        dm_rtr_req_addr :         'dm_rtr_req_addr',
                        dm_rtr_req_initiator_id : 'dm_rtr_req_initiator_id',
                        dm_rtr_req_mpf1 :         'dm_rtr_req_mpf1',
                        dm_rtr_req_mpf2 :         'dm_rtr_req_mpf2',
                        dm_rtr_req_es :           'dm_rtr_req_es',

                        tm_cmd_wakeup_req_arb_valid       : 'tm_cmd_wakeup_req_arb_valid',
                        tm_cmd_wakeup_req_arb_ready       : 'tm_cmd_wakeup_req_arb_ready',
                        att_entry_wakeup_req_cm_type      : 'att_entry_wakeup_req_cm_type',
                        att_entry_wakeup_req_ns           : 'att_entry_wakeup_req_ns',
                        att_entry_wakeup_req_addr         : 'att_entry_wakeup_req_addr', 
                        att_entry_wakeup_req_initiator_id : 'att_entry_wakeup_req_initiator_id',
                        att_entry_wakeup_req_mpf1         : 'att_entry_wakeup_req_mpf1',
                        att_entry_wakeup_req_mpf2         : 'att_entry_wakeup_req_mpf2',
                        att_entry_wakeup_req_es           : 'att_entry_wakeup_req_es',
                        att_entry_wakeup_req_att_vec      : 'att_entry_wakeup_req_att_vec'

                        }      
               })=\

  

//
// DM
//
wire [31:0] tie_low32 = 32'h0;
wire dm_idle;
assign dce_dm_UCE = csr_dm_ue_valid;
assign dce_dm_CE  = csr_dm_ce_valid;
wire [31:0] dm_cfg_i = {8'b0, 5'b0, csr_dm_debg_cfg[18:16], 16'b0}; //[18:17]=Disable VB recovery on {wr,up} [16]=Disable VB
\jsbegin
var dm_ports = {
			 'CachingAgents':	'ca_f_unit_id',
             'clk_i': 		'dm_int_clk',
             'reset_ni': 		'int_reset_n',
             'cfg_i': 		'dm_cfg_i',
             'cfg_init_i': 		'csr_sf_init',
             'cfg_busy_i': 		N_WAYS+`'h0`, //nnm: connect CSR
             'cfg_filter_i': 	N_SF+`'h0`,   //nnm: connect CSR
             'idle_o':		'dm_idle',	//nnm: connect
             'csr_DceMntOpActive_o' : 'csr_DceMntOpActive',

             'dm_t_p2_stall_o' : '',

			 'dm_upd_req_ready_o': 	'dm_upd_req_ready',
			 'dm_upd_req_valid_i': 	'dm_upd_req_valid',
			 'dm_upd_req_ns_i': 	'dm_upd_req_ns',
			 'dm_upd_req_addr_i': 	'dm_upd_req_addr',
			 'dm_upd_req_iid_i': 	'dm_upd_req_initiator_id',
             'dm_upd_status_o': '',
             'dm_upd_status_valid_o': '',
                         
			 'dm_cmd_req_ready_o': 	    'dm_req_ready',
			 'dm_cmd_req_valid_i': 	    'dm_req_valid',
			 'dm_cmd_req_ns_i': 	    'dm_req_ns',	
			 'dm_cmd_req_addr_i': 	    'dm_req_addr',
			 'dm_cmd_req_iid_i': 	    'dm_req_initiator_id',
			 'dm_cmd_req_sid_i': 	    'dm_req_stash_id',
			 'dm_cmd_req_type_i': 	    'dm_req_type',
			 'dm_cmd_req_wakeup_i':     'dm_req_wakeup_valid',
			 'dm_cmd_req_att_vec_i':    'dm_req_alloc_vec',
			 'dm_cmd_req_mpf1_i':       'dm_req_mpf1',
			 'dm_cmd_req_mpf2_i':       'dm_req_mpf2',
			 'dm_cmd_req_es_i':         'dm_req_es',
			 'dm_cmd_req1_filter_num_o': '',	//nnm: remove
			 'dm_cmd_req1_filter_vec_o': 'p1_req_sf_num_vec',
			 'dm_cmd_req1_busy_vec_i':   'p1_dm_busy_way_vec',
             'dm_cmd_req1_alloc_i':      'p1_dm_req_alloc', 
             'dm_cmd_req1_cancel_i':     'p1_dm_req_cancel',
             'dm_cmd_req1_valid_o': '',

			 'dm_cmd_rsp_ready_i':	   'dm_rsp_ready',
			 'dm_cmd_rsp_valid_o': 	   'dm_rsp_valid',
			 'dm_cmd_rsp_att_vec_o':   'dm_rsp_att_vec',
			 'dm_cmd_rsp_way_vec_o':   'dm_rsp_way_vec',
			 'dm_cmd_rsp_owner_val_o': 'dm_rsp_owner_valid',
			 'dm_cmd_rsp_owner_num_o': 'dm_rsp_owner_num',
			 'dm_cmd_rsp_sharer_vec_o':'dm_rsp_sharer_vec',
			 'dm_cmd_rsp_wr_required_o':'dm_rsp_wr_required',
			 'dm_cmd_rsp_vb_hits_o':   '',	//needed for verif
			 'dm_cmd_rsp_error_o': 	   'dm_rsp_error',

                         'dm_rsp_lookup_cm_type' :        'dm_rsp_lookup_cm_type',
                         'dm_rsp_lookup_ns' :             'dm_rsp_lookup_ns',
                         'dm_rsp_lookup_addr' :           'dm_rsp_lookup_addr',
                         'dm_rsp_lookup_initiator_id' :   'dm_rsp_lookup_initiator_id',
                         'dm_rsp_lookup_mpf2' :           'dm_rsp_lookup_mpf2',
                         'dm_rsp_lookup_es' :             'dm_rsp_lookup_es',

                         
			 'dm_rtr_ready_i': 	  'dm_rtr_ready',
			 'dm_rtr_valid_o': 	  'dm_rtr_valid',
			 'dm_rtr_att_vec_o': 	  'dm_rtr_att_vec',
			 'dm_rtr_filter_vec_o':	  '',		//nnm: connect
			 'dm_rtr_way_mask_o':	  '',		//nnm: connect  

                         'dm_rtr_req_cm_type' :      'dm_rtr_req_cm_type',
                         'dm_rtr_req_ns' :           'dm_rtr_req_ns',
                         'dm_rtr_req_addr' :         'dm_rtr_req_addr',
                         'dm_rtr_req_initiator_id' : 'dm_rtr_req_initiator_id',
                         'dm_rtr_req_mpf1' :         'dm_rtr_req_mpf1',
                         'dm_rtr_req_mpf2' :         'dm_rtr_req_mpf2',
                         'dm_rtr_req_es' :           'dm_rtr_req_es',
                         

			 'dm_recall_ready_i': 	   'dm_recall_alloc_ready',
			 'dm_recall_valid_o': 	   'dm_recall_alloc_valid',
			 'dm_recall_ns_o': 	   'dm_recall_ns',
			 'dm_recall_addr_o': 	   'dm_recall_addr',
			 'dm_recall_sharer_vec_o': 'dm_recall_sharer_vec',
			 'dm_recall_owner_val_o':  'dm_recall_owner_valid',
			 'dm_recall_owner_num_o':  'dm_recall_owner_num',
                         
                         
			 'dm_write_ready_o': 	  'dm_write_ready',
			 'dm_write_valid_i': 	  'dm_write_valid',
			 'dm_write_ns_i': 	  'dm_write_ns',	
			 'dm_write_addr_i': 	  'dm_write_addr',
			 'dm_write_way_vec_i': 	  'dm_write_way_vec',
			 'dm_write_owner_val_i':  'dm_write_owner_valid',
			 'dm_write_owner_num_i':  'dm_write_owner_num',
			 'dm_write_sharer_vec_i': 'dm_write_sharer_vec',
			 'dm_write_change_vec_i': 'dm_write_change_vec',

			 'dm_write_valid_dup_i': 	  'dm_write_valid_dup',
			 'dm_write_ns_dup_i': 	  'dm_write_ns_dup',	
			 'dm_write_addr_dup_i': 	  'dm_write_addr_dup',
			 'dm_write_way_vec_dup_i': 	  'dm_write_way_vec_dup',
			 'dm_write_owner_val_dup_i':  'dm_write_owner_valid_dup',
			 'dm_write_owner_num_dup_i':  'dm_write_owner_num_dup',
			 'dm_write_sharer_vec_dup_i': 'dm_write_sharer_vec_dup',
			 'dm_write_change_vec_dup_i': 'dm_write_change_vec_dup',

			 'dm_error_uerr_o':        'csr_dm_ue_valid',
			 'dm_error_uway_vec_o':    'csr_dm_ue_way_vec',	
			 'dm_error_uindex_o':      'csr_dm_ue_index',	//nnm: connect
			 'dm_error_cerr_o':        'csr_dm_ce_valid',
			 'dm_error_cway_vec_o':    'csr_dm_ce_way_vec',
			 'dm_error_cindex_o':      'csr_dm_ce_index',	//nnm: connect
			 'dm_error_addr_o':        'csr_dm_addr'
};

for (let f=0; f<SF_INFO.length; f++) {
	for (let w=0; w<SF_INFO[f].nMemory; w++) {
		dm_ports['f'+f+'m'+w+'_ce_o'] = 'f'+f+'m'+w+'_ce';
		dm_ports['f'+f+'m'+w+'_we_o'] = 'f'+f+'m'+w+'_we';
		dm_ports['f'+f+'m'+w+'_addr_o'] = 'f'+f+'m'+w+'_addr';
		dm_ports['f'+f+'m'+w+'_biten_o'] = 'f'+f+'m'+w+'_biten';
		dm_ports['f'+f+'m'+w+'_wdata_o'] = 'f'+f+'m'+w+'_wdata';
		dm_ports['f'+f+'m'+w+'_rdata_i'] = 'f'+f+'m'+w+'_rdata';
	}
        if (usePLRU) {
dm_ports['f'+f+'_plru_mem_read_en']    = 'f'+f+'_plru_mem_read_en';
dm_ports['f'+f+'_plru_mem_read_addr']  = 'f'+f+'_plru_mem_read_addr';
dm_ports['f'+f+'_plru_mem_read_data']  = 'f'+f+'_plru_mem_read_data';
dm_ports['f'+f+'_plru_mem_write_en']   = 'f'+f+'_plru_mem_write_en';
dm_ports['f'+f+'_plru_mem_write_addr'] = 'f'+f+'_plru_mem_write_addr';
dm_ports['f'+f+'_plru_mem_write_data'] = 'f'+f+'_plru_mem_write_data';
        }
}
\jsend

\= u.instance ({
                instanceName: 'dce_dm',
                moduleName: 'dce_dm',
                params : {
			  assertOn: ASSERT_ON,
                          useSramInputFlop: useSramInputFlop,
                          usePLRU: usePLRU,
			  cmType: CM_TYPE,
                          cmdReqInterface : CMD_REQ_INTF,
                          nAttEntries : N_ATT,
                          SnoopFilterInfo : SF_INFO,
                          InitiatorAgents : C_AGENTS,
			  wFUnitId: W_FUNIT_ID,
                          wCacheLineOffset : CLO,
			  AsyncReset: ARST,
			  DataReset: DRST,
                          NullFilter : NF,
                          PipeDepth : PIPEDEPTH,
                          RetryDepth : RRD
                          },
                verilogParams : {},
                ports : dm_ports
                })=\
                                             
//
// TM
//

wire tm_busy;

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (W_N_ATT_plusone != 8) { \jsend
assign pmon_att_evt = {\=wpmon_event_att_pad0=\'b0, att_count};
\jsbegin
}
else{ \jsend
assign pmon_att_evt = att_count;
\jsbegin
} 

           
let tm_ports = { 
                 clk : 'tm_int_clk',
                 reset_n : 'int_reset_n',
                 ca_f_unit_id : 'ca_f_unit_id',
                 ca_lp_id : 'ca_lp_id',
                 dmi_f_unit_id : 'dmi_f_unit_id',
                 connected_dmi_f_unit_id : 'connected_dmi_f_unit_id',
                 hexDceConnectedDmiRbOffset : 'hexDceConnectedDmiRbOffset',
                 my_f_unit_id : unitIdInterfaceName + 'my_f_unit_id',
                 my_n_unit_id : unitIdInterfaceName + 'my_n_unit_id',

                 cmux_mrd_rsp_UCE : 'cmux_mrd_rsp_UCE',
                 cmux_snp_rsp_UCE : 'cmux_snp_rsp_UCE',
                 cmux_str_rsp_UCE : 'cmux_str_rsp_UCE',
                 cmux_rbr_rsp_UCE : 'cmux_rbr_rsp_UCE',

                 tm_req_alloc_valid : 'tm_req_alloc_valid',
                 tm_req_alloc_ready : 'tm_req_alloc_ready',
                 tm_req_alloc_vec : 'tm_req_alloc_vec',
                 tm_busy : 'tm_busy',
                 
                 ih_req_wakeup_valid : 'dm_req_wakeup_valid',
                 ih_req_addr : 'dm_req_addr',
                 ih_req_initiator_id : 'dm_req_initiator_id',
                 ih_req_ns :  'dm_req_ns',
                 ih_req_type : 'dm_req_type',
                 ih_req_mpf1 : 'dm_req_mpf1',
                 ih_req_mpf2 : 'dm_req_mpf2',
                 ih_req_es :  'dm_req_es',
                 ih_req_alloc_vec : 'dm_req_alloc_vec',

                 ih_req_upd_valid : 'dm_upd_req_valid',
                 ih_req_upd_req_ns : 'dm_upd_req_ns',
                 ih_req_upd_req_addr : 'dm_upd_req_addr',
                 
                 tm_cmd_wakeup_req_arb_valid       : 'tm_cmd_wakeup_req_arb_valid',
                 tm_cmd_wakeup_req_arb_ready       : 'tm_cmd_wakeup_req_arb_ready',
                 att_entry_wakeup_req_cm_type      : 'att_entry_wakeup_req_cm_type',
                 att_entry_wakeup_req_ns           : 'att_entry_wakeup_req_ns',
                 att_entry_wakeup_req_addr         : 'att_entry_wakeup_req_addr', 
                 att_entry_wakeup_req_initiator_id : 'att_entry_wakeup_req_initiator_id',
                 att_entry_wakeup_req_mpf1         : 'att_entry_wakeup_req_mpf1',
                 att_entry_wakeup_req_mpf2         : 'att_entry_wakeup_req_mpf2',
                 att_entry_wakeup_req_es           : 'att_entry_wakeup_req_es',
                 att_entry_wakeup_req_att_vec      : 'att_entry_wakeup_req_att_vec',
                 
                 dm_recall_alloc_valid : 'dm_recall_alloc_valid',
                 dm_recall_alloc_ready : 'dm_recall_alloc_ready',
                 dm_recall_ns : 'dm_recall_ns',
                 dm_recall_addr : 'dm_recall_addr',
                 dm_recall_sharer_vec : 'dm_recall_sharer_vec',
                 dm_recall_owner_valid : 'dm_recall_owner_valid',
                 dm_recall_owner_num : 'dm_recall_owner_num',
                 
                 dm_rsp_ready : 'dm_rsp_ready',
                 dm_rsp_valid : 'dm_rsp_valid',
                 dm_rsp_att_vec : 'dm_rsp_att_vec',
                 dm_rsp_way_vec : 'dm_rsp_way_vec',
                 dm_rsp_owner_valid : 'dm_rsp_owner_valid',
                 dm_rsp_owner_num : 'dm_rsp_owner_num',
                 dm_rsp_sharer_vec : 'dm_rsp_sharer_vec',
                 dm_rsp_wr_required : 'dm_rsp_wr_required',
                 dm_rsp_error : 'dm_rsp_error',
                 
                 dm_rsp_lookup_cm_type      : 'dm_rsp_lookup_cm_type',
                 dm_rsp_lookup_ns           : 'dm_rsp_lookup_ns',
                 dm_rsp_lookup_addr         : 'dm_rsp_lookup_addr',
                 dm_rsp_lookup_initiator_id : 'dm_rsp_lookup_initiator_id',
                 dm_rsp_lookup_mpf2         : 'dm_rsp_lookup_mpf2',
                 dm_rsp_lookup_es           : 'dm_rsp_lookup_es',
                 
                 p1_req_sf_num_vec : 'p1_req_sf_num_vec',
                 p1_dm_busy_way_vec : 'p1_dm_busy_way_vec',
                 p1_dm_req_alloc : 'p1_dm_req_alloc',
                 p1_dm_req_cancel : 'p1_dm_req_cancel',
                 
                 dm_write_ready : 'dm_write_ready',
                 dm_write_valid : 'dm_write_valid',
                 dm_write_ns : 'dm_write_ns',
                 dm_write_addr : 'dm_write_addr',
                 dm_write_way_vec : 'dm_write_way_vec',
                 dm_write_owner_valid : 'dm_write_owner_valid',
                 dm_write_owner_num : 'dm_write_owner_num',
                 dm_write_sharer_vec : 'dm_write_sharer_vec',
                 dm_write_change_vec : 'dm_write_change_vec',

                 dm_write_valid_dup : 'dm_write_valid_dup',
                 dm_write_ns_dup : 'dm_write_ns_dup',
                 dm_write_addr_dup : 'dm_write_addr_dup',
                 dm_write_way_vec_dup : 'dm_write_way_vec_dup',
                 dm_write_owner_valid_dup : 'dm_write_owner_valid_dup',
                 dm_write_owner_num_dup : 'dm_write_owner_num_dup',
                 dm_write_sharer_vec_dup : 'dm_write_sharer_vec_dup',
                 dm_write_change_vec_dup : 'dm_write_change_vec_dup',

                 hexDceDmiVec : 'hexDceDmiVec',

                 BRAR_Valid : 'BRAR_Valid',
                 BRAR_Size : 'BRAR_Size',
                 BRAR_HUT : 'BRAR_HUT',
                 BRAR_HUI : 'BRAR_HUI',
                 BRBAR_AddrLo : 'BRBAR_AddrLo',
                 BRBAR_AddrHi : 'BRBAR_AddrHi',

                 AMIGR_AMIGS : 'AMIGR_AMIGS',
                 AMIGR_Valid : 'AMIGR_Valid',

                 MIFSR_A16WIFId: 'MIFSR_A16WIFId',
                 MIFSR_A8WIFId : 'MIFSR_A8WIFId',
                 MIFSR_A4WIFId : 'MIFSR_A4WIFId',
                 MIFSR_A3WIFId : 'MIFSR_A3WIFId',
                 MIFSR_A2WIFId : 'MIFSR_A2WIFId',

                 csr_target_ue_valid : 'tm_target_ue_valid',
                 csr_target_ue_init_id : 'tm_target_ue_init_id',

                 tm_timeout_ue_valid : 'tm_timeout_ue_valid',
                 tm_timeout_ue_addr : 'tm_timeout_ue_addr',
                 tm_timeout_ue_ns : 'tm_timeout_ue_ns',
                 
                 csr_timeout_threshold : 'csr_timeout_threshold',
                 csr_timeout_ref_en : 'csr_timeout_ref_en',
                 csr_timeout_count_reset : 'csr_timeout_count_reset',

                 csr_addr_map_multi_hit : 'csr_addr_map_multi_hit',
                 csr_addr_map_no_hit : 'csr_addr_map_no_hit',
                 csr_addr_map_req_wr : 'csr_addr_map_req_wr', 
                 csr_addr_map_trans_id : 'csr_addr_map_trans_id',
                 csr_addr_map_addr : 'csr_addr_map_addr',
                 csr_addr_map_unconnected_dmi_access : 'csr_addr_map_unconnected_dmi_access',
		 csr_SnoopEnable : 'ca_SnoopEnable',

                 no_credits_access_err      : 'no_credits_access_err',
                 no_credits_access_err_addr : 'no_credits_access_err_addr',
                 err_p1_tm_cmd_req_d_id_valid : 'err_p1_tm_cmd_req_d_id_valid',
                 err_p1_tm_cmd_req_d_id_addr  : 'err_p1_tm_cmd_req_d_id_addr',

		 att_entry_agent_inactive : 'att_entry_agent_inactive',
		 att_count: 'att_count',
		 pmon_addr_collisions: 'pmon_addr_collisions',
		 snp_rsp_miss: 'snp_rsp_miss',
                 snp_rsp_owner_transfer: 'snp_rsp_owner_transfer',
                 snoop_filter_hit: 'snoop_filter_hit',
                 snoop_filter_miss: 'snoop_filter_miss',
                 snoop_filter_recall: 'snoop_filter_recall'

                 };
   
for (let i = 0; i < N_GPRA; i++) 
  {
   tm_ports['GPRAR'+i+'_Valid'] = 'GPRAR'+i+'_Valid';
   tm_ports['GPRAR'+i+'_HUT'] = 'GPRAR'+i+'_HUT';
   tm_ports['GPRAR'+i+'_Size'] = 'GPRAR'+i+'_Size';
   tm_ports['GPRAR'+i+'_HUI'] = 'GPRAR'+i+'_HUI';
   tm_ports['GPRBAR'+i+'_AddrLo'] = 'GPRBAR'+i+'_AddrLo';
   tm_ports['GPRBAR'+i+'_AddrHi'] = 'GPRBAR'+i+'_AddrHi';
   };
    
   tm_ports['bist_timeout_trigger'] = 'bist_timeout_trigger';

if (useQos) {
   tm_ports['csr_eviction_qos'] = 'csr_eviction_qos';
   tm_ports['csr_use_eviction_qos'] = 'csr_use_eviction_qos';
}

/* istanbul ignore if env ncore_3p7 */
if (useMoveFlopsToTop) {
   tm_ports['en_att_req_alloc_bundle_vec'] = 'en_att_req_alloc_bundle_vec';
   tm_ports['in_att_req_alloc_bundle_vec'] = 'in_att_req_alloc_bundle_vec';
   tm_ports['out_att_req_alloc_bundle_vec'] = 'out_att_req_alloc_bundle_vec';

   tm_ports['en_att_alloc_bundle_vec'] = 'en_att_alloc_bundle_vec';
   tm_ports['in_att_alloc_bundle_vec'] = 'in_att_alloc_bundle_vec';
   tm_ports['out_att_alloc_bundle_vec'] = 'out_att_alloc_bundle_vec';
}

\jsend                                        

\= u.instance ({
                instanceName: 'dce_tm',
                moduleName: 'dce_tm',
                params : {
                          useSramInputFlop     : useSramInputFlop,
                          useMoveFlopsToTop    : useMoveFlopsToTop,
                          att_req_alloc_bundle : att_req_alloc_bundle,
                          att_alloc_bundle     : att_alloc_bundle,
                          cmdReqInterface : CMD_REQ_INTF,
                          updReqInterface : UPD_REQ_INTF,
                          mrdReqInterface : MRD_REQ_INTF,
                          snpReqInterface : SNP_REQ_INTF,
                          strReqInterface : STR_REQ_INTF,
                          snpRspInterface : SNP_RSP_INTF,
                          strRspInterface : STR_RSP_INTF,
                          mrdRspInterface : MRD_RSP_INTF,
                          rbrReqInterface : RBR_REQ_INTF,
                          rbrRspInterface : RBR_RSP_INTF,
                          reqAckEventInterface: reqAckEventInterface,
                          ccrCsrInterface  : { name: "csr_DCEU", signals: ccrCsrInterface.signals },

                          assertOn : ASSERT_ON,
                          
                          nLpIdPerCaAgent : N_LP_IDS,
                          wLpId : W_LP_ID,
                          nProcs : N_PROCS,
                          nTaggedMonitors : N_TAG_MONS,

                          nMrdsPerDmi : N_MRD_CREDITS,
                          nSnpsPerAiu : N_SNP_CREDITS,
                          nRbsPerDmi : N_RBS,
                          
                          nGPRA : N_GPRA,
                          dmiIGSV : DMI_IGSV,
                          dmi2WIFV : DMI_2WIFV,
                          dmi3WIFV : DMI_3WIFV,
                          dmi4WIFV : DMI_4WIFV,
                          dmi8WIFV : DMI_8WIFV,
                          dmi16WIFV : DMI_16WIFV,

                          StashEnable : STASH_EN_VEC,
                          CachingAgentIsCHI : CachingAgentIsCHI,
                          
                          nAttEntries : N_ATT,
                          nWays : N_WAYS,
                          nSf : N_SF,
                          nCachingAgents : N_C_AGENTS,
                          nChieAius : N_CHIE_AIUS,
                          cmType : CM_TYPE,
                          nDmis : N_DMIS,
                          nConnectedDmis : N_CONNECTED_DMIS,
                          wFUnitId : W_FUNIT_ID,
                          wFPortId : W_FPORT_ID,
                          wNUnitId : W_NUNIT_ID,
                          wCacheLineOffset : CLO,
                          SnoopFilterInfo : SF_INFO,
                          QosInfo : QosInfo,
                          useQos : useQos
                          },
                verilogParams : {},
                ports : tm_ports,
                interfaces : [
                              {modulePrefix: 'tm_cmd_req_', localPrefix: 'skid_buf_cmd_req_', "interface": CMD_REQ_INTF, exclude: ['valid','ready']},
                              {modulePrefix: 'tm_snp_req_', localPrefix: 'snp_req_', "interface": SNP_REQ_INTF},
                              {modulePrefix: 'tm_mrd_req_', localPrefix: 'mrd_req_', "interface": MRD_REQ_INTF},
                              {modulePrefix: 'tm_str_req_', localPrefix: 'str_req_', "interface": STR_REQ_INTF},
                              {modulePrefix: 'tm_rbr_req_', localPrefix: 'rbr_req_', "interface": RBR_REQ_INTF},
                              {modulePrefix: 'tm_snp_rsp_', localPrefix: 'snp_rsp_', "interface": SNP_RSP_INTF},
                              {modulePrefix: 'tm_mrd_rsp_', localPrefix: 'mrd_rsp_', "interface": MRD_RSP_INTF},
                              {modulePrefix: 'tm_str_rsp_', localPrefix: 'str_rsp_', "interface": STR_RSP_INTF},
                              {modulePrefix: 'tm_rbr_rsp_', localPrefix: 'rbr_rsp_', "interface": RBR_RSP_INTF},
                              {modulePrefix: reqAckEventInterface.name, localPrefix: reqAckEventInterface.name, "interface": reqAckEventInterface.signals},
                              {modulePrefix: 'csr_DCEU',    localPrefix: 'DCEU',     interface: ccrCsrInterface.signals}
                              ]
                })=\
 
\jsbegin
//=============================================================================
// CSR
//=============================================================================
\jsend                                                  

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (!useMoveCsrToTop) {
\jsend

    \js for (var i=0; i < N_C_AGENTS; i++) {
wire [W_NUNIT_ID-1:0] ca\=i=\_n_unit_id = \=nUnitID.idx(i).expr=\;
    \js }

    \=obj.lib.instance({
        instanceName: 'u_csr',
        moduleName: 'dce_csr',
        params: csr_params,
        verilogParams: {},
        ports: instance_ports_for_csr,
        interfaces: CSR_INTF,
        portsDelimiter: '\n'
    })=\

\js }

assign csr_DceTransActive = cmux_busy | tm_busy | skid_buffer_busy | ~dm_idle | skid_buf_cmd_req_valid | cmd_rsp_valid \jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) { \jsend
                          | sys_evt_coh_busy \jsbegin
} \jsend
                          ;

assign dce_busy = csr_DceTransActive | apb_busy | bist_timeout_trigger;

\jsbegin

//=============================================================================
// Q Channel Interface
//=============================================================================

if (usePma) {

//-----------------------------------------------------------------------------
// DVE PMA Slave Instance
//-----------------------------------------------------------------------------

// PMA Interfaces

var pma_interfaces = [];
var dce_num = 0;

pma_interfaces[dce_num] =     {
                                modulePrefix  : '',
                                localPrefix   :  clkInterfaceOldStyle.name,
                                interface     :  clkAndResetOnlyBundle
                              };

dce_num++;

pma_interfaces[dce_num] =     {
                                 modulePrefix  :  qInterfaceName,
                                 localPrefix   :  qInterfaceName,
                                 interface     :  qInterface 
                              };

dce_num++;

var interfaces   =  {};

interfaces["clkInt"]  =       {
                                 "name"      : "",
                                 "params"    : {},
                                 "direction" : "slave",
                                 "interface" : "InterfaceCLK"
                              };

interfaces["masterInt"] =     {
                                 "name"      : qInterfaceName,
                                 "params"    : {
                                                   "wActive"     : PmaInfo.wActive,
                                                   "channelType" : PmaInfo.fnPmaInterfaceType
                                               },
                                 "direction" : "slave",
                                 "interface" : "InterfacePQChannel"
                              };

interfaces["pmaControlInt"] = {
                                 "name"      : "pma_ctl_",
                                 "params"    : {},
                                 "direction" : "master",
                                 "interface" : "InterfacePMAControl"
			      };

\jsend

wire goto_sleep;
wire asleep;

\=obj.lib.instance ({
                instanceName: 'dce_pma',
                moduleName: 'pma_slave',
                params : {
                            channel              : "Q",
                            interfaces           : interfaces,
			    pipeActive           : true,
                            syncReq              : false
                },
                ports:   {
                            "pma_ctl_asleep"     : 'asleep',
                            "pma_ctl_goto_sleep" : 'goto_sleep',
                            "pma_ctl_busy"       : 'dce_busy',
                            "pma_ctl_abort"      : '1\'b0'
			    },
                verilogParams : {},
                interfaces : pma_interfaces
	})=\

\js }



\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
        var sys_evt_coh_concerto_params = {
            wFUnitId                : W_FUNIT_ID,
            wFPortId                : W_FPORT_ID,
            wNUnitId                : W_NUNIT_ID,
            concParams              : concParams,
            cmType                  : CM_TYPE,
            sysReqRxInterface       : SYS_REQ_RX_INTF,
            sysRspTxInterface       : SYS_RSP_TX_INTF,
            sysReqTxInterface       : SYS_REQ_TX_INTF,
            sysRspRxInterface       : SYS_RSP_RX_INTF,

            useSysEvtSender         : 1,
            useSysEvtReceiver       : 0,
            useSysCoh               : 1,
            useSysCohSender         : 0,
            useOldPortsForDV        : true,
            nEventAgentsForSender   : EnableSysEvtToDve ? N_DVES : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ N_C_AGENTS,
            nSnoopAgents            : N_C_AGENTS,
            wSnoopEnables           : wSnoopEnables,
            wProtocolTimeout        : wProtocolTimeout,
            wEventTimeout           : wEventTimeout
        };
        var instance_ports_for_sys_evt_coh_concerto = {
            clk                                    : clkInterfaceOldStyle.name+'clk',
            reset_n                                : clkInterfaceOldStyle.name+'reset_n',
            my_f_unit_id                           : unitIdInterfaceName+'my_f_unit_id',
            sys_req_rx_valid                       : 'sys_req_rx_valid & ~sys_req_rx_target_id_mismatch & ~cmux_sys_req_rx_UCE',
            sys_rsp_rx_valid                       : 'sys_rsp_rx_valid & ~sys_rsp_rx_target_id_mismatch & ~cmux_sys_rsp_rx_UCE',
            busy                                   : 'sys_evt_coh_busy',
            csr_sys_evt_sender_enable              : 'csr_sys_evt_sender_enable',
            csr_sys_coh_receiver_err_vld           : 'csr_sys_coh_receiver_err_vld',
            csr_sys_coh_receiver_err_f_unit_id     : 'csr_sys_coh_receiver_err_f_unit_id',
            csr_sys_evt_protocol_timeout_value     : 'csr_protocol_timeout_value',
            csr_protocol_timeout_value             : 'csr_protocol_timeout_value',
            csr_event_timeout_value                : 'csr_event_timeout_value',
            snoop_enables                          : 'snoop_enables',
            snoop_enables_update                   : 'snoop_enables_update',
            csr_snoop_enables                      : 'csr_snoop_enables',
            csr_snoop_enables_update               : 'csr_snoop_enables_update',
            outstanding_snoop_count_zero           : 'att_entry_agent_inactive',
            csr_sys_evt_sender_err_vld             : 'csr_sys_evt_sender_err_vld',
            csr_sys_evt_sender_err_f_unit_id       : 'csr_sys_evt_sender_err_f_unit_id',
            csr_sys_evt_sender_err_protocol_sys    : 'csr_sys_evt_sender_err_protocol_sys',
            csr_sys_evt_sender_err_protocol_timeout: 'csr_sys_evt_sender_err_protocol_timeout',
            csr_sys_evt_sender_err_event_timeout   : 'csr_sys_evt_sender_err_event_timeout',
            event_in_req                           : reqAckEventInterface.name+"req",
            event_in_ack                           : reqAckEventInterface.name+"ack",
            event_in_targets                       : 'event_in_targets'
        };

        for (var i=0; i < N_C_AGENTS; i++) {
			instance_ports_for_sys_evt_coh_concerto['aiu'+i+'_f_unit_id'] = fUnitID.idx(i).expr;	// ith slice of ca_f_unit_id packed array bit-vector
			instance_ports_for_sys_evt_coh_concerto['aiu'+i+'_n_unit_id'] = nUnitID.idx(i).expr;
        }
	/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if (EnableSysEvtToDve && dveIdInterface) {
	  for (var i=0; i < N_DVES; i++) {
			instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = dveIdInterface.name + 'f_unit_id';
	 } 
	}
	else{
	  for (var i=0; i < N_C_AGENTS; i++) {
		  	instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = fUnitID.idx(i).expr;
	  }
	}

	
        \jsend

        \=obj.lib.instance({
            instanceName: 'u_sys_evt_coh_concerto',
            moduleName: 'sys_evt_coh_concerto',
            params: sys_evt_coh_concerto_params,
            ports: instance_ports_for_sys_evt_coh_concerto,
            interfaces: [
                {modulePrefix: 'sys_req_tx_', localPrefix: 'sys_req_tx_', interface: SYS_REQ_TX_INTF},
                {modulePrefix: 'sys_rsp_rx_', localPrefix: 'sys_rsp_rx_', interface: SYS_RSP_RX_INTF, exclude: ['valid']},
                {modulePrefix: 'sys_req_rx_', localPrefix: 'sys_req_rx_', interface: SYS_REQ_RX_INTF, exclude: ['valid']},
                {modulePrefix: 'sys_rsp_tx_', localPrefix: 'sys_rsp_tx_', interface: SYS_RSP_TX_INTF}
            ]
        })=\ \jsbegin

} else { \jsend
	assign \=reqAckEventInterface.name=\ack		= 1'b0; \jsbegin
} \jsend

  assign csr_event_timeout_value  = {\=wEventTimeout=\{1'b1}};  // Because there is no external event interface

//=============================================================================
// Clock divide by 16 reference event generation
//=============================================================================
\=u.instance({
    instanceName: 'clk_divider' ,
    moduleName: 'clk_divider',
    params: {
	clkDivisors: [16],
	clkInterface : clkInterfaceOldStyle,	
	clkOutInterfaces: [clk16Interface]
    },
    interfaces :[
		{ modulePrefix: clkInterfaceOldStyle.name, localPrefix: clkInterfaceOldStyle.name, "interface": clkInterfaceOldStyle.signals },
		{ modulePrefix: clk16Interface.name, localPrefix: clk16Interface.name, "interface": clk16Interface.signals }
	],
    portsDelimiter: '\n    '
})=\

//=============================================================================
// Ncore PerfMon Instance
//=============================================================================
\jsbegin
for (let i=0; i< pmonEventTable.length; i++) { \jsend
	assign \=pmonInterfaces.evtInterfaces[i].name=\val		= \=pmonEventTable[i].expr=\; \jsbegin
} 

/* istanbul ignore else env ncore_3p7 */
if (!useMovePmonToTop) {

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (nPerfCounters) {
\jsend
\=u.nInstance({
    instanceName : 'u_ncr_pmon',
    moduleName : 'ncr_pmon',
    params: {
        nPerfCounters,
		interfaces: pmonInterfaces
    },
    interfaceObj: {
		interfaces: pmonInterfaces,
		prefixes: pmonInterfaces 
    }
})=\
\jsbegin
}

}
\jsend

//=============================================================================
// SysReq wrong target id
//=============================================================================
assign sys_req_rx_target_id_mismatch = ~(sys_req_rx_target_id[W_INIT_ID-1 : W_FPORT_ID] == uId_my_f_unit_id);
assign sys_rsp_rx_target_id_mismatch = ~(sys_rsp_rx_target_id[W_INIT_ID-1 : W_FPORT_ID] == uId_my_f_unit_id);

assign sys_req_rx_ue_valid = (sys_req_rx_valid & sys_req_rx_ready) & sys_req_rx_target_id_mismatch;
assign sys_req_rx_ue_init_id = sys_req_rx_initiator_id[W_INIT_ID-1 : W_FPORT_ID];

assign sys_rsp_rx_ue_valid = (sys_rsp_rx_valid & sys_rsp_rx_ready) & sys_rsp_rx_target_id_mismatch;
assign sys_rsp_rx_ue_init_id = sys_rsp_rx_initiator_id[W_INIT_ID-1 : W_FPORT_ID];

//=============================================================================
// Skid Buffer uncorrectable error and correctable error for mission fault
//=============================================================================

\js if (useSramFifo) {

assign dce_cmd_skid_buffer_uce = csr_sb_ue_valid;
assign dce_cmd_skid_buffer_ce  = csr_sb_ce_valid;

\js }

endmodule //
