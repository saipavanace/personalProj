
\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
// DMI skid buffer contains an input fifo, a pri age arbiter and an output fifo. 
//It can implement the input fifo using an SRAM when both useSramFifo is true and the memory type is SYNOPSYS
// Filename: dmi_skid_buffer.tachl
// Parameters : reqInterface, clkInterface, wStarvThreshold, bufferSize ({Skidfifo :, SkidBuffer :}), useOutputFifo,
//              useSmallArea, priAgeBypass, useQos, priorityThreshold
//=============================================================================

var u = obj.lib;
var m = obj.userLib;
var bundleFunctions = obj.userLib.bundleFunctions;


let p=u.getParam();

//clock and reset
u.interface("","slave", p.clkInterface, )

//input interface
u.interface("req_in_", "slave",p.reqInterface);


//output interface
u.interface("req_out_","master",p.reqInterface);
if(p.useQos){

    u.port("input","starv_en",              1);
    u.port("input","starv_threshold",       p.wStarvThreshold);
    u.port("input","qos_disable",           1);
    u.port("output","starv_overflow_event", 1);
    u.port("output", "starv_mode",          1);
    u.port("output","full",                 1);   

}


u.port("output","empty",1);


if (p.useSramFifo) {

    u.port('output', 'sb_mem_write_en', 1);
    u.port('output', 'sb_mem_write_addr', p.sb_mem_addr_width);
    u.port('output', 'sb_mem_write_data', p.sb_mem_data_width);
    u.port('output', 'sb_mem_read_en', 1);
    u.port('output', 'sb_mem_read_addr', p.sb_mem_addr_width);
    u.port('input',  'sb_mem_read_data', p.sb_mem_data_width);
    u.port('output',"sb_mem_out_uerr",1);
    u.port('output',"sb_mem_out_cerr",1);
    u.port('output',"sb_mem_out_err_index",p.sb_mem_addr_width);
    
    }

\jsend

module \=u.getModuleName()=\ (\=u.getPorts()=\);




\=bundleFunctions.wiresFromInterface('req_input_fifo_out_',        p.reqInterface,    [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface('req_skid_out_',        p.reqInterface,    [], obj.lib.bundle)=\


\jsbegin

//==============================================================================
// CMD Skid Buffer
//==============================================================================
if (p.useSramFifo){

    var com_fifo_mem_params = {
        width: p.sb_width,
        depth: p.bufferSize.Skidfifo,
        memoryType: p.sb_memoryType,
        fnErrDetectCorrect: p.sb_fnErrDetectCorrect,
        bypass_mode : 1,
        memoryType  : "SYNOPSYS"
        };

    var com_fifo_mem_ports = {
        clk:            'clk',
        reset_n:        'reset_n',
        in_valid:       'req_in_valid',
        in_ready:       'req_in_ready',
        in_data:        'req_in_data',
        out_valid:      'req_input_fifo_out_valid_unqual',
        out_ready:      'req_input_fifo_out_ready',
        out_data:       'req_input_fifo_out_data',
        out_uerr:       'sb_mem_out_uerr_unqual',
        out_cerr:       'sb_mem_out_cerr_unqual',
        out_err_index : "sb_mem_out_err_index",
        wt_sel:         'sb_mem_write_en',
        wt_addr:        'sb_mem_write_addr' ,
        wt_data:        'sb_mem_write_data' ,
        rd_sel:         'sb_mem_read_en',
        rd_addr:        'sb_mem_read_addr' ,
        rd_data:        'sb_mem_read_data' 

        };
\jsend

wire [\=p.sb_width-1=\:0]  req_in_data;
wire [\=p.sb_width-1=\:0]  req_input_fifo_out_data;
wire sb_mem_out_uerr_unqual;
wire sb_mem_out_cerr_unqual;
wire req_input_fifo_out_valid_unqual;

\=u.instance({
    instanceName: 'u_com_fifo_mem',
    moduleName: 'com_fifo_mem',
    params: com_fifo_mem_params,
    ports: com_fifo_mem_ports,
    interfaces: []
})=\


assign sb_mem_out_uerr = sb_mem_out_uerr_unqual & req_input_fifo_out_ready & req_input_fifo_out_valid_unqual;
assign sb_mem_out_cerr = sb_mem_out_cerr_unqual & req_input_fifo_out_ready & req_input_fifo_out_valid_unqual;
assign req_input_fifo_out_valid = req_input_fifo_out_valid_unqual & ~sb_mem_out_uerr_unqual;

assign  req_in_data = \=m.bundleFunctions.packetizeBundle('req_in_',  p.reqInterface, ['valid', 'ready'], obj.lib.bundle)=\ ;

assign \=m.bundleFunctions.packetizeBundle('req_input_fifo_out_',  p.reqInterface, ['valid', 'ready'], obj.lib.bundle)=\ = req_input_fifo_out_data ;


\jsbegin

} else {
 var cmdSkidBufferInputFifoInterfaces = [];
 cmdSkidBufferInputFifoInterfaces.push({modulePrefix: '',         localPrefix: '',            interface: p.clkInterface,  exclude: []               });
 cmdSkidBufferInputFifoInterfaces.push({modulePrefix: 'push_',  localPrefix: 'req_in_',    interface: p.reqInterface,     exclude: []              });
 cmdSkidBufferInputFifoInterfaces.push({modulePrefix: 'pop_',  localPrefix: 'req_input_fifo_out_',    interface: p.reqInterface,     exclude: []              });
 var cmdSkidBufferInputFifoParams = {
     width           : bundleFunctions.getBundleWidth(p.reqInterface, ['valid', 'ready'], obj.lib.bundle),
     depth           : p.bufferSize.Skidfifo  <= 0 ? 1 : p.bufferSize.Skidfifo ,
     zerodepth       : p.bufferSize.Skidfifo  <= 0 ? 1: 0,
     bypass_mode     : 1,
     interface       : p.reqInterface
 }
 
 \jsend
 
 \=obj.lib.instance({
     instanceName    : 'input_fifo',
     moduleName      : 'fifo_bundle',
     params          : cmdSkidBufferInputFifoParams,
     verilogParams   : {},
     ports           : {},
     interfaces      : cmdSkidBufferInputFifoInterfaces,
 })=\
 
 \jsbegin
} 

 var cmdSkidBufferInterfaces = [];
 cmdSkidBufferInterfaces.push({modulePrefix: '',          localPrefix: '',                        interface: p.clkInterface,    exclude: []                 });
 cmdSkidBufferInterfaces.push({modulePrefix: 'req_in_',   localPrefix: 'req_input_fifo_out_',                interface: p.reqInterface, exclude: []   });
 cmdSkidBufferInterfaces.push({modulePrefix: 'req_out_',  localPrefix: 'req_skid_out_',    interface: p.reqInterface,exclude : []});
 
 var cmdSkidBufferParams = {
     assertOn            : p.assertOn,
     useSmallArea        : p.useSmallArea,
     depth               : p.bufferSize.SkidBuffer,
     bypass              : p.priAgeBypass,
     useQos              : p.useQos,
     useAge              : 1,
     wStarvThreshold     : p.useQos*p.wStarvThreshold,
     reqInterface        : p.reqInterface,
     clkInterface        : p.clkInterface,
     priorityThreshold   : p.useQos
 };
 
 var cmdSkidBufferPorts = {
     empty               : 'empty'
 };

 
 if (p.useQos) {
     cmdSkidBufferPorts['starv_en']          = 'starv_en';
     cmdSkidBufferPorts['starv_threshold']   = 'starv_threshold';
     cmdSkidBufferPorts['qos_disable']       = 'qos_disable';
     cmdSkidBufferPorts['starv_overflow_event']       = 'starv_overflow_event';
     cmdSkidBufferPorts['starv_mode']        = 'starv_mode';
     cmdSkidBufferPorts["full"]              = "full";
 }
 \jsend
 
 \=obj.lib.instance({
     instanceName        : 'pri_age_buffer',
     moduleName          : 'pri_age_buffer_arbiter',
     params              : cmdSkidBufferParams,
     verilogParams       : {},
     ports               : cmdSkidBufferPorts,
     interfaces          : cmdSkidBufferInterfaces
 })=\
 
 
 
 \jsbegin
 
 var cmdSkidBufferFifoInterfaces = [];
 cmdSkidBufferFifoInterfaces.push({modulePrefix: '',         localPrefix: '',            interface: p.clkInterface,  exclude: []               });
 cmdSkidBufferFifoInterfaces.push({modulePrefix: 'push_',  localPrefix: 'req_skid_out_',    interface: p.reqInterface, exclude : [] });
 cmdSkidBufferFifoInterfaces.push({modulePrefix: 'pop_',  localPrefix: 'req_out_',    interface: p.reqInterface, exclude: [] });

 var cmdSkidBufferFifoParams = {
     width           : bundleFunctions.getBundleWidth(p.reqInterface, [], obj.lib.bundle),
     depth           : 2,
     zerodepth       : p.useOutputFifo==0,
     bypass_mode     : 0,
     interface       : p.reqInterface
 }
 \jsend
 
 \=obj.lib.instance({
     instanceName    : 'cmd_skid_output_fifo',
     moduleName      : 'fifo_bundle',
     params          : cmdSkidBufferFifoParams,
     verilogParams   : {},
     ports           : {},
     interfaces      : cmdSkidBufferFifoInterfaces,
 })=\

 endmodule