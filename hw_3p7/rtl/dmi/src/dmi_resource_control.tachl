\jsbegin
//=============================================================================
// Copyright(C) 2018 Arteris, Inc.
// All rights reserved
//=============================================================================
// DMI Resource Control Block
// Author: Travis Johnson
//=============================================================================

// Variables

var bundleFunctions     = obj.userLib.bundleFunctions;
var log2ceil            = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };
var ccpMemoryInterface  = obj.lib.getParam('ccpMemoryInterface');
var useCmc              = obj.lib.getParam('useCmc');
var useAtomic           = obj.lib.getParam('useAtomic');
var useScratchpad       = obj.lib.getParam('useScratchpad');
var useWayPartitioning  = obj.lib.getParam('useWayPartitioning');
var nWayPartitioningRegisters = obj.lib.getParam('nWayPartitioningRegisters');
var wCacheLineOffset    = obj.lib.getParam('wCacheLineOffset');
var wData               = obj.lib.getParam('wData');
var sysUnitIdInterface  = obj.lib.getParam('sysUnitIdInterface'); 
var nRttCtrlEntries     = obj.lib.getParam('nRttCtrlEntries');
// write buffer size a multiple of cachelines, minimum of 4 cachelines.
var nWriteBuffers       = obj.lib.getParam('nWriteDataBuffer');
var nAius               = obj.lib.getParam('nAius');
var wFUnitId            = obj.lib.getParam('wFUnitId');
var wFPortId            = obj.lib.getParam('wFPortId');
var wNUnitId            = obj.lib.getParam('wNUnitId');
var wRttId              = log2ceil(nRttCtrlEntries);
var assertOn            = obj.lib.getParam('assertOn');
var wWriteDataBufferId  = obj.lib.getParam('wWriteDataBufferId');
var enRdPipe            = obj.lib.getParam('enRdPipe');
var enWrPipe            = obj.lib.getParam('enWrPipe');
var usePLRU                = obj.lib.getParam('usePLRU');
if (usePLRU) {
   var plru_addr_w         = obj.lib.getParam('ccpParams', 'plru_addr_w');
   var nWays               = obj.lib.getParam('ccpParams', 'nWays');
   var nTagBanks           = obj.lib.getParam('ccpParams', 'nTagBanks');
}

//
// Interfaces
//
// Clk
obj.lib.interface('', 'slave', obj.lib.getParam('clkInterface'));

// Inputs
obj.lib.interface('read_prot_', 'slave', obj.lib.getParam('readProtInterface'));
obj.lib.interface('bus_data_', 'slave', obj.lib.getParam('returnDataInterface'));
obj.lib.interface('fill_data_', 'slave', obj.lib.getParam('fillInterface'));
obj.lib.interface('write_prot_', 'slave', obj.lib.getParam('writeProtInterface'));
obj.lib.interface('write_prot_data_', 'slave', obj.lib.getParam('writeProtDataInterface'));
obj.lib.interface('bus_resp_', 'slave', obj.lib.getParam('writeResponseInterface'));
obj.lib.port('input', 'read_alloc_id', wRttId);
obj.lib.port('input', 'rtt_dealloc_id', wRttId);
obj.lib.port('input', 'rtt_dealloc_valid', 1);
obj.lib.port('input', 'rtt_dealloc_vec', obj.lib.getParam('nRttCtrlEntries'));
obj.lib.port('input', 'read_cam_match_fill', 1);
obj.lib.port('input', 'write_prot_nc_sel', 1);
obj.lib.port('output', 'write_alloc_evict', 1);
if(useAtomic){
obj.lib.port("input","nb_atomic",3);
}
if ( useCmc ) {

    if(useScratchpad){
       obj.lib.port("input","uId_my_n_unit_id",wNUnitId);
        }

    if(obj.lib.getParam("ccpParams","nBeatsPerBank") > 1){
        obj.lib.port("input","clkby2_en",1);
        }
obj.lib.port('output', 'dmi_ccp_cache_fill_fifo_avail', 1);
obj.lib.port('output', 'dmi_ccp_cache_fill_done', 1);
obj.lib.port('output', 'dmi_ccp_cache_fill_done_id', obj.lib.getParam('returnDataInterface', 'id'));
obj.lib.port('output', 'pmon_cache_rd_hit', 1);
obj.lib.port('output', 'pmon_cache_wr_hit', 1);
obj.lib.port('output', 'pmon_cache_cmo_hit', 1);
obj.lib.port('output', 'pmon_cache_evict', 1);
obj.lib.port('output', 'pmon_cache_no_way_alloc', 1);
obj.lib.port('output', 'pmon_cache_rd_stall', 1);
obj.lib.port('output', 'pmon_cache_wr_stall', 1);
obj.lib.port('output', 'pmon_cache_replay', 1);
obj.lib.port('output', 'pmon_cache_rd_miss', 1);
obj.lib.port('output', 'pmon_cache_wr_miss', 1);
obj.lib.port('output', 'pmon_cache_cmo_miss', 1);
obj.lib.port('output', 'pmon_cache_fill_stall', 1);
obj.lib.port('output', 'ccp_p1_valid', 1);
obj.lib.port('output', 'read_write_addr_s_pop_ready_p1', 1);
obj.lib.port("input","DMIUWRDATACLN_EnClnDataWr",1);


  if (usePLRU) {
    for (var i = 0; i < nTagBanks; i++) {
obj.lib.port('output', 'plru_mem'+i+'_read_en', 1);
obj.lib.port('output', 'plru_mem'+i+'_read_addr', plru_addr_w);
obj.lib.port('input',  'plru_mem'+i+'_read_data', nWays);
obj.lib.port('output', 'plru_mem'+i+'_write_en', 1);
obj.lib.port('output', 'plru_mem'+i+'_write_addr', plru_addr_w);
obj.lib.port('output', 'plru_mem'+i+'_write_data', nWays);
    }
  }

}
else {
obj.lib.port('output', 'write_req_valid', 1);
obj.lib.port('output', 'write_req_ready', 1);
obj.lib.port('output', 'read_req_valid', 1);
obj.lib.port('output', 'read_req_ready', 1);
}

// Outputs
obj.lib.interface('mrg_', 'slave', obj.lib.getParam('writeDataBufferInterface'));
obj.lib.interface('', 'master', obj.lib.getParam('ccpCsrInterface'));
obj.lib.interface('', 'master', obj.lib.getParam('rsrcCsrInterface'));
obj.lib.interface('read_alloc_', 'master', obj.lib.getParam('readProtInterface'));
obj.lib.port('output', 'read_alloc_bus_valid', 1);
obj.lib.port('output', 'read_alloc_fill', 1);
obj.lib.port('output', 'read_alloc_sp', 1);
obj.lib.port('output', 'write_prot_error', 1);

if ( useAtomic ) {
obj.lib.port('output', 'atomic_rd_sp', 1);
}

obj.lib.interface('return_data_', 'master', obj.lib.getParam('returnDataInterface'));
obj.lib.interface('read_resp_', 'master', obj.lib.getParam('writeResponseInterface'));
obj.lib.interface('write_alloc_', 'master', obj.lib.getParam('writeAllocateInterface'));
obj.lib.interface('write_res_data_', 'master', obj.lib.getParam('writeDataInterface'));
obj.lib.interface('return_resp_', 'master', obj.lib.getParam('respInterface'));
obj.lib.interface('read_cam_', 'master', obj.lib.getParam('camAddrInterface'));
obj.lib.interface('rtt_cam_', 'master', obj.lib.getParam('camRttVectorInterface'));
obj.lib.interface('write_cam_', 'master', obj.lib.getParam('camAddrInterface'));
obj.lib.interface('', 'master', ccpMemoryInterface);
obj.lib.interface('aiu_', 'slave', sysUnitIdInterface);

if ( useAtomic ) {
obj.lib.interface('atomic_op_', 'master', obj.lib.getParam('writeProtDataInterface'));
obj.lib.interface('atomic_rd_', 'master', obj.lib.getParam('returnDataInterface'));
}

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

    // Wires
    \=bundleFunctions.wiresFromInterface('read_res_', obj.lib.getParam('readProtInterface'), [], obj.lib.bundle)=\
    wire read_res_bus_valid;
    wire read_res_fill;
    \=bundleFunctions.wiresFromInterface('write_res_', obj.lib.getParam('writeProtInterface'), [], obj.lib.bundle)=\
    wire write_res_addr_valid;
    wire write_res_ready_unq;
    wire write_res_evict;
    \js if (useCmc) {
    wire read_res_sp;
\jsbegin
var CACHE_WRAP_PARAMS =     
{
                assertOn: assertOn,
                wFUnitId: wFUnitId,
                wFPortId: wFPortId,
                wNUnitId: wNUnitId,
                nAius: nAius,
                useWayPartitioning: useWayPartitioning,
                nWayPartitioningRegisters: nWayPartitioningRegisters,
                clkInterface: obj.lib.getParam('clkInterface'),
                cmType:       obj.lib.getParam('cmType'),
                readProtInterface: obj.lib.getParam('readProtInterface'),
                returnDataInterface: obj.lib.getParam('returnDataInterface'),
                fillInterface: obj.lib.getParam('fillInterface'),
                respInterface:      obj.lib.getParam('respInterface'),
                writeProtInterface: obj.lib.getParam('writeProtInterface'),
                writeProtDataInterface: obj.lib.getParam('writeProtDataInterface'),
                writeDataBufferInterface: obj.lib.getParam('writeDataBufferInterface'),
                writeDataInterface: obj.lib.getParam('writeDataInterface'),
                writeResponseInterface: obj.lib.getParam('writeResponseInterface'),
                ccpMemoryInterface: obj.lib.getParam('ccpMemoryInterface'), 
                camAddrInterface: obj.lib.getParam('camAddrInterface'),
                camRttVectorInterface: obj.lib.getParam('camRttVectorInterface'),
                ccpParams: obj.lib.getParam('ccpParams'),
                ccpCsrInterface: obj.lib.getParam('ccpCsrInterface'),
                rsrcCsrInterface: obj.lib.getParam('rsrcCsrInterface'),
                nWttCtrlEntries: obj.lib.getParam('nWttCtrlEntries'),
                nRttCtrlEntries: obj.lib.getParam('nRttCtrlEntries'),
                nWriteBuffers:      nWriteBuffers,
                useAtomic:          useAtomic,
                sysUnitIdInterface: sysUnitIdInterface,
                nExclusiveEntries : obj.lib.getParam("nExclusiveEntries"),
                InterleaveInfo : obj.lib.getParam("InterleaveInfo")

};

var CACHE_WRAP_PORTS = 
{
                write_prot_nc_sel            : 'write_prot_nc_sel',
                write_prot_error             : 'write_prot_error',
                read_addr_m_bus_valid        : 'read_res_bus_valid',
                read_addr_m_fill             : 'read_res_fill',
                read_addr_m_sp               : 'read_res_sp',
                read_cam_match_fill          : 'read_cam_match_fill',
                read_alloc_id                : 'read_alloc_id',
                rtt_dealloc_id               : 'rtt_dealloc_id',
                rtt_dealloc_valid            : 'rtt_dealloc_valid',
                rtt_dealloc_vec              : 'rtt_dealloc_vec',
                dmi_ccp_cache_fill_done      : 'dmi_ccp_cache_fill_done',
                dmi_ccp_cache_fill_done_id   : 'dmi_ccp_cache_fill_done_id',
                dmi_ccp_cache_fill_fifo_avail: 'dmi_ccp_cache_fill_fifo_avail',
                write_addr_m_evict           : 'write_res_evict',
		pmon_cache_rd_hit	     : 'pmon_cache_rd_hit',
		pmon_cache_wr_hit	     : 'pmon_cache_wr_hit',
		pmon_cache_cmo_hit	     : 'pmon_cache_cmo_hit',
		pmon_cache_evict 	     : 'pmon_cache_evict',
		pmon_cache_no_way_alloc	     : 'pmon_cache_no_way_alloc',
		pmon_cache_rd_stall	     : 'pmon_cache_rd_stall',
		pmon_cache_wr_stall 	     : 'pmon_cache_wr_stall',
		pmon_cache_replay	     : 'pmon_cache_replay',
		pmon_cache_rd_miss	     : 'pmon_cache_rd_miss',
		pmon_cache_wr_miss	     : 'pmon_cache_wr_miss',
		pmon_cache_cmo_miss	     : 'pmon_cache_cmo_miss',
		pmon_cache_fill_stall	     : 'pmon_cache_fill_stall',
		ccp_p1_valid		     : 'ccp_p1_valid',
		read_write_addr_s_pop_ready_p1     : 'read_write_addr_s_pop_ready_p1',
        DMIUWRDATACLN_EnClnDataWr:  "DMIUWRDATACLN_EnClnDataWr"
};


if(useScratchpad){
CACHE_WRAP_PORTS["uId_my_n_unit_id"]       = "uId_my_n_unit_id";   
}

if ( useAtomic ) {
CACHE_WRAP_PORTS['atomic_rd_sp'] = 'atomic_rd_sp';
CACHE_WRAP_PORTS["nb_atomic"] = "nb_atomic";
}
if(obj.lib.getParam("ccpParams","nBeatsPerBank") >1){
    CACHE_WRAP_PORTS['clkby2_en'] = 'clkby2_en';

}
  if (usePLRU) {
    for (var i = 0; i < nTagBanks; i++) {
CACHE_WRAP_PORTS['plru_mem'+i+'_read_en']    = 'plru_mem'+i+'_read_en';
CACHE_WRAP_PORTS['plru_mem'+i+'_read_addr']  = 'plru_mem'+i+'_read_addr';
CACHE_WRAP_PORTS['plru_mem'+i+'_read_data']  = 'plru_mem'+i+'_read_data';
CACHE_WRAP_PORTS['plru_mem'+i+'_write_en']   = 'plru_mem'+i+'_write_en';
CACHE_WRAP_PORTS['plru_mem'+i+'_write_addr'] = 'plru_mem'+i+'_write_addr';
CACHE_WRAP_PORTS['plru_mem'+i+'_write_data'] = 'plru_mem'+i+'_write_data';
    }
  }

var CACHE_WRAP_INTF = [];
CACHE_WRAP_INTF.push({modulePrefix: '',              localPrefix: '', interface: obj.lib.getParam('clkInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'read_addr_s_',  localPrefix: 'read_prot_', interface: obj.lib.getParam('readProtInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'read_data_s_',  localPrefix: 'return_data_', interface: obj.lib.getParam('returnDataInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'read_addr_m_',  localPrefix: 'read_res_', interface: obj.lib.getParam('readProtInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'read_data_m_',  localPrefix: 'bus_data_', interface: obj.lib.getParam('returnDataInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'fill_data_',    localPrefix: 'fill_data_', interface: obj.lib.getParam('fillInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'read_cam_',     localPrefix: 'read_cam_', interface: obj.lib.getParam('camAddrInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'rtt_cam_',      localPrefix: 'rtt_cam_',  interface: obj.lib.getParam('camRttVectorInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'read_resp_',    localPrefix: 'read_resp_', interface: obj.lib.getParam('writeResponseInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_prot_',   localPrefix: 'write_prot_', interface: obj.lib.getParam('writeProtInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_prot_data_', localPrefix: 'write_prot_data_', interface: obj.lib.getParam('writeProtDataInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'mrg_',          localPrefix: 'mrg_', interface: obj.lib.getParam('writeDataBufferInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_resp_s_', localPrefix: 'return_resp_', interface: obj.lib.getParam('respInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_addr_m_', localPrefix: 'write_res_', interface: obj.lib.getParam('writeProtInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_data_m_', localPrefix: 'write_res_data_', interface: obj.lib.getParam('writeDataInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_resp_m_', localPrefix: 'bus_resp_', interface: obj.lib.getParam('writeResponseInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'write_cam_',    localPrefix: 'write_cam_', interface: obj.lib.getParam('camAddrInterface')});
CACHE_WRAP_INTF.push({modulePrefix: '',              localPrefix: '', interface: obj.lib.getParam('ccpCsrInterface')});
CACHE_WRAP_INTF.push({modulePrefix: '',              localPrefix: '', interface: obj.lib.getParam('rsrcCsrInterface')});
CACHE_WRAP_INTF.push({modulePrefix: '',              localPrefix: '', interface: obj.lib.getParam('ccpMemoryInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'aiu_',          localPrefix: 'aiu_', interface: sysUnitIdInterface});


if ( useAtomic ) {
CACHE_WRAP_INTF.push({modulePrefix: 'atomic_op_',    localPrefix: 'atomic_op_', interface: obj.lib.getParam('writeProtDataInterface')});
CACHE_WRAP_INTF.push({modulePrefix: 'atomic_rd_',    localPrefix: 'atomic_rd_', interface: obj.lib.getParam('returnDataInterface')});
}

\jsend

        \=obj.lib.instance({
            instanceName: 'dmi_cache_wrap',
            moduleName: 'dmi_cache_wrap',
            params: CACHE_WRAP_PARAMS,
            ports: CACHE_WRAP_PORTS,
            interfaces: CACHE_WRAP_INTF
        })=\
        assign read_alloc_fill      = read_res_fill;
        assign write_alloc_evict    = write_res_evict;    
        assign read_alloc_sp        = read_res_sp;
    \js } else {
        \=obj.lib.instance({
            instanceName: 'dmi_no_cache_wrap',
            moduleName: 'dmi_no_cache_wrap',
            params: {
                wWriteDataBufferId: wWriteDataBufferId,
                assertOn: assertOn,
                clkInterface: obj.lib.getParam('clkInterface'),
                cmType:       obj.lib.getParam('cmType'),
                readProtInterface: obj.lib.getParam('readProtInterface'),
                returnDataInterface: obj.lib.getParam('returnDataInterface'),
                respInterface:      obj.lib.getParam('respInterface'),
                writeProtInterface: obj.lib.getParam('writeProtInterface'),
                writeProtDataInterface: obj.lib.getParam('writeProtDataInterface'),
                writeDataBufferInterface: obj.lib.getParam('writeDataBufferInterface'),
                writeDataInterface: obj.lib.getParam('writeDataInterface'),
                writeResponseInterface: obj.lib.getParam('writeResponseInterface'),
                camAddrInterface: obj.lib.getParam('camAddrInterface'),
                rsrcCsrInterface: obj.lib.getParam('rsrcCsrInterface'),
                wCacheLineOffset: wCacheLineOffset,
                nWriteBuffers: nWriteBuffers,
                enWrPipe: enWrPipe,
                enRdPipe: enRdPipe,
                nExclusiveEntries : obj.lib.getParam("nExclusiveEntries")
            },
            verilogParams: {},
            ports: {
                write_prot_error:          'write_prot_error',
                read_res_bus_valid:'read_res_bus_valid',
		write_req_valid: 'write_req_valid',
		write_req_ready: 'write_req_ready',
		read_req_valid: 'read_req_valid',
		read_req_ready: 'read_req_ready',
                },
            interfaces: [
                {modulePrefix: '',              localPrefix: '', interface: obj.lib.getParam('clkInterface')},
                {modulePrefix: '',              localPrefix: '', interface: obj.lib.getParam('rsrcCsrInterface')},
                {modulePrefix: 'read_prot_',    localPrefix: 'read_prot_', interface: obj.lib.getParam('readProtInterface')},
                {modulePrefix: 'return_data_',  localPrefix: 'return_data_', interface: obj.lib.getParam('returnDataInterface')},
                {modulePrefix: 'read_res_',     localPrefix: 'read_res_', interface: obj.lib.getParam('readProtInterface')},
                {modulePrefix: 'bus_data_',     localPrefix: 'bus_data_', interface: obj.lib.getParam('returnDataInterface')},
                {modulePrefix: 'read_cam_',     localPrefix: 'read_cam_', interface: obj.lib.getParam('camAddrInterface')},
                {modulePrefix: 'read_resp_',    localPrefix: 'read_resp_', interface: obj.lib.getParam('writeResponseInterface')},
                {modulePrefix: 'write_prot_',   localPrefix: 'write_prot_', interface: obj.lib.getParam('writeProtInterface')},
                {modulePrefix: 'write_prot_data_',localPrefix: 'write_prot_data_', interface: obj.lib.getParam('writeProtDataInterface')},
                {modulePrefix: 'mrg_',          localPrefix: 'mrg_', interface: obj.lib.getParam('writeDataBufferInterface')},
                {modulePrefix: 'return_resp_',  localPrefix: 'return_resp_', interface: obj.lib.getParam('respInterface')},
                {modulePrefix: 'write_res_',    localPrefix: 'write_res_', interface: obj.lib.getParam('writeProtInterface')},
                {modulePrefix: 'write_res_data_',localPrefix: 'write_res_data_', interface: obj.lib.getParam('writeDataInterface')},
                {modulePrefix: 'bus_resp_',     localPrefix: 'bus_resp_', interface: obj.lib.getParam('writeResponseInterface')},
                {modulePrefix: 'write_cam_',    localPrefix: 'write_cam_', interface: obj.lib.getParam('camAddrInterface')}
            ], 
            portsDelimiter: '\n        '
        })=\
        assign read_alloc_fill      = 1'b0;
        assign read_alloc_sp        = 1'b0;
        assign write_alloc_evict    = 1'b0;    
    \js }

    assign write_res_addr_valid = write_res_valid;
    assign write_res_ready      = write_res_ready_unq;
    assign write_alloc_valid    = write_res_addr_valid;
    assign write_res_ready_unq  = write_alloc_ready;

    assign read_alloc_bus_valid = read_res_bus_valid;
    \=bundleFunctions.assignByBundle('read_alloc_', 'read_res_', obj.lib.getParam('readProtInterface'), [], obj.lib.bundle)=\

    \=bundleFunctions.assignByBundle('write_alloc_', 'write_res_', obj.lib.getParam('writeAllocateInterface'), ['valid','ready'], obj.lib.bundle)=\

endmodule
