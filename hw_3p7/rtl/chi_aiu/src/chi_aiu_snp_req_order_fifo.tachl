//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
//
// CHI-AIU Snoop Request Order FIFO Wrapper
//
//=============================================================================
\jsend

\jsbegin
var u = obj.lib;

var width = u.getParam('width');
var depth = u.getParam('depth');

//=============================================================================
// ports
//=============================================================================
u.port('input', 'clk', 1);
u.port('input', 'reset_n', 1);
u.port('input', 'csr_one_dvm_sync', 1);
u.port('input', 'block_dvm_sync', 1);
u.port('input', 'block_dvm_nonsync', 1);

u.port('input',  'push_valid', 1);
u.port('input',  'push_data',  width);
u.port('output', 'push_ready', 1);
u.port('output', 'pop_valid',  1);
u.port('output', 'pop_data',   width);
u.port('input',  'pop_ready',  1);

\jsend

module \=u.getModuleName()=\ (
\=u.getPorts('\n    ')=\
);

wire push_is_dvm_part2;
wire push_is_dvm_sync;
wire push_is_dvm;

wire coh_push_valid;
wire coh_push_ready;
wire coh_pop_valid;
wire coh_pop_ready;
wire [\=width-1=\:0] coh_push_data;
wire [\=width-1=\:0] coh_pop_data;

wire dvm_sync_push_valid;
wire dvm_sync_push_ready;
wire dvm_sync_pop_valid, dvm_sync_pop_valid_org;
wire dvm_sync_pop_ready, dvm_sync_pop_ready_org;
wire [\=width-1=\:0] dvm_sync_push_data;
wire [\=width-1=\:0] dvm_sync_pop_data;

wire dvm_nonsync_push_valid;
wire dvm_nonsync_push_ready;
wire dvm_nonsync_pop_valid, dvm_nonsync_pop_valid_org;
wire dvm_nonsync_pop_ready, dvm_nonsync_pop_ready_org;
wire [\=width-1=\:0] dvm_nonsync_push_data;
wire [\=width-1=\:0] dvm_nonsync_pop_data;

wire dvm_nonsync_pop_data__dvm_part2;
wire dvm_sync_pop_data__dvm_part2;

assign dvm_nonsync_pop_data__dvm_part2 = dvm_nonsync_pop_data[\=width-1=\];
assign dvm_sync_pop_data__dvm_part2    = dvm_sync_pop_data[\=width-1=\];


assign push_is_dvm_part2 = push_data[\=width-1=\];
assign push_is_dvm_sync  = push_data[\=width-2=\];
assign push_is_dvm       = push_data[\=width-3=\];

assign coh_push_valid         = csr_one_dvm_sync ? (push_valid & ~push_is_dvm)                    : push_valid;
assign dvm_sync_push_valid    = csr_one_dvm_sync ? (push_valid & push_is_dvm & push_is_dvm_sync)  : 1'b0;
assign dvm_nonsync_push_valid = csr_one_dvm_sync ? (push_valid & push_is_dvm & ~push_is_dvm_sync) : 1'b0;

assign coh_push_data         = push_data;
assign dvm_sync_push_data    = push_data;
assign dvm_nonsync_push_data = push_data;

assign push_ready = coh_push_ready & dvm_sync_push_ready & dvm_nonsync_push_ready;

\jsbegin
    var cohOrderFifoParams = {
        width       : width,
        depth       : depth,
        use_fastread: 1,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_coh_order_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'coh_push_data',
        push_valid          : 'coh_push_valid',
        push_ready          : 'coh_push_ready',
        pop_data            : 'coh_pop_data',
        pop_valid           : 'coh_pop_valid',
        pop_ready           : 'coh_pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'coh_order_fifo',
        moduleName: 'fifo',
        params : cohOrderFifoParams,
        verilogParams: {},
        ports: instance_ports_for_coh_order_fifo,
        portsDelimiter: '\n    '
    })=\

\jsbegin
    var dvmSyncOrderFifoParams = {
        width       : width,
        depth       : depth,
        use_fastread: 1,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_dvm_sync_order_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'dvm_sync_push_data',
        push_valid          : 'dvm_sync_push_valid',
        push_ready          : 'dvm_sync_push_ready',
        pop_data            : 'dvm_sync_pop_data',
        pop_valid           : 'dvm_sync_pop_valid_org',
        pop_ready           : 'dvm_sync_pop_ready_org'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'dvm_sync_order_fifo',
        moduleName: 'fifo',
        params : dvmSyncOrderFifoParams,
        verilogParams: {},
        ports: instance_ports_for_dvm_sync_order_fifo,
        portsDelimiter: '\n    '
    })=\

assign dvm_sync_pop_valid     =  dvm_sync_pop_valid_org & ~block_dvm_sync;
assign dvm_sync_pop_ready_org =  dvm_sync_pop_ready     & ~block_dvm_sync;

\jsbegin
    var dvmNonSyncOrderFifoParams = {
        width       : width,
        depth       : depth,
        use_fastread: 1,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_dvm_nonsync_order_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'dvm_nonsync_push_data',
        push_valid          : 'dvm_nonsync_push_valid',
        push_ready          : 'dvm_nonsync_push_ready',
        pop_data            : 'dvm_nonsync_pop_data',
        pop_valid           : 'dvm_nonsync_pop_valid_org',
        pop_ready           : 'dvm_nonsync_pop_ready_org'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'dvm_nonsync_order_fifo',
        moduleName: 'fifo',
        params : dvmNonSyncOrderFifoParams,
        verilogParams: {},
        ports: instance_ports_for_dvm_nonsync_order_fifo,
        portsDelimiter: '\n    '
    })=\

assign dvm_nonsync_pop_valid     =  dvm_nonsync_pop_valid_org & ~block_dvm_nonsync;
assign dvm_nonsync_pop_ready_org =  dvm_nonsync_pop_ready     & ~block_dvm_nonsync;

wire dvm_muxarb__sink0_ready;
wire dvm_muxarb__sink0_valid;
wire dvm_muxarb__sink0_last;
wire dvm_muxarb__sink1_ready;
wire dvm_muxarb__sink1_valid;
wire dvm_muxarb__sink1_last;
wire [\=width-1=\:0] dvm_muxarb__sink0_data;
wire [\=width-1=\:0] dvm_muxarb__sink1_data;
wire [\=width-1=\:0] dvm_muxarb__source_data;
wire dvm_muxarb__source_ready;
wire dvm_muxarb__source_valid;
wire dvm_muxarb__source_last;
wire [1:0] dvm_muxarb__grant;

\jsbegin
    var dvmMuxarbParam = {
        number_of_inputs: 2,
        width           : width,
        sink_type       : 'RdyVld',
        pipeline        : 0,
        arb_priority    : 'RoundRobin', //'Fixed',
        sfi_compliant   : 1,
        output_grant    : 1
    };
    var instance_ports_for_dvm_muxarb = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        grant               : 'dvm_muxarb__grant',
        sink0_ready         : 'dvm_muxarb__sink0_ready',
        sink0_valid         : 'dvm_muxarb__sink0_valid',
        sink0_last          : 'dvm_muxarb__sink0_last',
        sink0_data          : 'dvm_muxarb__sink0_data',
        sink1_ready         : 'dvm_muxarb__sink1_ready',
        sink1_valid         : 'dvm_muxarb__sink1_valid',
        sink1_last          : 'dvm_muxarb__sink1_last',
        sink1_data          : 'dvm_muxarb__sink1_data',
        source_ready        : 'dvm_muxarb__source_ready',
        source_valid        : 'dvm_muxarb__source_valid',
        source_last         : 'dvm_muxarb__source_last',
        source_data         : 'dvm_muxarb__source_data'
    };
\jsend
    \=u.instance({
        instanceName: 'dvm_muxarb',
        moduleName: 'muxarb',
        params : dvmMuxarbParam,
        verilogParams: {},
        ports: instance_ports_for_dvm_muxarb,
        portsDelimiter: '\n    '
    })=\

assign dvm_muxarb__sink0_valid = dvm_nonsync_pop_valid;
assign dvm_muxarb__sink1_valid = dvm_sync_pop_valid;

assign dvm_muxarb__sink0_last  = dvm_nonsync_pop_data__dvm_part2;
assign dvm_muxarb__sink1_last  = dvm_sync_pop_data__dvm_part2;

assign dvm_muxarb__sink0_data = dvm_nonsync_pop_data;
assign dvm_muxarb__sink1_data = dvm_sync_pop_data;

assign dvm_nonsync_pop_ready = dvm_muxarb__sink0_ready;
assign dvm_sync_pop_ready    = dvm_muxarb__sink1_ready;

wire snp_muxarb__sink0_ready;
wire snp_muxarb__sink0_valid;
wire snp_muxarb__sink0_last;
wire snp_muxarb__sink1_ready;
wire snp_muxarb__sink1_valid;
wire snp_muxarb__sink1_last;
wire [\=width-1=\:0] snp_muxarb__sink0_data;
wire [\=width-1=\:0] snp_muxarb__sink1_data;
wire [\=width-1=\:0] snp_muxarb__source_data;
wire snp_muxarb__source_ready;
wire snp_muxarb__source_valid;
wire snp_muxarb__source_last;
wire [1:0] snp_muxarb__grant;

\jsbegin
    var snpMuxarbParam = {
        number_of_inputs: 2,
        width           : width,
        sink_type       : 'RdyVld',
        pipeline        : 0,
        arb_priority    : 'RoundRobin',
        sfi_compliant   : 1,
        output_grant    : 1
    };
    var instance_ports_for_snp_muxarb = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        grant               : 'snp_muxarb__grant',
        sink0_ready         : 'snp_muxarb__sink0_ready',
        sink0_valid         : 'snp_muxarb__sink0_valid',
        sink0_last          : 'snp_muxarb__sink0_last',
        sink0_data          : 'snp_muxarb__sink0_data',
        sink1_ready         : 'snp_muxarb__sink1_ready',
        sink1_valid         : 'snp_muxarb__sink1_valid',
        sink1_last          : 'snp_muxarb__sink1_last',
        sink1_data          : 'snp_muxarb__sink1_data',
        source_ready        : 'snp_muxarb__source_ready',
        source_valid        : 'snp_muxarb__source_valid',
        source_last         : 'snp_muxarb__source_last',
        source_data         : 'snp_muxarb__source_data'
    };
\jsend
    \=u.instance({
        instanceName: 'snp_muxarb',
        moduleName: 'muxarb',
        params : snpMuxarbParam,
        verilogParams: {},
        ports: instance_ports_for_snp_muxarb,
        portsDelimiter: '\n    '
    })=\

assign snp_muxarb__sink0_valid = dvm_muxarb__source_valid;
assign snp_muxarb__sink1_valid = coh_pop_valid;

assign snp_muxarb__sink0_last = dvm_muxarb__source_last;
assign snp_muxarb__sink1_last = 1'b1;

assign snp_muxarb__sink0_data = dvm_muxarb__source_data;
assign snp_muxarb__sink1_data = coh_pop_data;

assign dvm_muxarb__source_ready = snp_muxarb__sink0_ready;
assign coh_pop_ready            = snp_muxarb__sink1_ready;

assign pop_valid = snp_muxarb__source_valid;
assign pop_data  = snp_muxarb__source_data;
assign snp_muxarb__source_ready = pop_ready;

endmodule
