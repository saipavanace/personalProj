\jsbegin
//============================================================================
// Copyright (C) 2019 Arteris, Inc.
// All rights reserved.
//============================================================================
// Buffer Entry. To store multiple data beats belonging to the same packet.
//
// Author: Boon Chuan
//============================================================================

//============================================================================     
// Variables
//============================================================================
   
let u = obj.lib;
let m = obj.userLib;
let bundleFunctions     = m.bundleFunctions;

//============================================================================
// Parameters
//============================================================================
let nBeats              = u.getParam('nBeats');
let wBundle             = u.getParam('wBundle');

let wBeats              = 3;

//============================================================================
// Ports
//============================================================================
u.port('input',  'clk', 1);
u.port('input',  'reset_n', 1);
u.port('output', 'empty', 1);
u.port('output', 'interleaved', 1);
u.port('input',  'txnid_is_new', 1);

u.port('input',  'data_beat_in_valid', 1);
u.port('output', 'data_beat_in_ready', 1);
u.port('input',  'data_beat_in_count', wBeats);
u.port('input',  'data_beat_in_bundle', wBundle);

u.port('output', 'data_beat_out_valid', 1);
u.port('input',  'data_beat_out_ready', 1);
u.port('output', 'data_beat_out_last',  1);
u.port('output', 'data_beat_out_bundle', wBundle);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

//============================================================================
// Wires
//============================================================================

wire wr_beat_en;
wire rd_beat_en;
wire wr_last_beat;
wire rd_last_beat;
wire wr_first_beat;

    \js for (var i =0; i < nBeats; i++) {
wire [\=wBundle-1=\:0] rd_bundle_\=i=\;
wire wr_beat_en_\=i=\;
    \js }

wire [\=wBeats-1=\:0]  wr_beat_count_q;
wire [\=wBeats-1=\:0]  wr_beat_count_in;
wire                   wr_beat_count_en;
wire [\=wBeats-1=\:0]  rd_beat_count_q;
wire [\=wBeats-1=\:0]  rd_beat_count_in;
wire                   rd_beat_count_en;

wire data_first_q;
wire data_first_in;
wire data_first_en;
wire last_beat_written_q;
wire last_beat_written_in;
wire last_beat_written_en;
wire last_beat_read_q;
wire last_beat_read_in;
wire last_beat_read_en;

wire data_beat_in_last;

//============================================================================
// wr_beat_en, wr_last_beat, wr_first_beat
// rd_beat_en, rd_last_beat
//============================================================================

assign wr_beat_en = data_beat_in_valid & data_beat_in_ready;
assign rd_beat_en = data_beat_out_valid & data_beat_out_ready;

assign wr_last_beat  = wr_beat_en & data_beat_in_last;
assign rd_last_beat  = rd_beat_en & data_beat_out_last;

assign wr_first_beat = wr_beat_en & data_first_q;

//============================================================================
// data_first_q
//============================================================================

assign data_first_in = wr_last_beat;
assign data_first_en = wr_beat_en;

\=obj.lib.dffre(1, 'data_first_q', 'data_first_in', "1'b1", 'data_first_en', 'clk', 'reset_n')=\

//============================================================================
// interleaved (sticky bit)
//============================================================================

wire interleaved_in = (rd_beat_en & data_beat_out_last) ? 1'b0 :
                      interleaved                       ? 1'b1 : txnid_is_new & ~data_first_q;

wire interleaved_en = (rd_beat_en & data_beat_out_last) | txnid_is_new;

\=obj.lib.dffre(1, 'interleaved', 'interleaved_in', "1'b0", 'interleaved_en', 'clk', 'reset_n')=\

//============================================================================
// wr_beat_count_q
//============================================================================

assign wr_beat_count_en = wr_beat_en | (rd_beat_en & data_beat_out_last); // mutually exclusive
assign wr_beat_count_in = (rd_beat_en & data_beat_out_last) ? \=wBeats=\'d0 : (wr_beat_count_q + 1'b1);

\=u.dffre(wBeats, 'wr_beat_count_q', 'wr_beat_count_in',  wBeats+"'d0", 'wr_beat_count_en', 'clk', 'reset_n')=\

//============================================================================
// data_beat_in_last
//============================================================================

assign data_beat_in_last = (wr_beat_count_q == data_beat_in_count);

//============================================================================
// empty
//============================================================================

assign empty = ~{|{wr_beat_count_q}};

//============================================================================
// rd_beat_count_q
//============================================================================

assign rd_beat_count_en = rd_beat_en;
assign rd_beat_count_in = data_beat_out_last ? \=wBeats=\'d0 : (rd_beat_count_q + 1'b1);

\=u.dffre(wBeats, 'rd_beat_count_q', 'rd_beat_count_in',  wBeats+"'d0", 'rd_beat_count_en', 'clk', 'reset_n')=\

//============================================================================
// data_beat_out_last
//============================================================================

assign data_beat_out_last = (rd_beat_count_q == (wr_beat_count_q - \=wBeats=\'d1));

//============================================================================
// data_beat_out_bundle
//============================================================================

    \js for (var i=0; i < nBeats; i++) {
assign wr_beat_en_\=i=\ = wr_beat_en & (wr_beat_count_q == \=wBeats=\'d\=i=\);
    \js }

    \js for (var i=0; i < nBeats; i++) {
\=u.dffre(wBundle, 'rd_bundle_'+i, 'data_beat_in_bundle',  wBundle+"'d0", 'wr_beat_en_'+i, 'clk', 'reset_n')=\
    \js }

assign data_beat_out_bundle = 
        ({\=wBundle=\{(rd_beat_count_q == \=wBeats=\'d0)}} & rd_bundle_0)
\js for(var i = 1; i < nBeats; i++) {
      | ({\=wBundle=\{(rd_beat_count_q == \=wBeats=\'d\=i=\)}} & rd_bundle_\=i=\)
\js }
      ;

//============================================================================
// data_beat_out_valid
// data_beat_in_ready
//============================================================================

assign data_beat_out_valid = last_beat_written_q;

assign data_beat_in_ready = ~last_beat_written_q;

\=u.dffre(1, 'last_beat_written_q', 'last_beat_written_in',  "1'b0", 'last_beat_written_en', 'clk', 'reset_n')=\

assign last_beat_written_in = wr_last_beat & ~(rd_last_beat | last_beat_read_q);
assign last_beat_written_en = wr_last_beat | rd_last_beat;

\=u.dffre(1, 'last_beat_read_q', 'last_beat_read_in', "1'b0", 'last_beat_read_en', 'clk', 'reset_n')=\

assign last_beat_read_in = rd_last_beat & ~(wr_last_beat | last_beat_written_q);
assign last_beat_read_en = rd_last_beat | wr_last_beat;

endmodule
