//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// This module used as credit counter
// counter counts down as credits are used up 
//=============================================================================
\jsend

\jsbegin
var u = obj.lib;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

var clkInterface = {
    clk: 1,
    reset_n: 1
}

u.paramDefault('assertOn','int',0);
u.paramDefault('useArbPipelined','int',0);

var assertOn = u.getParam('assertOn');
var useArbPipelined = u.getParam('useArbPipelined');

var nCredits = u.getParam('nCredits');

var wCounter = log2ceil(nCredits+1);
var nCreditsplusone = nCredits+1;

u.port('input','toggle_enable', 1);

u.port('input','dec_count', 1 );
u.port('input','inc_count', 1 );
u.port('output','credit_avail',1);

u.interface('', 'slave', clkInterface);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

wire dff_enable = 1'b1;

wire [\=wCounter-1=\:0] credit_counter; 
wire [\=wCounter-1=\:0] credit_counter_in; 
wire credit_counter_en;

wire credit_counter_is_one;
wire credit_counter_is_zero;

assign credit_counter_en = inc_count | dec_count ;

assign credit_counter_in = credit_counter + {{\=wCounter-1=\{1'b0}}, inc_count} - {{\=wCounter-1=\{1'b0}}, dec_count} ;

\jsbegin
/* istanbul ignore if env ncore_3p7 */
if (useArbPipelined) { // i.e. dec_count is one cycle late
\jsend
wire toggle;
wire toggle_in = ~toggle_enable | dec_count | ~credit_counter_is_one ? 1'b0 : ~toggle;
\=u.dffre(1, 'toggle', 'toggle_in', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

    \jsbegin
    /* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (nCredits > 1) {
    \jsend
assign credit_avail = ~credit_counter_is_zero & (credit_counter_is_one ? toggle : 1'b1);
    \js } else {
assign credit_avail = ~credit_counter_is_zero & toggle;
    \js }

\js } else {

assign credit_avail = ~credit_counter_is_zero;

\js }

\=u.dffre(wCounter, 'credit_counter', 'credit_counter_in',  wCounter+"'d"+nCredits, 'credit_counter_en', 'clk', 'reset_n')=\

assign credit_counter_is_one  = (credit_counter == \=wCounter=\'d1);
assign credit_counter_is_zero = (credit_counter == \=wCounter=\'d0);

\js if (assertOn) {
`ifdef OVL_ASSERT_ON
// synthesis_off
// pragma synthesis_off
// coverage off

    property p_counter_underflow;
        @(posedge clk) disable iff (~reset_n)
        ((dec_count & ~inc_count) |-> (~credit_counter_is_zero));
    endproperty

    assert_counter_underflow: assert property (p_counter_underflow)
        else begin $error("credit counter underflows !"); #100 $finish; end

// coverage on
// pragma synthesis_on
// synthesis_on
`endif
\js }

endmodule
