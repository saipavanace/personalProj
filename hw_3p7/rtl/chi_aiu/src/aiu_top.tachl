//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// This module defines aiu top level 
//
//=============================================================================
\jsend

\jsbegin
var u = obj.lib;
var m = obj.userLib;
var utilFunctions = obj.userLib;
var newToOldStyleInterface	= m.newToOldStyleInterface.bind( null, obj.userLib );
var cloneDeep = utilFunctions.deepCopy;
var log2ceil             = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };
\jsend

\jsbegin
u.paramDefault('assertOn','int',0);
u.paramDefault('fnCsrAccess','int',0);
u.paramDefault('nativeInterfacePipe', 'int', 0);
u.paramDefault('usePma','int',1);
u.paramDefault('PmaInfo', 'object', {"wActive" : 1, "fnPmaInterfaceType":"Q"});
u.paramDefault('nTraceRegisters', 'int', 1);
u.paramDefault('nUnitTraceBufSize', 'int', 8);
u.paramDefault('nPerfCounters', 'int', 4);
u.paramDefault('traceDebugEnable','boolean',true);
u.paramDefault('syncDepth', 'int', 2);
u.paramDefault('useSysReqSender', 'boolean', true);
u.paramDefault('timeoutBistControlEnable','boolean', true);
//=============================================================================
// Top Level Parameters
//=============================================================================
var timeoutBistControlEnable        = u.getParam('timeoutBistControlEnable');
var assertOn           = u.getParam('assertOn');
var syncDepth          = u.getParam('syncDepth');
var fnCsrAccess        = u.getParam('fnCsrAccess');
var nativeInterfacePipe = u.getParam('nativeInterfacePipe');
var fnEnableQos        = obj.userLib.ParamDefaultGet(obj.lib, 'fnEnableQos', 'int', 0);
var smiTxPortParams    = u.getParam('smiPortParams', 'tx');
var smiRxPortParams    = u.getParam('smiPortParams', 'rx');
var concParams         = u.getParam('concParams');
var concMuxTxMsgParams = u.getParam('concMuxMsgParams', 'tx');
var concMuxRxMsgParams = u.getParam('concMuxMsgParams', 'rx');
var interfaces         = u.getParam('interfaces');

var useSysEvtCoh = concMuxRxMsgParams.hasOwnProperty('sysReq');

var fnNativeInterface  = u.getParam('fnNativeInterface');
var wAddr              = u.getParam('wAddr');
var wCacheLineOffset   = u.getParam('wCacheLineOffset');
var wData              = u.getParam('wData');
//var wNdpAux            = u.getParam('wNdpAux');
var wFPortId           = u.getParam('wFPortId');
var wInitiatorId       = u.getParam('wInitiatorId');
var wMsgId             = u.getParam('wMsgId');
var interfaces         = u.getParam('interfaces');
var cm_type            = u.getParam('cmType');
var chiCmd             = u.getParam('chiCmd');
var implVerId          = u.getParam('implVerId');
var engVerId           = u.getParam('engVerId');
var csr                = u.getParam('csr');
var usePma             = u.getParam('usePma');
var PmaInfo            = u.getParam('PmaInfo');
var nTraceRegisters		= u.getParam('nTraceRegisters');
var nPerfCounters      = u.getParam('nPerfCounters');
var nUnitTraceBufSize	= u.getParam('nUnitTraceBufSize');
var traceDebugEnable   = obj.lib.getParam('traceDebugEnable');

var nRobEntries = 8;

var useEventOutInt  = interfaces.eventRequestInInt && !interfaces.eventRequestInInt._SKIP_; //connect the IO to sender
var useEventInInt   = interfaces.eventRequestOutInt && !interfaces.eventRequestOutInt._SKIP_; //connect the IO to receiver
var useSysReqSender = useEventOutInt ? 1 : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var useSysReqReceiver = 1;

var wFlit_Qos     = interfaces.chiInt.params.wQos;
var wFlit_TgtID   = interfaces.chiInt.params.TgtID;
var wFlit_SrcID   = interfaces.chiInt.params.SrcID;
var wFlit_TxnID   = interfaces.chiInt.params.TxnID;
var wFlit_Addr    = interfaces.chiInt.params.wAddr;
var wFlit_NS      = interfaces.chiInt.params.NS;
var wFlit_Data    = interfaces.chiInt.params.wData;
var enPoison      = interfaces.chiInt.params.enPoison;

var wReqFlit_ReturnNID     = interfaces.chiInt.params.ReturnNID;
var wReqFlit_StashNIDValid = interfaces.chiInt.params.StashNIDValid;
var wReqFlit_ReturnTxnID = interfaces.chiInt.params.ReturnTxnID;
var wReqFlit_Opcode  = interfaces.chiInt.params.REQ_Opcode;
var wReqFlit_Size    = interfaces.chiInt.params.Size;
var wReqFlit_LikelyShared      = interfaces.chiInt.params.LikelyShared;
var wReqFlit_AllowRetry = interfaces.chiInt.params.AllowRetry;
var wReqFlit_Order    = interfaces.chiInt.params.Order;
var wReqFlit_PCrdType = interfaces.chiInt.params.PCrdType;
var wReqFlit_MemAttr  = interfaces.chiInt.params.MemAttr;
var wReqFlit_SnpAttr  = interfaces.chiInt.params.SnpAttr;
var wReqFlit_LPID     = interfaces.chiInt.params.LPID + (((interfaces.chiInt.params.LPID == 5) && (fnNativeInterface == "CHI-E")) ? 3 : 0);
var wReqFlit_Excl     = interfaces.chiInt.params.Excl;
var wReqFlit_ExCompAck = interfaces.chiInt.params.ExCompAck;
var wReqFlit_TraceTag  = interfaces.chiInt.params.TraceTag;
var wReqFlit_Rsvdc     = interfaces.chiInt.params.REQ_RSVDC;

var wReqFlit_ReturnNID_local     =  (wReqFlit_ReturnNID >0) ? wReqFlit_ReturnNID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wReqFlit_StashNIDValid_local = (wReqFlit_StashNIDValid > 0) ? wReqFlit_StashNIDValid : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0; 
var wReqFlit_ReturnTxnID_local = (wReqFlit_ReturnTxnID > 0) ? wReqFlit_ReturnTxnID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wReqFlit_TraceTag_local = (wReqFlit_TraceTag > 0) ? wReqFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wRspFlit_Opcode     = interfaces.chiInt.params.RSP_Opcode;
var wRspFlit_RespErr    = interfaces.chiInt.params.RespErr;
var wRspFlit_Resp       = interfaces.chiInt.params.Resp;
var wRspFlit_FwdState   = interfaces.chiInt.params.FwdState;
var wRspFlit_DBID       = interfaces.chiInt.params.DBID;
var wRspFlit_PCrdType   = interfaces.chiInt.params.PCrdType;
var wRspFlit_TraceTag   = interfaces.chiInt.params.TraceTag;

var wRspFlit_FwdState_local   =  (wRspFlit_FwdState > 0) ? wRspFlit_FwdState : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wRspFlit_PCrdType_local = (wRspFlit_PCrdType > 0) ? wRspFlit_PCrdType : /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */ 0;
var wRspFlit_TraceTag_local = (wRspFlit_TraceTag > 0) ? wRspFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wSnpFlit_FwdNID      = interfaces.chiInt.params.FwdNID;
var wSnpFlit_FwdTxnID    = interfaces.chiInt.params.FwdTxnID;
var wSnpFlit_Opcode      = interfaces.chiInt.params.SNP_Opcode;
var wSnpFlit_DoNotGoToSD = interfaces.chiInt.params.DoNotGoToSD;
var wSnpFlit_RetToSrc    = interfaces.chiInt.params.RetToSrc;
var wSnpFlit_TraceTag    = interfaces.chiInt.params.TraceTag;

var wSnpFlit_FwdNID_local = (wSnpFlit_FwdNID > 0) ? wSnpFlit_FwdNID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_FwdTxnID_local = (wSnpFlit_FwdTxnID > 0) ? wSnpFlit_FwdTxnID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_DoNotGoToSD_local = (wSnpFlit_DoNotGoToSD > 0) ? wSnpFlit_DoNotGoToSD : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_RetToSrc_local = (wSnpFlit_RetToSrc > 0) ? wSnpFlit_RetToSrc : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_TraceTag_local = (wSnpFlit_TraceTag > 0) ? wSnpFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;


var wDatFlit_Homenode_ID  = interfaces.chiInt.params.Homenode_ID;
var wDatFlit_Opcode       = interfaces.chiInt.params.DAT_Opcode;
var wDatFlit_RespErr     = interfaces.chiInt.params.RespErr;
var wDatFlit_Resp        = interfaces.chiInt.params.Resp;
var wDatFlit_DataSource    = (interfaces.chiInt.params.DataSource > 0) ? interfaces.chiInt.params.DataSource : 0;
var wDatFlit_CBusy         = (interfaces.chiInt.params.CBusy > 0) ? interfaces.chiInt.params.CBusy : 0;
var wDatFlit_FwdState    = interfaces.chiInt.params.FwdState;
var wDatFlit_DBID        = interfaces.chiInt.params.DBID;
var wDatFlit_CCID        = interfaces.chiInt.params.CCID;
var wDatFlit_DataID      = interfaces.chiInt.params.DataID;
var wDatFlit_TraceTag   = interfaces.chiInt.params.TraceTag;
var wDatFlit_Rsvdc     = interfaces.chiInt.params.DAT_RSVDC;
var wDatFlit_BE        = interfaces.chiInt.params.BE;
var wDatFlit_Poison    =  enPoison ? wDatFlit_BE/8 : 0;
var wFlit_TagOp     = (interfaces.chiInt.params.TagOp > 0) ? interfaces.chiInt.params.TagOp : 0;
var wFlit_Tag       = wFlit_Data/32;
var wFlit_TU        = wFlit_Data/128;

var wDatFlit_Homenode_ID_local  = (wDatFlit_Homenode_ID > 0) ? wDatFlit_Homenode_ID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wDatFlit_FwdState_local = (wDatFlit_FwdState > 0) ? wDatFlit_FwdState : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wDatFlit_TraceTag_local = (wDatFlit_TraceTag > 0) ? wDatFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wFUnitId           = interfaces.uIdInt.params.wFUnitId;
var wNUnitId           = interfaces.uIdInt.params.wNUnitId;
var wRpn               = interfaces.uIdInt.params.wRpn;
var wNrri              = interfaces.uIdInt.params.wNrri;
var cmpInfo            = obj.lib.getParam('cmpInfo');
var cmType             = obj.lib.getParam('cmType');
var useQos             = fnEnableQos;
var chi_a              = fnNativeInterface == "CHI-A" ? /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 1 : 0;
var chi_b              = fnNativeInterface == "CHI-B" ? 1 : 0;
var chi_e              = fnNativeInterface == "CHI-E" ? 1 : 0;

var useResiliency      = u.getParam('useResiliency');
var ResilienceInfo     = u.getParam('ResilienceInfo');
var nResiliencyDelay             = obj.lib.getParam('ResilienceInfo', 'nResiliencyDelay');
var enableUnitDuplication        = obj.lib.getParam('ResilienceInfo', 'enableUnitDuplication');
var enableNativeIntfProtection   = obj.lib.getParam('ResilienceInfo', 'enableNativeIntfProtection');
// PIN interface params generation
var havePinInterface = interfaces.bistDebugDisableInt && !interfaces.bistDebugDisableInt._SKIP_;

let InterleaveInfo     = m.ParamDefaultGet(u, 'InterleaveInfo', 'object', {});
let dmiIGSV            = InterleaveInfo.dmiIGSV;
let dmi2WIFV           = InterleaveInfo.dmi2WIFV;
let dmi3WIFV           = InterleaveInfo.dmi3WIFV;
let dmi4WIFV           = InterleaveInfo.dmi4WIFV;
let dmi8WIFV           = InterleaveInfo.dmi8WIFV;
let dmi16WIFV          = InterleaveInfo.dmi16WIFV;
let DcePrimaryBits     = InterleaveInfo.dceSelectInfo.PriSubDiagAddrBits;
let DceSecondaryBits   = InterleaveInfo.dceSelectInfo.SecSubRows;

if(useQos) {
var qosInfo            = u.getParam('QosInfo');
} else  var qosInfo    = {
      "qosMap" :
             [
              "16'hffff"
             ] ,
     "qosCredits" :
             [15] ,
     "qosCreditsShareEnable" : 0,
     "qosStarvationThreshol" : "8'hf"
           }

var nDCEs = u.getParam('nDCEs');

var nAiuConnectedDces = u.getParam('nAiuConnectedDces');

// Variables
var bundleFunctions    = m.bundleFunctions;

//=============================================================================
// Interface Generation
//=============================================================================

var clkInterfaceJson = interfaces.clkInt;

// clk interface params generation
var interfaceFunc         = new obj.userLib[interfaces.clkInt.interface];
var clkInterface          = interfaceFunc.getSignals(interfaces.clkInt.params);
var clkInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.clkInt.params);
var clkInterfaceName      = interfaces.clkInt.name;
var clkInterfaceDirection = interfaces.clkInt.direction;

var intClkInterface     = { clk: 1, reset_n: 1 };

// Unit Id interface params generation
var interfaceFunc            = new obj.userLib[interfaces.uIdInt.interface];
var unitIdInterface          = interfaceFunc.getSignals(interfaces.uIdInt.params);
var unitIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uIdInt.params);
var unitIdInterfaceName      = interfaces.uIdInt.name;
var unitIdInterfaceDirection = interfaces.uIdInt.direction;

// APB interface params generation
var interfaceFunc      = new obj.userLib[interfaces.apbInt.interface];
var apbInterface       = interfaceFunc.getSignals(interfaces.apbInt.params);
var apbInterfaceBundle = interfaceFunc.getSignalsBundle(interfaces.apbInt.params);
var apbInterfaceName   = interfaces.apbInt.name;
var apbInterfaceDirection = interfaces.apbInt.direction;

// Register Protection interface params generation
var regProtectionInterfaceBundle = {};
var regProtectionInterfaceName   = '';
var regProtectionStyle           = null;

// Q-Channel Interface
if(usePma) {
var interfaceFunc        = new obj.userLib[interfaces.qInt.interface];
var qInterface           = interfaceFunc.getSignals(interfaces.qInt.params);
var qInterfaceBundle     = interfaceFunc.getSignalsBundle(interfaces.qInt.params);
var qInterfaceName       = interfaces.qInt.name;
var qInterfaceDirection  = interfaces.qInt.direction;
}
// Dce Sys Unit Id interface params generation
var interfaceFunc           = new obj.userLib[interfaces.uSysDceIdInt.interface];
var dceIdInterface          = interfaceFunc.getSignals(interfaces.uSysDceIdInt.params);
var dceIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uSysDceIdInt.params);
var dceIdInterfaceName      = interfaces.uSysDceIdInt.name;
var dceIdInterfaceDirection = interfaces.uSysDceIdInt.direction;

// Connected Dce Sys Unit Id interface params generation
var interfaceFunc           = new obj.userLib[interfaces.uSysConnectedDceIdInt.interface];
var connected_dceIdInterface          = interfaceFunc.getSignals(interfaces.uSysConnectedDceIdInt.params);
var connected_dceIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uSysConnectedDceIdInt.params);
var connected_dceIdInterfaceName      = interfaces.uSysConnectedDceIdInt.name;
var connected_dceIdInterfaceDirection = interfaces.uSysConnectedDceIdInt.direction;

// Dve Sys Unit Id interface params generation
var interfaceFunc           = new obj.userLib[interfaces.uSysDveIdInt.interface];
var dveIdInterface          = interfaceFunc.getSignals(interfaces.uSysDveIdInt.params);
var dveIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uSysDveIdInt.params);
var dveIdInterfaceName      = interfaces.uSysDveIdInt.name;
var dveIdInterfaceDirection = interfaces.uSysDveIdInt.direction;

// DMI Sys Unit Id interface params generation
var interfaceFunc           = new obj.userLib[interfaces.uSysDmiIdInt.interface];
var dmiIdInterface          = interfaceFunc.getSignals(interfaces.uSysDmiIdInt.params);
var dmiIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uSysDmiIdInt.params);
var dmiIdInterfaceName      = interfaces.uSysDmiIdInt.name;
var dmiIdInterfaceDirection = interfaces.uSysDmiIdInt.direction;

// DII Sys Unit Id interface params generation
var interfaceFunc           = new obj.userLib[interfaces.uSysDiiIdInt.interface];
var diiIdInterface          = interfaceFunc.getSignals(interfaces.uSysDiiIdInt.params);
var diiIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uSysDiiIdInt.params);
var diiIdInterfaceName      = interfaces.uSysDiiIdInt.name;
var diiIdInterfaceDirection = interfaces.uSysDiiIdInt.direction;

// CHI AIU Unit Id interface params generation
var interfaceFunc            = new obj.userLib[interfaces.uSysCAiuIdInt.interface];
var caiuIdInterface          = interfaceFunc.getSignals(interfaces.uSysCAiuIdInt.params);
var caiuIdInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.uSysCAiuIdInt.params);
var caiuIdInterfaceName      = interfaces.uSysCAiuIdInt.name;
var caiuIdInterfaceDirection = interfaces.uSysCAiuIdInt.direction;

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
// CHI AIU Event Out interface params generation
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
 if (useEventInInt){ 
   var eventRequestOutInterface  = newToOldStyleInterface( interfaces.eventRequestOutInt );
 } 
}

// IRQ interface params generation
var interfaceFunc            = new obj.userLib[interfaces.irqInt.interface];
var irqInterface             = interfaceFunc.getSignals(interfaces.irqInt.params);
var irqInterfaceBundle       = interfaceFunc.getSignalsBundle(interfaces.irqInt.params);
var irqInterfaceName         = interfaces.irqInt.name;
var irqInterfaceDirection    = interfaces.irqInt.direction;

// CHI interface params generation
var interfaceFunc = new obj.userLib[interfaces.chiInt.interface];
var chiInterface = interfaceFunc.getSignals(interfaces.chiInt.params);
var chiInterfaceBundle = interfaceFunc.getSignalsBundle(interfaces.chiInt.params);
var chiInterfaceName         = interfaces.chiInt.name;
var chiInterfaceDirection    = interfaces.chiInt.direction;

var chiInterfaceBundleFiltered = {};
chiInterfaceBundleFiltered = cloneDeep(chiInterfaceBundle);
delete chiInterfaceBundleFiltered['tx_link_']['active_ack'];
delete chiInterfaceBundleFiltered['rx_link_']['active_req'];
delete chiInterfaceBundleFiltered['sysco_']['req'];
delete chiInterfaceBundleFiltered['rx_']['sactive'];

if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) {
  delete chiInterfaceBundleFiltered['tx_link_']['active_ack_chk'];
  delete chiInterfaceBundleFiltered['rx_link_']['active_req_chk'];
  delete chiInterfaceBundleFiltered['sysco_']['req_chk'];
  delete chiInterfaceBundleFiltered['rx_']['sactive_chk'];
}

// Register Protection interface params generation
var regProtInterface          = obj.userLib.ParamDefaultGet(obj.lib, 'regProtectionInterface', 'object', {});
var regProtInterfaceName      = obj.userLib.ParamDefaultGet(obj.lib, 'regProtectionInterfaceName', 'string', "");
var regProtStyle              = obj.userLib.ParamDefaultGet(obj.lib, 'regProtectionStyle', 'object', null);

// Resilliancy interface params generation
if(useResiliency) {

var interfaceFunc           = new obj.userLib[interfaces.bistInt.interface];
var bistInterface           = interfaceFunc.getSignals(interfaces.bistInt.params);
var bistInterfaceBundle     = interfaceFunc.getSignalsBundle(interfaces.bistInt.params);
var bistInterfaceName       = interfaces.bistInt.name;
var bistInterfaceDirection  = interfaces.bistInt.direction;

var interfaceFunc           = new obj.userLib[interfaces.faultInt.interface];
var faultInterface          = interfaceFunc.getSignals(interfaces.faultInt.params);
var faultInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.faultInt.params);
var faultInterfaceName      = interfaces.faultInt.name;
var faultInterfaceDirection = interfaces.faultInt.direction;

    if (enableUnitDuplication) {
var interfaceFunc         = new obj.userLib[interfaces.checkClkInt.interface];
var checkClkInterfaceParam     = interfaces.checkClkInt.params;
var checkClkInterface          = interfaceFunc.getSignals(interfaces.checkClkInt.params);
var checkClkInterfaceBundle    = interfaceFunc.getSignalsBundle(interfaces.checkClkInt.params);
var checkClkInterfaceName      = interfaces.checkClkInt.name;
var checkClkInterfaceDirection = interfaces.checkClkInt.direction;

    }
}

if(usePma) {
// Q-Channel Interface
var interfaceFunc        = new obj.userLib[interfaces.qInt.interface];
var qInterface           = interfaceFunc.getSignals(interfaces.qInt.params);
var qInterfaceBundle     = interfaceFunc.getSignalsBundle(interfaces.qInt.params);
var qInterfaceName       = interfaces.qInt.name;

var qInterfaceBundleFiltered = {};
qInterfaceBundleFiltered = cloneDeep(qInterfaceBundle);
delete qInterfaceBundleFiltered['REQn'];

} else {
var qInterfaceBundle     = {};
var qInterfaceName       = '';
}

// Internal Fault interface params generation

var internalFaultInterfaceBundle = {
            "intf_chk_UCE" : 1,
            "placeholder_UCE"    : 1,
            "placeholder_CE"     : 1,
            "transport_error_UCE"      : 1,
            "timeout_error_UCE"  : 1,
            "native_decode_err_UCE" : 1,
            "native_snp_resp_UCE" : 1,
            "cmux_UCE"           : 1,
            "cmux_cmd_rsp_CE"    : 1,
            "cmux_str_req_CE"    : 1,
            "cmux_snp_req_CE"    : 1,
            "cmux_dtw_rsp_CE"    : 1,
            "cmux_dtr_req_rx_CE" : 1,
            "cmux_dtr_rsp_rx_CE" : 1,
            "cmux_cmp_rsp_CE"    : 1,
    };
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
    internalFaultInterfaceBundle["cmux_sys_rsp_rx_CE"] = 1;
    internalFaultInterfaceBundle["cmux_sys_req_rx_CE"] = 1;
    internalFaultInterfaceBundle["protocol_sys_co_rsp_UCE"] = 1;
}

var internalFaultInterfaceName = 'chi_aiu_';

// native placeholder interface params generation
if(enableNativeIntfProtection) {
  var interfaceFunc        = new obj.userLib[interfaces.userPlaceInt.interface];
  var placeInterface       = interfaceFunc.getSignals(interfaces.userPlaceInt.params);
  var placeInterfaceBundle = interfaceFunc.getSignalsBundle(interfaces.userPlaceInt.params);
  var placeInterfaceName   = interfaces.userPlaceInt.name;
  var placeInterfaceDef    = interfaces.userPlaceInt.synonyms;
  var placeInterfaceSkip   = interfaces.userPlaceInt._SKIP_;
} else {
  var placeInterface       = [];
  var placeInterfaceBundle = [];
  var placeInterfaceName   = "";
  var placeInterfaceDef    = [];
  var placeInterfaceSkip   = true;
}

//Internal interfaces - FLITS
var req_flit_interface = {
          QoS:                  wFlit_Qos,
          TgtID:                wFlit_TgtID,
          SrcID:                wFlit_SrcID, 
          TxnID:                wFlit_TxnID,
          ReturnNID:            wReqFlit_ReturnNID_local, 
          StashNIDValid:        wReqFlit_StashNIDValid_local,
          ReturnTxnID:          wReqFlit_ReturnTxnID_local,
          Opcode:               wReqFlit_Opcode,
          Size:                 wReqFlit_Size,
          Addr:                 wFlit_Addr,  
          NS:                   wFlit_NS,
          LikelyShared:         wReqFlit_LikelyShared,
          AllowRetry:           wReqFlit_AllowRetry,
          Order:                wReqFlit_Order,
          PCrdType:             wReqFlit_PCrdType,
          MemAttr:              wReqFlit_MemAttr,
          SnpAttr:              wReqFlit_SnpAttr,
          LPID:                 wReqFlit_LPID,
          Excl:                 wReqFlit_Excl,
          ExCompAck:            wReqFlit_ExCompAck,
          TagOp:                wFlit_TagOp,
          TraceTag:             wReqFlit_TraceTag_local,
          RSVDC:                wReqFlit_Rsvdc 
         }

var  rsp_flit_interface = {
           QoS:                 wFlit_Qos,
           TgtID:               wFlit_TgtID,
           SrcID:               wFlit_SrcID,  
           TxnID:               wFlit_TxnID,  
           OpCode:              wRspFlit_Opcode, 
           RespErr:             wRspFlit_RespErr,
           Resp:                wRspFlit_Resp,
           FwdState:            wRspFlit_FwdState_local,
           CBusy:               wDatFlit_CBusy,
           DBID:                wRspFlit_DBID,
           PCrdType:            wRspFlit_PCrdType_local,
           TagOp:                wFlit_TagOp,
           TraceTag:            wRspFlit_TraceTag_local 
         }

var snp_flit_interface =  {
            QoS:                wFlit_Qos,
            SrcID:              wFlit_SrcID, 
            TxnID:              wFlit_TxnID, 
            FwdNID:             wSnpFlit_FwdNID_local, 
            FwdTxnID:           wSnpFlit_FwdTxnID_local,
            OpCode:             wSnpFlit_Opcode,
            Addr:               wFlit_Addr - 3,
            NS:                 wFlit_NS,
            DoNotGoToSD:        wSnpFlit_DoNotGoToSD_local,
            RetToSrc:           wSnpFlit_RetToSrc_local,
            TraceTag:           wSnpFlit_TraceTag_local 
        }

if (chi_e) {

var dat_flit_interface = {
            QoS:                wFlit_Qos,
            TgtID:              wFlit_TgtID,
            SrcID:              wFlit_SrcID,
            TxnID:              wFlit_TxnID,
            Homenode_ID:        wDatFlit_Homenode_ID_local,
            OpCode:             wDatFlit_Opcode,
            RespErr:            wDatFlit_RespErr,
            Resp:               wDatFlit_Resp,
            DataSource:         wDatFlit_DataSource,
            CBusy:              wDatFlit_CBusy,
            DBID:               wDatFlit_DBID,
            CCID:               wDatFlit_CCID,
            DataID:             wDatFlit_DataID,
            TagOp:              wFlit_TagOp,
            Tag:                wFlit_Tag,
            TU:                 wFlit_TU,
            TraceTag:           wDatFlit_TraceTag_local,
            RSVDC:              wDatFlit_Rsvdc,
            BE:                 wDatFlit_BE,
            Data:               wFlit_Data,
            Poison:             wDatFlit_Poison 
        }

} else {

var dat_flit_interface = {
            QoS:                wFlit_Qos,
            TgtID:              wFlit_TgtID,
            SrcID:              wFlit_SrcID,
            TxnID:              wFlit_TxnID,
            Homenode_ID:        wDatFlit_Homenode_ID_local,
            OpCode:             wDatFlit_Opcode,
            RespErr:            wDatFlit_RespErr,
            Resp:               wDatFlit_Resp,
            FwdState:           wDatFlit_FwdState_local,
            DBID:               wDatFlit_DBID,
            CCID:               wDatFlit_CCID,
            DataID:             wDatFlit_DataID,
            TraceTag:           wDatFlit_TraceTag_local,
            RSVDC:              wDatFlit_Rsvdc,
            BE:                 wDatFlit_BE,
            Data:               wFlit_Data,
            Poison:             wDatFlit_Poison
        }

}

//=============================================================================
//CONCERTO MUX
//=============================================================================

// Concerto Mux TX Message struture
var CMD_REQ = obj.userLib.concMsgGen(obj, 'cmd_req_', 'ConcMsgBodyCMDReq', concParams.hdrParams, concParams.cmdReqParams, concMuxTxMsgParams.cmdReq, 'tx');
var STR_RSP = obj.userLib.concMsgGen(obj, 'str_rsp_', 'ConcMsgBodySTRRsp', concParams.hdrParams, concParams.strRspParams, concMuxTxMsgParams.strRsp, 'tx');
var DTR_REQ_TX = obj.userLib.concMsgGen(obj, 'dtr_req_tx_', 'ConcMsgBodyDTRReq', concParams.hdrParams, concParams.dtrReqParams, concMuxTxMsgParams.dtrReq, 'tx');
var DTR_RSP_TX = obj.userLib.concMsgGen(obj, 'dtr_rsp_tx_', 'ConcMsgBodyDTRRsp', concParams.hdrParams, concParams.dtrRspParams, concMuxTxMsgParams.dtrRsp, 'tx');
var DTW_REQ = obj.userLib.concMsgGen(obj, 'dtw_req_', 'ConcMsgBodyDTWReq', concParams.hdrParams, concParams.dtwReqParams, concMuxTxMsgParams.dtwReq, 'tx');
//FIXME
var DTW_DBG_REQ = obj.userLib.concMsgGen(obj, 'dtw_dbg_req_', 'ConcMsgBodyDTWDBGReq', concParams.hdrParams, concParams.dtwDbgReqParams, concMuxTxMsgParams.dtwDbgReq, 'tx');

var SNP_RSP = obj.userLib.concMsgGen(obj, 'snp_rsp_', 'ConcMsgBodySNPRsp', concParams.hdrParams, concParams.snpRspParams, concMuxTxMsgParams.snpRsp, 'tx');
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
var SYS_REQ_TX = obj.userLib.concMsgGen(obj, 'sys_req_tx_', 'ConcMsgBodySYSReq', concParams.hdrParams, concParams.sysReqParams, concMuxTxMsgParams.sysReq, 'tx');
var SYS_RSP_TX = obj.userLib.concMsgGen(obj, 'sys_rsp_tx_', 'ConcMsgBodySYSRsp', concParams.hdrParams, concParams.sysRspParams, concMuxTxMsgParams.sysRsp, 'tx');
}

// Concerto Mux RX Message structure
var CMD_RSP = obj.userLib.concMsgGen(obj, 'cmd_rsp_', 'ConcMsgBodyCMDRsp', concParams.hdrParams, concParams.cmdRspParams, concMuxRxMsgParams.cmdRsp, 'rx');
var STR_REQ = obj.userLib.concMsgGen(obj, 'str_req_', 'ConcMsgBodySTRReq', concParams.hdrParams, concParams.strReqParams, concMuxRxMsgParams.strReq, 'rx');
var DTR_REQ_RX = obj.userLib.concMsgGen(obj, 'dtr_req_rx_', 'ConcMsgBodyDTRReq', concParams.hdrParams, concParams.dtrReqParams, concMuxRxMsgParams.dtrReq, 'rx');
var DTR_RSP_RX = obj.userLib.concMsgGen(obj, 'dtr_rsp_rx_', 'ConcMsgBodyDTRRsp', concParams.hdrParams, concParams.dtrRspParams, concMuxRxMsgParams.dtrRsp, 'rx');
var DTW_RSP = obj.userLib.concMsgGen(obj, 'dtw_rsp_', 'ConcMsgBodyDTWRsp', concParams.hdrParams, concParams.dtwRspParams, concMuxRxMsgParams.dtwRsp, 'rx');
//FIXME
var DTW_DBG_RSP = obj.userLib.concMsgGen(obj, 'dtw_dbg_rsp_', 'ConcMsgBodyDTWDBGRsp', concParams.hdrParams, concParams.dtwDbgRspParams, concMuxRxMsgParams.dtwDbgRsp, 'rx');

var SNP_REQ = obj.userLib.concMsgGen(obj, 'snp_req_', 'ConcMsgBodySNPReq', concParams.hdrParams, concParams.snpReqParams, concMuxRxMsgParams.snpReq, 'rx');
var CMP_RSP = obj.userLib.concMsgGen(obj, 'cmp_rsp_', 'ConcMsgBodyCMPRsp', concParams.hdrParams, concParams.cmpRspParams, concMuxRxMsgParams.cmpRsp, 'rx');
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
var SYS_RSP_RX = obj.userLib.concMsgGen(obj, 'sys_rsp_rx_', 'ConcMsgBodySYSRsp', concParams.hdrParams, concParams.sysRspParams, concMuxRxMsgParams.sysRsp, 'rx');
var SYS_REQ_RX = obj.userLib.concMsgGen(obj, 'sys_req_rx_', 'ConcMsgBodySYSReq', concParams.hdrParams, concParams.sysReqParams, concMuxRxMsgParams.sysReq, 'rx');
}

var CONC_TX_INTF = [];
var CONC_RX_INTF = [];

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
CONC_TX_INTF.push(CMD_REQ, STR_RSP, DTR_REQ_TX, DTR_RSP_TX, DTW_REQ, DTW_DBG_REQ, SNP_RSP, SYS_REQ_TX, SYS_RSP_TX);
CONC_RX_INTF.push(CMD_RSP, STR_REQ, DTR_REQ_RX, DTR_RSP_RX, DTW_RSP, DTW_DBG_RSP, SNP_REQ, CMP_RSP, SYS_RSP_RX, SYS_REQ_RX);
} else {
CONC_TX_INTF.push(CMD_REQ, STR_RSP, DTR_REQ_TX, DTR_RSP_TX, DTW_REQ, DTW_DBG_REQ, SNP_RSP);
CONC_RX_INTF.push(CMD_RSP, STR_REQ, DTR_REQ_RX, DTR_RSP_RX, DTW_RSP, DTW_DBG_RSP, SNP_REQ, CMP_RSP);
}

// Concerto Message Interfaces generation
var CONC_INTF = {};
CONC_INTF['CMDReqInterface']   = CMD_REQ.signals;
CONC_INTF['STRRspInterface']  = STR_RSP.signals;
CONC_INTF['DTRReqTxInterface'] = DTR_REQ_TX.signals;
CONC_INTF['DTRRspTxInterface'] = DTR_RSP_TX.signals;
CONC_INTF['DTWReqInterface']   = DTW_REQ.signals;
CONC_INTF['SNPRspInterface']   = SNP_RSP.signals;
CONC_INTF['DTWDbgReqInterface']   = DTW_DBG_REQ.signals;

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
CONC_INTF['SYSReqTxInterface'] = SYS_REQ_TX.signals;
CONC_INTF['SYSRspTxInterface'] = SYS_RSP_TX.signals;
}

CONC_INTF['CMDRspInterface']   = CMD_RSP.signals;
CONC_INTF['STRReqInterface']   = STR_REQ.signals;
CONC_INTF['DTRReqRxInterface'] = DTR_REQ_RX.signals;
CONC_INTF['DTRRspRxInterface'] = DTR_RSP_RX.signals;
CONC_INTF['DTWRspInterface']   = DTW_RSP.signals;
CONC_INTF['SNPReqInterface']   = SNP_REQ.signals;
CONC_INTF['CMPRspInterface']   = CMP_RSP.signals;
CONC_INTF['DTWDbgRspInterface']   = DTW_DBG_RSP.signals;

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
CONC_INTF['SYSRspRxInterface'] = SYS_RSP_RX.signals;
CONC_INTF['SYSReqRxInterface'] = SYS_REQ_RX.signals;
}

//=============================================================================
// Modified CSR
//=============================================================================
// Compute modifiedCSR with certain register and field definition modified
var nUnits                      = { "DCE": u.getParam('nDCEs'), "DMI": u.getParam('nDmis'), "DII": u.getParam('nDiis') };
var modifiedRegisters			= [];

csr.spaceBlock[0].registers.forEach( register => {
  var modifiedRegister          = /^CAIUCCR\d+$/.test(register.name) ? utilFunctions.fixCCRRegister(register, {nUnits}) :
                                  /^CAIUNRSAR$/.test(register.name)  ? utilFunctions.fixNRSARRegister(register, {fnCsrAccess}) :
                                  register;
  modifiedRegisters.push(modifiedRegister);
});

var modifiedCsr                 = {
  addressWidth     : csr.addressWidth,
  width            : csr.width,
  spaceBlock       : [ Object.assign({}, csr.spaceBlock[0], {registers: modifiedRegisters}) ]
};

//=============================================================================
// Trace CSR Interface
//=============================================================================
const CSRS                      = modifiedCsr;
const traceRegisters            = obj.userLib.genTraceCaptureRegisters(CSRS.spaceBlock[0].registers, "CAIU");
const traceCsrIfGenerator       = obj.userLib.createCSRInterfaceGenerator( traceRegisters );

var TRACE_CAPTURE_INTF = [];
var nNonDataNetworks = 0;
var nDataNetworks = 0;

//=============================================================================
// SMI Interfaces
//=============================================================================

// SMI interface params generation
var SMI_TX_INTF = [];
var SMI_RX_INTF = [];
var SMI_TX_INTF_DIRECTION = [];
var SMI_RX_INTF_DIRECTION = [];

for(var i = 0; i< smiTxPortParams.length; i++) {
    SMI_TX_INTF.push(obj.userLib.smiPortGen(obj, smiTxPortParams[i], interfaces.smiTxInt[i].params, 'tx'));
    SMI_TX_INTF_DIRECTION.push(interfaces.smiTxInt[i].direction);
};
for(var i = 0; i < smiRxPortParams.length; i++) {
    SMI_RX_INTF.push(obj.userLib.smiPortGen(obj, smiRxPortParams[i], interfaces.smiRxInt[i].params, 'rx'));
    SMI_RX_INTF_DIRECTION.push(interfaces.smiRxInt[i].direction);
 };

for (i=0; i<SMI_TX_INTF.length; i++) {
     obj.userLib.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].signals, obj.lib.port);
     if(SMI_TX_INTF[i].params.dpPresent) {
        nDataNetworks++;
        obj.userLib.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].dpSignals, obj.lib.port);
     } else {
        nNonDataNetworks++;
     }
                                     }
for (i=0; i<SMI_RX_INTF.length; i++) {
     obj.userLib.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].signals, obj.lib.port);
     if(SMI_RX_INTF[i].params.dpPresent) {
        obj.userLib.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].dpSignals, obj.lib.port);
    }
}
//width needed for total number of smi ports*2 (each rx/tx direction)+1.
const wTotalSmiPortsNum = log2ceil(((nNonDataNetworks+nDataNetworks)*2)+1);

//=============================================================================
// Clock and ID Interfaces
//=============================================================================

obj.lib.interface(clkInterfaceName, 'slave' , clkInterface);
obj.lib.interface(unitIdInterfaceName, 'slave' , unitIdInterface);
obj.lib.interface(irqInterfaceName,    'master', irqInterface);
obj.lib.interface(dceIdInterfaceName,  'slave' , dceIdInterface);
obj.lib.interface(connected_dceIdInterfaceName,  'slave' , connected_dceIdInterface);
obj.lib.interface(dveIdInterfaceName,  'slave' , dveIdInterface);
obj.lib.interface(dmiIdInterfaceName,  'slave' , dmiIdInterface);
obj.lib.interface(diiIdInterfaceName,  'slave' , diiIdInterface);
obj.lib.interface(caiuIdInterfaceName, 'slave' , caiuIdInterface);
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
 if (useEventInInt) {
 obj.lib.interface( eventRequestOutInterface.name, 'master', eventRequestOutInterface.signals);
 } 
}
//=============================================================================
// CSR Interface
//=============================================================================

obj.lib.interface(apbInterfaceName, 'slave', apbInterface);

//=============================================================================
// Q Channel Interface
//=============================================================================

if (usePma) {
obj.lib.interface(qInterfaceName, 'slave' , qInterface);
}

//=============================================================================
// Placeholder Interface 
//=============================================================================

if(enableNativeIntfProtection) {
obj.lib.interface(placeInterfaceName, interfaces.userPlaceInt.direction , placeInterface);
}

//=============================================================================
// CHI Interface
//=============================================================================

obj.lib.interface(chiInterfaceName, 'slave' , chiInterface);

//=============================================================================
// Resiliency Interfaces
//=============================================================================

if (useResiliency) {

obj.lib.interface(bistInterfaceName, 'slave' , bistInterface);
obj.lib.interface(faultInterfaceName, 'master' , faultInterface);
    if (enableUnitDuplication) {
obj.lib.interface(checkClkInterfaceName, 'slave' , checkClkInterface);
    }

}
//=============================================================================
// PIN Interface
//=============================================================================
if( havePinInterface ) {
  var pinInterface      = newToOldStyleInterface( interfaces.bistDebugDisableInt );
  obj.lib.interface( pinInterface.name, 'slave', pinInterface.signals);
}
//=============================================================================
// Master Trigger Interface
//=============================================================================
// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) {
  var masterTriggerInterface      = newToOldStyleInterface( interfaces.masterTriggerInt );
  obj.lib.interface( masterTriggerInterface.name, 'slave', masterTriggerInterface.signals);
}
//=============================================================================
//EventRequestInterface
//=============================================================================
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if( useEventOutInt ) {
  var eventRequestInInterface      = newToOldStyleInterface( interfaces.eventRequestInInt );
  obj.lib.interface( eventRequestInInterface.name, 'slave', eventRequestInInterface.signals);
}

obj.lib.setAttribute("csr", modifiedCsr);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

// =======================================================
// Wires
// =======================================================
wire bist_timeout_trigger;
  \=bundleFunctions.wiresFromInterface('', unitIdInterface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('RXREQFLIT_', req_flit_interface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('RXRSPFLIT_', rsp_flit_interface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('RXDAT_'    , dat_flit_interface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('TXSNPFLIT_', snp_flit_interface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('TXRSPFLIT_', rsp_flit_interface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('TXDATFLIT_', dat_flit_interface, [],obj.lib.bundle )=\
  \=bundleFunctions.wiresFromInterface('chi_aiu_', 'internalFaultInterface',   [], obj.lib.bundle)=\ \jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (useEventInInt) { \jsend
  \=bundleFunctions.wiresFromInterface(eventRequestOutInterface.name+'sync_', eventRequestOutInterface.signals,   [], obj.lib.bundle)=\
\js }
wire [\=u.getParam('nDCEs')-1=\:0] hexAiuDceVec = \=dceIdInterfaceName=\connectivity;
wire [\=u.getParam('nDmis')-1=\:0] hexAiuDmiVec = \=dmiIdInterfaceName=\connectivity;
wire [\=u.getParam('nDiis')-1=\:0] hexAiuDiiVec = \=diiIdInterfaceName=\connectivity;

wire \=clkInterfaceName=\sync_reset_n;

wire \=chiInterfaceName=\tx_link_active_ack_sync;
wire \=chiInterfaceName=\rx_link_active_req_sync;
wire \=chiInterfaceName=\sysco_req_sync;
wire \=chiInterfaceName=\rx_sactive_sync; \jsbegin

if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) { \jsend
wire \=chiInterfaceName=\tx_link_active_ack_chk_sync;
wire \=chiInterfaceName=\rx_link_active_req_chk_sync;
wire \=chiInterfaceName=\sysco_req_chk_sync;
wire \=chiInterfaceName=\rx_sactive_chk_sync;
wire \=chiInterfaceName=\tx_link_active_ack_chk_sync_q;
wire \=chiInterfaceName=\rx_link_active_req_chk_sync_q;
wire \=chiInterfaceName=\sysco_req_chk_sync_q;
wire \=chiInterfaceName=\rx_sactive_chk_sync_q; \jsbegin
} \jsend

// Trace Capture 
wire trace_capture_busy;  \jsbegin
// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) { \jsend
wire \=masterTriggerInterface.name=\trigger_sync; \jsbegin
} \jsend

wire [\=wTotalSmiPortsNum-1=\:0] pm_trace_messages_dropped;
wire [\=wTotalSmiPortsNum-1=\:0] pm_trace_messages_captured;
// Trace Capture Registers
\=obj.userLib.bundleFunctions.wiresFromInterface('csr_trace_',traceCsrIfGenerator.signalBundle('master'), [], obj.lib.bundle)=\
// Trace Capture DTW DBG
\=obj.userLib.bundleFunctions.wiresFromInterface('dtw_dbg_req_',CONC_INTF['DTWDbgReqInterface'], [], obj.lib.bundle)=\
\=obj.userLib.bundleFunctions.wiresFromInterface('dtw_dbg_rsp_',CONC_INTF['DTWDbgRspInterface'], [], obj.lib.bundle)=\

\js if (usePma) {
wire \=qInterfaceName=\REQn_sync;
    \js }

    \jsbegin
    if (useResiliency) {
    /* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
    if (havePinInterface) { \jsend
wire chiaiu_en_debug_bist;
\=obj.lib.instance({
   instanceName: 'u_en_debug_bist_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : pinInterface.name+'pin',
       out_data : 'chiaiu_en_debug_bist'
    }
})=\
    \jsbegin
    } else { \jsend
wire chiaiu_en_debug_bist = 1'b1; 
    \jsbegin
    } \jsend

wire fault_checker__clk;
wire fault_checker__reset_n;
wire fault_checker__reset_n_delay;

    \jsbegin
    } \jsend

    \js if (useResiliency && enableUnitDuplication) {
        \jsbegin
        // trigger intf always present on 3.4 
        /* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
        if (interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_) { \jsend
\=bundleFunctions.wiresFromInterface('dup_unit__' + masterTriggerInterface.name, masterTriggerInterface.signals, ['trigger'], obj.lib.bundle)=\
wire dup_unit__\=masterTriggerInterface.name=\trigger_sync;
wire dup_unit__\=masterTriggerInterface.name=\trigger;

        \jsbegin
        }
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if (useEventInInt) { \jsend
  \=bundleFunctions.wiresFromInterface('dup_unit__'+eventRequestOutInterface.name+'sync_', eventRequestOutInterface.signals,   [], obj.lib.bundle)=\
       \jsbegin }
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if( useEventOutInt) { \jsend
   \=bundleFunctions.wiresFromInterface('dup_unit__'+eventRequestInInterface.name, eventRequestInInterface.signals,   [], obj.lib.bundle)=\
	\js }



wire dup_unit__bist_timeout_trigger;
wire dup_unit__\=clkInterfaceName=\sync_reset_n;
wire dup_unit__\=chiInterfaceName=\tx_link_active_ack_sync;
wire dup_unit__\=chiInterfaceName=\rx_link_active_req_sync;
wire dup_unit__\=chiInterfaceName=\sysco_req_sync;
wire dup_unit__\=chiInterfaceName=\rx_sactive_sync; \jsbegin

if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) { \jsend
wire dup_unit__\=chiInterfaceName=\tx_link_active_ack_chk_sync;
wire dup_unit__\=chiInterfaceName=\rx_link_active_req_chk_sync;
wire dup_unit__\=chiInterfaceName=\sysco_req_chk_sync;
wire dup_unit__\=chiInterfaceName=\rx_sactive_chk_sync; \jsbegin
} \jsend

\jsbegin
/* istanbul ignore if env ncore_3p7 */
if (usePma) { \jsend
wire dup_unit__\=qInterfaceName=\REQn_sync;
    \js }

wire dup_unit__trace_capture_busy;
wire [\=wTotalSmiPortsNum-1=\:0] dup_unit__pm_trace_messages_dropped;
wire [\=wTotalSmiPortsNum-1=\:0] dup_unit__pm_trace_messages_captured;

\=obj.userLib.bundleFunctions.wiresFromInterface('dup_unit__csr_trace_',traceCsrIfGenerator.signalBundle('master'), [], obj.lib.bundle)=\
\=obj.userLib.bundleFunctions.wiresFromInterface('dup_unit__dtw_dbg_req_',CONC_INTF['DTWDbgReqInterface'], [], obj.lib.bundle)=\
\=obj.userLib.bundleFunctions.wiresFromInterface('dup_unit__dtw_dbg_rsp_',CONC_INTF['DTWDbgRspInterface'], [], obj.lib.bundle)=\

\=bundleFunctions.wiresFromInterface('dup_unit__' + clkInterfaceName, clkInterfaceBundle, [], obj.lib.bundle)=\

\=bundleFunctions.wiresFromInterface('dup_unit__' + apbInterfaceName, apbInterfaceBundle, [], obj.lib.bundle)=\

\=bundleFunctions.wiresFromInterface('dup_unit__' + irqInterfaceName, irqInterfaceBundle, [], obj.lib.bundle)=\

\=bundleFunctions.wiresFromInterface('dup_unit__' + chiInterfaceName, chiInterface, [], obj.lib.bundle)=\

\jsbegin
//always TRUE when resiliency set
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if (enableNativeIntfProtection) { \jsend
\=bundleFunctions.wiresFromInterface('dup_unit__' + placeInterfaceName,  placeInterface,     [], obj.lib.bundle)=\
\jsbegin
} \jsend

        \jsbegin
        /* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
        if (usePma) {
        \jsend
\=bundleFunctions.wiresFromInterface('dup_unit__' + qInterfaceName, qInterfaceBundle, [], obj.lib.bundle)=\
        \js }

        \js for (var i=0; i < SMI_TX_INTF.length; i++) {
\=bundleFunctions.wiresFromInterface('dup_unit__' + SMI_TX_INTF[i].name, SMI_TX_INTF[i].signals, [], obj.lib.bundle)=\
            \js if (SMI_TX_INTF[i].params.dpPresent) {
\=bundleFunctions.wiresFromInterface('dup_unit__' + SMI_TX_INTF[i].name,SMI_TX_INTF[i].dpSignals, [], obj.lib.bundle)=\
            \js }
        \js };

        \js for (var i=0; i < SMI_RX_INTF.length; i++) {
\=bundleFunctions.wiresFromInterface('dup_unit__' + SMI_RX_INTF[i].name, SMI_RX_INTF[i].signals, [], obj.lib.bundle)=\
            \js if (SMI_RX_INTF[i].params.dpPresent) {
\=bundleFunctions.wiresFromInterface('dup_unit__' + SMI_RX_INTF[i].name, SMI_RX_INTF[i].dpSignals, [], obj.lib.bundle)=\
            \js }
        \js };

\=bundleFunctions.wiresFromInterface('dup_unit__'+internalFaultInterfaceName, internalFaultInterfaceBundle, [], obj.lib.bundle)=\

wire delay__reset_n_delay;

    \js }

\=bundleFunctions.wiresFromInterface(internalFaultInterfaceName, internalFaultInterfaceBundle, [], obj.lib.bundle)=\

wire [31:0] cerr_threshold;

    \js if (useResiliency) {

wire [31:0] dup_unit__cerr_threshold;

    \js }


\jsbegin
// =======================================================
// CHI AIU Unit Instance
// =======================================================
\jsend

\jsbegin
    var UNIT_INTF = [];
    UNIT_INTF.push({
        modulePrefix: clkInterfaceName,
        localPrefix: clkInterfaceName,
        interface: clkInterfaceBundle,
        direction: clkInterfaceDirection
    });

    UNIT_INTF.push({
        modulePrefix: apbInterfaceName,
        localPrefix: apbInterfaceName,
        interface: apbInterfaceBundle,
        direction: apbInterfaceDirection
    });

    UNIT_INTF.push({
        modulePrefix: irqInterfaceName,
        localPrefix: irqInterfaceName,
        interface: irqInterfaceBundle,
        direction: irqInterfaceDirection,
        excludeFromFC : true
    });

    UNIT_INTF.push({
        modulePrefix: chiInterfaceName,
        localPrefix: chiInterfaceName,
        interface: chiInterfaceBundleFiltered,
        direction: chiInterfaceDirection
    });

    if (usePma) {

    UNIT_INTF.push({
        modulePrefix: qInterfaceName,
        localPrefix: qInterfaceName,
        interface: qInterfaceBundleFiltered,
        direction: qInterfaceDirection
    });

    }

    for (var i=0; i<SMI_TX_INTF.length; i++) {
        TRACE_CAPTURE_INTF.push({
            modulePrefix: SMI_TX_INTF[i].name, 
            localPrefix: SMI_TX_INTF[i].name, 
            interface: SMI_TX_INTF[i].signals
        });
        UNIT_INTF.push({
            modulePrefix: SMI_TX_INTF[i].name,
            localPrefix: SMI_TX_INTF[i].name,
            interface: SMI_TX_INTF[i].signals,
            direction: SMI_TX_INTF_DIRECTION[i]
        });

        if (SMI_TX_INTF[i].params.dpPresent) {
	        TRACE_CAPTURE_INTF.push({
                modulePrefix: SMI_TX_INTF[i].name, 
                localPrefix: SMI_TX_INTF[i].name, 
                interface: SMI_TX_INTF[i].dpSignals,
                exclude: ['dp_ready']
            });
            UNIT_INTF.push({
                modulePrefix: SMI_TX_INTF[i].name,
                localPrefix: SMI_TX_INTF[i].name,
                interface: SMI_TX_INTF[i].dpSignals,
                direction: SMI_TX_INTF_DIRECTION[i]
            });
        }
    };
    for (var i=0; i<SMI_RX_INTF.length; i++) {
        TRACE_CAPTURE_INTF.push({
            modulePrefix: SMI_RX_INTF[i].name, 
            localPrefix: SMI_RX_INTF[i].name, 
            interface: SMI_RX_INTF[i].signals
        });
        UNIT_INTF.push({
            modulePrefix: SMI_RX_INTF[i].name,
            localPrefix: SMI_RX_INTF[i].name,
            interface: SMI_RX_INTF[i].signals,
            direction: SMI_RX_INTF_DIRECTION[i]
        });
        if (SMI_RX_INTF[i].params.dpPresent) {
	        TRACE_CAPTURE_INTF.push({
                modulePrefix: SMI_RX_INTF[i].name, 
                localPrefix: SMI_RX_INTF[i].name, 
                interface: SMI_RX_INTF[i].dpSignals,
                exclude: ['dp_ready']
            });
            UNIT_INTF.push({
                modulePrefix: SMI_RX_INTF[i].name,
                localPrefix: SMI_RX_INTF[i].name,
                interface: SMI_RX_INTF[i].dpSignals,
                direction: SMI_RX_INTF_DIRECTION[i]
            });
        }
    };
    UNIT_INTF.push({
        modulePrefix: internalFaultInterfaceName,
        localPrefix: internalFaultInterfaceName,
        interface: internalFaultInterfaceBundle,
        direction : "master",
        excludeFromFC : true
    })

    UNIT_INTF.push({
        modulePrefix: 'csr_trace_',
        localPrefix: 'csr_trace_',
        interface: traceCsrIfGenerator.signalBundle('slave'),
        direction: 'master'
    });

    UNIT_INTF.push({
        modulePrefix: 'dtw_dbg_req_',
        localPrefix: 'dtw_dbg_req_',
        interface: CONC_INTF['DTWDbgReqInterface'],
        direction: 'slave'
    });

    UNIT_INTF.push({
        modulePrefix: 'dtw_dbg_rsp_',
        localPrefix: 'dtw_dbg_rsp_',
        interface: CONC_INTF['DTWDbgRspInterface'],
        direction: 'master'
    });

    TRACE_CAPTURE_INTF.push({
        modulePrefix: '',
        localPrefix: clkInterfaceName,
        interface: intClkInterface
    });
    TRACE_CAPTURE_INTF.push({
        modulePrefix: 'dtw_req_',
        localPrefix: 'dtw_dbg_req_',
        interface: CONC_INTF['DTWDbgReqInterface']
    });
    TRACE_CAPTURE_INTF.push({
        modulePrefix: 'dtw_resp_',
        localPrefix: 'dtw_dbg_rsp_',
        interface: CONC_INTF['DTWDbgRspInterface']
    });
    TRACE_CAPTURE_INTF.push({
        modulePrefix: 'csr_trace_',
        localPrefix: 'csr_trace_',
        interface: traceCsrIfGenerator.signalBundle("slave")
    });

    if (enableNativeIntfProtection) {
        UNIT_INTF.push({
            modulePrefix: placeInterfaceName,
            localPrefix: placeInterfaceName,
            interface: placeInterfaceBundle,
                direction : "master"
        });
    } // enableNativeIntfProtection

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
  /* istanbul ignore else env ncore_3p6, ncore_3p7 */
  if (useEventInInt) {
    UNIT_INTF.push({
        modulePrefix: eventRequestOutInterface.name,
        localPrefix: eventRequestOutInterface.name+'sync_',
        interface: eventRequestOutInterface.signals,
        direction : "master"
    });
  } 
}
// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_) {
    UNIT_INTF.push({
        modulePrefix: masterTriggerInterface.name,
        localPrefix: masterTriggerInterface.name,
        "interface": masterTriggerInterface.signals,
        direction: "slave",
	exclude: ['trigger']
    });
}

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if( useEventOutInt) {
    UNIT_INTF.push({
	modulePrefix: eventRequestInInterface.name,
        localPrefix: eventRequestInInterface.name,
        "interface": eventRequestInInterface.signals,
        direction: "slave"
    });
}


  var aiu_unit_params = {
            req_flit_interface: req_flit_interface,
            rsp_flit_interface: rsp_flit_interface,
            dat_flit_interface: dat_flit_interface,
            snp_flit_interface: snp_flit_interface,
            nRobEntries: nRobEntries,
            useSysEvtCoh: useSysEvtCoh,
            assertOn:           assertOn,
            fnCsrAccess: fnCsrAccess,
            nativeInterfacePipe: nativeInterfacePipe,
            concParams:         concParams,
            wFPortId:           wFPortId,
            wFUnitId:           wFUnitId,
            wNUnitId:           wNUnitId,
            wRpn:               wRpn,
            wNrri:              wNrri,
            wInitiatorId:       wInitiatorId,
            wMsgId:             wMsgId,
            wReqFlit_Rsvdc:     wReqFlit_Rsvdc,
            wDatFlit_Rsvdc:     wDatFlit_Rsvdc,
            wDatFlit_BE:        wDatFlit_BE,
	    nTraceRegisters:    nTraceRegisters,
  	    nPerfCounters : nPerfCounters,
	    nUnitTraceBufSize:    nUnitTraceBufSize,
            wTotalSmiPortsNum:    wTotalSmiPortsNum,
            nAiuConnectedDces:  nAiuConnectedDces,
            nDCEs: 		u.getParam('nDCEs'),
            nDVEs: 		u.getParam('nDVEs'),
            nDmis: 		u.getParam('nDmis'),
            nDiis: 		u.getParam('nDiis'),
            nDCECredits: 	0, //BOON: UNUSED!! //u.getParam('nDCECredits'),
            nDVECredits: 	u.getParam('nDVECredits'),
            nDmiCredits: 	0, //BOON: UNUSED!! //u.getParam('nDmiCredits'),
            nDiiCredits: 	0, //BOON: UNUSED!! //u.getParam('nDiiCredits'),
            nGPRA:              u.getParam('nGPRA'), 
            dmiIGSV:            dmiIGSV,
            dmi2WIFV:           dmi2WIFV,
            dmi3WIFV:           dmi3WIFV,
            dmi4WIFV:           dmi4WIFV,
            dmi8WIFV:           dmi8WIFV,
            dmi16WIFV:          dmi16WIFV,
            DcePrimaryBits:     DcePrimaryBits,
            DceSecondaryBits:   DceSecondaryBits,
            cmpInfo:            cmpInfo,
            cmType:             cmType,
            chiCmd:             chiCmd,
            implVerId:          implVerId,
            engVerId:           engVerId,
            wAddr:              wAddr,
            wData:              wData,
            wCacheLineOffset:   wCacheLineOffset,
            useResiliency:      useResiliency,
            ResilienceInfo:     ResilienceInfo,
            placeInterface:     placeInterface,
            placeInterfaceName: placeInterfaceName,
            placeInterfaceDef:  placeInterfaceDef,
            placeInterfaceSkip: placeInterfaceSkip,
            qosInfo:            qosInfo,
            useQos:             useQos,
            chi_a :             chi_a,
            chi_b :             chi_b,
            chi_e :             chi_e,
            fnEnableQos :       fnEnableQos,
            csr:                modifiedCsr,
            internalFaultInterface:     internalFaultInterfaceBundle,
            internalFaultInterfaceName: internalFaultInterfaceName,
            regProtectionInterface:     regProtectionInterfaceBundle,
            regProtectionInterfaceName: regProtectionInterfaceName,
            regProtectionStyle:         regProtectionStyle,
            clkInterfaceJson:           clkInterfaceJson,
            clkInterface:               clkInterfaceBundle,
            clkInterfaceName:           clkInterfaceName,
            apbInterface:               apbInterfaceBundle,
            apbInterfaceName:           apbInterfaceName,
            usePma:                     usePma,
            PmaInfo:                    PmaInfo,
            interfaces:                 interfaces,
            chiInterface:               chiInterfaceBundle,
            chiInterfaceName:           chiInterfaceName,
            qInterface:                 qInterfaceBundle,
            qInterfaceName:             qInterfaceName,
            irqInterface:               irqInterfaceBundle,
            irqInterfaceName:           irqInterfaceName,
            unitIdInterface:            unitIdInterface,
            unitIdInterfaceName:        unitIdInterfaceName,
            dceIdInterface:             dceIdInterface,
            dceIdInterfaceName:         dceIdInterfaceName,
            dveIdInterface:             dveIdInterface,
            dveIdInterfaceName:         dveIdInterfaceName,
            dmiIdInterface:             dmiIdInterface,
            dmiIdInterfaceName:         dmiIdInterfaceName,
            diiIdInterface:             diiIdInterface,
            diiIdInterfaceName:         diiIdInterfaceName,
            caiuIdInterface:            caiuIdInterface,
            caiuIdInterfaceName:        caiuIdInterfaceName,   
            SMI_TX_INTF:        	SMI_TX_INTF,
            SMI_RX_INTF:        	SMI_RX_INTF,
            CONC_TX_INTF:       	CONC_TX_INTF,
            CONC_RX_INTF:       	CONC_RX_INTF,
            concertoInterfaces: 	CONC_INTF,
	    useEventOutInt: 		useEventOutInt,
	    useSysReqSender:		useSysReqSender,
	    useEventInInt: 		useEventInInt,
	    useSysReqReceiver:		useSysReqReceiver
	   };
    var aiu_unit_ports = {};
    aiu_unit_ports['bist_timeout_trigger'] = 'bist_timeout_trigger';
    aiu_unit_ports['hexAiuDceVec'] = 'hexAiuDceVec';
    aiu_unit_ports['hexAiuDmiVec'] = 'hexAiuDmiVec';
    aiu_unit_ports['hexAiuDiiVec'] = 'hexAiuDiiVec';
    aiu_unit_ports["cerr_threshold"] = 'cerr_threshold';
    aiu_unit_ports['trace_capture_busy'] = 'trace_capture_busy';
    aiu_unit_ports['pm_trace_messages_captured'] = 'pm_trace_messages_captured';
    aiu_unit_ports['pm_trace_messages_dropped'] = 'pm_trace_messages_dropped';
    aiu_unit_ports[clkInterfaceName+'sync_reset_n'] = clkInterfaceName+'sync_reset_n';
    aiu_unit_ports[chiInterfaceName+'tx_link_active_ack'] = chiInterfaceName+'tx_link_active_ack_sync';
    aiu_unit_ports[chiInterfaceName+'rx_link_active_req'] = chiInterfaceName+'rx_link_active_req_sync';
    aiu_unit_ports[chiInterfaceName+'sysco_req'] = chiInterfaceName+'sysco_req_sync';
    aiu_unit_ports[chiInterfaceName+'rx_sactive'] = chiInterfaceName+'rx_sactive_sync';

if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) {
    aiu_unit_ports[chiInterfaceName+'tx_link_active_ack_chk'] = chiInterfaceName+'tx_link_active_ack_chk_sync';
    aiu_unit_ports[chiInterfaceName+'rx_link_active_req_chk'] = chiInterfaceName+'rx_link_active_req_chk_sync';
    aiu_unit_ports[chiInterfaceName+'sysco_req_chk'] = chiInterfaceName+'sysco_req_chk_sync';
    aiu_unit_ports[chiInterfaceName+'rx_sactive_chk'] = chiInterfaceName+'rx_sactive_chk_sync';
}

    aiu_unit_ports['hexAiuConnectedDceFunitId'] = connected_dceIdInterfaceName+'f_unit_id';
// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) {
    aiu_unit_ports[masterTriggerInterface.name+'trigger'] = masterTriggerInterface.name+'trigger_sync'; 
}    
if ( useResiliency ) {
    aiu_unit_ports['chiaiu_en_debug_bist'] = 'chiaiu_en_debug_bist';
} else {
    aiu_unit_ports['chiaiu_en_debug_bist'] = "1'b1";
}
    if (usePma) {
    aiu_unit_ports[qInterfaceName+'REQn'] = qInterfaceName+'REQn_sync';
    }
    Object.keys(unitIdInterfaceBundle).forEach(function(key) {
        aiu_unit_ports[unitIdInterfaceName + key] = unitIdInterfaceName + key;
    });
    Object.keys(dceIdInterfaceBundle).forEach(function(key) {
        aiu_unit_ports[dceIdInterfaceName + key] = dceIdInterfaceName + key;
    });
    Object.keys(dveIdInterfaceBundle).forEach(function(key) {
        aiu_unit_ports[dveIdInterfaceName + key] = dveIdInterfaceName + key;
    });
    Object.keys(dmiIdInterfaceBundle).forEach(function(key) {
        aiu_unit_ports[dmiIdInterfaceName + key] = dmiIdInterfaceName + key;
    });
    Object.keys(diiIdInterfaceBundle).forEach(function(key) {
        aiu_unit_ports[diiIdInterfaceName + key] = diiIdInterfaceName + key;
    });
    Object.keys(caiuIdInterfaceBundle).forEach(function(key) {
        aiu_unit_ports[caiuIdInterfaceName + key] = caiuIdInterfaceName + key;
    });
\jsend

\=obj.lib.instance({
    instanceName: 'unit',
    moduleName: 'aiu_unit',
    params: aiu_unit_params,
    ports: aiu_unit_ports,
    interfaces: UNIT_INTF,
    portsDelimiter: '\n        '
})=\

\jsbegin
// =======================================================
// Checker i.e. Duplicated CHI AIU Unit Instance
// =======================================================
\jsend

\js if (useResiliency && enableUnitDuplication) {

\jsbegin
    var DUP_UNIT_INTF = [];

    for (var i = 0; i < UNIT_INTF.length; i++) {
        DUP_UNIT_INTF.push({
            modulePrefix: UNIT_INTF[i].modulePrefix,
            localPrefix: 'dup_unit__' + UNIT_INTF[i].localPrefix,
            interface: UNIT_INTF[i].interface,
            excludeFromFC: UNIT_INTF[i].excludeFromFC,
	    exclude: UNIT_INTF[i].exclude
        });
      }
    
    var dup_unit_ports = {};
    dup_unit_ports['bist_timeout_trigger'] = 'dup_unit__bist_timeout_trigger';
    dup_unit_ports['hexAiuDceVec'] = 'hexAiuDceVec';
    dup_unit_ports['hexAiuDmiVec'] = 'hexAiuDmiVec';
    dup_unit_ports['hexAiuDiiVec'] = 'hexAiuDiiVec';
    dup_unit_ports["cerr_threshold"] = 'dup_unit__cerr_threshold';
    dup_unit_ports['trace_capture_busy'] = 'dup_unit__trace_capture_busy';
    dup_unit_ports['pm_trace_messages_captured'] = 'dup_unit__pm_trace_messages_captured';
    dup_unit_ports['pm_trace_messages_dropped'] = 'dup_unit__pm_trace_messages_dropped';
    dup_unit_ports[clkInterfaceName+'sync_reset_n'] = 'dup_unit__'+clkInterfaceName+'sync_reset_n';
    dup_unit_ports[chiInterfaceName+'tx_link_active_ack'] = 'dup_unit__'+chiInterfaceName+'tx_link_active_ack_sync';
    dup_unit_ports[chiInterfaceName+'rx_link_active_req'] = 'dup_unit__'+chiInterfaceName+'rx_link_active_req_sync';
    dup_unit_ports[chiInterfaceName+'sysco_req'] = 'dup_unit__'+chiInterfaceName+'sysco_req_sync';
    dup_unit_ports[chiInterfaceName+'rx_sactive'] = 'dup_unit__'+chiInterfaceName+'rx_sactive_sync';

if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) {
    dup_unit_ports[chiInterfaceName+'tx_link_active_ack_chk'] = '~dup_unit__'+chiInterfaceName+'tx_link_active_ack_chk_sync';
    dup_unit_ports[chiInterfaceName+'rx_link_active_req_chk'] = '~dup_unit__'+chiInterfaceName+'rx_link_active_req_chk_sync';
    dup_unit_ports[chiInterfaceName+'sysco_req_chk'] = '~dup_unit__'+chiInterfaceName+'sysco_req_chk_sync';
    dup_unit_ports[chiInterfaceName+'rx_sactive_chk'] = '~dup_unit__'+chiInterfaceName+'rx_sactive_chk_sync';
}

    dup_unit_ports['hexAiuConnectedDceFunitId'] = connected_dceIdInterfaceName+'f_unit_id';
    // trigger intf always present on 3.4 
    /* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
    if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) {
      dup_unit_ports[masterTriggerInterface.name+'trigger'] = 'dup_unit__'+masterTriggerInterface.name+'trigger_sync';  
    }

    dup_unit_ports['chiaiu_en_debug_bist'] = 'chiaiu_en_debug_bist';

	/* istanbul ignore if env ncore_3p7 */
    if (usePma) {
      dup_unit_ports[qInterfaceName+'REQn'] = 'dup_unit__'+qInterfaceName+'REQn_sync';
    }
    Object.keys(unitIdInterfaceBundle).forEach(function(key) {
        dup_unit_ports[unitIdInterfaceName + key] = unitIdInterfaceName + key;
    });
    Object.keys(dceIdInterfaceBundle).forEach(function(key) {
        dup_unit_ports[dceIdInterfaceName + key] = dceIdInterfaceName + key;
    });
    Object.keys(dveIdInterfaceBundle).forEach(function(key) {
        dup_unit_ports[dveIdInterfaceName + key] = dveIdInterfaceName + key;
    });
    Object.keys(dmiIdInterfaceBundle).forEach(function(key) {
        dup_unit_ports[dmiIdInterfaceName + key] = dmiIdInterfaceName + key;
    });
    Object.keys(diiIdInterfaceBundle).forEach(function(key) {
        dup_unit_ports[diiIdInterfaceName + key] = diiIdInterfaceName + key;
    });
    Object.keys(caiuIdInterfaceBundle).forEach(function(key) {
        dup_unit_ports[caiuIdInterfaceName + key] = caiuIdInterfaceName + key;
    });


\jsend

\=obj.lib.instance({
    instanceName: 'dup_unit',
    moduleName: 'aiu_unit',
    params: aiu_unit_params,
    ports: dup_unit_ports,
    interfaces: DUP_UNIT_INTF,
    portsDelimiter: '\n        '
})=\

\js }

\jsbegin
// =======================================================
// Checker Delay Instance
// =======================================================
   var delayInterfaceBundle   = {};
   var checkerInterfaceBundle = {};

   delayInterfaceBundle['bist_timeout_trigger'] = 1;
\jsend

\js if (useResiliency) {
    wire reset_n_delay;
\js }

\js if (useResiliency && enableUnitDuplication) {

\jsbegin

    delayInterfaceBundle['trace_capture_busy'] = 1;
    delayInterfaceBundle['pm_trace_messages_dropped'] = wTotalSmiPortsNum;
    delayInterfaceBundle['pm_trace_messages_captured'] = wTotalSmiPortsNum;

// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) {    
    delayInterfaceBundle[masterTriggerInterface.name+'trigger_sync'] = 1;
}
    delayInterfaceBundle[clkInterfaceName+'sync_reset_n'] = 1;
    delayInterfaceBundle[chiInterfaceName+'rx_link_active_req_sync'] = 1;
    delayInterfaceBundle[chiInterfaceName+'tx_link_active_ack_sync'] = 1;
    delayInterfaceBundle[chiInterfaceName+'sysco_req_sync'] = 1;
    delayInterfaceBundle[chiInterfaceName+'rx_sactive_sync'] = 1;

  if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) {
    delayInterfaceBundle[chiInterfaceName+'rx_link_active_req_chk_sync'] = 1;
    delayInterfaceBundle[chiInterfaceName+'tx_link_active_ack_chk_sync'] = 1;
    delayInterfaceBundle[chiInterfaceName+'sysco_req_chk_sync'] = 1;
    delayInterfaceBundle[chiInterfaceName+'rx_sactive_chk_sync'] = 1;
  }

	/* istanbul ignore if env ncore_3p7 */
    if (usePma) {
    delayInterfaceBundle[qInterfaceName+'REQn_sync'] = 1;
    }

    for (var intf = 0; intf < UNIT_INTF.length; intf++) {
            if (DUP_UNIT_INTF[intf].excludeFromFC != true) {
        var inputSignalKeys  = [];
        var outputSignalKeys = [];

  // Handle CHI Case of 2 Deep
   if (Object.keys(DUP_UNIT_INTF[intf].interface)[0] == 'rx_req_') {
   //console.log('rx_req_')
     var chiKeys = Object.keys(DUP_UNIT_INTF[intf].interface);
     var prefix = UNIT_INTF[intf].localPrefix;
     for( var chiKey = 0; chiKey < chiKeys.length; chiKey++ ) {
        var chiSignals = Object.keys(DUP_UNIT_INTF[intf].interface[chiKeys[chiKey]]);
        for( var chiSig = 0; chiSig < chiSignals.length; chiSig++ ) {
         if(DUP_UNIT_INTF[intf].interface[chiKeys[chiKey]][chiSignals[chiSig]] >  0) {
          delayInterfaceBundle[prefix + chiKeys[chiKey] + chiSignals[chiSig]] = Math.abs(DUP_UNIT_INTF[intf].interface[chiKeys[chiKey]][chiSignals[chiSig]]); 
	  //console.log(DUP_UNIT_INTF[intf].interface[chiKeys[chiKey]][chiSignals[chiSig]])

         } else if (DUP_UNIT_INTF[intf].interface[chiKeys[chiKey]][chiSignals[chiSig]] <  0){
          checkerInterfaceBundle[prefix + chiKeys[chiKey] + chiSignals[chiSig]] = Math.abs(DUP_UNIT_INTF[intf].interface[chiKeys[chiKey]][chiSignals[chiSig]]);
         }
        }
     }
} else {

        if (UNIT_INTF[intf].direction == "master"){
            inputSignalKeys  = Object.keys(DUP_UNIT_INTF[intf].interface).filter(key => (DUP_UNIT_INTF[intf].interface[key] < 0) & key != 'clk' & key != 'reset_n');
            outputSignalKeys = Object.keys(DUP_UNIT_INTF[intf].interface).filter(key => (DUP_UNIT_INTF[intf].interface[key] > 0) & key != 'clk' & key != 'reset_n');
        } else {
            inputSignalKeys  = Object.keys(DUP_UNIT_INTF[intf].interface).filter(key => (DUP_UNIT_INTF[intf].interface[key] > 0) & key != 'clk' & key != 'reset_n');
            outputSignalKeys = Object.keys(DUP_UNIT_INTF[intf].interface).filter(key => (DUP_UNIT_INTF[intf].interface[key] < 0) & key != 'clk' & key != 'reset_n');
        }
        for (var sig = 0; sig < inputSignalKeys.length; sig++) {
            delayInterfaceBundle[UNIT_INTF[intf].localPrefix + inputSignalKeys[sig]] = Math.abs(DUP_UNIT_INTF[intf].interface[inputSignalKeys[sig]]);
        }
        for (var sig = 0; sig < outputSignalKeys.length; sig++) {
            checkerInterfaceBundle[UNIT_INTF[intf].localPrefix + outputSignalKeys[sig]] = Math.abs(DUP_UNIT_INTF[intf].interface[outputSignalKeys[sig]]);
        }
      }
     }
    }
    var delayInterfaceBundleKeys = Object.keys(delayInterfaceBundle);
//console.log(checkerInterfaceBundle)
//console.log(delayInterfaceBundle)

    var delayInterfaces = [];

    delete delayInterfaceBundle[clkInterfaceName+'test_en'];

    delayInterfaces.push({
        modulePrefix: '',
        localPrefix: clkInterfaceName,
        interface: clkInterface
      });

    delayInterfaces.push({
            modulePrefix: 'in_',
            localPrefix: 'delay__in_',
            interface: delayInterfaceBundle
       });

    delayInterfaces.push({
            modulePrefix: 'out_',
            localPrefix: 'delay__out_',
            interface: delayInterfaceBundle
       });

    var checker_delay_ports = {};
    checker_delay_ports['reset_n_delay'] = 'delay__reset_n_delay';
    checker_delay_ports['in_'+clkInterfaceName+'sync_reset_n'] = 'delay__in_'+clkInterfaceName+'sync_reset_n';
    checker_delay_ports['in_'+chiInterfaceName+'tx_link_active_ack_sync'] = 'delay__in_'+chiInterfaceName+'tx_link_active_ack_sync';
    checker_delay_ports['in_'+chiInterfaceName+'rx_link_active_req_sync'] = 'delay__in_'+chiInterfaceName+'rx_link_active_req_sync';
    checker_delay_ports['in_'+chiInterfaceName+'sysco_req_sync'] = 'delay__in_'+chiInterfaceName+'sysco_req_sync';
    checker_delay_ports['in_'+chiInterfaceName+'rx_sactive_sync'] = 'delay__in_'+chiInterfaceName+'rx_sactive_sync';

    if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) {
      checker_delay_ports['in_'+chiInterfaceName+'tx_link_active_ack_chk_sync'] = 'delay__in_'+chiInterfaceName+'tx_link_active_ack_chk_sync';
      checker_delay_ports['in_'+chiInterfaceName+'rx_link_active_req_chk_sync'] = 'delay__in_'+chiInterfaceName+'rx_link_active_req_chk_sync';
      checker_delay_ports['in_'+chiInterfaceName+'sysco_req_chk_sync'] = 'delay__in_'+chiInterfaceName+'sysco_req_chk_sync';
      checker_delay_ports['in_'+chiInterfaceName+'rx_sactive_chk_sync'] = 'delay__in_'+chiInterfaceName+'rx_sactive_chk_sync';
    }

	/* istanbul ignore if env ncore_3p7 */
    if (usePma) {
    checker_delay_ports['in_'+qInterfaceName+'REQn_sync'] = 'delay__in_'+qInterfaceName+'REQn_sync';
    }
    checker_delay_ports['out_'+clkInterfaceName+'sync_reset_n'] = 'delay__out_'+clkInterfaceName+'sync_reset_n';
    checker_delay_ports['out_'+chiInterfaceName+'tx_link_active_ack_sync'] = 'delay__out_'+chiInterfaceName+'tx_link_active_ack_sync';
    checker_delay_ports['out_'+chiInterfaceName+'rx_link_active_req_sync'] = 'delay__out_'+chiInterfaceName+'rx_link_active_req_sync';
    checker_delay_ports['out_'+chiInterfaceName+'sysco_req_sync'] = 'delay__out_'+chiInterfaceName+'sysco_req_sync';
    checker_delay_ports['out_'+chiInterfaceName+'rx_sactive_sync'] = 'delay__out_'+chiInterfaceName+'rx_sactive_sync';

    if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) {
      checker_delay_ports['out_'+chiInterfaceName+'tx_link_active_ack_chk_sync'] = 'delay__out_'+chiInterfaceName+'tx_link_active_ack_chk_sync';
      checker_delay_ports['out_'+chiInterfaceName+'rx_link_active_req_chk_sync'] = 'delay__out_'+chiInterfaceName+'rx_link_active_req_chk_sync';
      checker_delay_ports['out_'+chiInterfaceName+'sysco_req_chk_sync'] = 'delay__out_'+chiInterfaceName+'sysco_req_chk_sync';
      checker_delay_ports['out_'+chiInterfaceName+'rx_sactive_chk_sync'] = 'delay__out_'+chiInterfaceName+'rx_sactive_chk_sync';
    }

// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) {
    checker_delay_ports['in_'+masterTriggerInterface.name+'trigger_sync'] = masterTriggerInterface.name+'trigger_sync';
    checker_delay_ports['out_'+masterTriggerInterface.name+'trigger_sync'] = 'delay__out_'+masterTriggerInterface.name+'trigger_sync';
}

	/* istanbul ignore if env ncore_3p7 */
    if (usePma) {
    checker_delay_ports['out_'+qInterfaceName+'REQn_sync'] = 'delay__out_'+qInterfaceName+'REQn_sync';
    }
\jsend
                                                                  
    \=bundleFunctions.wiresFromInterface('delay__in_', delayInterfaceBundle, [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('delay__out_', delayInterfaceBundle, [], obj.lib.bundle)=\

    \=obj.lib.instance({
        instanceName   : 'delay',
        moduleName     : 'checker_delay',
        params         :  {
                             clkInterface    : clkInterface,
                             delayInterface  : delayInterfaceBundle,
                             nDelay          : nResiliencyDelay 
                          },
        interfaces     : delayInterfaces,
        ports          : checker_delay_ports,
        verilogParams  :  {},
        portsDelimiter : '\n    '
    })=\

\js }

\jsbegin
// =======================================================
// Fault Checker
// =======================================================
\jsend

\js if (useResiliency) {

assign \=bistInterfaceName=\domain_is_on = 1'b1;

    \jsbegin
    var chi_aiu_checker_interfaces = [];

    chi_aiu_checker_interfaces.push({
        modulePrefix: '',
        localPrefix: bistInterfaceName,
        interface: bistInterfaceBundle, exclude : ['domain_is_on']
    });

    chi_aiu_checker_interfaces.push({
        modulePrefix: '',
        localPrefix: faultInterfaceName,
        interface: faultInterfaceBundle, exclude : ['late_clk']
    });

    if (enableUnitDuplication) {

        checkerInterfaceBundle.cerr_threshold = 32;

        chi_aiu_checker_interfaces.push({
            modulePrefix: 'func_',
            localPrefix: '',
            interface: checkerInterfaceBundle
        });

        chi_aiu_checker_interfaces.push({
            modulePrefix: 'check_',
            localPrefix: 'dup_unit__',
            interface: checkerInterfaceBundle
        });

    }

  var instance_ports_for_fault_checker = {
                             clk                   : 'fault_checker__clk',
                             reset_n               : 'fault_checker__reset_n',
                             reset_n_delay         : 'fault_checker__reset_n_delay',
                             cerr_threshold        : 'cerr_threshold[7:0]',

    };

    instance_ports_for_fault_checker['func_0_fault_in']       = 'func_0_fault_in';
    instance_ports_for_fault_checker['check_0_fault_in']      = 'check_0_fault_in';
    instance_ports_for_fault_checker['func_0_cerr_fault_in']  = 'func_0_cerr_fault_in';
    instance_ports_for_fault_checker['check_0_cerr_fault_in'] = 'check_0_cerr_fault_in';
    instance_ports_for_fault_checker['func_1_fault_in']       = 'func_1_fault_in';
    instance_ports_for_fault_checker['check_1_fault_in']      = 'check_1_fault_in';
    instance_ports_for_fault_checker['func_1_cerr_fault_in']  = 'func_1_cerr_fault_in';
    instance_ports_for_fault_checker['check_1_cerr_fault_in'] = 'check_1_cerr_fault_in';
    instance_ports_for_fault_checker['func_2_fault_in']       = 'func_2_fault_in';
    instance_ports_for_fault_checker['check_2_fault_in']      = 'check_2_fault_in';
    instance_ports_for_fault_checker['func_2_cerr_fault_in']  = 'func_2_cerr_fault_in';
    instance_ports_for_fault_checker['check_2_cerr_fault_in'] = 'check_2_cerr_fault_in';
    instance_ports_for_fault_checker['func_3_fault_in']       = 'func_3_fault_in';
    instance_ports_for_fault_checker['check_3_fault_in']      = 'check_3_fault_in';
    instance_ports_for_fault_checker['func_3_cerr_fault_in']  = 'func_3_cerr_fault_in';
    instance_ports_for_fault_checker['check_3_cerr_fault_in'] = 'check_3_cerr_fault_in';
    instance_ports_for_fault_checker['func_4_fault_in']       = 'func_4_fault_in';
    instance_ports_for_fault_checker['check_4_fault_in']      = 'check_4_fault_in';
    instance_ports_for_fault_checker['func_4_cerr_fault_in']  = 'func_4_cerr_fault_in';
    instance_ports_for_fault_checker['check_4_cerr_fault_in'] = 'check_4_cerr_fault_in';
    instance_ports_for_fault_checker['func_5_fault_in']       = 'func_5_fault_in';
    instance_ports_for_fault_checker['check_5_fault_in']      = 'check_5_fault_in';
    instance_ports_for_fault_checker['func_5_cerr_fault_in']  = 'func_5_cerr_fault_in';
    instance_ports_for_fault_checker['check_5_cerr_fault_in'] = 'check_5_cerr_fault_in';
    instance_ports_for_fault_checker['func_6_fault_in']       = 'func_6_fault_in';
    instance_ports_for_fault_checker['check_6_fault_in']      = 'check_6_fault_in';
    instance_ports_for_fault_checker['func_6_cerr_fault_in']  = 'func_6_cerr_fault_in';
    instance_ports_for_fault_checker['check_6_cerr_fault_in'] = 'check_6_cerr_fault_in';
    instance_ports_for_fault_checker['func_7_fault_in']       = 'func_7_fault_in';
    instance_ports_for_fault_checker['check_7_fault_in']      = 'check_7_fault_in';
    instance_ports_for_fault_checker['func_7_cerr_fault_in']  = 'func_7_cerr_fault_in';
    instance_ports_for_fault_checker['check_7_cerr_fault_in'] = 'check_7_cerr_fault_in';
    instance_ports_for_fault_checker['func_8_fault_in']       = 'func_8_fault_in';
    instance_ports_for_fault_checker['check_8_fault_in']      = 'check_8_fault_in';
    instance_ports_for_fault_checker['func_8_cerr_fault_in']  = 'func_8_cerr_fault_in';
    instance_ports_for_fault_checker['check_8_cerr_fault_in'] = 'check_8_cerr_fault_in';
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (useSysEvtCoh) {
      instance_ports_for_fault_checker['func_9_fault_in']        = 'func_9_fault_in';
      instance_ports_for_fault_checker['check_9_fault_in']       = 'check_9_fault_in';
      instance_ports_for_fault_checker['func_9_cerr_fault_in']   = 'func_9_cerr_fault_in';
      instance_ports_for_fault_checker['check_9_cerr_fault_in']  = 'check_9_cerr_fault_in';
      instance_ports_for_fault_checker['func_10_fault_in']       = 'func_10_fault_in';
      instance_ports_for_fault_checker['check_10_fault_in']      = 'check_10_fault_in';
      instance_ports_for_fault_checker['func_10_cerr_fault_in']  = 'func_10_cerr_fault_in';
      instance_ports_for_fault_checker['check_10_cerr_fault_in'] = 'check_10_cerr_fault_in';
      instance_ports_for_fault_checker['func_12_fault_in']       = 'func_12_fault_in';
      instance_ports_for_fault_checker['check_12_fault_in']      = 'check_12_fault_in';
      instance_ports_for_fault_checker['func_12_cerr_fault_in']  = 'func_12_cerr_fault_in';
      instance_ports_for_fault_checker['check_12_cerr_fault_in'] = 'check_12_cerr_fault_in';
    }

	/* istanbul ignore else env ncore_3p7 */
    if (timeoutBistControlEnable) {
      instance_ports_for_fault_checker['bist_timeout_trigger'] = 'bist_timeout_trigger';
    }

    instance_ports_for_fault_checker['func_11_fault_in']       = 'func_11_fault_in';
    instance_ports_for_fault_checker['check_11_fault_in']      = 'check_11_fault_in';
    instance_ports_for_fault_checker['func_11_cerr_fault_in']  = 'func_11_cerr_fault_in';
    instance_ports_for_fault_checker['check_11_cerr_fault_in'] = 'check_11_cerr_fault_in';
\jsend

wire func_0_fault_in       = chi_aiu_placeholder_UCE;
wire func_0_cerr_fault_in  = chi_aiu_placeholder_CE;
\js if (enableUnitDuplication) {
wire check_0_fault_in      = dup_unit__chi_aiu_placeholder_UCE;
wire check_0_cerr_fault_in = dup_unit__chi_aiu_placeholder_CE;
\js } else {
wire check_0_fault_in      = chi_aiu_placeholder_UCE;
wire check_0_cerr_fault_in = chi_aiu_placeholder_CE;
\js }


wire func_1_fault_in       = chi_aiu_cmux_UCE;
wire func_1_cerr_fault_in  = chi_aiu_cmux_cmd_rsp_CE;
\js if (enableUnitDuplication) {
wire check_1_fault_in      = dup_unit__chi_aiu_cmux_UCE;
wire check_1_cerr_fault_in = dup_unit__chi_aiu_cmux_cmd_rsp_CE;
\js }  else {
wire check_1_fault_in      = chi_aiu_cmux_UCE;
wire check_1_cerr_fault_in = chi_aiu_cmux_cmd_rsp_CE;
\js }

wire func_2_fault_in       = chi_aiu_native_decode_err_UCE;
wire func_2_cerr_fault_in  = chi_aiu_cmux_str_req_CE;
\js if (enableUnitDuplication) {
wire check_2_fault_in      = dup_unit__chi_aiu_native_decode_err_UCE;
wire check_2_cerr_fault_in = dup_unit__chi_aiu_cmux_str_req_CE;
\js } else {
wire check_2_fault_in      = chi_aiu_native_decode_err_UCE;
wire check_2_cerr_fault_in = chi_aiu_cmux_str_req_CE;
\js }

wire func_3_fault_in       = chi_aiu_native_snp_resp_UCE;
wire func_3_cerr_fault_in  = chi_aiu_cmux_snp_req_CE;
\js if (enableUnitDuplication) {
wire check_3_fault_in      = dup_unit__chi_aiu_native_snp_resp_UCE;
wire check_3_cerr_fault_in = dup_unit__chi_aiu_cmux_snp_req_CE;
\js }  else {
wire check_3_fault_in      = chi_aiu_native_snp_resp_UCE;
wire check_3_cerr_fault_in = chi_aiu_cmux_snp_req_CE;
\js }

wire func_4_fault_in       = chi_aiu_transport_error_UCE;
wire func_4_cerr_fault_in  = chi_aiu_cmux_dtw_rsp_CE;
\js if (enableUnitDuplication) {
wire check_4_fault_in      = dup_unit__chi_aiu_transport_error_UCE;
wire check_4_cerr_fault_in = dup_unit__chi_aiu_cmux_dtw_rsp_CE;
\js } else {
wire check_4_fault_in      = chi_aiu_transport_error_UCE;
wire check_4_cerr_fault_in = chi_aiu_cmux_dtw_rsp_CE;
\js }

wire func_5_fault_in       = 1'b0;
wire check_5_fault_in      = 1'b0;
wire func_5_cerr_fault_in  = chi_aiu_cmux_dtr_req_rx_CE;
\js if (enableUnitDuplication) {
wire check_5_cerr_fault_in = dup_unit__chi_aiu_cmux_dtr_req_rx_CE;
\js } else {
wire check_5_cerr_fault_in = chi_aiu_cmux_dtr_req_rx_CE;
\js }

wire func_6_fault_in       = 1'b0;
wire check_6_fault_in      = 1'b0;
wire func_6_cerr_fault_in  = chi_aiu_cmux_dtr_rsp_rx_CE;
\js if (enableUnitDuplication) {
wire check_6_cerr_fault_in = dup_unit__chi_aiu_cmux_dtr_rsp_rx_CE;
\js } else {
wire check_6_cerr_fault_in = chi_aiu_cmux_dtr_rsp_rx_CE;
\js }

wire func_7_fault_in       = 1'b0;
wire check_7_fault_in      = 1'b0;
wire func_7_cerr_fault_in  = chi_aiu_cmux_cmp_rsp_CE;
\js if (enableUnitDuplication) {
wire check_7_cerr_fault_in = dup_unit__chi_aiu_cmux_cmp_rsp_CE;
\js }  else {
wire check_7_cerr_fault_in = chi_aiu_cmux_cmp_rsp_CE;
\js }

wire func_8_fault_in       = chi_aiu_timeout_error_UCE;
wire func_8_cerr_fault_in  = 1'b0;
\js if (enableUnitDuplication) {
wire check_8_fault_in      = dup_unit__chi_aiu_timeout_error_UCE;
wire check_8_cerr_fault_in = 1'b0;
\js } else {
wire check_8_fault_in      = chi_aiu_timeout_error_UCE;
wire check_8_cerr_fault_in = 1'b0;
\js }

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

wire func_9_fault_in       = 1'b0;
wire check_9_fault_in      = 1'b0;
wire func_9_cerr_fault_in  = chi_aiu_cmux_sys_rsp_rx_CE;
\js if (enableUnitDuplication) {
wire check_9_cerr_fault_in = dup_unit__chi_aiu_cmux_sys_rsp_rx_CE;
\js }  else {
wire check_9_cerr_fault_in = chi_aiu_cmux_sys_rsp_rx_CE;
\js }

wire func_10_fault_in       = 1'b0;
wire check_10_fault_in      = 1'b0;
wire func_10_cerr_fault_in  = chi_aiu_cmux_sys_req_rx_CE;
\js if (enableUnitDuplication) {
wire check_10_cerr_fault_in = dup_unit__chi_aiu_cmux_sys_req_rx_CE;
\js }  else {
wire check_10_cerr_fault_in = chi_aiu_cmux_sys_req_rx_CE;
\js }

wire func_12_fault_in       = chi_aiu_protocol_sys_co_rsp_UCE;
wire func_12_cerr_fault_in  = 1'b0;
\js if (enableUnitDuplication) {
wire check_12_fault_in      = dup_unit__chi_aiu_protocol_sys_co_rsp_UCE;
wire check_12_cerr_fault_in = 1'b0;
\js } else {
wire check_12_fault_in      = chi_aiu_protocol_sys_co_rsp_UCE;
wire check_12_cerr_fault_in = 1'b0;
\js }

\js }

wire func_11_fault_in       = chi_aiu_intf_chk_UCE;
wire func_11_cerr_fault_in  = 1'b0;
\js if (enableUnitDuplication) {
wire check_11_fault_in      = dup_unit__chi_aiu_intf_chk_UCE;
wire check_11_cerr_fault_in = 1'b0;
\js } else {
wire check_11_fault_in      = chi_aiu_intf_chk_UCE;
wire check_11_cerr_fault_in = 1'b0;
\js }


    \=u.instance({
        instanceName   : 'u_chi_aiu_fault_checker',
        moduleName     : 'fault_checker',
        params         :  {
                             timeoutBistControlEnable : timeoutBistControlEnable,
                             eSignalPipe      : 1,
                             nDelay           : (enableUnitDuplication ? nResiliencyDelay: 0),
                             wThreshold       : interfaces.faultInt.params.wThreshold,
                             clkInterface     : intClkInterface,
                             checkerInterface : (enableUnitDuplication ? checkerInterfaceBundle : {}),
                             numFaultInputs   : useSysEvtCoh ? 13 : /* istanbul ignore next env ncore_3p4, ncore_3p6, ncore_3p7 */ 10
                          },
        verilogParams  :  {},
        interfaces     :  chi_aiu_checker_interfaces,
        ports          :  instance_ports_for_fault_checker,
        portsDelimiter : '\n    '
    })=\



\js }


\jsbegin
// =======================================================
// Wire Connections
// =======================================================
\jsend

\js if (useResiliency) {

    \js if (enableUnitDuplication) {
assign fault_checker__clk = \=clkInterfaceName=\clk;
    \js } else {
assign fault_checker__clk = \=clkInterfaceName=\clk;
    \js }

assign fault_checker__reset_n = \=clkInterfaceName=\reset_n;

    \js if (enableUnitDuplication) {
assign fault_checker__reset_n_delay = delay__reset_n_delay;
    \js } else {
assign fault_checker__reset_n_delay = \=clkInterfaceName=\reset_n;
    \js }

\js }

\js if (useResiliency && enableUnitDuplication) {

assign dup_unit__\=clkInterfaceName=\clk       = \=checkClkInterfaceName=\clk;

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (checkClkInterfaceParam.wTestEn) {
    \jsend
assign dup_unit__\=clkInterfaceName=\test_en   = \=checkClkInterfaceName=\test_en;
    \js } else if (clkInterfaceJson.params.wTestEn) {
assign dup_unit__\=clkInterfaceName=\test_en   = \=clkInterfaceName=\test_en;
    \js }

assign dup_unit__\=clkInterfaceName=\reset_n   = delay__reset_n_delay;

    \jsbegin
    var keysToInvertIn = [            // Inverters are added at below inputs and outputs of checker_delay to fix polarity at reset
               'rx_req_flit_chk',
               'rx_req_flitv_chk',
               'rx_req_flit_pend_chk',
               'rx_rsp_flit_chk',
               'rx_rsp_flitv_chk',
               'rx_rsp_flit_pend_chk',
               'rx_dat_flit_chk',
               'rx_dat_flitv_chk',
               'rx_dat_flit_pend_chk',
               'tx_snp_lcrdv_chk',
               'tx_rsp_lcrdv_chk',
               'tx_dat_lcrdv_chk',
        ].map( key => chiInterfaceName+key );
    
    Object.keys(delayInterfaceBundle).forEach(function(key) {
	/* istanbul ignore if env ncore_3p7 */
      if( keysToInvertIn.includes(key) ) { \jsend
assign dup_unit__\=key=\ = ~delay__out_\=key=\; \jsbegin
      } else { \jsend
assign dup_unit__\=key=\ = delay__out_\=key=\; \jsbegin
      }
    });

    var keysToInvertOut = [            // Inverters are added at below inputs and outputs of checker_delay to fix polarity at reset
               'rx_req_flit_chk',
               'rx_req_flitv_chk',
               'rx_req_flit_pend_chk',
               'rx_rsp_flit_chk',
               'rx_rsp_flitv_chk',
               'rx_rsp_flit_pend_chk',
               'rx_dat_flit_chk',
               'rx_dat_flitv_chk',
               'rx_dat_flit_pend_chk',
               'tx_snp_lcrdv_chk',
               'tx_rsp_lcrdv_chk',
               'tx_dat_lcrdv_chk',
               'rx_link_active_req_chk_sync',
               'tx_link_active_ack_chk_sync',
               'sysco_req_chk_sync',
               'rx_sactive_chk_sync'
        ].map( key => chiInterfaceName+key );
    
    Object.keys(delayInterfaceBundle).forEach(function(key) {
	/* istanbul ignore if env ncore_3p7 */
      if( keysToInvertOut.includes(key) ) { \jsend
assign delay__in_\=key=\ = ~\=key=\; \jsbegin
      } else { \jsend
assign delay__in_\=key=\ = \=key=\; \jsbegin
    }});
} 

// ===================================================================
// Trace Capture Instance
// Moved external to aiu_top to avoid duplication. 
// Ensure proper ports of dup_unit feed through fault checker.
// ===================================================================
/* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4, ncore_3p6, ncore_3p7 */
if (traceDebugEnable) { //TraceDebug Enabled: trace_capture instantiated
var trace_capture_intf_param = {};
trace_capture_intf_param['clkInt'] = {
                               name: '',
                               params: {},
                               direction: 'slave',
                               interface: 'InterfaceCLK'
                           };
\jsend
    \=obj.lib.instance({
        instanceName: 'trace_capture',
        moduleName: 'trace_capture',
        params: {
            assertOn: assertOn,
            smiRxPortInterfaces : SMI_RX_INTF,
            smiTxPortInterfaces: SMI_TX_INTF,
            nNDN: nNonDataNetworks,
            nDN: nDataNetworks,
            nUnitTraceBufSize: nUnitTraceBufSize,
            wForceAccumTimeout: 10,
            DTWReqInterface: CONC_INTF['DTWDbgReqInterface'],
            DTWRespInterface: CONC_INTF['DTWDbgRspInterface'],
	        traceRegInterface: {"name": 'csr_trace_', "signals":traceCsrIfGenerator.signalBundle("slave")},
            wFUnitId: wFUnitId,
            wFPortId: wFPortId,
            cmType: cmType,
            interfaces: trace_capture_intf_param
        },
        verilogParams: {},
        ports: {
            MyId:               unitIdInterfaceName+'my_f_unit_id',
            TargId:             dveIdInterfaceName+'f_unit_id',
            pm_trace_messages_captured: 'pm_trace_messages_captured',
            pm_trace_messages_dropped: 'pm_trace_messages_dropped',
            trace_capture_busy: 'trace_capture_busy'
               },
        interfaces: TRACE_CAPTURE_INTF,
        portsDelimiter: '\n        '
    })=\

\jsbegin
} else { 
//Set DTW DBG Req keys to only those not excluded & non-zero widths
const dtw_excludes			= ['ready'];
const dtw_req_keys		= Object.keys(CONC_INTF['DTWDbgReqInterface']).filter(signal => !dtw_excludes.includes(signal) && CONC_INTF['DTWDbgReqInterface'][signal]);
const csr_keys		= Object.keys(traceCsrIfGenerator.signalBundle("master")).filter(signal => traceCsrIfGenerator.signalBundle("master")[signal]>0);
for (let key = 0; key < dtw_req_keys.length; key++) { \jsend
    //TraceDebug Disabled: tie-offs
    assign dtw_dbg_req_\=dtw_req_keys[key]=\ = \=CONC_INTF['DTWDbgReqInterface'][dtw_req_keys[key]]=\'h0;
\jsbegin
} 
for (let key = 0; key < csr_keys.length; key++) { \jsend
    assign csr_trace_\=csr_keys[key]=\ = \=traceCsrIfGenerator.signalBundle("master")[csr_keys[key]]=\'h0;
\jsbegin
} 
\jsend
    assign dtw_dbg_rsp_ready = 1'b1; 
    assign pm_trace_messages_captured = \=wTotalSmiPortsNum=\'h0; 
    assign pm_trace_messages_dropped = \=wTotalSmiPortsNum=\'h0; 
    assign trace_capture_busy = 1'b0; 
\jsbegin
}

// =======================================================
// Synchronizers
// =======================================================
\jsend

\=u.instance({
   instanceName: 'u_sync_reset_n',
   moduleName:   'chi_aiu_sync_reset',
   params: {
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       sync_reset_n : clkInterfaceName+'sync_reset_n'
    }
})=\

\=u.instance({
   instanceName: 'u_tx_link_active_ack_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : chiInterfaceName+'tx_link_active_ack',
       out_data : chiInterfaceName+'tx_link_active_ack_sync'
    }
})=\

\=u.instance({
   instanceName: 'u_rx_link_active_req_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : chiInterfaceName+'rx_link_active_req',
       out_data : chiInterfaceName+'rx_link_active_req_sync'
    }
})=\

\=u.instance({
   instanceName: 'u_sysco_req_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : chiInterfaceName+'sysco_req',
       out_data : chiInterfaceName+'sysco_req_sync'
    }
})=\

\=u.instance({
   instanceName: 'u_rx_sactive_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : chiInterfaceName+'rx_sactive',
       out_data : chiInterfaceName+'rx_sactive_sync'
    }
})=\

\jsbegin
if( interfaces.chiInt.params.checkType && (interfaces.chiInt.params.checkType !== "NONE") ) { \jsend

\=u.instance({
   instanceName: 'u_tx_link_active_ack_chk_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : '~'+chiInterfaceName+'tx_link_active_ack_chk',
       out_data : chiInterfaceName+'tx_link_active_ack_chk_sync_q'
    }
})=\

assign \=chiInterfaceName=\tx_link_active_ack_chk_sync  = ~\=chiInterfaceName=\tx_link_active_ack_chk_sync_q;

\=u.instance({
   instanceName: 'u_rx_link_active_req_chk_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : '~'+chiInterfaceName+'rx_link_active_req_chk',
       out_data : chiInterfaceName+'rx_link_active_req_chk_sync_q'
    }
})=\

assign \=chiInterfaceName=\rx_link_active_req_chk_sync  = ~\=chiInterfaceName=\rx_link_active_req_chk_sync_q;

\=u.instance({
   instanceName: 'u_sysco_req_chk_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : '~'+chiInterfaceName+'sysco_req_chk',
       out_data : chiInterfaceName+'sysco_req_chk_sync_q'
    }
})=\

assign \=chiInterfaceName=\sysco_req_chk_sync    = ~\=chiInterfaceName=\sysco_req_chk_sync_q;


\=u.instance({
   instanceName: 'u_rx_sactive_chk_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : '~'+chiInterfaceName+'rx_sactive_chk',
       out_data : chiInterfaceName+'rx_sactive_chk_sync_q'
    }
})=\

assign \=chiInterfaceName=\rx_sactive_chk_sync    = ~\=chiInterfaceName=\rx_sactive_chk_sync_q; \jsbegin
} 

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
/* istanbul ignore else env ncore_3p7 */
 if (useEventInInt) { \jsend
  \=u.instance({
   instanceName: 'u_event_out_in_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : eventRequestOutInterface.name+'ack',
       out_data : eventRequestOutInterface.name+'sync_ack'
    }
})=\
  assign \=eventRequestOutInterface.name=\req = \=eventRequestOutInterface.name=\sync_req; \jsbegin
 } 
} \jsend

    \js if (usePma) {

\=u.instance({
   instanceName: 'u_pma_REQn_sync',
   moduleName:   'dffr_sync',
   params: {
       'width' : 1,
       'depth' : syncDepth,
   },
   ports: {
       clk      : clkInterfaceName+'clk',
       reset_n  : clkInterfaceName+'reset_n',
       in_data  : qInterfaceName+'REQn',
       out_data : qInterfaceName+'REQn_sync'
    }
})=\

    \js }

\jsbegin
// =======================================================
// Master Trigger Synchronizer
// =======================================================
// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_ ) { \jsend

 \=obj.lib.instance({
    'portsDelimiter': '\n  ',
    'instanceName': 'u_sync_main_trig',
    'moduleName':   'dffr_sync',
    'params': {
      'width' : 1,
      'depth' : syncDepth}, 
    'ports': {
      'clk'      : clkInterfaceName+'clk',
      'reset_n'  : clkInterfaceName+'reset_n',
      'in_data'  : masterTriggerInterface.name+'trigger',
      'out_data' : masterTriggerInterface.name+'trigger_sync'}})=\

\jsbegin
} \jsend

\jsbegin
// =======================================================
// BIST Timeout Trigger
// =======================================================
\jsend

\js if (!useResiliency | !timeoutBistControlEnable) {
assign bist_timeout_trigger = 1'b0;
\js }

endmodule

