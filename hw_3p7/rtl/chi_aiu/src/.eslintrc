{
    "ecmaFeatures": {},
    "parser": "espree",
    "env": {
        "browser": false,
        "node": false,
        "amd": false,
        "mocha": false,
        "jasmine": false
    },

    "rules": {
        "no-alert": 1,
        "no-array-constructor": 0,
        "no-bitwise": 0, // ACHL only supports bit-wise operator; logical operations must use bit-wise operator
        "no-caller": 2,
        "no-catch-shadow": 1,
        "no-comma-dangle": 2,
        "no-cond-assign": 2,
        "no-console": 0, // ACHL supports console.log
        "no-constant-condition": 2,
        "no-continue": 2,
        "no-control-regex": 2,
        "no-debugger": 2,
        "no-delete-var": 2,
        "no-div-regex": 1,
        "no-dupe-keys": 2,
        "no-dupe-args": 2,
        "no-duplicate-case": 2,
        "no-else-return": 1,
        "no-empty": 2,
        "no-empty-class": 2,
        "no-empty-label": 2,
        "no-eq-null": 1,
        "no-eval": 1,
        "no-ex-assign": 2,
        "no-extend-native": 1,
        "no-extra-bind": 1,
        "no-extra-boolean-cast": 2,
        "no-extra-parens": 0, // parenthesis improves readability, we shoud allow it
        "no-extra-semi": 2,
        "no-extra-strict": 2,
        "no-fallthrough": 1,
        "no-floating-decimal": 1,
        "no-func-assign": 2,
        "no-implied-eval": 1,
        "no-inline-comments": 0,
        "no-inner-declarations": [2, "functions"],
        "no-invalid-regexp": 2,
        "no-irregular-whitespace": 2,
        "no-iterator": 1,
        "no-label-var": 2,
        "no-labels": 1,
        "no-lone-blocks": 1,
        "no-lonely-if": 0,
        "no-loop-func": 0,
        "no-mixed-requires": [2, false],
        "no-mixed-spaces-and-tabs": [0, false],
        "no-multi-spaces": 0, // multiple spaces are used to line up statements, we should allow it
        "no-multi-str": 0, // Sometime we use multiple line of strings to make it easier to read
        "no-multiple-empty-lines": [0, {"max": 2}],
        "no-native-reassign": 1,
        "no-negated-in-lhs": 2,
        "no-nested-ternary": 0,
        "no-new": 2,
        "no-new-func": 2,
        "no-new-object": 0,
        "no-new-require": 2,
        "no-new-wrappers": 1,
        "no-obj-calls": 2,
        "no-octal": 1,
        "no-octal-escape": 1,
        "no-param-reassign": 1,
        "no-path-concat": 2,
        "no-plusplus": 0, // It is ok to have ++ or --
        "no-process-env": 1,
        "no-process-exit": 2,
        "no-proto": 1,
        "no-redeclare": 0, // It is ok to re-use i, j variables in a loop
        "no-regex-spaces": 2,
        "no-reserved-keys": 2,
        "no-restricted-modules": 2,
        "no-return-assign": 1,
        "no-script-url": 1,
        "no-self-compare": 1,
        "no-sequences": 0, // We cannot avoid having comma as ACHL needs comma to specify ranges
        "no-shadow": 2,
        "no-shadow-restricted-names": 2,
        "no-space-before-semi": 0,
        "no-spaced-func": 0,
        "no-sparse-arrays": 2,
        "no-sync": 2,
        "no-ternary": 0,
        "no-trailing-spaces": 1, //
        "no-throw-literal": 1,
        "no-undef": 2,
        "no-undef-init": 2,
        "no-undefined": 2,
        "no-underscore-dangle": 0,
        "no-unreachable": 2,
        "no-unused-expressions": 1,
        "no-unused-vars": [1, {"vars": "all", "args": "after-used"}], // Make this a warning instead
        "no-use-before-define": 2,
        "no-void": 1,
        "no-var": 0, // We allow using var to declare variables
        "no-warning-comments": [0, { "terms": ["todo", "fixme", "xxx"], "location": "start" }], // We should allow comments
        "no-with": 1,
        "no-wrap-func": 0,

        "block-scoped-var": 0, // This is ok; it makes sense for any signal to appear in any always block in a module
        "brace-style": [0, "1tbs"],
        "camelcase": 0,
        "comma-dangle": [2, "never"],
        "comma-spacing": 0,
        "comma-style": 0,
        "complexity": [0, 11], // We do not limit cyclomatic complexity
        "consistent-return": 1,
        "consistent-this": [0, "that"],
        "curly": [1, "all"],
        "default-case": 1,
        "dot-notation": [0, { "allowKeywords": true }], // This is ok in ACHL
        "eol-last": 0,
        "eqeqeq": 0, // == has special meaning for ACHL
        "func-names": 0,
        "func-style": [0, "declaration"],
        "generator-star": 2,
        "generator-star-spacing": 2,
        "global-strict": [0, "never"], // Not important
        "guard-for-in": 1,
        "handle-callback-err": 0,
        "indent": 0,
        "key-spacing": [0, { "beforeColon": false, "afterColon": true }],
        "max-depth": [2, 6], // We go deep...
        "max-len": [0, 80, 4], // We do not constraint users on the length
        "max-nested-callbacks": [0, 2],
        "max-params": [2, 3],
        "max-statements": [0, 10], // We do not constraint users on the max number of statements
        "new-cap": 0,
        "new-parens": 0,
        "newline-after-var": 0,
        "one-var": 0,
        "operator-assignment": [0, "always"],
        "operator-linebreak": 0,
        "padded-blocks": 0,
        "quote-props": 0,
        "quotes": [0, "double"],
        "radix": 1,
        "semi": 0,
        "semi-spacing": [0, {"before": false, "after": true}],
        "sort-vars": 0,
        "space-after-function-name": [0, "never"],
        "space-after-keywords": [0, "always"],
        "space-before-blocks": [0, "always"],
        "space-before-function-paren": [0, "always"],
        "space-before-function-parentheses": [0, "always"],
        "space-in-brackets": [0, "never"],
        "space-in-parens": [0, "never"],
        "space-infix-ops": 0,
        "space-return-throw-case": 0,
        "space-unary-ops": [0, { "words": true, "nonwords": false }],
        "spaced-line-comment": [0, "always"],
        "strict": 2,
        "use-isnan": 2,
        "valid-jsdoc": 2,
        "valid-typeof": 2,
        "vars-on-top": 0, // We cannot avoid sometime having vars declared not at top
        "wrap-iife": 1,
        "wrap-regex": 0,
        "yoda": [1, "never"]
    }
}
