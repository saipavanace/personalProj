\jsbegin
//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
// CHI RX TX Link State Machine
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

//=============================================================================
// Ports
//=============================================================================

u.port('input',  'clk',     1);
u.port('input',  'reset_n', 1);

u.port('input',  'RXLINKACTIVEREQ_sync', 1);
u.port('output', 'RXLINKACTIVEACK', 1, 'reg');

u.port('output', 'TXLINKACTIVEREQ', 1, 'reg');
u.port('input',  'TXLINKACTIVEACK_sync', 1);

u.port('input',  'SYSCOREQ_sync', 1);
u.port('output', 'SYSCOACK', 1);

u.port('output', 'rx_state_stop',         1);
u.port('output', 'rx_state_act',          1);
u.port('output', 'rx_state_run',          1);
u.port('output', 'rx_state_deact',        1);

u.port('output', 'tx_state_stop',         1);
u.port('output', 'tx_state_act',          1);
u.port('output', 'tx_state_run',          1);
u.port('output', 'tx_state_deact',        1);

u.port('output', 'co_state_disabled',     1);
u.port('output', 'co_state_connect',      1);
u.port('output', 'co_state_enabled',      1);
u.port('output', 'co_state_disconnect',   1);
u.port('input',  'co_state_connect_ready',    1);
u.port('input',  'co_state_disconnect_ready', 1);

u.port('input',  'rxreq_all_credits_returned', 1);
u.port('input',  'rxrsp_all_credits_returned', 1);  
u.port('input',  'rxdat_all_credits_returned', 1); 

u.port('input',  'txsnp_all_credits_returned', 1);
u.port('input',  'txrsp_all_credits_returned', 1);  
u.port('input',  'txdat_all_credits_returned', 1); 

u.port('input',  'local_transmit_intent', 1);
u.port('input',  'chk_rx_link_perr', 1);
u.port('input',  'chk_tx_link_perr', 1);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

localparam RXSTOP  = 2'b00;
localparam RXACT   = 2'b01;
localparam RXRUN   = 2'b10;
localparam RXDEACT = 2'b11;

localparam TXSTOP  = 2'b00;
localparam TXACT   = 2'b01;
localparam TXRUN   = 2'b10;
localparam TXDEACT = 2'b11;

reg [1:0] rx_state;
reg [1:0] tx_state;

wire dff_enable = 1'b1;

//=============================================================================
// rx_all_credits_returned
//=============================================================================

wire rx_all_credits_returned = rxreq_all_credits_returned 
                             & rxrsp_all_credits_returned 
                             & rxdat_all_credits_returned;

wire tx_all_credits_returned = txsnp_all_credits_returned 
                             & txrsp_all_credits_returned 
                             & txdat_all_credits_returned;

wire all_credits_returned = rx_all_credits_returned | tx_all_credits_returned;

//=============================================================================
// RX Link State Machine
// TX Link State Machine
//=============================================================================

assign rx_state_stop  = (rx_state == RXSTOP);
assign rx_state_act   = (rx_state == RXACT);
assign rx_state_run   = (rx_state == RXRUN);
assign rx_state_deact = (rx_state == RXDEACT);

assign tx_state_stop  = (tx_state == TXSTOP);
assign tx_state_act   = (tx_state == TXACT);
assign tx_state_run   = (tx_state == TXRUN);
assign tx_state_deact = (tx_state == TXDEACT);


reg [1:0] nxt_rx_state ;

always @(posedge clk, negedge reset_n) begin
    if(!reset_n)
        rx_state <= RXSTOP ;
    else 
        rx_state <= nxt_rx_state;
    end

reg [1:0] nxt_tx_state ;

always @(posedge clk, negedge reset_n) begin
    if(!reset_n)
        tx_state <= TXSTOP ;
    else 
        tx_state <= nxt_tx_state;
    end

always @* begin
    case ({tx_state,rx_state})
        {TXSTOP,RXSTOP}:
        begin
           TXLINKACTIVEREQ = RXLINKACTIVEREQ_sync | local_transmit_intent;
           RXLINKACTIVEACK = 1'b0;

           if(RXLINKACTIVEREQ_sync & TXLINKACTIVEREQ ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXACT} ; 
           end  
           else if (RXLINKACTIVEREQ_sync)              begin 
           {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXACT}; 
           end  
           else if (TXLINKACTIVEREQ )                  begin
           {nxt_tx_state,nxt_rx_state} = {TXACT,RXSTOP} ; 
           end
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXSTOP} ; 
           end
        end
        {TXACT,RXSTOP}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = 1'b0;

            if(TXLINKACTIVEACK_sync & RXLINKACTIVEREQ_sync ) begin  
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXACT} ; 
            end  
            else if ( TXLINKACTIVEACK_sync )                begin
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXSTOP} ;
            end  
            else if ( RXLINKACTIVEREQ_sync )                begin
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXACT} ; 
            end
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXACT,RXSTOP} ; 
           end
        end
        {TXSTOP,RXACT}: begin
           TXLINKACTIVEREQ = RXLINKACTIVEREQ_sync; //NOTE
           RXLINKACTIVEACK = RXLINKACTIVEREQ_sync;

            if(TXLINKACTIVEREQ & RXLINKACTIVEACK ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXRUN} ; 
            end  
            else if ( TXLINKACTIVEREQ )            begin //NOTE
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXACT} ;
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXACT} ; 
           end
        end
        {TXRUN,RXSTOP}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = 1'b0;

            if( RXLINKACTIVEREQ_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXACT} ; 
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXRUN,RXSTOP} ; 
           end
        end
        {TXACT,RXACT}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = RXLINKACTIVEREQ_sync;

            if(RXLINKACTIVEACK & TXLINKACTIVEACK_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXRUN} ; 
            end  
            else if ( RXLINKACTIVEACK )            begin
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXRUN } ;
            end  
            else if ( TXLINKACTIVEACK_sync ) begin
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXACT} ; 
            end 
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXACT,RXACT} ; 
           end
        end
        {TXRUN,RXACT}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = RXLINKACTIVEREQ_sync;

            if(~TXLINKACTIVEREQ & RXLINKACTIVEACK ) begin  //NOTE
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXRUN } ; 
            end  
            else if ( RXLINKACTIVEACK )                 begin
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXRUN} ;
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXRUN,RXACT} ; 
           end
        end
        {TXACT,RXRUN}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = 1'b1;

            if( ~RXLINKACTIVEREQ_sync & TXLINKACTIVEACK_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXDEACT} ; 
            end  
            else if ( ~RXLINKACTIVEREQ_sync )                 begin
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXDEACT} ;
            end  
            else if ( TXLINKACTIVEACK_sync ) begin
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXRUN } ; 
            end 
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXACT,RXRUN } ; 
           end
        end
        {TXRUN,RXRUN}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = 1'b1;

            if( ~RXLINKACTIVEREQ_sync & ~TXLINKACTIVEREQ ) begin //NOTE
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXDEACT} ; 
            end  
            else if ( ~RXLINKACTIVEREQ_sync )                 begin
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXDEACT} ;
            end  
            else if ( ~TXLINKACTIVEREQ ) begin //NOTE
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXRUN} ; 
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXRUN,RXRUN} ; 
           end
        end
        {TXACT,RXDEACT}: begin
           TXLINKACTIVEREQ = 1'b1;
           RXLINKACTIVEACK = ~rx_all_credits_returned;

            if(TXLINKACTIVEACK_sync  ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXRUN,RXDEACT} ; 
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXACT,RXDEACT} ; 
           end
        end
        {TXDEACT,RXRUN}: begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = 1'b1;

            if( ~TXLINKACTIVEACK_sync & ~RXLINKACTIVEREQ_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXDEACT} ; 
            end  
            else if ( ~TXLINKACTIVEACK_sync )                 begin
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXRUN } ;
            end  
            else if ( ~RXLINKACTIVEREQ_sync ) begin
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXDEACT} ; 
            end 
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXRUN } ; 
           end
        end
        {TXRUN,RXDEACT}: begin
           TXLINKACTIVEREQ = ~rx_all_credits_returned; //NOTE
           RXLINKACTIVEACK = ~rx_all_credits_returned; //NOTE

            if(~RXLINKACTIVEACK  & ~TXLINKACTIVEREQ ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXSTOP} ; 
            end  
            else if ( ~TXLINKACTIVEREQ) begin
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXDEACT} ; 
            end 
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXRUN,RXDEACT} ; 
           end
        end
        {TXSTOP,RXRUN}: begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = 1'b1;

            if( ~RXLINKACTIVEREQ_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXDEACT} ; 
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXRUN} ; 
           end
        end
        {TXDEACT,RXDEACT}: begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = ~rx_all_credits_returned;

            if(~RXLINKACTIVEACK & ~TXLINKACTIVEACK_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXSTOP} ; 
            end  
            else if ( ~RXLINKACTIVEACK )                 begin
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXSTOP} ;
            end  
            else if ( ~TXLINKACTIVEACK_sync ) begin
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXDEACT} ; 
            end 
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXDEACT} ; 
           end
        end
        {TXSTOP,RXDEACT}: begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = ~rx_all_credits_returned;

            if(~RXLINKACTIVEACK & TXLINKACTIVEREQ ) begin  //NOTE
            {nxt_tx_state,nxt_rx_state} = {TXACT,RXSTOP} ;
            end  
            else if(~RXLINKACTIVEACK  ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXSTOP} ; 
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXDEACT} ; 
           end
        end
        {TXDEACT,RXSTOP}: begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = 1'b0;

            if( RXLINKACTIVEREQ_sync & ~TXLINKACTIVEACK_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXACT} ; 
            end  
            else if ( RXLINKACTIVEREQ_sync )                 begin
            {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXACT} ;
            end  
            else if ( ~TXLINKACTIVEACK_sync ) begin
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXSTOP} ; 
            end 
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXSTOP} ; 
           end
        end
        {TXDEACT,RXACT}: begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = 1'b0;

            if(~TXLINKACTIVEACK_sync ) begin 
            {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXACT} ; 
            end  
           else begin
           {nxt_tx_state,nxt_rx_state} = {TXDEACT,RXACT} ; 
           end
        end
        default : begin
           TXLINKACTIVEREQ = 1'b0;
           RXLINKACTIVEACK = 1'b0;
           {nxt_tx_state,nxt_rx_state} = {TXSTOP,RXSTOP} ; 
        end
        
      endcase
end
  
//=============================================================================
// System Coherency Interface
//=============================================================================

wire SYSCOACK_set   = (co_state_connect    &  SYSCOREQ_sync & co_state_connect_ready & rx_state_run & tx_state_run);
wire SYSCOACK_reset = (co_state_disconnect & ~SYSCOREQ_sync & co_state_disconnect_ready) | co_state_disabled;
wire SYSCOACK_en    = SYSCOACK_set | SYSCOACK_reset;
wire SYSCOACK_in    = SYSCOACK_set ? 1'b1 : SYSCOACK_reset ? 1'b0 : SYSCOACK;

\=u.dffre(1, 'SYSCOACK', 'SYSCOACK_in', "1'b0", 'SYSCOACK_en', 'clk', 'reset_n')=\

assign co_state_disabled   = ~SYSCOREQ_sync & ~SYSCOACK;
assign co_state_connect    =  SYSCOREQ_sync & ~SYSCOACK;
assign co_state_enabled    =  SYSCOREQ_sync &  SYSCOACK;
assign co_state_disconnect = ~SYSCOREQ_sync &  SYSCOACK;

endmodule
