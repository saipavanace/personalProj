//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// This module defines aiu unit level 
//=============================================================================
\jsend

\jsbegin
var u						= obj.lib;
var m						= obj.userLib;
var bundleFunctions			= m.bundleFunctions;
var newToOldStyleInterface	= m.newToOldStyleInterface.bind( null, obj.userLib );
var flattenInterface		= m.flattenInterface;
var vlogGen			        = m.vlogGen();
var vlogSignal		        = vlogGen.vlogSignal;
var wTotalSmiPortsNum       = obj.lib.getParam('wTotalSmiPortsNum');

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };


// Function that returns wire declarations of an old-style interface (with properties 'name' and 'signals')
function declareOldStyleInterface ( oldStyleInterface ) {
	return bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}


// Function that returns wire declarations of a new-style interface
function declareNewStyleInterface ( newStyleInterface ) {
	const oldStyleInterface		= newToOldStyleInterface( newStyleInterface );
	const flatOldInterface		= flattenInterface ( oldStyleInterface );
	return declareOldStyleInterface( flatOldInterface );
}


\jsend

\jsbegin
//=============================================================================
// Parameters
//=============================================================================
var useSysEvtCoh        = u.getParam('useSysEvtCoh');

var assertOn            = u.getParam('assertOn');
var fnCsrAccess         = u.getParam('fnCsrAccess');
var nativeInterfacePipe = u.getParam('nativeInterfacePipe');
var usePma              = u.getParam('usePma');
var PmaInfo             = u.getParam('PmaInfo');
var qosInfo             = u.getParam('qosInfo');
var useQos              = u.getParam('useQos');
var useResiliency       = u.getParam('useResiliency');
var ResilienceInfo      = u.getParam('ResilienceInfo');
var interfaces          = u.getParam('interfaces');
var fnEnableQos         = u.getParam('fnEnableQos');

var concParams          = u.getParam('concParams');
var wSysReqOp           = concParams.sysReqParams.wSysReqOp;

var req_flit_interface  = u.getParam('req_flit_interface');
var rsp_flit_interface  = u.getParam('rsp_flit_interface');
var dat_flit_interface  = u.getParam('dat_flit_interface');
var snp_flit_interface  = u.getParam('snp_flit_interface');

var SMI_TX_INTF         = m.ParamDefaultGet(u, 'SMI_TX_INTF', 'array', []);
var SMI_RX_INTF         = m.ParamDefaultGet(u, 'SMI_RX_INTF', 'array', []);
var CONC_TX_INTF        = m.ParamDefaultGet(u, 'CONC_TX_INTF', 'array', []);
var CONC_RX_INTF        = m.ParamDefaultGet(u, 'CONC_RX_INTF', 'array', []);

var useEventOutInt 	= m.ParamDefaultGet(u, 'useEventOutInt', 'boolean', false);
var useEventInInt 	= m.ParamDefaultGet(u, 'useEventInInt', 'boolean', false);


var DTWRspInterface     = u.getParam('concertoInterfaces', 'DTWRspInterface');
var nTraceRegisters	= u.getParam('nTraceRegisters');
var nUnitTraceBufSize	= u.getParam('nUnitTraceBufSize');

var nRobEntries        = u.getParam('nRobEntries');
var wRobEntries        = log2ceil(nRobEntries+1);

var nPerfCounters	= u.getParam('nPerfCounters');

var useSysReqSender 	= u.getParam('useSysReqSender');
var useSysReqReceiver   = u.getParam('useSysReqReceiver');

var index               = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_dbg_rsp_'; });

// If the DTW Trace Channel Exists.
var trace_defined = (index != -1);

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (trace_defined){ 
  var DTWDbgRspInterface    = u.getParam('concertoInterfaces', 'DTWDbgRspInterface');
  
  index                       = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_dbg_req_'; });
  var DTWDbgReqInterface    = u.getParam('concertoInterfaces', 'DTWDbgReqInterface');
} else {
  index                       = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_rsp_'; });
  var DTWDbgRspInterface    = u.getParam('concertoInterfaces', 'DTWRspInterface');
  index                       = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_req_'; });
  var DTWDbgReqInterface    = u.getParam('concertoInterfaces', 'DTWReqInterface');
}
var wData              = u.getParam('wData');
var wAddr              = u.getParam('wAddr');
var wSysAddr           = 52;  
var port_id_width      = u.getParam('wFPortId');
var node_id_width      = u.getParam('wNUnitId');
var unit_id_width      = u.getParam('wFUnitId');
var wFPortId           = u.getParam('wFPortId');
var wNUnitId           = u.getParam('wNUnitId');
var wFUnitId           = u.getParam('wFUnitId');
var wMsgId             = u.getParam('wMsgId');
var rpn_id_width       = u.getParam('wRpn');
var nrri_id_width      = u.getParam('wNrri');
var initiator_id_width = u.getParam('wInitiatorId');
var mesg_id_width      = u.getParam('wMsgId');
var cm_type            = u.getParam('cmType');
var chi_cmd            = u.getParam('chiCmd');  
var implVerId          = u.getParam('implVerId');
var engVerId           = u.getParam('engVerId');
var csr                = u.getParam('csr');
var chi_a              = u.getParam('chi_a');
var chi_b              = u.getParam('chi_b');
var chi_e              = u.getParam('chi_e');
var cmpInfo            = u.getParam('cmpInfo');
var cmType             = u.getParam('cmType');
var nOttCtrlEntries    = cmpInfo.nOttCtrlEntries;
var nCHIReqInFlight    = cmpInfo.nCHIReqInFlight;
var nOttStashEntries   = cmpInfo.nStshSnpInFlight;
var wEntries           = Math.max(log2ceil(nOttCtrlEntries),1) ;
var nDvmSnpInFlight    = cmpInfo.nDvmSnpInFlight;
var nTotalSnpsInFlight = cmpInfo.nSnpInFlight + cmpInfo.nDvmSnpInFlight;
var nSttEntries        = nTotalSnpsInFlight > 128 ? 128 : nTotalSnpsInFlight; 
var nSnpReqSkidBufSize = nTotalSnpsInFlight > 128 ? nTotalSnpsInFlight - 128 : 0;

var wOttEntries =  Math.max(log2ceil(nOttCtrlEntries), 1) ;
var wOttEntriesplusone = wOttEntries + 1;
var wpmon_event_ott_pad0 = 8 - wOttEntriesplusone;

var nDmis              = u.getParam('nDmis');
var nDiis              = u.getParam('nDiis');
var nDCEs              = u.getParam('nDCEs');
var nAiuConnectedDces  = u.getParam('nAiuConnectedDces');
var nDVEs              = u.getParam('nDVEs');
var nregions           = u.getParam('nGPRA');
var src_id_width       = initiator_id_width - port_id_width;

var wFlit_Qos              = interfaces.chiInt.params.wQos;
var wFlit_TgtID            = interfaces.chiInt.params.TgtID;
var wFlit_SrcID            = interfaces.chiInt.params.SrcID;
var wFlit_TxnID            = interfaces.chiInt.params.TxnID;
var wFlit_Addr             = interfaces.chiInt.params.wAddr;
var wFlit_Addr_snp         = wFlit_Addr - 3
var wFlit_NS               = interfaces.chiInt.params.NS;
var wFlit_Data             = interfaces.chiInt.params.wData;
var wFlit_TagOp            = interfaces.chiInt.params.TagOp;
var wFlit_Tag              = wFlit_Data/32;
var wFlit_TU               = wFlit_Data/128;
 
var wReqFlit_ReturnNID     = interfaces.chiInt.params.ReturnNID;
var wReqFlit_StashNIDValid = interfaces.chiInt.params.StashNIDValid;
var wReqFlit_ReturnTxnID   = interfaces.chiInt.params.ReturnTxnID;
var wReqFlit_Opcode        = interfaces.chiInt.params.REQ_Opcode;
var wReqFlit_Size          = interfaces.chiInt.params.Size;
var wReqFlit_LikelyShared  = interfaces.chiInt.params.LikelyShared;
var wReqFlit_AllowRetry    = interfaces.chiInt.params.AllowRetry;
var wReqFlit_Order         = interfaces.chiInt.params.Order;
var wReqFlit_PCrdType      = interfaces.chiInt.params.PCrdType;
var wReqFlit_MemAttr       = interfaces.chiInt.params.MemAttr;
var wReqFlit_SnpAttr       = interfaces.chiInt.params.SnpAttr;
var wReqFlit_LPID          = interfaces.chiInt.params.LPID;
var wReqFlit_Excl          = interfaces.chiInt.params.Excl;
var wReqFlit_ExCompAck     = interfaces.chiInt.params.ExCompAck;
var wReqFlit_TraceTag      = interfaces.chiInt.params.TraceTag;
var wReqFlit_Rsvdc         = interfaces.chiInt.params.REQ_RSVDC;

var wReqFlit_ReturnNID_local     = (wReqFlit_ReturnNID > 0)     ? wReqFlit_ReturnNID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wReqFlit_StashNIDValid_local = (wReqFlit_StashNIDValid > 0) ? wReqFlit_StashNIDValid : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wReqFlit_ReturnTxnID_local   = (wReqFlit_ReturnTxnID > 0)   ? wReqFlit_ReturnTxnID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wReqFlit_TraceTag_local      = (wReqFlit_TraceTag > 0)      ? wReqFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wRspFlit_Opcode        = interfaces.chiInt.params.RSP_Opcode;
var wRspFlit_RespErr       = interfaces.chiInt.params.RespErr;
var wRspFlit_Resp          = interfaces.chiInt.params.Resp;
var wRspFlit_FwdState      = interfaces.chiInt.params.FwdState;
var wRspFlit_DBID          = interfaces.chiInt.params.DBID;
var wRspFlit_PCrdType      = interfaces.chiInt.params.PCrdType;
var wRspFlit_TraceTag      = interfaces.chiInt.params.TraceTag;

var wRspFlit_FwdState_local = (wRspFlit_FwdState > 0) ? wRspFlit_FwdState : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wRspFlit_PCrdType_local = (wRspFlit_PCrdType > 0) ? wRspFlit_PCrdType : /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */ 0;
var wRspFlit_TraceTag_local = (wRspFlit_TraceTag > 0) ? wRspFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wSnpFlit_FwdNID        = interfaces.chiInt.params.FwdNID;
var wSnpFlit_FwdTxnID      = interfaces.chiInt.params.FwdTxnID;
var wSnpFlit_Opcode        = interfaces.chiInt.params.SNP_Opcode;
var wSnpFlit_DoNotGoToSD   = interfaces.chiInt.params.DoNotGoToSD;
var wSnpFlit_RetToSrc      = interfaces.chiInt.params.RetToSrc;
var wSnpFlit_TraceTag      = interfaces.chiInt.params.TraceTag;

var wSnpFlit_FwdNID_local      = (wSnpFlit_FwdNID > 0)      ? wSnpFlit_FwdNID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_FwdTxnID_local    = (wSnpFlit_FwdTxnID > 0)    ? wSnpFlit_FwdTxnID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_DoNotGoToSD_local = (wSnpFlit_DoNotGoToSD > 0) ? wSnpFlit_DoNotGoToSD : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_RetToSrc_local    = (wSnpFlit_RetToSrc > 0)    ? wSnpFlit_RetToSrc : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wSnpFlit_TraceTag_local    = (wSnpFlit_TraceTag > 0)    ? wSnpFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wDatFlit_Homenode_ID   = interfaces.chiInt.params.Homenode_ID;
var wDatFlit_Opcode        = interfaces.chiInt.params.DAT_Opcode;
var wDatFlit_RespErr       = interfaces.chiInt.params.RespErr;
var wDatFlit_Resp          = interfaces.chiInt.params.Resp;
var wDatFlit_DataSource    = interfaces.chiInt.params.DataSource;
var wDatFlit_CBusy         = interfaces.chiInt.params.CBusy;
var wDatFlit_FwdState      = interfaces.chiInt.params.FwdState;
var wDatFlit_DBID          = interfaces.chiInt.params.DBID;
var wDatFlit_CCID          = interfaces.chiInt.params.CCID;
var wDatFlit_DataID        = interfaces.chiInt.params.DataID;
var wDatFlit_TraceTag      = interfaces.chiInt.params.TraceTag;
var wDatFlit_Rsvdc         = interfaces.chiInt.params.DAT_RSVDC;
var wDatFlit_BE            = interfaces.chiInt.params.BE;
var wDatFlit_Poison        = wDatFlit_BE/8 ; 
var enPoison               = (interfaces.chiInt.params.enPoison == true) ? true : false;
var wDatFlit_Poison        = enPoison ? wDatFlit_BE/8 : 0;
 
var wDatFlit_Homenode_ID_local = (wDatFlit_Homenode_ID > 0) ? wDatFlit_Homenode_ID : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wDatFlit_FwdState_local    = (wDatFlit_FwdState > 0)    ? wDatFlit_FwdState : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;
var wDatFlit_TraceTag_local    = (wDatFlit_TraceTag > 0)    ? wDatFlit_TraceTag : /* istanbul ignore next env ncore_3p6, ncore_3p7 */ 0;

var wStarvThreshold = m.ParamDefaultGet(u, 'wStarvThreshold', 'int', fnEnableQos*16);

var nArbFifoEntries = Math.min(nOttCtrlEntries, Math.max(nCHIReqInFlight, 24));
var wArbFifoEntries = Math.max(log2ceil(nArbFifoEntries), 1);
var wArbFifoEntriesplusone = wArbFifoEntries + 1;

var wOttCtrlEntries = Math.max(log2ceil(nOttCtrlEntries),1);
var wOttCtrlEntriesplusone = wOttCtrlEntries + 1;

var nCoherencyAgents        = nAiuConnectedDces + 1; //1 for DVE
var nEventAgentsForReceiver = nAiuConnectedDces;
var wEventTimeout           = 20; //must be the same value as wProtocolTimeout
var wProtocolTimeout        = 20;

//=============================================================================
// Interfaces
//=============================================================================
var clkInterfaceJson       = u.getParam('clkInterfaceJson');
var clkInterface           = u.getParam('clkInterface');
var clkInterfaceName       = u.getParam('clkInterfaceName');
var intClkInterface        = { clk: 1, reset_n: 1 };

var unitIdInterface        = u.getParam('unitIdInterface');
var unitIdInterfaceName    = u.getParam('unitIdInterfaceName');

var apbInterface           = u.getParam('apbInterface');
var apbInterfaceName       = u.getParam('apbInterfaceName');

if (usePma) {
var qInterface             = u.getParam('qInterface');
var qInterfaceName         = u.getParam('qInterfaceName');
}

var dceIdInterface         = u.getParam('dceIdInterface');
var dceIdInterfaceName     = u.getParam('dceIdInterfaceName');

var dveIdInterface         = u.getParam('dveIdInterface');
var dveIdInterfaceName     = u.getParam('dveIdInterfaceName');

var dmiIdInterface         = u.getParam('dmiIdInterface');
var dmiIdInterfaceName     = u.getParam('dmiIdInterfaceName');

var diiIdInterface         = u.getParam('diiIdInterface');
var diiIdInterfaceName     = u.getParam('diiIdInterfaceName');

var caiuIdInterface        = u.getParam('caiuIdInterface');
var caiuIdInterfaceName    = u.getParam('caiuIdInterfaceName');

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
 if (useEventInInt) {
  var eventRequestOutInterface      = newToOldStyleInterface( interfaces.eventRequestOutInt );
 }
 }
var irqInterface           = u.getParam('irqInterface');
var irqInterfaceName       = u.getParam('irqInterfaceName');

var chiInterface           = u.getParam('chiInterface');
var chiInterfaceName       = u.getParam('chiInterfaceName');

var internalFaultInterface = u.getParam('internalFaultInterface');

var concertoInterfaces     = u.getParam('concertoInterfaces');

var intf_size_width        = concertoInterfaces.SNPRspInterface.intf_size
var wQos                   = concertoInterfaces.CMDReqInterface.qos

var dtw_req_width = bundleFunctions.getBundleWidth( concertoInterfaces.DTWReqInterface, [], obj.lib.bundle);

var dtw_dwid_width = concertoInterfaces.DTWReqInterface.dwid;

var placeInterface         = u.getParam('placeInterface');
var placeInterfaceName     = u.getParam('placeInterfaceName');
var placeInterfaceDef      = u.getParam('placeInterfaceDef');
var placeInterfaceSkip     = u.getParam('placeInterfaceSkip');

// Register Protection interface params generation
var regProtInterface        = {};
var regProtInterfaceName    = '';
var regProtStyle            = null;

//=============================================================================
//Internal interfaces - FLITS
//=============================================================================

var dat_flit_width_with_poison = bundleFunctions.getBundleWidth(dat_flit_interface ,[],obj.lib.bundle);

//=============================================================================
// Trace CSR Interface
//=============================================================================

const traceCaptureRegisters		    = m.genTraceCaptureRegisters(csr.spaceBlock[0].registers, "CAIU");
const traceCaptureCsrIfGenerator   	    = m.createCSRInterfaceGenerator( traceCaptureRegisters );


// Define interfaces for Trace blocks and create wires that connect them
const traceTriggerRegisters		= m.genTraceTriggerRegisters(csr.spaceBlock[0].registers, "CAIU", { nTraceRegisters });
const traceCsrIfGenerator	= m.createCSRInterfaceGenerator( traceTriggerRegisters );
const traceTrigCsrInterface	= { name: "CAIU", signals: traceCsrIfGenerator.signalBundle("slave") };
const nativeTrigger			= {
	name: "native_trig_",
	signals: {
			trace: wReqFlit_TraceTag_local,
			addr: wSysAddr,
			dii_hit: 1,
			dmi_hit: 1,
			hui: 5,
			size_of_ig: 4,
			opcode: wReqFlit_Opcode, 
			aw: 0,
			ar: 0,
			memattr: wReqFlit_MemAttr,
			user: wReqFlit_Rsvdc
	}
};

//=============================================================================
// PMON CSR Interface
//=============================================================================
// Function to generate pmon evtInterfaces
function genPmonEvtInterfaces( table ) {
	const result				= [];

	for(let i=0; i<table.length; i++) {
		result.push({
			name:			"evt"+i+"_",
			direction:		"slave",
			"interface":	"InterfaceEvt",
			params:			{ width: table[i].width }
		});
	}
	
	return result;
}


const pmonRegisters				= m.genNcorePmonRegisters(csr.spaceBlock[0].registers, "CAIU", { nPerfCounters });
const pmonCsrIfGenerator		= m.createCSRInterfaceGenerator( pmonRegisters );
const oldStylePmonCsrInterface	= { name: "CAIU", signals: pmonCsrIfGenerator.signalBundle("master") };

//=============================================================================
// CCR (Credit control) CSR Interface
//=============================================================================
var nCCR                        = Math.max( nDiis, nDCEs, nDmis ); // Number of CCR (credit control) registers
var ccrRegisters                = m.genNcoreCCRRegisters(csr.spaceBlock[0].registers, "CAIU", { nCCR });
var ccrCsrIfGenerator           = m.createCSRInterfaceGenerator( ccrRegisters );
var ccrCsrInterface             = { name: "CAIU", signals: ccrCsrIfGenerator.signalBundle('slave') };

//=============================================================================
// SMI interface params generation
//=============================================================================
for (i=0; i < SMI_TX_INTF.length; i++) {
    obj.userLib.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].signals, obj.lib.port);
    if (SMI_TX_INTF[i].params.dpPresent) {
        obj.userLib.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].dpSignals, obj.lib.port);
    }
}
for (i=0; i<SMI_RX_INTF.length; i++) {
    obj.userLib.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].signals, obj.lib.port);
    if (SMI_RX_INTF[i].params.dpPresent) {
        obj.userLib.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].dpSignals, obj.lib.port);
    }
}

//=============================================================================
// Clock interface port declaration
//=============================================================================
obj.lib.interface(clkInterfaceName,    'slave' , clkInterface);

obj.lib.port('input', clkInterfaceName+'sync_reset_n', 1);

obj.lib.port('input', 'bist_timeout_trigger', 1);

//=============================================================================
// Connectivity bit vector
//=============================================================================
u.port('input', 'hexAiuDceVec', nDCEs);
u.port('input', 'hexAiuDmiVec', nDmis);
u.port('input', 'hexAiuDiiVec', nDiis);

//=============================================================================
// FUnitId array for connected DCEs to this AIU
//=============================================================================
u.port('input', 'hexAiuConnectedDceFunitId', nAiuConnectedDces * wFUnitId);

//=============================================================================
// ID Interfaces port declaration
//=============================================================================
obj.lib.interface(unitIdInterfaceName, 'slave' , unitIdInterface);
obj.lib.interface(irqInterfaceName,    'master', irqInterface);
obj.lib.interface(dceIdInterfaceName,  'slave' , dceIdInterface);
obj.lib.interface(dveIdInterfaceName,  'slave' , dveIdInterface);
obj.lib.interface(dmiIdInterfaceName,  'slave' , dmiIdInterface);
obj.lib.interface(diiIdInterfaceName,  'slave' , diiIdInterface);
obj.lib.interface(caiuIdInterfaceName, 'slave' , caiuIdInterface);
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
 if (useEventInInt) {
  obj.lib.interface( eventRequestOutInterface.name, 'master', eventRequestOutInterface.signals);
 } 
}
//=============================================================================
// CSR Interface port declaration
//=============================================================================
obj.lib.interface(apbInterfaceName, 'slave', apbInterface);

//=============================================================================
// Q Channel Interface port declaration
//=============================================================================
if (usePma) {
obj.lib.interface(qInterfaceName, 'slave' , qInterface);
}

//=============================================================================
// CERR Threshold for Fault Checker port declaration
//=============================================================================
obj.lib.port('output','cerr_threshold', 32);

//=============================================================================
// Internal Fault Interface port declaration
//=============================================================================
obj.lib.interface('chi_aiu_', 'master', internalFaultInterface);

//=============================================================================
// CHI Interface port declaration
//=============================================================================
obj.lib.interface(chiInterfaceName, 'slave', chiInterface);

//=============================================================================
// Placeholder Interface declaration
//=============================================================================
if (ResilienceInfo.enableNativeIntfProtection){
obj.lib.interface(placeInterfaceName, 'master', placeInterface);
}

//=============================================================================
// Trace Capture Ports
//=============================================================================
obj.lib.interface('csr_trace_','master',traceCaptureCsrIfGenerator.signalBundle('slave'));
obj.lib.interface('dtw_dbg_req_','slave',DTWDbgReqInterface);
obj.lib.interface('dtw_dbg_rsp_','master',DTWDbgRspInterface);
u.port('input', 'chiaiu_en_debug_bist', 1);
u.port('input', 'trace_capture_busy', 1);
u.port('input', 'pm_trace_messages_dropped', wTotalSmiPortsNum);
u.port('input', 'pm_trace_messages_captured', wTotalSmiPortsNum);

//=============================================================================
// Master Trigger Interface
//=============================================================================
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if( interfaces.masterTriggerInt && !interfaces.masterTriggerInt._SKIP_) {
  var masterTriggerInterface      = newToOldStyleInterface( interfaces.masterTriggerInt );
  obj.lib.interface( masterTriggerInterface.name, 'slave', masterTriggerInterface.signals);
}

//=============================================================================
//EventRequestInterface
//=============================================================================
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if( useEventOutInt ) {
  var eventRequestInInterface      = newToOldStyleInterface( interfaces.eventRequestInInt );
  obj.lib.interface( eventRequestInInterface.name, 'slave', eventRequestInInterface.signals);
}

//=============================================================================
// Local functions
//=============================================================================
// Function to convert an interface {{name, signals}) to a { modulePrefix, localPrefix, interface} object
// that is used to specify how local interfaces are mapped to module interfaces of an instance
function getModuleLocalPrefixAndInterface (intrface) {
	const modulePrefix		= intrface.name;
	const localPrefix		= intrface.name;
	return { modulePrefix, localPrefix, "interface": intrface.signals };
}


// Interface Parity Check-Error signals are generated based on
// what channels exist in the the native interface signal bundle
function genChkErrSignals( nativeInterfaceBundle ) {
  var signals               = {};

  Object.entries( nativeInterfaceBundle ).forEach( ([key, value]) => {
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
    if( typeof value === 'object' ) {  // This means its a channel bundle
      signals[key+"perr"]     = 1;

    } else {  // this means its a signal
      signals["def_"+"perr"]     = 1;

    }
  });
 
  return signals;
}
\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

\jsbegin
//=============================================================================
// Wires
//=============================================================================
const clkInterfaceWithName = { name: clkInterfaceName, signals: intClkInterface };

const clk16Interface	= { name: clkInterfaceWithName.name+"16_", signals: clkInterfaceWithName.signals };

// Create a CHI interface instance that includes functional signals only (no *_chk signals)
// by forcing checkType to 'NONE'
var funcChiInterfaceParams     = Object.assign({}, interfaces.chiInt.params, { "checkType": "NONE" });
var funcChiInterfaceNewStyle   = Object.assign({}, interfaces.chiInt, { "name": chiInterfaceName+'func_', "params": funcChiInterfaceParams });
var funcChiInterface           = newToOldStyleInterface( funcChiInterfaceNewStyle );
var chkErrInterface            = { name: "chk_", signals: genChkErrSignals( chiInterface ) };
\jsend

// Use bundleFunctions.wiresFromInterface to declare clk16Interface
\=bundleFunctions.wiresFromInterface(clk16Interface.name, clk16Interface.signals, [], obj.lib.bundle)=\

wire dff_enable = 1'b1;

wire csr_access_nrs_valid, csr_one_dvm_sync;
wire nrs_region_hit;
wire gpr_region_hit;
wire bra_region_hit;
wire unconnected_dce_access;
wire unconnected_dmi_access;
wire unconnected_dii_access;

wire [\=wSysReqOp-1=\:0] SYSREQ_OP_EVENT = \=wSysReqOp=\'d3;

wire [1:0] GPRAR_NSX;

wire [1:0] w_starve;

wire [\=wRobEntries-1=\:0] pmon_chi_interleaved_num;
wire [\=wOttEntriesplusone-1=\:0] pmon_num_active_entries;
wire pmon_starvation_event;
wire pmon_addr_collision;
wire pmon_agent_event_out;
wire pmon_noc_sys_req_event;
wire [\=cmpInfo.nOttCtrlEntries-1=\:0] ott_alloc;
wire [\=cmpInfo.nOttCtrlEntries-1=\:0] ott_dealloc;

wire goto_sleep, asleep;
wire txdat_valid;
wire txdat_ready;
wire ott_rx_data_valid ;
wire stt_rx_data_valid ;
wire [\=dtw_dwid_width-1=\:0] OTT_RXDAT_DWID;
wire [\=dtw_dwid_width-1=\:0] STT_RXDAT_DWID;
wire OTT_RXDAT_LAST;
wire STT_RXDAT_LAST;
wire ott_chi_rx_dat_flitv_d1;
wire stt_chi_rx_dat_flitv_d1;
wire [\=wFlit_TxnID-1=\:0] ott_dtw_data_TxnID;
wire dtw_data_valid;
wire [\=unit_id_width-1=\:0] map_target_f_unit_id;
wire [\=unit_id_width-1=\:0] map_dce_f_unit_id;
wire [\=nOttStashEntries=\-1:0] ott_initvec_stash;
wire [\=nOttStashEntries=\-1:0] entry_validvec_stash;
wire unsupported_dii_cmd;
wire transport_uce;
wire transport_ce;
wire dtr_req_rx_ready;
wire rx_rsp_valid;
wire chi_tx_snp_req_valid;
wire chi_tx_snp_req_ready;
wire rn_rsp_valid;
wire rn_rsp_ready;
wire stash_entries_full;
wire ott_busy;
wire age_arb_active;
wire dce_id_valid;
wire dmi_id_valid;
wire dii_id_valid;
wire nrs_selfidr_hit;
wire addr_map_error;
wire q_csr_access_nrs_error, q_illegal_csr_access_format;
wire q_bra_region_hit;
wire q_gpr_region_hit;
wire q_nrs_region_hit;
wire q_unconnected_dmi_access;
wire q_unconnected_dii_access;
wire q_unconnected_dce_access;
wire q_addr_map_error_raw;
wire q_addr_map_error;
wire q_nsx_access_error;
wire no_credits_access_error;
wire [\=wAddr-1=\:0] no_credits_access_error_addr;
wire stt_busy;
wire chi_snp_resp_ns;
wire addressing_error_hit_multi;
wire addressing_error_hit_none;
wire CAIUINFOR_Valid_out;
wire CAIUTCR_RDisable_out;
wire NRSBLR_BALoaded_out;
wire [15:0]  CAIUQOSCR_EventThreshold_out;
wire CAIUQOSSR_EventStatus_out;
wire CAIUQOSSR_EventStatusCountOverflow_out;
wire [15:0]  CAIUQOSSR_EventStatusCount_out;

wire CAIUTAR_SysCoError_out;
wire CAIUTAR_SysCoAttached_out;
wire CAIUTAR_SysCoConnecting_out;
wire CAIUTCR_SysCoAttach_out;
wire CAIUTCR_SysCoDisable_out;
wire CAIUTCR_EventDisable_out;

wire CAIUNRSAR_NRSAR_out;

wire csr_sys_evt_sender_enable;
wire csr_sys_evt_sender_err_vld;
wire [\=wFUnitId-1=\:0] csr_sys_evt_sender_err_f_unit_id;
wire csr_sys_evt_sender_err_protocol_sys;
wire csr_sys_evt_sender_err_protocol_timeout;
wire csr_sys_evt_sender_err_event_timeout;

wire req_valid;
wire [\=intf_size_width-1=\:0] RXDATFLIT_target_intf_size;
wire RXDATFLIT_snp_addr_bit3;
wire RXDATFLIT_delay_dtw_valid;
wire timeout_error;
wire [\=wAddr=\-1:0] timeout_addr;
wire timeout_ns;
wire timeout_cmd_read;
wire timeout_cmd_write;
wire timeout_cmd_dataless;
wire timeout_cmd_dvm;
wire timeout_cmd_writeevictorevict;
wire rn_rsp_out_write;
wire [\=req_flit_interface.TxnID-1=\:0] timeout_cmd_txn_id;
wire [30:0] csr_timeout_threshold;
wire csr_timeout_ref_en;
wire dvm_entry_write;
\js if(fnEnableQos) {
wire [\=wStarvThreshold-1=\:0] csr_starv_count_threshold;
\js }
wire aiu_node_stash_target_init;
wire [\=nOttStashEntries-1=\:0] sel_initvec_stash;
wire [\=nOttStashEntries-1=\:0] snp_req_order_fifo__pop_sel_initvec_stash;

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

wire sys_evt_coh_busy;

wire my_sysco_req;
wire my_sysco_ack;
wire my_co_state_disabled;
wire my_co_state_connect;
wire my_co_state_enabled;
wire my_co_state_disconnect;

wire csr_sys_evt_receiver_enable;
wire csr_sys_evt_receiver_err_vld;
wire csr_sys_evt_receiver_err_event_timeout;
wire [\=wFUnitId-1=\:0] csr_sys_evt_receiver_err_f_unit_id;

wire csr_sys_coh_sender_enable;
wire csr_sys_coh_sender_activate;
wire csr_sys_coh_sender_connecting;
wire csr_sys_coh_sender_attached;
wire csr_sys_coh_sender_syscoerr_set;
wire csr_sys_coh_sender_syscoerr_clr;
wire csr_sys_coh_sender_err_detected;
wire [\=wFUnitId-1=\:0] csr_sys_coh_sender_err_f_unit_id;
wire csr_sys_coh_sender_err_protocol_sys;
wire csr_sys_coh_sender_err_protocol_timeout;

wire [\=wEventTimeout-1=\:0] csr_event_timeout_value;
wire [\=wProtocolTimeout-1=\:0] csr_sys_evt_protocol_timeout_value;
wire [\=wProtocolTimeout-1=\:0] csr_sys_coh_protocol_timeout_value;

wire hwp_sysco_req;
wire hwp_sysco_ack;
wire csr_sysco_req;
wire csr_sysco_ack; \jsbegin
/* istanbul ignore if env ncore_3p6, ncore_3p7 */
if (!useEventInInt) { \jsend
  wire event_out_req;
  wire event_out_ack; \jsbegin
 }
} \jsend

wire outstanding_coherent_count_zero;
wire tracetagTrigger;

wire chi_snp_resp_error;
wire [1:0] chi_snp_resp_err_info;
wire [\=snp_flit_interface.TxnID-1=\:0] chi_snp_resp_txn_id;

wire [\=dat_flit_width_with_poison-1=\:0] chi_rx_dat_flit_org;
wire                                      chi_rx_dat_flitv_org;
wire                                      chi_rx_dat_valid;
wire                                      chi_rx_dat_flitv_backpressure;
wire                                      stt_chi_rx_dat_flitv_backpressure;
wire                                      ott_chi_rx_dat_flitv_backpressure;
  
wire [\=wOttCtrlEntries=\:0 ] num_free_entries;
wire [\=wArbFifoEntries=\:0] num_free_entries_arb;
wire tie1 = 1'b1;
wire tie0 = 1'b0;
wire [31:0] aiu_id_reg_rd_data;
wire [\=wAddr=\-1:0] chi_snp_resp_addr;
wire [\=unit_id_width-1=\:0] dii_f_unit_id;
wire [\=unit_id_width-1=\:0] dmi_f_unit_id;
wire [\=unit_id_width-1=\:0] dce_f_unit_id;
wire chi_tx_snp_flitv_a1;
wire [2:0] ott_dtw_size;

wire stt_data_ready;
wire ott_data_ready;

wire co_state_disabled_org;
wire co_state_connect_org;
wire co_state_enabled_org;
wire co_state_disconnect_org;

wire co_state_disabled;
wire co_state_connect;
wire co_state_enabled;
wire co_state_disconnect;

wire co_state_connect_ready;
wire co_state_disconnect_ready; \jsbegin

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (useEventOutInt) { \jsend
  wire event_in_targets = 1'b1; \jsbegin 
}\jsend

\=bundleFunctions.wiresFromInterface(oldStylePmonCsrInterface.name, oldStylePmonCsrInterface.signals, [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface(ccrCsrInterface.name, ccrCsrInterface.signals, [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface(traceTrigCsrInterface.name, traceTrigCsrInterface.signals, [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface(nativeTrigger.name, nativeTrigger.signals, [], obj.lib.bundle)=\
//



\=bundleFunctions.wiresFromInterface(funcChiInterface.name+'pipe_', funcChiInterface.signals, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface(chiInterfaceName+'placeholder_', chiInterface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface(funcChiInterface.name, funcChiInterface.signals, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('RXREQFLIT_', req_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('RXRSPFLIT_', rsp_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('OTT_RXDATFLIT_', dat_flit_interface, ['Data','BE','TraceTag','DataID','CCID','RespErr','Homenode_ID','TgtID','QoS','Resp'], obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('STT_RXDATFLIT_', dat_flit_interface, ['Data','BE','TraceTag','DataID','CCID','RespErr','Homenode_ID','TgtID','QoS'], obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('OTT_RXDAT_'    , dat_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('STT_RXDAT_'    , dat_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('TXSNPFLIT_', snp_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('TXRSPFLIT_', rsp_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('TXDATFLIT_', dat_flit_interface, [],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('ott_cmd_req_' , concertoInterfaces.CMDReqInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('cmd_req_' , concertoInterfaces.CMDReqInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('cmd_rsp_' , concertoInterfaces.CMDRspInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('str_req_' , concertoInterfaces.STRReqInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('str_rsp_' , concertoInterfaces.STRRspInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtr_req_rx_' , concertoInterfaces.DTRReqRxInterface,['ready'],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtr_rsp_tx_' , concertoInterfaces.DTRRspTxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtr_req_tx_' , concertoInterfaces.DTRReqTxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('stt_dtr_req_tx_' , concertoInterfaces.DTRReqTxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtr_rsp_rx_' , concertoInterfaces.DTRRspRxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtw_req_pre_' , concertoInterfaces.DTWReqInterface ,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtw_req_' , concertoInterfaces.DTWReqInterface ,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('ott_dtw_req_mst_' , concertoInterfaces.DTWReqInterface,[],obj.lib.bundle )=\

\js if (chi_e) {
\=bundleFunctions.wiresFromInterface('ott_dtwzero_req_mst_' , concertoInterfaces.DTWReqInterface,[],obj.lib.bundle )=\
\js }

\=bundleFunctions.wiresFromInterface('stt_dtw_req_mst_' , concertoInterfaces.DTWReqInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('dtw_rsp_' , concertoInterfaces.DTWRspInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('snp_req_' , concertoInterfaces.SNPReqInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('snp_rsp_' , concertoInterfaces.SNPRspInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('cmp_rsp_' , concertoInterfaces.CMPRspInterface,[],obj.lib.bundle )=\


\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend
\=bundleFunctions.wiresFromInterface('sys_req_tx_' , concertoInterfaces.SYSReqTxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('sys_rsp_rx_' , concertoInterfaces.SYSRspRxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('sys_req_rx_' , concertoInterfaces.SYSReqRxInterface,[],obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface('sys_rsp_tx_' , concertoInterfaces.SYSRspTxInterface,[],obj.lib.bundle )=\
\js }

wire chi_intf_chk_UCE;
\=bundleFunctions.wiresFromInterface(chkErrInterface.name, chkErrInterface.signals, [], obj.lib.bundle )=\ \jsbegin

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if(nativeInterfacePipe) { \jsend
\=bundleFunctions.wiresFromInterface(chkErrInterface.name+"pipe_", chkErrInterface.signals, [], obj.lib.bundle )=\ \jsbegin
}

/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wAddr > wFlit_Addr) {
\jsend
wire [\=wAddr-1=\:0] chi_rx_req_addr = {\=wAddr - wFlit_Addr=\'b0, RXREQFLIT_Addr};
\js } else {
wire [\=wAddr-1=\:0] chi_rx_req_addr = RXREQFLIT_Addr;
\js }

\js if (wFlit_Addr < wSysAddr) {
wire [\=wSysAddr-1=\:0]  chi_rx_req_addr_mod = {\=wSysAddr - wFlit_Addr=\'b0, RXREQFLIT_Addr};
\js } else {
wire [\=wSysAddr-1=\:0]  chi_rx_req_addr_mod = RXREQFLIT_Addr;
\js }

wire [4:0] dce_id;
wire [4:0] dii_id;
wire [4:0] dmi_id;
wire [4:0] dmi_mig;
wire concerto_mux__busy;

wire [\=wFlit_TxnID-1=\:0] RXDATFLIT_pre_TxnID;
wire [2:0] ott_pre_trans_size;

wire cmd_rsp_target_id_mismatch = (cmd_rsp_valid & (cmd_rsp_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id));
wire str_req_target_id_mismatch = (str_req_valid & (str_req_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id)) ;
wire dtr_req_target_id_mismatch = (dtr_req_rx_valid & (dtr_req_rx_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id));
wire dtr_rsp_target_id_mismatch = (dtr_rsp_rx_valid & (dtr_rsp_rx_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id));
wire dtw_rsp_target_id_mismatch = (dtw_rsp_valid & (dtw_rsp_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id)) ;
wire snp_req_target_id_mismatch = (snp_req_valid & (snp_req_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id));
wire cmp_rsp_target_id_mismatch = (cmp_rsp_valid & (cmp_rsp_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id)) ;
wire sys_req_target_id_mismatch = (sys_req_rx_valid & (sys_req_rx_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id)) ;
wire sys_rsp_target_id_mismatch = (sys_rsp_rx_valid & (sys_rsp_rx_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id)) ;
wire dtw_dbg_rsp_target_id_mismatch = (dtw_dbg_rsp_valid & (dtw_dbg_rsp_target_id[\=initiator_id_width-1=\:\=port_id_width=\] != \=unitIdInterfaceName=\my_f_unit_id)) ;

wire cmd_rsp_target_id_error = cmd_rsp_valid    & cmd_rsp_target_id_mismatch;
wire str_req_target_id_error = str_req_valid    & str_req_target_id_mismatch;
wire dtr_req_target_id_error = dtr_req_rx_valid & dtr_req_target_id_mismatch;
wire dtr_rsp_target_id_error = dtr_rsp_rx_valid & dtr_rsp_target_id_mismatch;
wire dtw_rsp_target_id_error = dtw_rsp_valid    & dtw_rsp_target_id_mismatch;
wire snp_req_target_id_error = snp_req_valid    & snp_req_target_id_mismatch;
wire cmp_rsp_target_id_error = cmp_rsp_valid    & cmp_rsp_target_id_mismatch;
wire sys_req_target_id_error = sys_req_rx_valid & sys_req_target_id_mismatch;
wire sys_rsp_target_id_error = sys_rsp_rx_valid & sys_rsp_target_id_mismatch;
wire dtw_dbg_rsp_target_id_error = dtw_dbg_rsp_valid & dtw_dbg_rsp_target_id_mismatch;

wire cmd_rsp_transport_err = cmd_rsp_valid    & (cmd_rsp_cm_status[7:6] == 2'b11);
wire str_req_transport_err = str_req_valid    & (str_req_cm_status[7:6] == 2'b11);
wire dtr_req_transport_err = dtr_req_rx_valid & (dtr_req_rx_cm_status[7:6] == 2'b11);
wire dtr_rsp_transport_err = dtr_rsp_rx_valid & (dtr_rsp_rx_cm_status[7:6] == 2'b11);
wire dtw_rsp_transport_err = dtw_rsp_valid    & (dtw_rsp_cm_status[7:6] == 2'b11);
wire snp_req_transport_err = snp_req_valid    & (snp_req_cm_status[7:6] == 2'b11);
wire cmp_rsp_transport_err = cmp_rsp_valid    & (cmp_rsp_cm_status[7:6] == 2'b11);

wire cmd_rsp_valid_qual    = cmd_rsp_valid    & ~cmd_rsp_target_id_mismatch & ~cmd_rsp_transport_err;
wire str_req_valid_qual    = str_req_valid    & ~str_req_target_id_mismatch & ~str_req_transport_err;
wire dtr_req_rx_valid_qual = dtr_req_rx_valid & ~dtr_req_target_id_mismatch & ~dtr_req_transport_err;
wire dtr_rsp_rx_valid_qual = dtr_rsp_rx_valid & ~dtr_rsp_target_id_mismatch & ~dtr_rsp_transport_err;
wire dtw_rsp_valid_qual    = dtw_rsp_valid    & ~dtw_rsp_target_id_mismatch & ~dtw_rsp_transport_err;
wire snp_req_valid_qual    = snp_req_valid    & ~snp_req_target_id_mismatch & ~snp_req_transport_err;
wire cmp_rsp_valid_qual    = cmp_rsp_valid    & ~cmp_rsp_target_id_mismatch & ~cmp_rsp_transport_err;

wire opcode_wr;
wire opcode_rd;

wire pmon_cmd_req_rd_BW;
wire pmon_cmd_req_wr_BW;
wire pmon_snp_rsp_BW;

wire cmd_req_rd_cm_type;
wire cmd_req_wr_cm_type;

//=============================================================================
// Clock Gater : gated clock, gated reset, gated test enable
//=============================================================================

wire csr_chi_aiu_TransActive;
wire gated_clk;
wire gated_reset_n;
wire ott_gated_clk;
 
//wire bist_timeout_trigger_q;
//\=u.dffre(1, 'bist_timeout_trigger_q', 'bist_timeout_trigger', "1'b0", "1'b1", clkInterfaceName+'clk', clkInterfaceName+'reset_n')=\

wire pma_busy = csr_chi_aiu_TransActive
                    | concerto_mux__busy
                    | ott_busy
                    | stt_busy
                    | trace_capture_busy
                    | bist_timeout_trigger
\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (nativeInterfacePipe) {
\jsend
                    | \=funcChiInterface.name=\pipe_rx_req_flitv
                    | \=funcChiInterface.name=\pipe_rx_rsp_flitv
                    | \=funcChiInterface.name=\pipe_rx_dat_flitv
                    | \=funcChiInterface.name=\pipe_rx_link_active_ack
\js }
                    | \=chiInterfaceName=\placeholder_rx_req_flitv
                    | \=chiInterfaceName=\placeholder_rx_rsp_flitv
                    | \=chiInterfaceName=\placeholder_rx_dat_flitv
                    | \=chiInterfaceName=\placeholder_rx_link_active_ack
                    | \=chiInterfaceName=\rx_req_flitv
                    | \=chiInterfaceName=\rx_rsp_flitv
                    | \=chiInterfaceName=\rx_dat_flitv
                    | \=chiInterfaceName=\rx_link_active_ack
\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend
                    | sys_evt_coh_busy
\js }
                    ;


\js if (clkInterfaceJson.blkClkGateOn) {

wire gated_test_en, gated_clk_en;

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (clkInterfaceJson.params.wTestEn) {
    \jsend
assign gated_test_en = \=clkInterfaceName=\test_en;
    \js } else {
assign gated_test_en = 1'b0;
    \js }

assign gated_clk_en = pma_busy;

\=u.instance ({
    instanceName : 'blk_clk_gate',
    moduleName : 'cg',
    params : {
        width : 1
    },
    ports : {
       clk_in  : clkInterfaceName+'clk',
       clk_out : 'gated_clk',
       test_en : 'gated_test_en',
       en      : 'gated_clk_en'
   }
})=\

\=u.instance ({
    instanceName : 'ott_blk_clk_gate',
    moduleName : 'cg',
    params : {
        width : 1
    },
    ports : {
       clk_in  : clkInterfaceName+'clk',
       clk_out : 'ott_gated_clk',
       test_en : 'gated_test_en',
       en      : 'gated_clk_en'
   }
})=\

\js } else {
assign gated_clk = \=clkInterfaceName=\clk;
assign ott_gated_clk = \=clkInterfaceName=\clk;
\js }

assign gated_reset_n = \=clkInterfaceName=\reset_n;

//=============================================================================
// Concerto Mux
//=============================================================================
	wire chi_aiu_cmux_dtw_dbg_rsp_CE;

\jsbegin
    var concertoMuxFaultPorts = {};
    var concertoMuxInterfaces = [];
    var CONCERTO_MUX_INTF = [];
    var conc_intf_iterated = [];
    var wiresCmuxCE = [];

    // Create CMUX/Tre Fault Ports if they Exist
    var create_UCE = false;
    for(let i=0; i<SMI_RX_INTF.length; i++)
    {
       for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
       {
         let name = SMI_RX_INTF[i].params.fnMsgClass[j];
         let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });

         var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
         var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" &  CONC_RX_INTF[index].params.dpPresent);
         var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
         var isDuplicate     = conc_intf_iterated.includes(name);

         /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
         if(!isDuplicate) {

           var wireCmuxCE    = 'chi_aiu_cmux_' + CONC_RX_INTF[index].name + 'CE';
           wiresCmuxCE.push( wireCmuxCE );

           /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
           if(hasMessageProt | hasDataProt | hasHeaderProt) {
              u.port('output', CONC_RX_INTF[index].name + 'CE', 1);
              concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'CE'] = wireCmuxCE;
           } else { \jsend
              assign  \=wireCmuxCE=\ = 1'h0; \jsbegin
           }

           if(hasHeaderProt) { \jsend
              wire chi_aiu_cmux_\=CONC_RX_INTF[index].name=\header_UCE; \jsbegin
              concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'header_UCE'] = 'chi_aiu_cmux_' + CONC_RX_INTF[index].name + 'header_UCE';
              create_UCE = true;
           }

           if(hasMessageProt) { \jsend
              wire chi_aiu_cmux_\=CONC_RX_INTF[index].name=\message_UCE; \jsbegin
              concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'message_UCE'] = 'chi_aiu_cmux_' + CONC_RX_INTF[index].name + 'message_UCE';
           }

           if(hasDataProt) { \jsend
              wire chi_aiu_cmux_\=CONC_RX_INTF[index].name=\data_UCE; \jsbegin
              concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'data_UCE'] = 'chi_aiu_cmux_' + CONC_RX_INTF[index].name + 'data_UCE';
           }
         }

         concertoMuxFaultPorts['busy'] = 'concerto_mux__busy';
         conc_intf_iterated.push(name);
       }
    }
   // Aggregate header Uncorretable errors into one UCE signal
\jsend
       assign chi_aiu_cmux_UCE = 1'b0
\jsbegin
    for (let i=0; i<SMI_RX_INTF.length; i++){
        for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++){
                let name = SMI_RX_INTF[i].params.fnMsgClass[j];
                let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });
                var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
                if(hasHeaderProt) {
\jsend
                            | chi_aiu_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\header_UCE
\jsbegin
                }
                var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
                        if( hasMessageProt ) {
\jsend
                            | chi_aiu_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\message_UCE
\jsbegin
                        }
                var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
                        if( hasDataProt ) {
\jsend
                            | chi_aiu_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\data_UCE
\jsbegin
                        }
        }
    }
\jsend
;

wire chi_aiu_cmux_CE  = \=wiresCmuxCE.join(" | ")=\;

\jsbegin

for (var i=0; i<SMI_TX_INTF.length; i++) {
    CONCERTO_MUX_INTF.push({
        modulePrefix: SMI_TX_INTF[i].name,
        localPrefix: SMI_TX_INTF[i].name,
        interface: SMI_TX_INTF[i].signals
    });
    if (SMI_TX_INTF[i].params.dpPresent) {
        CONCERTO_MUX_INTF.push({
            modulePrefix: SMI_TX_INTF[i].name,
            localPrefix: SMI_TX_INTF[i].name,
            interface: SMI_TX_INTF[i].dpSignals
        });
    }

};

for (var i=0; i<SMI_RX_INTF.length; i++) {
    CONCERTO_MUX_INTF.push({
        modulePrefix: SMI_RX_INTF[i].name,
        localPrefix: SMI_RX_INTF[i].name,
        interface: SMI_RX_INTF[i].signals
    });
    if (SMI_RX_INTF[i].params.dpPresent) {
        CONCERTO_MUX_INTF.push({
            modulePrefix: SMI_RX_INTF[i].name,
            localPrefix: SMI_RX_INTF[i].name,
            interface: SMI_RX_INTF[i].dpSignals
        });
    }
};

for (var i=0; i<CONC_TX_INTF.length; i++) {
    CONCERTO_MUX_INTF.push({
        modulePrefix: CONC_TX_INTF[i].name,
        localPrefix: CONC_TX_INTF[i].name,
        interface: CONC_TX_INTF[i].signals
    });
};

for (var i=0; i<CONC_RX_INTF.length; i++) {
    CONCERTO_MUX_INTF.push({
        modulePrefix: CONC_RX_INTF[i].name,
        localPrefix: CONC_RX_INTF[i].name,
        interface: CONC_RX_INTF[i].signals
    });
};


//=============================================================================
// PMON CSR interfaces and params generation
//=============================================================================

\jsend

wire [\=wTotalSmiPortsNum-1=\:0] pmon_trace_messages_dropped;
wire [\=wTotalSmiPortsNum-1=\:0] pmon_trace_messages_captured;
wire [7:0] ott_evt;

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (wOttEntriesplusone != 8) { \jsend
assign ott_evt = {\=wpmon_event_ott_pad0=\'b0, pmon_num_active_entries};
\jsbegin
}
else{ \jsend
assign ott_evt = pmon_num_active_entries;
\jsbegin
} \jsend 

\=u.dffre(wTotalSmiPortsNum, 'pmon_trace_messages_captured', 'pm_trace_messages_captured', wTotalSmiPortsNum + "'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(wTotalSmiPortsNum, 'pmon_trace_messages_dropped', 'pm_trace_messages_dropped', wTotalSmiPortsNum+ "'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
 
assign pmon_cmd_req_rd_BW = cmd_req_valid && cmd_req_ready && cmd_req_rd_cm_type;
assign pmon_cmd_req_wr_BW = cmd_req_valid && cmd_req_ready && cmd_req_wr_cm_type;
assign pmon_snp_rsp_BW = snp_rsp_valid && snp_rsp_ready;

\jsbegin
/* istanbul ignore if env ncore_3p7 */
if(!nPerfCounters) {
  var pmonEventTable            = [];
 
} else {
  const smiTxStallEvents		= SMI_TX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_TX_INTF array
  const smiRxStallEvents		= SMI_RX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_RX_INTF array
  
  var pmonEventTable			= [
  	{ width: 1, expr: "1'b0"},
  	smiTxStallEvents[0],
  	smiTxStallEvents[1],
  	smiTxStallEvents[2],
  	{ width: 1, expr: "1'b0"}, //4
  	smiRxStallEvents[0],
  	smiRxStallEvents[1],
  	smiRxStallEvents[2],
  	{ width: 1, expr: "1'b0"}, //8
  	{ width: 1, expr: "1'b0"}, 
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"}, //16
  	{ width: 1, expr: "pmon_cmd_req_wr_BW" },
  	{ width: 1, expr: "pmon_cmd_req_rd_BW"},
  	{ width: 1, expr: "pmon_snp_rsp_BW"},
  	{ width: 8, expr: "ott_evt" },
  	{ width: 1, expr: "1'b0"},
  	{ width: wTotalSmiPortsNum, expr: "pmon_trace_messages_captured"},
  	{ width: wTotalSmiPortsNum, expr: "pmon_trace_messages_dropped"},	
  	{ width: 1, expr: "pmon_addr_collision"},
  	{ width: 4, expr: "pmon_chi_interleaved_num"},
  	{ width: 1, expr: "pmon_agent_event_out"},
  	{ width: 1, expr: "pmon_noc_sys_req_event"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr: "1'b0"},
  	{ width: 1, expr:  clk16Interface.name+"clk"},
  	{ width: 1, expr: "pmon_starvation_event"} //31
  
  ];
  
  var filterAttributesMap = [
    { eventIndex: 17, name:"cmd_req_wr_" , signals: { "funit_id": wFUnitId, "user": concertoInterfaces.CMDReqInterface.aux  } },
    { eventIndex: 18, name: "cmd_req_rd_" , signals: { "funit_id": wFUnitId, "user": concertoInterfaces.CMDReqInterface.aux  } },
    { eventIndex: 19, name: "snp_rsp_" , signals: { "funit_id": wFUnitId, "user": 1 } }
  ]; 

  var pmonInterfaces	= {
  	clkInterface: clkInterfaceJson,
  	csrInterface: pmonCsrIfGenerator.interfaceGeneric("slave", "CAIU"),	// Returns a new-style InterfaceGeneric instance
  	evtInterfaces: genPmonEvtInterfaces( pmonEventTable ),
      masterTriggerInterface: interfaces.masterTriggerInt || /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */ { _SKIP_: true },
  	filterAttrInterfaces: m.genFilterAttrInterfaces( filterAttributesMap ),
  	latencyInterfaces: [
             m.oldStyleToNewStyleGenericInterface("slave", { name: "read_latency_", signals: {alloc: cmpInfo.nOttCtrlEntries, dealloc: cmpInfo.nOttCtrlEntries} }),
             m.oldStyleToNewStyleGenericInterface("slave", { name: "wr_latency_",   signals: {alloc: cmpInfo.nOttCtrlEntries, dealloc: cmpInfo.nOttCtrlEntries} })
  	]
  };
  
  pmonInterfaces.evtInterfaces.forEach( intf => { \jsend
  \=declareNewStyleInterface( intf )=\ \jsbegin
  }); 
  
  pmonInterfaces.filterAttrInterfaces.forEach( intf => { \jsend
  \=declareNewStyleInterface( intf )=\ \jsbegin
  }); 
  
  pmonInterfaces.latencyInterfaces.forEach( intf => { \jsend
  \=declareNewStyleInterface( intf )=\ \jsbegin
  }); 
}

/////////////////////////////////////////////////////////////////

// Create concerto mux interfaces
var concertoMuxInterfaces = [];

CONCERTO_MUX_INTF.push({
        modulePrefix: '',
        localPrefix: clkInterfaceName,
        interface: intClkInterface 
});

\jsend

\=obj.lib.instance ({
    instanceName: 'aiu_concerto_mux',
    moduleName: 'concerto_mux',
    params : {
        wFPortId : port_id_width,
        wFUnitId : unit_id_width,
        smiTxPortInterfaces : SMI_TX_INTF,
        smiRxPortInterfaces : SMI_RX_INTF,
        concertoTxInterfaces : CONC_TX_INTF,
        concertoRxInterfaces : CONC_RX_INTF
    },
    ports : concertoMuxFaultPorts,
    interfaces : CONCERTO_MUX_INTF
})=\
                 
//=============================================================================
// CHI Slave Interface
//=============================================================================

wire \=funcChiInterface.name=\pipe_sysco_req_org;
wire \=funcChiInterface.name=\pipe_sysco_ack_org;

assign chi_rx_dat_flitv_backpressure = stt_chi_rx_dat_flitv_backpressure | ott_chi_rx_dat_flitv_backpressure;

\jsbegin
    var chi_aiu_chi_slave_if_params = {
        assertOn           : assertOn,
        nRobEntries        : nRobEntries,
        wRobEntries        : wRobEntries,
        wData              : wData,
        chiInt             : interfaces.chiInt,
        chiInterface       : funcChiInterface.signals,
        chiInterfaceName   : chiInterfaceName,
        nCHIReqInFlight    : nCHIReqInFlight,
        nOttCtrlEntries    : nOttCtrlEntries,
        nArbFifoEntries    : nArbFifoEntries,
        req_flit_interface : req_flit_interface,
        rsp_flit_interface : rsp_flit_interface,
        dat_flit_interface : dat_flit_interface,
        snp_flit_interface : snp_flit_interface,
        dat_flit_width_with_poison : dat_flit_width_with_poison,
        chkErrInterface    : chkErrInterface.signals
    };
    var chi_aiu_chi_slave_if_ports = {
        clk                           : clkInterfaceName+'clk',
        reset_n                       : 'gated_reset_n',
        sync_reset_n                  : clkInterfaceName+'sync_reset_n',
        rob_interleaved_num           : 'pmon_chi_interleaved_num',
        RXDATFLIT_pre_TxnID           : 'RXDATFLIT_pre_TxnID',
        ott_pre_trans_size            : 'ott_pre_trans_size',
        asleep                        : 'asleep',
        ott_busy                      : 'ott_busy',
        stt_busy                      : 'stt_busy',
        num_free_entries              : 'num_free_entries',
        num_free_entries_arb          : 'num_free_entries_arb',
        req_valid                     : 'req_valid',
        rx_rsp_valid                  : 'rx_rsp_valid',
        chi_rx_dat_valid              : 'chi_rx_dat_valid',
        chi_rx_dat_flitv_org          : 'chi_rx_dat_flitv_org',
        chi_rx_dat_flit_org           : 'chi_rx_dat_flit_org',
        chi_rx_dat_flitv_backpressure : 'chi_rx_dat_flitv_backpressure',
        rn_rsp_valid                  : 'rn_rsp_valid',
        rn_rsp_ready                  : 'rn_rsp_ready',
        chi_tx_snp_req_valid          : 'chi_tx_snp_req_valid',
        chi_tx_snp_req_ready          : 'chi_tx_snp_req_ready',
        chi_tx_snp_flitv_a1           : 'chi_tx_snp_flitv_a1',
        co_state_connect_ready        : 'co_state_connect_ready',
        co_state_disconnect_ready     : 'co_state_disconnect_ready & outstanding_coherent_count_zero',
        txdat_valid                   : 'txdat_valid',
        txdat_ready                   : 'txdat_ready'
    };
    chi_aiu_chi_slave_if_ports[chiInterfaceName + 'sysco_req'] = funcChiInterface.name+'pipe_sysco_req_org';
    chi_aiu_chi_slave_if_ports[chiInterfaceName + 'sysco_ack'] = funcChiInterface.name+'pipe_sysco_ack_org';
    chi_aiu_chi_slave_if_ports['co_state_disabled']   = 'co_state_disabled_org';
    chi_aiu_chi_slave_if_ports['co_state_connect']    = 'co_state_connect_org';
    chi_aiu_chi_slave_if_ports['co_state_enabled']    = 'co_state_enabled_org';
    chi_aiu_chi_slave_if_ports['co_state_disconnect'] = 'co_state_disconnect_org';

    var chi_aiu_chi_slave_if_interfaces = [
        {modulePrefix: chiInterfaceName,           localPrefix: funcChiInterface.name+'pipe_',        interface: funcChiInterface.signals,        exclude: ['sysco_'] },
        {modulePrefix: 'RXREQFLIT_',               localPrefix: 'RXREQFLIT_',                    interface: req_flit_interface},
        {modulePrefix: 'RXRSPFLIT_',               localPrefix: 'RXRSPFLIT_',                    interface: rsp_flit_interface},
        {modulePrefix: 'TXRSPFLIT_',               localPrefix: 'TXRSPFLIT_',                    interface: rsp_flit_interface},
        {modulePrefix: 'TXDATFLIT_',               localPrefix: 'TXDATFLIT_',                    interface: dat_flit_interface},
        {modulePrefix: 'TXSNPFLIT_',               localPrefix: 'TXSNPFLIT_',                    interface: snp_flit_interface},
        {modulePrefix: chiInterfaceName+'rx_req_', localPrefix: funcChiInterface.name+'pipe_rx_req_', interface: funcChiInterface.signals.rx_req_},
        {modulePrefix: chiInterfaceName+'rx_rsp_', localPrefix: funcChiInterface.name+'pipe_rx_rsp_', interface: funcChiInterface.signals.rx_rsp_},
        {modulePrefix: chiInterfaceName+'rx_dat_', localPrefix: funcChiInterface.name+'pipe_rx_dat_', interface: funcChiInterface.signals.rx_dat_},
        {modulePrefix: chiInterfaceName+'tx_rsp_', localPrefix: funcChiInterface.name+'pipe_tx_rsp_', interface: funcChiInterface.signals.tx_rsp_},
        {modulePrefix: chiInterfaceName+'tx_dat_', localPrefix: funcChiInterface.name+'pipe_tx_dat_', interface: funcChiInterface.signals.tx_dat_},
        {modulePrefix: chiInterfaceName+'tx_snp_', localPrefix: funcChiInterface.name+'pipe_tx_snp_', interface: funcChiInterface.signals.tx_snp_},
        {modulePrefix: "chk_",                     localPrefix: chkErrInterface.name+'pipe_',         interface: chkErrInterface.signals }
    ];
\jsend

\=u.instance({
    instanceName: 'chi_aiu_chi_slave_if' ,
    moduleName: 'chi_aiu_chi_slave_if',
    params: chi_aiu_chi_slave_if_params,
    ports: chi_aiu_chi_slave_if_ports,
    interfaces: chi_aiu_chi_slave_if_interfaces,
    portsDelimiter: '\n    '
})=\

//=============================================================================
// CHI RXDAT Channel Buffer for STT
// CHI RXDAT Channel Buffer for OTT
//=============================================================================

\=u.instance({
    instanceName: 'rxdat_chan_stt' ,
    moduleName: 'rxdat_chan_stt',
    params: {  
        assertOn        : assertOn,
        wData           : wData,
        DatInterface    : dat_flit_interface,
        intf_size_width : intf_size_width,
        dtw_dwid_width  : dtw_dwid_width,
        wDatFlit_BE     : wDatFlit_BE,
        chi_cmd         : chi_cmd,
        enPoison        : enPoison
    },
    ports: { 
        clk                        : clkInterfaceName+'clk',
        reset_n                    : 'gated_reset_n',
        chi_rx_dat_flit_org        : 'chi_rx_dat_flit_org',
        chi_rx_dat_flitv_org       : 'chi_rx_dat_flitv_org',
        chi_rx_dat_valid           : 'chi_rx_dat_valid',
        chi_rx_dat_flitv_backpressure : 'stt_chi_rx_dat_flitv_backpressure',
        rx_data_valid 	           : 'stt_rx_data_valid',
        data_ready  	           : 'stt_data_ready' , 
        dtw_req_mst_ready          : 'stt_dtw_req_mst_ready',
        dtw_data_valid             : 'dtw_data_valid',
        RXDAT_LAST                 : 'STT_RXDAT_LAST',
        RXDAT_DWID                 : 'STT_RXDAT_DWID',
        RXDATFLIT_target_intf_size : 'RXDATFLIT_target_intf_size',
        RXDATFLIT_snp_addr_bit3    : 'RXDATFLIT_snp_addr_bit3',
        RXDATFLIT_delay_dtw_valid  : 'RXDATFLIT_delay_dtw_valid',
        stt_chi_rx_dat_flitv_d1    : 'stt_chi_rx_dat_flitv_d1',
    },
    interfaces : [
        {modulePrefix: 'RXDAT_'    , localPrefix: 'STT_RXDAT_',     interface: dat_flit_interface, exclude: []},
        {modulePrefix: 'RXDATFLIT_', localPrefix: 'STT_RXDATFLIT_', interface: dat_flit_interface, exclude: ['Data','BE','TraceTag','DataID','CCID','RespErr','Homenode_ID','TgtID','QoS']},
    ],
    portsDelimiter: '\n    '
})=\

\=u.instance({
    instanceName: 'rxdat_chan_ott' ,
    moduleName: 'rxdat_chan_ott',
    params: {
        wFlit_TxnID     : wFlit_TxnID,
        wData           : wData,
        DatInterface    : dat_flit_interface,
        dtw_dwid_width  : dtw_dwid_width,
        wDatFlit_BE     : wDatFlit_BE,
        enPoison        : enPoison
    },
    ports: { 
        clk                     : clkInterfaceName+'clk',
        reset_n                 : 'gated_reset_n',
        chi_rx_dat_flit_org     : 'chi_rx_dat_flit_org',
        chi_rx_dat_flitv_org    : 'chi_rx_dat_flitv_org',
        chi_rx_dat_valid        : 'chi_rx_dat_valid',
        chi_rx_dat_flitv_backpressure : 'ott_chi_rx_dat_flitv_backpressure',
        dtw_data_TxnID          : 'ott_dtw_data_TxnID',
        ott_dtw_size            : 'ott_dtw_size',
        rx_data_valid 	        : 'ott_rx_data_valid',
        data_ready  	        : 'ott_data_ready' , 
        RXDAT_LAST              : 'OTT_RXDAT_LAST',
        RXDAT_DWID              : 'OTT_RXDAT_DWID',
        ott_chi_rx_dat_flitv_d1 : 'ott_chi_rx_dat_flitv_d1',
    },
    interfaces : [
        {modulePrefix: 'RXDAT_'    , localPrefix: 'OTT_RXDAT_',     interface: dat_flit_interface, exclude: []},
        {modulePrefix: 'RXDATFLIT_', localPrefix: 'OTT_RXDATFLIT_', interface: dat_flit_interface, exclude: ['Data','BE','TraceTag','DataSource','CBusy','DataID','CCID','Resp','RespErr','Homenode_ID','TgtID','QoS','TagOp','Tag','TU']},
    ],
    portsDelimiter: '\n    '
})=\

//=============================================================================
// OTT
//=============================================================================
\jsbegin
if( chi_e ) { \jsend
wire [3:0] RXREQFLIT_MemAttr_mod   = { RXREQFLIT_MemAttr[3:1], ((RXREQFLIT_Opcode[5:1]==5'b01110) || (RXREQFLIT_Opcode[6:0]==7'b1000100)) && (RXREQFLIT_Order==2'b00) & dii_id_valid ? 1'b0 : RXREQFLIT_MemAttr[0] }; \jsbegin

} else { \jsend
wire [3:0] RXREQFLIT_MemAttr_mod   = { RXREQFLIT_MemAttr[3:1], (RXREQFLIT_Opcode[5:1]==5'b01110) && (RXREQFLIT_Order==2'b00) & dii_id_valid ? 1'b0 : RXREQFLIT_MemAttr[0] }; \jsbegin

}

var ott_top_ports  = {};

    ott_top_ports['aiu_node_stash_target_init'] = 'aiu_node_stash_target_init';
    ott_top_ports['sel_initvec_stash'] = 'sel_initvec_stash';
    ott_top_ports['snp_req_order_fifo__pop_sel_initvec_stash'] = 'snp_req_order_fifo__pop_sel_initvec_stash';
    ott_top_ports['bist_timeout_trigger'] = 'bist_timeout_trigger';
    ott_top_ports['w_starve']        = 'w_starve';
    ott_top_ports['tracetagTrigger'] = 'tracetagTrigger';

for (var i = 0; i < nDmis; i++) {
    ott_top_ports['dmi'+i+'_f_unit_id'] = dmiIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
}

for (var i = 0; i < nDiis; i++) {
    ott_top_ports['dii'+i+'_f_unit_id'] = diiIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
}

for (var i = 0; i < nDCEs; i++) {
    ott_top_ports['dce'+i+'_f_unit_id'] = dceIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
}

   ott_top_ports['dve_f_unit_id']        =  dveIdInterfaceName + 'f_unit_id';
   ott_top_ports['clk']                  =  'ott_gated_clk';
   ott_top_ports['reset_n']              =  'gated_reset_n';
   ott_top_ports['csr_access_nrs_valid'] =  'csr_access_nrs_valid';
   ott_top_ports['rx_data_valid']        =  'ott_rx_data_valid';
   ott_top_ports['req_valid']            =  'req_valid';
   ott_top_ports['rn_rsp_ready']         =  'rn_rsp_ready';
   ott_top_ports['rn_rsp_valid']         =  'rn_rsp_valid';
   ott_top_ports['rx_rsp_valid']         =  'rx_rsp_valid';
   ott_top_ports['ott_initvec_stash']    =  'ott_initvec_stash';
   ott_top_ports['entry_validvec_stash'] =  'entry_validvec_stash';
   ott_top_ports['num_free_entries']     =  'num_free_entries';
   ott_top_ports['num_free_entries_arb'] =  'num_free_entries_arb';
   ott_top_ports['stash_entries_full']   =  'stash_entries_full';
   ott_top_ports['ott_busy']             =  'ott_busy';
   ott_top_ports['age_arb_active']       =  'age_arb_active';
   ott_top_ports['aiu_id_reg_rd_data']   =  'aiu_id_reg_rd_data';
   ott_top_ports['RXDAT_LAST']           =  'OTT_RXDAT_LAST';
   ott_top_ports['RXDAT_DWID']           =  'OTT_RXDAT_DWID';
   ott_top_ports['stt_chi_rx_dat_flitv_d1']  =  'stt_chi_rx_dat_flitv_d1';
   ott_top_ports['dtw_data_TxnID']       =  'ott_dtw_data_TxnID';
   ott_top_ports['my_f_unit_id']         =  unitIdInterfaceName+'my_f_unit_id';
   ott_top_ports['aiu_dve_f_unit_id']    =  dveIdInterfaceName+'f_unit_id';
   ott_top_ports['aiu_dmi_f_unit_id']    = 'dmi_f_unit_id';
   ott_top_ports['aiu_dii_f_unit_id']    = 'dii_f_unit_id';
   ott_top_ports['dce_id']               = 'dce_id';
   ott_top_ports['dmi_id']               = 'dmi_id';
   ott_top_ports['dii_id']               = 'dii_id';
   ott_top_ports['dce_id_valid']         = 'dce_id_valid';
   ott_top_ports['dmi_id_valid']         = 'dmi_id_valid';
   ott_top_ports['dii_id_valid']         = 'dii_id_valid';
   ott_top_ports['map_target_f_unit_id'] = 'map_target_f_unit_id';
   ott_top_ports['map_dce_f_unit_id']    = 'map_dce_f_unit_id';
   ott_top_ports['nrs_selfidr_hit']      = 'nrs_selfidr_hit';
   ott_top_ports['q_csr_access_nrs_error']  = 'q_csr_access_nrs_error | q_illegal_csr_access_format';
   ott_top_ports['q_nrs_region_hit']        = 'q_nrs_region_hit';
   ott_top_ports['q_gpr_region_hit']        = 'q_gpr_region_hit';
   ott_top_ports['q_bra_region_hit']        = 'q_bra_region_hit';
   ott_top_ports['q_unconnected_dmi_access']= 'q_unconnected_dmi_access';
   ott_top_ports['q_unconnected_dii_access']= 'q_unconnected_dii_access';
   ott_top_ports['q_unconnected_dce_access']= 'q_unconnected_dce_access';
   ott_top_ports['q_addr_map_error_raw'] = 'q_addr_map_error_raw';
   ott_top_ports['q_addr_map_error']     = 'q_addr_map_error';
   ott_top_ports['q_nsx_access_error']   = 'q_nsx_access_error';
   ott_top_ports['no_credits_access_error'] = 'no_credits_access_error';
   ott_top_ports['no_credits_access_error_addr'] = 'no_credits_access_error_addr';
   ott_top_ports['unsupported_dii_cmd']   = 'unsupported_dii_cmd';
   ott_top_ports['chi_tx_snp_flitv_a1']   = 'chi_tx_snp_flitv_a1';
   ott_top_ports['timeout_error']         = 'timeout_error';
   ott_top_ports['timeout_addr']          = 'timeout_addr';
   ott_top_ports['timeout_ns']            = 'timeout_ns';
   ott_top_ports['timeout_cmd_read']      = 'timeout_cmd_read';
   ott_top_ports['timeout_cmd_write']     = 'timeout_cmd_write';
   ott_top_ports['timeout_cmd_dataless']  = 'timeout_cmd_dataless';
   ott_top_ports['timeout_cmd_dvm']       = 'timeout_cmd_dvm';
   ott_top_ports['timeout_cmd_writeevictorevict']  = 'timeout_cmd_writeevictorevict';
   ott_top_ports['timeout_cmd_txn_id']    = 'timeout_cmd_txn_id';
   ott_top_ports['rn_rsp_out_write']      = 'rn_rsp_out_write';
   ott_top_ports['csr_timeout_threshold'] = 'csr_timeout_threshold';
   ott_top_ports['csr_timeout_ref_en']    = 'csr_timeout_ref_en';
   ott_top_ports['dvm_entry_write']       = 'dvm_entry_write';
   ott_top_ports['txdat_valid']           = 'txdat_valid';
   ott_top_ports['txdat_ready']           = 'txdat_ready';
if ( fnEnableQos ) {
   ott_top_ports['csr_starv_count_threshold'] = "csr_starv_count_threshold";
}
   ott_top_ports["ott_dtw_size"]          = "ott_dtw_size";
   ott_top_ports["cmd_rsp_slv_valid"]     = "cmd_rsp_valid_qual";
   ott_top_ports["str_req_slv_valid"]     = "str_req_valid_qual";
   ott_top_ports["dtw_rsp_slv_valid"]     = "dtw_rsp_valid_qual";
   ott_top_ports["cmp_rsp_slv_valid"]     = "cmp_rsp_valid_qual";
   ott_top_ports["dtr_req_slv_valid"]     = "dtr_req_rx_valid_qual";
   ott_top_ports["dtr_req_target_id_mismatch"] = "dtr_req_target_id_mismatch";
   ott_top_ports["dtr_req_transport_err"]      = "dtr_req_transport_err";
   ott_top_ports['dtr_req_slv_ready']     = 'dtr_req_rx_ready';
   ott_top_ports['ott_data_ready']        = 'ott_data_ready';
   ott_top_ports['ott_pre_trans_size']    = 'ott_pre_trans_size';
   ott_top_ports['RXDATFLIT_pre_TxnID']   = 'RXDATFLIT_pre_TxnID';

   ott_top_ports['outstanding_coherent_count_zero'] = 'outstanding_coherent_count_zero';

   ott_top_ports['pmon_num_active_entries'] = 'pmon_num_active_entries';
   ott_top_ports['pmon_starvation_event']   = 'pmon_starvation_event';
   ott_top_ports['pmon_addr_collision']     = 'pmon_addr_collision';

   ott_top_ports['GPRAR_NSX'] = 'GPRAR_NSX';

   ott_top_ports['alloc']                 = 'ott_alloc';
   ott_top_ports['dealloc']               = 'ott_dealloc';
   ott_top_ports['hexAiuDceVec']          = 'hexAiuDceVec';
   ott_top_ports['hexAiuDmiVec']          = 'hexAiuDmiVec';
   ott_top_ports['hexAiuDiiVec']          = 'hexAiuDiiVec';

   ott_top_ports['csr_block_dvm_sync']    = 'csr_one_dvm_sync';
   ott_top_ports['RXREQFLIT_MemAttr']     = 'RXREQFLIT_MemAttr_mod';

var ott_top_interfaces_array = [ 
{modulePrefix: 'RXREQFLIT_'     , localPrefix: 'RXREQFLIT_'  ,     interface: req_flit_interface, exclude: ['MemAttr']},
{modulePrefix: 'RXRSPFLIT_'     , localPrefix: 'RXRSPFLIT_'  ,     interface: rsp_flit_interface},
{modulePrefix: 'STT_RXDATFLIT_' , localPrefix: 'STT_RXDATFLIT_',   interface: dat_flit_interface, exclude: ['Data','BE','TraceTag','DataID','CCID','Resp','RespErr','Homenode_ID','TgtID','QoS']},
{modulePrefix: 'RXDAT_'         , localPrefix: 'OTT_RXDAT_'  ,     interface: dat_flit_interface},
{modulePrefix: 'TXSNPFLIT_'     , localPrefix: 'TXSNPFLIT_'  ,     interface: snp_flit_interface},
{modulePrefix: 'TXRSPFLIT_'     , localPrefix: 'TXRSPFLIT_'  ,     interface: rsp_flit_interface},
{modulePrefix: 'TXDATFLIT_'     , localPrefix: 'TXDATFLIT_'  ,     interface: dat_flit_interface},
{modulePrefix: 'cmd_req_mst_'   , localPrefix: 'ott_cmd_req_',     interface: concertoInterfaces.CMDReqInterface},
{modulePrefix: 'cmd_rsp_slv_'   , localPrefix: 'cmd_rsp_'    ,     interface: concertoInterfaces.CMDRspInterface,   exclude: ['valid']},
{modulePrefix: 'str_req_slv_'   , localPrefix: 'str_req_'    ,     interface: concertoInterfaces.STRReqInterface,   exclude: ['valid']},
{modulePrefix: 'dtr_req_slv_'   , localPrefix: 'dtr_req_rx_' ,     interface: concertoInterfaces.DTRReqRxInterface, exclude: ['valid', 'ready']},
{modulePrefix: 'dtw_rsp_slv_'   , localPrefix: 'dtw_rsp_'    ,     interface: concertoInterfaces.DTWRspInterface,   exclude: ['valid']},
{modulePrefix: 'cmp_rsp_slv_'   , localPrefix: 'cmp_rsp_'    ,     interface: concertoInterfaces.CMPRspInterface,   exclude: ['valid']},
{modulePrefix: 'str_rsp_mst_'   , localPrefix: 'str_rsp_'    ,     interface: concertoInterfaces.STRRspInterface},
{modulePrefix: 'dtr_rsp_mst_'   , localPrefix: 'dtr_rsp_tx_' ,     interface: concertoInterfaces.DTRRspTxInterface},
{modulePrefix: 'dtw_req_mst_'   , localPrefix: 'ott_dtw_req_mst_', interface: concertoInterfaces.DTWReqInterface},
{modulePrefix: 'csr_CAIU'       , localPrefix: 'CAIU'        ,     interface: ccrCsrInterface.signals}
];
    if (chi_e) {
ott_top_interfaces_array.push({modulePrefix: 'dtwzero_req_mst_', localPrefix: 'ott_dtwzero_req_mst_', interface: concertoInterfaces.DTWReqInterface});
    }

\jsend 

\=u.instance({
            instanceName: 'ott_top' ,
            moduleName: 'ott_top',
            params: { 
                      assertOn         : assertOn,
                      interfaces       : interfaces, 
                      nOttCtrlEntries  : nOttCtrlEntries,
                      nCHIReqInFlight  : nCHIReqInFlight,
                      nArbFifoEntries  : nArbFifoEntries,
                      nOttStashEntries : nOttStashEntries,
                      wData            : wData,
                      wAddr            : wAddr,
                      wCacheLineOffset : u.getParam('wCacheLineOffset'),
                      ReqInterface     : req_flit_interface, 
                      RspInterface     : rsp_flit_interface,
                      DatInterface     : dat_flit_interface,
                      CHI_SnpInterface : snp_flit_interface,
                      CMDRspInterface  : concertoInterfaces.CMDRspInterface,
                      DTWRspInterface  : concertoInterfaces.DTWRspInterface,
                      STRReqInterface  : concertoInterfaces.STRReqInterface,
                      DTRReqRxInterface: concertoInterfaces.DTRReqRxInterface,  
                      CMDReqInterface  : concertoInterfaces.CMDReqInterface,
                      DTWReqInterface  : concertoInterfaces.DTWReqInterface,
                      STRRspInterface  : concertoInterfaces.STRRspInterface,
                      DTRRspTxInterface: concertoInterfaces.DTRRspTxInterface,
                      SNPRspInterface  : concertoInterfaces.SNPRspInterface,
                      CMPRspInterface  : concertoInterfaces.CMPRspInterface,
                      chiInterface     : chiInterface,
                      ccrCsrInterface  : { name: "csr_CAIU", signals: ccrCsrInterface.signals },
                      unit_id_width    : unit_id_width,
                      port_id_width    : port_id_width,
                      node_id_width    : node_id_width,
                      intf_size_width  : intf_size_width,
                      dtw_dwid_width   : dtw_dwid_width,
                      nDCEs            : nDCEs,
                      nDVEs            : nDVEs,
                      nDmis            : nDmis,
                      nDiis            : nDiis,
                      nDCECredits      : u.getParam('nDCECredits'),
                      nDVECredits      : u.getParam('nDVECredits'),
                      nDmiCredits      : u.getParam('nDmiCredits'),
                      nDiiCredits      : u.getParam('nDiiCredits'),
                      cm_type          : cm_type,
                      chi_cmd          : chi_cmd,
                      qosInfo          : qosInfo,
                      useQos           : useQos,
                      wFlit_TxnID      : wFlit_TxnID,
                      wRspFlit_FwdState_local : wRspFlit_FwdState_local, 
                      wReqFlit_TraceTag_local : wReqFlit_TraceTag_local,
                      wReqFlit_StashNIDValid_local : wReqFlit_StashNIDValid_local,
                      wReqFlit_ReturnNID_local : wReqFlit_ReturnNID_local,
                      wReqFlit_ReturnTxnID_local : wReqFlit_ReturnTxnID_local,
                      wDatFlit_TraceTag_local : wDatFlit_TraceTag_local,
                      wDatFlit_Homenode_ID_local : wDatFlit_Homenode_ID_local,
                      wSnpFlit_FwdNID_local : wSnpFlit_FwdNID_local,
                      chi_e            : chi_e,
                      chi_b            : chi_b
                       } ,
            ports        : ott_top_ports,
            interfaces   : ott_top_interfaces_array, 
            portsDelimiter: '\n    '
        })=\

//=============================================================================
// STT
//=============================================================================

\=u.instance({
            instanceName: 'stt_top' ,
            moduleName: 'stt_top',
            params: { 
                      assertOn          : assertOn,
                      interfaces        : interfaces,
                      nSttEntries       : nSttEntries ,
                      nDvmSnpInFlight   : nDvmSnpInFlight,
                      nOttCtrlEntries   : nOttCtrlEntries ,
                      nOttStashEntries  : nOttStashEntries ,
                      nSnpReqSkidBufSize: nSnpReqSkidBufSize,
                      wAddr             : wAddr,
                      wData             : wData,
                      chiInterface      : chiInterface,
                      RspInterface      : rsp_flit_interface,
                      DatInterface      : dat_flit_interface,
                      CHI_SnpInterface  : snp_flit_interface,
                      SNPReqInterface   : concertoInterfaces.SNPReqInterface,
                      DTRRspRxInterface : concertoInterfaces.DTRRspRxInterface,
                      DTWRspInterface   : concertoInterfaces.DTWRspInterface,
                      SNPRspInterface   : concertoInterfaces.SNPRspInterface,
                      DTRReqTxInterface : concertoInterfaces.DTRReqTxInterface,
                      DTWReqInterface   : concertoInterfaces.DTWReqInterface,
                      unit_id_width     : unit_id_width,
                      port_id_width     : port_id_width,
                      node_id_width     : node_id_width,
                      intf_size_width   : intf_size_width,
                      dtw_dwid_width    : dtw_dwid_width,
                      cm_type           : cm_type,
                      chi_cmd           : chi_cmd,
                      wFlit_TxnID       : wFlit_TxnID,
                      chi_a             : chi_a,
                      chi_b             : chi_b,
                      chi_e             : chi_e,
                      wDatFlit_Opcode   : wDatFlit_Opcode,
                      wSnpFlit_DoNotGoToSD_local : wSnpFlit_DoNotGoToSD_local,
                      wDatFlit_TraceTag_local : wDatFlit_TraceTag_local,
                      wSnpFlit_FwdTxnID_local : wSnpFlit_FwdTxnID_local,
                      wSnpFlit_FwdNID_local : wSnpFlit_FwdNID_local,
 } ,
            ports: { 
                     clk                       : clkInterfaceName+'clk',
                     reset_n                   : 'gated_reset_n',
                     csr_one_dvm_sync          : 'csr_one_dvm_sync',
                     aiu_node_stash_target_init: 'aiu_node_stash_target_init',
                     sel_initvec_stash         : 'sel_initvec_stash',
                     snp_req_order_fifo__pop_sel_initvec_stash : 'snp_req_order_fifo__pop_sel_initvec_stash',
                     dtr_rsp_slv_valid         : 'dtr_rsp_rx_valid_qual',
                     dtw_rsp_slv_valid         : 'dtw_rsp_valid_qual',
                     snp_req_slv_valid         : 'snp_req_valid_qual',
                     chi_tx_snp_req_valid      : 'chi_tx_snp_req_valid',
                     chi_tx_snp_req_ready      : 'chi_tx_snp_req_ready',
                     SYSCOACK                  :  chiInterfaceName+'sysco_ack',
                     co_state_disabled         : 'co_state_disabled',
                     co_state_connect          : 'co_state_connect',
                     co_state_enabled          : 'co_state_enabled',
                     co_state_disconnect       : 'co_state_disconnect',
                     co_state_connect_ready    : 'co_state_connect_ready',
                     co_state_disconnect_ready : 'co_state_disconnect_ready',
                     rx_rsp_valid              : "rx_rsp_valid", 
                     RXDAT_LAST                : 'STT_RXDAT_LAST',
                     RXDAT_DWID                : 'STT_RXDAT_DWID',
                     rx_data_valid             : 'stt_rx_data_valid',
                     dtw_data_valid            : 'dtw_data_valid',
                     stt_data_ready            : 'stt_data_ready',
                     stash_entries_full        : 'stash_entries_full',
                     ott_initvec_stash         : 'ott_initvec_stash',
                     entry_validvec_stash      : 'entry_validvec_stash',
                     my_f_unit_id              : unitIdInterfaceName+'my_f_unit_id',
                     dve_f_unit_id             : dveIdInterfaceName+'f_unit_id',
                     stt_busy                  : 'stt_busy',
                     dtw_rsp_slv_ready         : 'dtw_rsp_ready',
                     chi_snp_resp_error        : 'chi_snp_resp_error',
                     chi_snp_resp_err_info     : 'chi_snp_resp_err_info',
                     chi_snp_resp_txn_id       : 'chi_snp_resp_txn_id',
                     chi_snp_resp_addr         : 'chi_snp_resp_addr',
                     chi_snp_resp_ns           : 'chi_snp_resp_ns',
                     RXDATFLIT_target_intf_size: 'RXDATFLIT_target_intf_size',
                     RXDATFLIT_snp_addr_bit3   : 'RXDATFLIT_snp_addr_bit3',
                     RXDATFLIT_delay_dtw_valid : 'RXDATFLIT_delay_dtw_valid'
 },
            interfaces : [ 
{modulePrefix: 'RXRSPFLIT_' ,   localPrefix: 'RXRSPFLIT_',       interface: rsp_flit_interface},
{modulePrefix: 'RXDAT_' ,       localPrefix: 'STT_RXDAT_',       interface: dat_flit_interface},
{modulePrefix: 'RXDATFLIT_' ,   localPrefix: 'STT_RXDATFLIT_',   interface: dat_flit_interface, exclude : ['Poison','Data','BE','TraceTag','DataID','CCID','RespErr','Homenode_ID','TgtID','QoS','DBID','SrcID']},
{modulePrefix: 'TXSNPFLIT_' ,   localPrefix: 'TXSNPFLIT_',       interface: snp_flit_interface},
{modulePrefix: 'dtr_rsp_slv_' , localPrefix: 'dtr_rsp_rx_' ,     interface: concertoInterfaces.DTRRspRxInterface, exclude : ['valid']},
{modulePrefix: 'dtw_rsp_slv_' , localPrefix: 'dtw_rsp_' ,        interface: concertoInterfaces.DTWRspInterface, exclude : ['valid','ready']},
{modulePrefix: 'snp_req_slv_' , localPrefix: 'snp_req_' ,        interface: concertoInterfaces.SNPReqInterface, exclude : ['valid']},
{modulePrefix: 'dtr_req_mst_' , localPrefix: 'stt_dtr_req_tx_',  interface: concertoInterfaces.DTRReqTxInterface},
{modulePrefix: 'dtw_req_mst_' , localPrefix: 'stt_dtw_req_mst_', interface: concertoInterfaces.DTWReqInterface},
{modulePrefix: 'snp_rsp_mst_' , localPrefix: 'snp_rsp_',         interface: concertoInterfaces.SNPRspInterface},
]
  ,          portsDelimiter: '\n    '
        })=\

//=============================================================================
// DTRreq TX FIFO
//=============================================================================
    \=u.instance ({
        instanceName: 'dtr_req_tx_fifo',
        moduleName: 'fifo_bundle',
        params: {
            width: bundleFunctions.getBundleWidth(concertoInterfaces.DTRReqTxInterface, ['valid', 'ready'],  u.bundle),
            depth: 2,
            zerodepth: 0,
            bypass_mode: 0,
            interface: concertoInterfaces.DTRReqTxInterface
        },
        ports: {
            clk     : clkInterfaceName+'clk',
            reset_n : clkInterfaceName+'reset_n'
        },
        interfaces: [
            {modulePrefix: 'push_', localPrefix: 'stt_dtr_req_tx_', interface: concertoInterfaces.DTRReqTxInterface},
            {modulePrefix: 'pop_',  localPrefix: 'dtr_req_tx_',     interface: concertoInterfaces.DTRReqTxInterface}]
        })=\

//=============================================================================
// CMDreq FIFO
//=============================================================================

    \=u.instance ({
        instanceName: 'cmd_req_fifo',
        moduleName: 'fifo_bundle',
        params: {
            width: bundleFunctions.getBundleWidth(concertoInterfaces.CMDReqInterface, ['valid', 'ready'],  u.bundle),
            depth: 2,
            zerodepth: 0,
            bypass_mode: 0,
            interface: concertoInterfaces.CMDReqInterface
        },
        ports: {
            clk     : clkInterfaceName+'clk',
            reset_n : clkInterfaceName+'reset_n'
        },
        interfaces: [
            {modulePrefix: 'push_', localPrefix: 'ott_cmd_req_', interface: concertoInterfaces.CMDReqInterface},
            {modulePrefix: 'pop_',  localPrefix: 'cmd_req_',     interface: concertoInterfaces.CMDReqInterface}]
        })=\

//=============================================================================
// DTWreq Arbiter
// DTWreq FIFO
//=============================================================================

wire dtw_req_fifo_push_valid;
wire dtw_req_fifo_pop_valid;
wire dtw_req_fifo_pop_ready;
wire dtw_req_fifo_push_ready;

assign dtw_req_pre_ready = dtw_req_fifo_push_ready;  

\jsbegin
var dtw_muxarb_interfaces_array = [
        {modulePrefix: 'sink0_',  localPrefix: 'ott_dtw_req_mst_', interface: concertoInterfaces.DTWReqInterface},
        {modulePrefix: 'sink1_',  localPrefix: 'stt_dtw_req_mst_', interface: concertoInterfaces.DTWReqInterface},
        {modulePrefix: 'source_', localPrefix: 'dtw_req_pre_',     interface: concertoInterfaces.DTWReqInterface}
    ];
if (chi_e) {
dtw_muxarb_interfaces_array.push({modulePrefix: 'sink2_',  localPrefix: 'ott_dtwzero_req_mst_', interface: concertoInterfaces.DTWReqInterface});
}

\jsend

\=obj.lib.instance({
    instanceName: 'dtw_muxarb',
    moduleName: 'muxarb_bundle',
    params: {
            number_of_inputs: chi_e ? 3 : 2,
            width: bundleFunctions.getBundleWidth(concertoInterfaces.DTWReqInterface, ['valid','ready'], obj.lib.bundle),
            sink_type: 'RdyVld',
            pipeline: 1,
            arb_priority: 'RoundRobin',
            sfi_compliant: 1,
            output_grant: 0,
            interface:  concertoInterfaces.DTWReqInterface ,
            noLastSignal: 0 
    },
    ports: {
        clk                    : 'gated_clk',
        reset_n                : 'gated_reset_n',
    },
    interfaces: dtw_muxarb_interfaces_array,
    portsDelimiter: '\n'
})=\

wire [\=dtw_req_width=\-1:0] dtw_req_fifo_pre_in;
wire [\=dtw_req_width=\-1:0] dtw_req_fifo_out;

assign dtw_req_fifo_pre_in = \=bundleFunctions.packetizeBundle('dtw_req_pre_', concertoInterfaces.DTWReqInterface,['valid','ready'], obj.lib.bundle )=\ ;

\jsbegin
    var dtw_req_FifoParams = {
        width       : dtw_req_width,
        depth       : 2,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_dtw_req_fifo = {
        clk                 : 'gated_clk',
        reset_n             : 'gated_reset_n',
        push_data           : 'dtw_req_fifo_pre_in',
        push_valid          : 'dtw_req_fifo_push_valid',
        push_ready          : 'dtw_req_fifo_push_ready',
        pop_data            : 'dtw_req_fifo_out',
        pop_valid           : 'dtw_req_fifo_pop_valid',
        pop_ready           : 'dtw_req_fifo_pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'dtw_req_fifo',
        moduleName: 'fifo',
        params : dtw_req_FifoParams,
        verilogParams: {},
        ports: instance_ports_for_dtw_req_fifo,
        portsDelimiter: '\n    '
    })=\

assign dtw_req_fifo_push_valid = dtw_req_pre_valid;

assign dtw_req_valid = dtw_req_fifo_pop_valid;

assign dtw_req_fifo_pop_ready = dtw_req_ready;

assign \=bundleFunctions.packetizeBundle('dtw_req_', concertoInterfaces.DTWReqInterface, ['valid','ready'], obj.lib.bundle)=\ = dtw_req_fifo_out;

//=============================================================================
// Addres Map
//=============================================================================

    \js for (var i = 0; i < nregions; i++ ) {
wire CAIUGPRAR\=i=\_ReadID_out;
wire CAIUGPRAR\=i=\_WriteID_out;
wire [1:0]  CAIUGPRAR\=i=\_Policy_out;
wire [1:0]  CAIUGPRAR\=i=\_NSX_out;
wire CAIUGPRAR\=i=\_Valid_out;
wire CAIUGPRAR\=i=\_HUT_out;
wire [5:0]  CAIUGPRAR\=i=\_Size_out;
wire [4:0]  CAIUGPRAR\=i=\_HUI_out;
//wire [2:0]  CAIUGPRAR\=i=\_DIGId_out;
wire [31:0] CAIUGPRBLR\=i=\_AddrLow_out;
wire [7:0]  CAIUGPRBHR\=i=\_AddrHigh_out;
    \js }

wire CAIUBRAR_Valid_out;
wire CAIUBRAR_HUT_out;
//wire CAIUBRAR_ST_out;
//wire [2:0]   CAIUBRAR_DIGId_out;
wire [4:0]   CAIUBRAR_HUI_out;
wire [5:0]   CAIUBRAR_Size_out;
wire [31:0]  CAIUBRBLR_AddrLow_out;
wire [7:0]   CAIUBRBHR_AddrHigh_out;

wire CAIUAMIGR_Valid_out;
wire [3:0]   CAIUAMIGR_AMIGS_out;
wire [2:0]   CAIUMIFSR_A16WIFId_out;
wire [2:0]   CAIUMIFSR_A8WIFId_out;
wire [2:0]   CAIUMIFSR_A4WIFId_out;
wire [2:0]   CAIUMIFSR_A3WIFId_out;
wire [2:0]   CAIUMIFSR_A2WIFId_out;
wire [31:0]  NRSBAR_NRSBA_out;

assign csr_access_nrs_valid = CAIUNRSAR_NRSAR_out;

wire csr_access_nrs_error;

\jsbegin

let dmiIGSV   = m.ParamDefaultGet(u, 'dmiIGSV', 'array', []);
let dmi2WIFV  = m.ParamDefaultGet(u, 'dmi2WIFV', 'array', []);
let dmi3WIFV  = m.ParamDefaultGet(u, 'dmi3WIFV', 'array', []);
let dmi4WIFV  = m.ParamDefaultGet(u, 'dmi4WIFV', 'array', []);
let dmi8WIFV  = m.ParamDefaultGet(u, 'dmi8WIFV', 'array', []);
let dmi16WIFV = m.ParamDefaultGet(u, 'dmi16WIFV', 'array', []);

var addr_map_ports  = {};
var DcePrimaryBits = u.getParam('DcePrimaryBits');
var DceSecondaryBits = u.getParam('DceSecondaryBits') ;

    addr_map_ports['csr_access_nrs_valid'] = 'csr_access_nrs_valid';
    addr_map_ports['csr_access_nrs_error'] = 'csr_access_nrs_error';

    addr_map_ports['GPRAR_NSX']        = "GPRAR_NSX";

for (var i = 0; i < nregions; i++ ) {
    addr_map_ports['GPRAR'+i+'_Valid']      = "CAIUGPRAR"+i+"_Valid_out";
    addr_map_ports['GPRAR'+i+'_HUT']        = "CAIUGPRAR"+i+"_HUT_out";
    addr_map_ports['GPRAR'+i+'_Size']       = "CAIUGPRAR"+i+"_Size_out";
    addr_map_ports['GPRAR'+i+'_HomeUnitId'] = "CAIUGPRAR"+i+"_HUI_out";
    //addr_map_ports['GPRAR'+i+'_DIGId']      = "CAIUGPRAR"+i+"_DIGId_out";
    addr_map_ports['GPRBAR'+i+'_AddrLo']    = "CAIUGPRBLR"+i+"_AddrLow_out";
    addr_map_ports['GPRBAR'+i+'_AddrHi']    = "CAIUGPRBHR"+i+"_AddrHigh_out";
    addr_map_ports['GPRAR'+i+'_NSX']        = "CAIUGPRAR"+i+"_NSX_out";
}

    addr_map_ports['BRAR_Valid']            = "CAIUBRAR_Valid_out";
    addr_map_ports['BRAR_HUT']              = "CAIUBRAR_HUT_out";
    addr_map_ports['BRAR_Size']             = "CAIUBRAR_Size_out";
    addr_map_ports['BRAR_HomeUnitId']       = "CAIUBRAR_HUI_out";
    //addr_map_ports['BRAR_DIGId']            = "CAIUBRAR_DIGId_out";
    addr_map_ports['BRBAR_AddrLo']          = "CAIUBRBLR_AddrLow_out";
    addr_map_ports['BRBAR_AddrHi']          = "CAIUBRBHR_AddrHigh_out";

    addr_map_ports['AMIGR_Valid']           = "CAIUAMIGR_Valid_out";
    addr_map_ports['AMIGR_AMIGS']           = "CAIUAMIGR_AMIGS_out";
    addr_map_ports['AMIFR_A16WIFId']        = "CAIUMIFSR_A16WIFId_out";
    addr_map_ports['AMIFR_A8WIFId']         = "CAIUMIFSR_A8WIFId_out";
    addr_map_ports['AMIFR_A4WIFId']         = "CAIUMIFSR_A4WIFId_out";
    addr_map_ports['AMIFR_A3WIFId']         = "CAIUMIFSR_A3WIFId_out";
    addr_map_ports['AMIFR_A2WIFId']         = "CAIUMIFSR_A2WIFId_out";

    addr_map_ports['NRSBAR_BaseAddr']       = "NRSBAR_NRSBA_out"; 
    addr_map_ports['NRSBAR_DiiId']          = "4'h0";

    addr_map_ports['address_valid']         = "req_valid & ~dvm_entry_write";
    addr_map_ports['address']               = "chi_rx_req_addr_mod";
    addr_map_ports['dii_id_valid']          = "dii_id_valid";
    addr_map_ports['dii_id']                = "dii_id";
    addr_map_ports['dii_f_unit_id']         = "dii_f_unit_id";
    addr_map_ports['dmi_id_valid']          = "dmi_id_valid";
    addr_map_ports['dmi_id']                = "dmi_id";
    addr_map_ports['dmi_f_unit_id']         = "dmi_f_unit_id";
    addr_map_ports['dmi_mig']               = "dmi_mig";
    addr_map_ports['dce_id_valid']          = "dce_id_valid";
    addr_map_ports['dce_id']                = "dce_id";
    addr_map_ports['dce_f_unit_id']         = "dce_f_unit_id";

    addr_map_ports['nrs_selfidr_hit']       = "nrs_selfidr_hit";
    addr_map_ports['addressing_error_hit_multi']  = "addressing_error_hit_multi";
    addr_map_ports['addressing_error_hit_none']   = "addressing_error_hit_none";


    for (var i = 0; i < nDmis; i++) {
    addr_map_ports['dmi'+i+'_f_unit_id'] = dmiIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
    }

    for (var i = 0; i < nDiis; i++) {
    addr_map_ports['dii'+i+'_f_unit_id'] = diiIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
    }

    for (var i = 0; i < nDCEs; i++) {
    addr_map_ports['dce'+i+'_f_unit_id'] = dceIdInterfaceName + 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
    }

    addr_map_ports['hexAiuDceVec'] = 'hexAiuDceVec';
    addr_map_ports['hexAiuDmiVec'] = 'hexAiuDmiVec';
    addr_map_ports['hexAiuDiiVec'] = 'hexAiuDiiVec';
    addr_map_ports['unconnected_dce_access'] = 'unconnected_dce_access';
    addr_map_ports['unconnected_dmi_access'] = 'unconnected_dmi_access';
    addr_map_ports['unconnected_dii_access'] = 'unconnected_dii_access';
    addr_map_ports['nrs_region_hit'] = 'nrs_region_hit';
    addr_map_ports['gpr_region_hit'] = 'gpr_region_hit';
    addr_map_ports['bra_region_hit'] = 'bra_region_hit';
    addr_map_ports['size_of_ig'] = '';

\jsend

\=u.instance({
        moduleName: 'ncore3_addr_map',
        instanceName: 'ncore3_addr_map',
        params: {
                useNsx:       1,
                useCsrAccess: 1,
                instantiator: 'aiu',  
                wSysAddr:    wSysAddr,
                nGPRA:       nregions,
                wFUnitId:    unit_id_width,
                nDmis:       nDmis,
                nDiis:       nDiis,
                nDces:       nDCEs,
                dmiIGSV:     dmiIGSV,
                dmi2WIFV:    dmi2WIFV,
                dmi3WIFV:    dmi3WIFV,
                dmi4WIFV:    dmi4WIFV,
                dmi8WIFV:    dmi8WIFV,
                dmi16WIFV:   dmi16WIFV,
                useAMIFR_A16W_A8W: 1,
                DcePrimaryBits : DcePrimaryBits,
                DceSecondaryBits : DceSecondaryBits   
        },
        ports : addr_map_ports,
        portsDelimiter: '\n\t'
})=\

assign map_target_f_unit_id = dmi_id_valid ? dmi_f_unit_id : dii_id_valid ? dii_f_unit_id : \=unit_id_width=\'b0;
assign map_dce_f_unit_id = dce_f_unit_id;

// Ignore addr map error for dvm requests as dvm op addreses may not map to any dmi/dii region

assign addr_map_error = (addressing_error_hit_multi | addressing_error_hit_none) & req_valid & ~dvm_entry_write;

wire addressing_error_hit_multi_qual = addressing_error_hit_multi & req_valid & ~dvm_entry_write;
wire addressing_error_hit_none_qual  = addressing_error_hit_none  & req_valid & ~dvm_entry_write;

wire unconnected_dmi_access_qual = unconnected_dmi_access & req_valid & ~dvm_entry_write;
wire unconnected_dii_access_qual = unconnected_dii_access & req_valid & ~dvm_entry_write;
wire unconnected_dce_access_qual = unconnected_dce_access & req_valid & ~dvm_entry_write;

//=============================================================================
// CHI AIU Debug Trigger Instance
//=============================================================================

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (nativeTrigger.signals.trace) { \jsend
assign \=nativeTrigger.name=\trace = RXREQFLIT_TraceTag;
\js }

assign \=nativeTrigger.name=\addr = chi_rx_req_addr_mod;
assign \=nativeTrigger.name=\size_of_ig = 4'b0;
assign \=nativeTrigger.name=\opcode = RXREQFLIT_Opcode;

assign \=nativeTrigger.name=\dmi_hit = dmi_id_valid;
assign \=nativeTrigger.name=\dii_hit = dii_id_valid;
assign \=nativeTrigger.name=\hui = dii_id_valid ? dii_id : dmi_mig;
assign \=nativeTrigger.name=\memattr = RXREQFLIT_MemAttr; 

\js if(nativeTrigger.signals.user) {
assign \=nativeTrigger.name=\user = RXREQFLIT_RSVDC;
\js } 

\=u.instance({
    instanceName : 'u_trace_trigger',
    moduleName : 'trace_trigger',
    params: {
        nTraceRegisters : nTraceRegisters,
        clkInterface : clkInterfaceWithName,
        nativeTrigger : nativeTrigger, 
        csrInterface : traceTrigCsrInterface
    },
    ports: {
        tracetag : "tracetagTrigger"
    },
    interfaces : [clkInterfaceWithName, nativeTrigger, traceTrigCsrInterface].map(getModuleLocalPrefixAndInterface) // Array of trace-trigger interfaces is converted to array of {modulePrefix, localPrefix, interface} objects
})=\

//=============================================================================
// CHI AIU PMON Instance
//=============================================================================
\jsbegin
for (let i=0; i< pmonEventTable.length; i++) { \jsend
	assign \=pmonInterfaces.evtInterfaces[i].name=\val		= \=pmonEventTable[i].expr=\; \jsbegin
} \jsend

// Connect BW events and latencyInterfaces
assign opcode_wr         =   (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.WriteUniquePtl=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.WriteUniqueFull=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.WriteNoSnpFull=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.WriteNoSnpPtl=\);

assign opcode_rd         =   (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadClean=\)  
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadUnique=\) 
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadShared=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadNotSharedDirty=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadOnce=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadOnceCleanInvalid=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadOnceMakeInvalid=\)
                         | (RXREQFLIT_Opcode == \=req_flit_interface.Opcode=\\=chi_cmd.ReadNoSnp=\);


assign cmd_req_rd_cm_type 	=  (cmd_req_cm_type == \=cmType.CmdRdCln=\)  
                         | (cmd_req_cm_type == \=cmType.CmdRdUnq=\) 
                         | (cmd_req_cm_type == \=cmType.CmdRdVld=\)
                         | (cmd_req_cm_type == \=cmType.CmdRdNshDty=\)
                         | (cmd_req_cm_type == \=cmType.CmdRdNitc=\)
                         | (cmd_req_cm_type == \=cmType.CmdRdNitcCI=\)
                         | (cmd_req_cm_type == \=cmType.CmdRdNitcMI=\)
                         | (cmd_req_cm_type == \=cmType.CmdRdNC=\);
	

assign cmd_req_wr_cm_type = (cmd_req_cm_type== \=cmType.CmdWrStshFull=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrStshPtl=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrUnqPtl=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrUnqFull=\) 
                        | (cmd_req_cm_type == \=cmType.CmdWrNCPtl=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrNCFull=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrBkPtl=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrBkFull=\)
                        | (cmd_req_cm_type == \=cmType.CmdWrClnPtl=\)
			| (cmd_req_cm_type == \=cmType.CmdWrClnFull=\) 
			| (cmd_req_cm_type == \=cmType.CmdWrEvict=\);

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if(nPerfCounters) { \jsend
assign \=pmonInterfaces.filterAttrInterfaces[0].name=\funit_id   = cmd_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];
assign \=pmonInterfaces.filterAttrInterfaces[1].name=\funit_id   = cmd_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];
assign \=pmonInterfaces.filterAttrInterfaces[2].name=\funit_id   = snp_rsp_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\]; \jsbegin

if(concertoInterfaces.CMDReqInterface.aux ) { \jsend
assign \=pmonInterfaces.filterAttrInterfaces[0].name=\user   = cmd_req_aux;
assign \=pmonInterfaces.filterAttrInterfaces[1].name=\user   = cmd_req_aux; \jsbegin
} \jsend

assign \=pmonInterfaces.filterAttrInterfaces[2].name=\user   = 1'b0; 

assign \=pmonInterfaces.latencyInterfaces[0].name=\alloc    = ott_alloc & {\=cmpInfo.nOttCtrlEntries=\{opcode_rd}};
assign \=pmonInterfaces.latencyInterfaces[0].name=\dealloc  = ott_dealloc;

assign \=pmonInterfaces.latencyInterfaces[1].name=\alloc    = ott_alloc & {\=cmpInfo.nOttCtrlEntries=\{opcode_wr}};
assign \=pmonInterfaces.latencyInterfaces[1].name=\dealloc  = ott_dealloc;


\=u.nInstance({
    instanceName : 'u_ncr_pmon',
    moduleName : 'ncr_pmon',
    params: {
        nPerfCounters,
	    bwEvtMapping        : m.generateBwEvtMapping( filterAttributesMap ),
	    nLatencyCounters    : 16,
		interfaces          : pmonInterfaces
    },
    interfaceObj: {
		interfaces: pmonInterfaces,
		prefixes: pmonInterfaces 
    }
})=\ \jsbegin
} \jsend
//=============================================================================
// Divider by 16 
//=============================================================================
\=u.instance({
    instanceName: 'clk_divider' ,
    moduleName: 'clk_divider',
    params: {
	clkDivisors: [16],
	clkInterface :clkInterfaceWithName,	
	clkOutInterfaces: [clk16Interface]
    },
    interfaces :[clkInterfaceWithName, clk16Interface].map(getModuleLocalPrefixAndInterface),
    portsDelimiter: '\n    '
})=\

//=============================================================================
// CHI AIU CSR Instance
//=============================================================================

\jsbegin

//-----------------------------------------------------------------------------
// CSR Control Interfaces
//-----------------------------------------------------------------------------

var csr_interfaces = [];
var chi_aiu_num = 0

csr_interfaces[chi_aiu_num] = {
            modulePrefix  : '',
            localPrefix   : clkInterfaceName,
            interface     : intClkInterface 
} ;

   chi_aiu_num++

csr_interfaces[chi_aiu_num] = {
            modulePrefix  : apbInterfaceName,
            localPrefix   : apbInterfaceName,
            interface     : apbInterface
};


   chi_aiu_num++

csr_interfaces[chi_aiu_num] = {
            modulePrefix  : 'caiu_',
            localPrefix   : 'csr_trace_',
            interface     : traceCaptureCsrIfGenerator.signalBundle("slave")
};

    chi_aiu_num++
csr_interfaces[chi_aiu_num] = {
            modulePrefix  : 'CAIU',
            localPrefix   : 'CAIU',
            interface     :  traceCsrIfGenerator.signalBundle("slave")
};
    chi_aiu_num++
csr_interfaces[chi_aiu_num] = {
            modulePrefix  : oldStylePmonCsrInterface.name,
            localPrefix   : oldStylePmonCsrInterface.name,
            interface     : oldStylePmonCsrInterface.signals
};

    chi_aiu_num++
csr_interfaces[chi_aiu_num] = {
            modulePrefix  : ccrCsrInterface.name,
            localPrefix   : ccrCsrInterface.name,
            interface     : ccrCsrInterface.signals
};




\jsend

//-----------------------------------------------------------------------------
// Error reporting
//-----------------------------------------------------------------------------

wire [15:0] caiu_corr_err_info;
wire [3:0]  caiu_corr_err_type;
wire [19:0] caiu_uncorr_err_info;
wire [3:0]  caiu_uncorr_err_type;
wire [19:0] caiu_uncorr_err_entry ;
wire [5:0]  caiu_uncorr_err_way ;
wire [5:0]  caiu_uncorr_err_word ;
wire [\=wSysAddr-1=\:0] caiu_uncorr_err_erraddr ;

wire [\=wAddr=\-1:0] rx_req_addr_d;

\=u.dffre(wAddr, 'rx_req_addr_d', 'chi_rx_req_addr', wAddr+"'b0", 'req_valid', 'gated_clk', 'gated_reset_n')=\

//-----------------------------------------------------------------------------
// Write Response Error
//-----------------------------------------------------------------------------
wire wr_rsp_error  = TXRSPFLIT_RespErr[1] & rn_rsp_out_write;

//-----------------------------------------------------------------------------
// Timeout Error
//-----------------------------------------------------------------------------
assign chi_aiu_timeout_error_UCE = timeout_error | csr_sys_evt_receiver_err_event_timeout | csr_sys_coh_sender_err_protocol_timeout;

//-----------------------------------------------------------------------------
// Transport Error
//-----------------------------------------------------------------------------
wire wrong_target_id_err = cmd_rsp_target_id_error | str_req_target_id_error | dtr_req_target_id_error | dtr_rsp_target_id_error | dtw_rsp_target_id_error | snp_req_target_id_error | cmp_rsp_target_id_error | sys_req_target_id_error | sys_rsp_target_id_error | dtw_dbg_rsp_target_id_error;

assign transport_uce = wrong_target_id_err | chi_aiu_cmux_UCE;
assign chi_aiu_transport_error_UCE = transport_uce;
assign transport_ce  = chi_aiu_cmux_CE;

wire [\=src_id_width=\-1:0] source_id;

assign source_id = (cmd_rsp_target_id_error | chi_aiu_cmux_cmd_rsp_CE) ? cmd_rsp_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (str_req_target_id_error | chi_aiu_cmux_str_req_CE) ? str_req_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (dtr_req_target_id_error | chi_aiu_cmux_dtr_req_rx_CE) ? dtr_req_rx_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (dtr_rsp_target_id_error | chi_aiu_cmux_dtr_rsp_rx_CE) ? dtr_rsp_rx_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] : 
                   (dtw_rsp_target_id_error | chi_aiu_cmux_dtw_rsp_CE) ? dtw_rsp_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (snp_req_target_id_error | chi_aiu_cmux_snp_req_CE) ? snp_req_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (cmp_rsp_target_id_error | chi_aiu_cmux_cmp_rsp_CE) ? cmp_rsp_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (sys_req_target_id_error | chi_aiu_cmux_sys_req_rx_CE) ? sys_req_rx_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                   (sys_rsp_target_id_error | chi_aiu_cmux_sys_rsp_rx_CE) ? sys_rsp_rx_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\] :
                                             dtw_dbg_rsp_initiator_id[\=initiator_id_width-1=\:\=port_id_width=\];

wire illegal_dii_access_type = unsupported_dii_cmd;

//-----------------------------------------------------------------------------
// Decode Error
//-----------------------------------------------------------------------------

//wire decode_error = q_addr_map_error | illegal_dii_access_type;
wire decode_error = q_addr_map_error_raw     |
                    unsupported_dii_cmd      |
                    q_csr_access_nrs_error   |
                    q_illegal_csr_access_format |
                    q_nsx_access_error       |
                    illegal_dii_access_type;

assign chi_aiu_native_decode_err_UCE = 1'b0; //CONC-7064 //decode_error;

// Native Interface Snoop response Error

assign chi_aiu_native_snp_resp_UCE = 1'b0; //CONC-7288 //chi_snp_resp_error;

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if(useSysEvtCoh) { \jsend
// Sysco Sys Resp Error
assign chi_aiu_protocol_sys_co_rsp_UCE = csr_sys_coh_sender_err_protocol_sys & csr_sys_coh_sender_err_detected; \jsbegin
} \jsend

// Software Programming or Configuration Error
wire sw_prog_error = no_credits_access_error | q_unconnected_dmi_access | q_unconnected_dii_access | q_unconnected_dce_access;

//Error logging
wire addressing_error_hit_multi_qual_d;
wire addressing_error_hit_none_qual_d;
wire [\=wReqFlit_Opcode=\-1:0] rx_req_opcode_d;
wire [\=wFlit_TxnID=\-1:0] rx_req_txnid_d;
wire [19:0] caiu_uncorr_err_info_wr_rsp_error;
wire [19:0] caiu_uncorr_err_info_decode_error;
wire [19:0] caiu_uncorr_err_info_sw_prog_error;
wire [19:0] caiu_uncorr_err_info_snp_resp_error;
wire [19:0] caiu_uncorr_err_info_transport_error;
wire [19:0] caiu_uncorr_err_info_timeout_error;
wire [19:0] caiu_uncorr_err_info_intf_check_error;
wire [19:0] caiu_uncorr_err_info_unsupported_msg_error;
wire [15:0] caiu_corr_err_info_transport_error;

\=u.dffre(wReqFlit_Opcode, 'rx_req_opcode_d', 'RXREQFLIT_Opcode', wReqFlit_Opcode+"'b0", 'req_valid', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(wFlit_TxnID,     'rx_req_txnid_d',  'RXREQFLIT_TxnID',  wFlit_TxnID+"'b0",     'req_valid', 'gated_clk', 'gated_reset_n')=\

\=u.dffre(1, 'q_nrs_region_hit',                  'nrs_region_hit',                  "1'b0", 'req_valid',  'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'q_gpr_region_hit',                  'gpr_region_hit',                  "1'b0", 'req_valid',  'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'q_bra_region_hit',                  'bra_region_hit',                  "1'b0", 'req_valid',  'gated_clk', 'gated_reset_n')=\

\=u.dffre(1, 'q_csr_access_nrs_error',            'csr_access_nrs_error',            "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'q_addr_map_error_raw',              'addr_map_error',                  "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'addressing_error_hit_multi_qual_d', 'addressing_error_hit_multi_qual', "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'addressing_error_hit_none_qual_d',  'addressing_error_hit_none_qual',  "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'q_unconnected_dmi_access',          'unconnected_dmi_access_qual',     "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'q_unconnected_dii_access',          'unconnected_dii_access_qual',     "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(1, 'q_unconnected_dce_access',          'unconnected_dce_access_qual',     "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\

wire chi_write_req  =   (rx_req_opcode_d== \=wReqFlit_Opcode=\\=chi_cmd.WriteUniquePtl=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteUniqueFull=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteNoSnpFull=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteNoSnpPtl=\) 
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteBackPtl=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteBackFull=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteCleanFull=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteCleanPtl=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteEvictFull=\)
    \js if (chi_e) {
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteUniqueZero=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteNoSnpZero=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteNoSnpFullCleanSh=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteNoSnpFullCleanInv=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteNoSnpFullCleanShPerSep=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteBackFullCleanSh=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteBackFullCleanInv=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteBackFullCleanShPerSep=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteCleanFullCleanSh=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteCleanFullCleanShPerSep=\)
                        | (rx_req_opcode_d == \=wReqFlit_Opcode=\\=chi_cmd.WriteEvictOrEvict=\)
    \js }
                        ;

// Unsupported Message Error \jsbegin
var unsupportedOpcodes = [
"WriteUniqueFullStash", 
"WriteUniquePtlStash", 
"StashOnceSepShared", 
"StashOnceSepUnique",  
"WriteUniqueFullCleanSh", 
"WriteUniquePtlCleanSh", 
"WriteNoSnpPtlCleanSh", 
"WriteNoSnpPtlCleanInv", 
"WriteUniqueFullCleanShPerSep", 
"WriteUniquePtlCleanShPerSep", 
"WriteNoSnpPtlCleanShPerSep", 
"PCrdReturn", 
"ReqLCrdReturn"
];

var unrecognizedOpcodes = [    // Opcodes listed as Reserved in CHI spec
"{1'b0, 6'h6}",
"{1'b0, 6'he}",
"{1'b0, 6'hf}",
"{1'b0, 6'h10}",
"{1'b0, 6'h12}",
"{1'b0, 6'h16}",
"{1'b0, 6'h1e}",
"{1'b0, 6'h1f}",
"{1'b0, 6'h3b}",
"{1'b0, 6'h3c}",
"{1'b0, 6'h3d}",
"{1'b0, 6'h3e}",
"{1'b0, 6'h3f}",
"{1'b1, 6'h5}",
"{1'b1, 6'h6}",
"{1'b1, 6'h9}",
"{1'b1, 6'ha}",
"{1'b1, 6'hb}",
"{1'b1, 6'hd}",
"{1'b1, 6'he}",
"{1'b1, 6'hf}",
"{1'b1, 6'h13}",
"{1'b1, 6'h15}",
"{1'b1, 6'h17}",
"{1'b1, 6'h1b}",
"{1'b1, 6'h1d}",
"{1'b1, 6'h1f}",
"{1'b1, 6'h23}",
"{1'b1, 6'h25}",
"{1'b1, 6'h27}",
"{1'b1, 6'h28}",
"{1'b1, 6'h29}",
"{1'b1, 6'h2a}",
"{1'b1, 6'h2b}",
"{1'b1, 6'h2c}",
"{1'b1, 6'h2d}",
"{1'b1, 6'h2e}",
"{1'b1, 6'h2f}",
"{1'b1, 6'h27}",
"{1'b1, 6'h30}",
"{1'b1, 6'h31}",
"{1'b1, 6'h32}",
"{1'b1, 6'h33}",
"{1'b1, 6'h34}",
"{1'b1, 6'h35}",
"{1'b1, 6'h36}",
"{1'b1, 6'h37}",
"{1'b1, 6'h38}",
"{1'b1, 6'h39}",
"{1'b1, 6'h3a}",
"{1'b1, 6'h3b}",
"{1'b1, 6'h3c}",
"{1'b1, 6'h3d}",
"{1'b1, 6'h3e}",
"{1'b1, 6'h3f}"
]; \jsend

wire [\=unsupportedOpcodes.length-1=\:0] unsupported_txn_hit;
wire [\=unrecognizedOpcodes.length-1=\:0] unrecognized_txn_hit;
wire unsupported_txn;
wire unrecognized_txn;
wire unsupported_msg_error;

\jsbegin
for(var i=0; i<unsupportedOpcodes.length; i++) { \jsend
  assign unsupported_txn_hit[\=i=\]           = 
\js if (wReqFlit_Opcode==6) {
                                          {1'b0,rx_req_opcode_d}== 7\=chi_cmd[ unsupportedOpcodes[i] ]=\; // \=unsupportedOpcodes[i]=\
\js } else {
                                                rx_req_opcode_d == 7\=chi_cmd[ unsupportedOpcodes[i] ]=\; // \=unsupportedOpcodes[i]=\
\js }
\jsbegin
}

for(var i=0; i<unrecognizedOpcodes.length; i++) { \jsend
  assign unrecognized_txn_hit[\=i=\]          = 
\js if (wReqFlit_Opcode==6) {
                                          {1'b0,rx_req_opcode_d}== \=unrecognizedOpcodes[i]=\;
\js } else {
                                                rx_req_opcode_d == \=unrecognizedOpcodes[i]=\;
\js }
\jsbegin
} \jsend

  \=u.instance({
    instanceName: 'u_unsupported_txn_hit_or',
    moduleName:   'logic_tree',
    params: {'width' : unsupportedOpcodes.length,
             'logic' : '|'},
    ports: { 'din'  : 'unsupported_txn_hit',
             'dout' : 'unsupported_txn' }
    })=\

  \=u.instance({
    instanceName: 'u_unrecognized_txn_hit_or',
    moduleName:   'logic_tree',
    params: {'width' : unrecognizedOpcodes.length,
             'logic' : '|'},
    ports: { 'din'  : 'unrecognized_txn_hit',
             'dout' : 'unrecognized_txn' }
    })=\

assign unsupported_msg_error     = unsupported_txn; // | unrecognized_txn;

//error info is 2'b0 for no address hit and 1'b0 for wrong target id. Following logic optimizes this.
//For CHI Snp Resp Data Err (chi_snp_resp[1:0] ==2'b10), cm_status[1:0] sent on SMI is 2'b11.
//For CHI Snp Resp Non Data Err (chi_snp_resp[1:0] ==2'b11), cm_status[1:0] sent on SMI is 2'b10. The chi resp needs to be logged 

assign caiu_uncorr_err_info_decode_error[7:4]     = {3'd0, chi_write_req};
assign caiu_uncorr_err_info_decode_error[3:0]     = addressing_error_hit_none_qual_d | q_csr_access_nrs_error ? 4'd0 :
                                                    addressing_error_hit_multi_qual_d ? 4'd1 :
                                                    q_illegal_csr_access_format       ? 4'd2 :
                                                    illegal_dii_access_type           ? 4'd3 :
                                                    4'd4;   // q_nsx_access_error
\jsbegin
/* istanbul ignore if env ncore_3p6, ncore_3p7 */
if(wFlit_TxnID >= 12) { \jsend
assign caiu_uncorr_err_info_decode_error[19:8]    = rx_req_txnid_d[11:0]; \jsbegin

} else { \jsend
assign caiu_uncorr_err_info_decode_error[19:8]    = { \=12-wFlit_TxnID=\'d0, rx_req_txnid_d }; \jsbegin

} \jsend

assign caiu_uncorr_err_info_snp_resp_error[7:0]   =  {5'b0, chi_snp_resp_ns, chi_snp_resp_err_info[1:0]};
assign caiu_uncorr_err_info_snp_resp_error[19:8]  =  \=vlogSignal( snp_flit_interface.TxnID, "chi_snp_resp_txn_id" ).extend0(12)=\;

assign caiu_corr_err_info_transport_error[15:0]   = {\=10-src_id_width=\'b0, source_id, 6'h0}; 
assign caiu_uncorr_err_info_transport_error[19:1] = {\=12-src_id_width=\'b0, source_id, 7'h0}; 
assign caiu_uncorr_err_info_transport_error[0]    = wrong_target_id_err ? 1'b0 : chi_aiu_cmux_UCE; 

assign caiu_uncorr_err_info_timeout_error[1:0]    = timeout_cmd_read ? 2'd0 : (timeout_cmd_write | timeout_cmd_writeevictorevict) ? 2'd1 : timeout_cmd_dataless ? 2'd2 : timeout_cmd_dvm ? 2'd3 : 2'd0;
assign caiu_uncorr_err_info_timeout_error[7:2]    = { 5'h0, timeout_ns };
assign caiu_uncorr_err_info_timeout_error[19:8]   = \=vlogSignal( req_flit_interface.TxnID, "timeout_cmd_txn_id" ).extend0(12)=\;

assign caiu_uncorr_err_info_sw_prog_error[19:4]   = 16'h0;
assign caiu_uncorr_err_info_sw_prog_error[3:0]    = no_credits_access_error   ? 4'h1 :
                                                    q_unconnected_dmi_access  ? 4'h2 :
                                                    q_unconnected_dii_access  ? 4'h3 :
                                                    q_unconnected_dce_access  ? 4'h5 :
                                                    4'h6;
assign caiu_uncorr_err_info_intf_check_error[19:4] = 16'h0; 
assign caiu_uncorr_err_info_intf_check_error[3:0] = chk_rx_req_perr                    ? {1'b1, 3'd0} :
                                                    chk_tx_rsp_perr                    ? {1'b1, 3'd1} :
                                                    chk_rx_dat_perr                    ? {1'b1, 3'd2} :
                                                    chk_tx_dat_perr                    ? {1'b1, 3'd3} :
                                                    chk_tx_snp_perr                    ? {1'b1, 3'd4} :
                                                    chk_rx_rsp_perr                    ? {1'b1, 3'd5} :
                                                    chk_sysco_perr                     ? {1'b1, 3'd6} :
                                                    {1'b1, 3'd7};  // chk_rx_perr | chk_rx_link_perr | chk_tx_link_perr

assign caiu_uncorr_err_info_unsupported_msg_error[19:8]  = caiu_uncorr_err_info_decode_error[19:8]; \jsbegin

/* istanbul ignore if env ncore_3p6, ncore_3p7 */
if( wReqFlit_Opcode >=8 ) { \jsend
assign caiu_uncorr_err_info_unsupported_msg_error[7:0]   = rx_req_opcode_d[7:0]; \jsbegin

} else { \jsend
assign caiu_uncorr_err_info_unsupported_msg_error[7:0]   = { \=8-wReqFlit_Opcode=\'h0, rx_req_opcode_d }; \jsbegin

}

/* istanbul ignore if env ncore_3p6, ncore_3p7 */
if( req_flit_interface.TxnID >= 12 ) { \jsend
assign caiu_uncorr_err_info_wr_rsp_error[19:8]     = TXRSPFLIT_TxnID[11:0]; \jsbegin

} else { \jsend
assign caiu_uncorr_err_info_wr_rsp_error[19:8]     = { \=12-req_flit_interface.TxnID=\'h0, TXRSPFLIT_TxnID }; \jsbegin

} \jsend
assign caiu_uncorr_err_info_wr_rsp_error[7:0]      = { 6'h0, TXRSPFLIT_RespErr };


assign caiu_corr_err_info[15:0]  = transport_ce ? caiu_corr_err_info_transport_error[15:0] :
                                   16'h0;
assign caiu_uncorr_err_info[3:0] = wr_rsp_error                       ? caiu_uncorr_err_info_wr_rsp_error[3:0] :
                                   chi_snp_resp_error                 ? caiu_uncorr_err_info_snp_resp_error[3:0] :
                                   decode_error                       ? caiu_uncorr_err_info_decode_error[3:0] :
                                   transport_uce                      ? caiu_uncorr_err_info_transport_error[3:0] :
                                   timeout_error                      ? caiu_uncorr_err_info_timeout_error[3:0] : \jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend
                                   (csr_sys_evt_receiver_err_vld | csr_sys_evt_sender_err_vld) ? ((csr_sys_evt_receiver_err_event_timeout | csr_sys_evt_sender_err_event_timeout) ? 4'b0001 : 4'b0000) : 
				   csr_sys_coh_sender_err_detected  ?  ( csr_sys_coh_sender_err_protocol_timeout ? 4'b0000 : 4'b0001) :
\js }
                                   sw_prog_error                      ? caiu_uncorr_err_info_sw_prog_error[3:0] :
                                   chi_intf_chk_UCE                   ? caiu_uncorr_err_info_intf_check_error[3:0] :
                                   unsupported_msg_error              ? caiu_uncorr_err_info_unsupported_msg_error[3:0] :
                                                                         4'b0000;

assign caiu_uncorr_err_info[19:4] = wr_rsp_error          ? caiu_uncorr_err_info_wr_rsp_error[19:4] :
                                    chi_snp_resp_error    ? caiu_uncorr_err_info_snp_resp_error[19:4] :
                                    decode_error          ? caiu_uncorr_err_info_decode_error[19:4] :
                                    transport_uce         ? caiu_uncorr_err_info_transport_error[19:4] :
                                    timeout_error         ? caiu_uncorr_err_info_timeout_error[19:4] :
                                    unsupported_msg_error ? caiu_uncorr_err_info_unsupported_msg_error[19:4] :
                                                            16'b0;

assign caiu_corr_err_type         = transport_ce        ? 4'd8 : 4'd0;
assign caiu_uncorr_err_type       =  wr_rsp_error       ? 4'd2 :
                                     chi_snp_resp_error ? 4'd4 :
                                     decode_error       ? 4'd7 :
                                     transport_uce      ? 4'd8 :
                                     timeout_error      ? 4'd9 :
                                     sw_prog_error      ? 4'hc :
                                     chi_intf_chk_UCE   ? 4'hd :
\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend
                     (csr_sys_evt_receiver_err_vld | csr_sys_evt_sender_err_vld) ? 4'ha :
                     csr_sys_coh_sender_err_detected ? 4'hb :
\js }
                               unsupported_msg_error ? 4'he :
                                                    4'd0 ;
 
assign caiu_uncorr_err_entry = chi_snp_resp_error ? chi_snp_resp_addr[19:0] :
                               timeout_error      ? timeout_addr[19:0] :
                                                    rx_req_addr_d[19:0];

assign caiu_uncorr_err_way   = chi_snp_resp_error ? chi_snp_resp_addr[25:20] :
                               timeout_error      ? timeout_addr[25:20] :
                                                    rx_req_addr_d[25:20]; 

assign caiu_uncorr_err_word  = chi_snp_resp_error ? chi_snp_resp_addr[31:26] :
                               timeout_error      ? timeout_addr[31:26] :
                                                    rx_req_addr_d[31:26];

\js if (wSysAddr > wAddr) {
assign caiu_uncorr_err_erraddr = chi_snp_resp_error ? {\=wSysAddr - wAddr=\'b0, chi_snp_resp_addr[\=wAddr-1=\:0]} : 
                                 timeout_error      ? {\=wSysAddr - wAddr=\'b0, timeout_addr[\=wAddr-1=\:0]} :
                                 no_credits_access_error ? {\=wSysAddr - wAddr=\'b0, no_credits_access_error_addr[\=wAddr-1=\:0]} :
                                                      {\=wSysAddr - wAddr=\'b0, rx_req_addr_d[\=wAddr-1=\:0]};
\js } else {
assign caiu_uncorr_err_erraddr = chi_snp_resp_error ? chi_snp_resp_addr[\=wAddr-1=\:0] : 
                                 timeout_error      ? timeout_addr[\=wAddr-1=\:0] :
                                 no_credits_access_error ? no_credits_access_error_addr[\=wAddr-1=\:0] :
                                                      rx_req_addr_d[\=wAddr-1=\:0];
\js }

// CSR  Control Instance
wire [7:0] CAIUIDR_RPN_out;
wire [3:0] CAIUIDR_NRRI_out;
wire [11:0] CAIUIDR_NUnitId_out;
wire CAIUIDR_Valid_out;
wire [15:0]  CAIUINFOR_ImplVer_out;
wire [3:0]  CAIUINFOR_UT_out;
wire [2:0]  CAIUINFOR_UST_out;
wire [15:0] CAIUFUIDR_FUnitId_out;
wire [31:0] CAIUUEVIR_EngVerId_out;
wire [7:0]   CAIUCRTR_ResThreshold_out;
wire [31:0]  NRSBHR_NRSBA_out;
wire [9:0]   NRSBLR_NRSDIIId_out;

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (irqInterface.c > 0) {
\jsend
\js } else {
wire my_irq_c;
\js }

assign aiu_id_reg_rd_data = {CAIUIDR_Valid_out, 7'b0, CAIUIDR_NUnitId_out, CAIUIDR_NRRI_out, CAIUIDR_RPN_out};

\jsbegin

var chi_aiu_csr_ports  = {};

chi_aiu_csr_ports['csr_one_dvm_sync']           = 'csr_one_dvm_sync';
chi_aiu_csr_ports['CAIUEDR0_OneDvmSync_out']    = ''; // redundant
chi_aiu_csr_ports['w_starve']                   = 'w_starve';
chi_aiu_csr_ports['CAIUTAR_TransActv_out']      = 'csr_chi_aiu_TransActive';
chi_aiu_csr_ports['my_f_unit_id']               = unitIdInterfaceName+"my_f_unit_id";
chi_aiu_csr_ports['my_n_unit_id']               = unitIdInterfaceName+"my_n_unit_id";
chi_aiu_csr_ports['my_csr_rpn']                 = unitIdInterfaceName+"my_csr_rpn";
chi_aiu_csr_ports['my_csr_nrri']                = unitIdInterfaceName+"my_csr_nrri";
chi_aiu_csr_ports['uc']                         = irqInterfaceName + 'uc';
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (irqInterface.c > 0) {
chi_aiu_csr_ports['c']                          = irqInterfaceName + 'c';
} else {
chi_aiu_csr_ports['c']                          = 'my_irq_c';
}
chi_aiu_csr_ports['chiaiu_en_debug_bist']       = "chiaiu_en_debug_bist";
chi_aiu_csr_ports['cerr_threshold']             = "cerr_threshold";
chi_aiu_csr_ports['ott_busy']                   = "ott_busy";
chi_aiu_csr_ports['stt_busy']                   = "stt_busy";
chi_aiu_csr_ports['wrong_target_id_err']        = "wrong_target_id_err";
chi_aiu_csr_ports['CAIUIDR_RPN_out']            = "CAIUIDR_RPN_out";
chi_aiu_csr_ports['CAIUIDR_NRRI_out']           = "CAIUIDR_NRRI_out";
chi_aiu_csr_ports['CAIUIDR_NUnitId_out']        = "CAIUIDR_NUnitId_out";
chi_aiu_csr_ports['CAIUIDR_Valid_out']          = "CAIUIDR_Valid_out";
chi_aiu_csr_ports['CAIUUEVIR_EngVerId_out']     = "CAIUUEVIR_EngVerId_out";
chi_aiu_csr_ports['CAIUINFOR_Valid_out']        = "CAIUINFOR_Valid_out";
chi_aiu_csr_ports['CAIUINFOR_UST_out']          = "CAIUINFOR_UST_out";
chi_aiu_csr_ports['CAIUINFOR_UT_out']           = "CAIUINFOR_UT_out";
chi_aiu_csr_ports['CAIUINFOR_ImplVer_out']      = "CAIUINFOR_ImplVer_out";
chi_aiu_csr_ports['CAIUTCR_RDisable_out']       = "CAIUTCR_RDisable_out";
chi_aiu_csr_ports['CAIUFUIDR_FUnitId_out']      = "CAIUFUIDR_FUnitId_out";
chi_aiu_csr_ports['CAIUCRTR_ResThreshold_out']  = "CAIUCRTR_ResThreshold_out";
chi_aiu_csr_ports['CAIUQOSCR_EventThreshold_out']    = 'CAIUQOSCR_EventThreshold_out';
chi_aiu_csr_ports['CAIUQOSSR_EventStatus_out']       = 'CAIUQOSSR_EventStatus_out';
chi_aiu_csr_ports['CAIUQOSSR_EventStatusCountOverflow_out'] = 'CAIUQOSSR_EventStatusCountOverflow_out';
chi_aiu_csr_ports['CAIUQOSSR_EventStatusCount_out'] = 'CAIUQOSSR_EventStatusCount_out';
chi_aiu_csr_ports['CAIUQOSCR_useEvictionQoS_out'] = '';
chi_aiu_csr_ports['CAIUQOSCR_EvictionQoS_out'] = '';

chi_aiu_csr_ports['decode_error']        = 'decode_error';
chi_aiu_csr_ports['sw_prog_error']       = 'sw_prog_error';
chi_aiu_csr_ports['transport_uce']       = 'transport_uce';
chi_aiu_csr_ports['transport_ce']        = 'transport_ce';
chi_aiu_csr_ports['chi_snp_resp_error']  = 'chi_snp_resp_error';
chi_aiu_csr_ports['timeout_error']  = 'timeout_error';
chi_aiu_csr_ports['chi_intf_chk_UCE'] = 'chi_intf_chk_UCE';
chi_aiu_csr_ports['caiu_corr_err_type']      = 'caiu_corr_err_type';
chi_aiu_csr_ports['caiu_corr_err_info']      = 'caiu_corr_err_info';
chi_aiu_csr_ports['caiu_uncorr_err_type']    = 'caiu_uncorr_err_type';
chi_aiu_csr_ports['caiu_uncorr_err_info']    = 'caiu_uncorr_err_info';
chi_aiu_csr_ports['caiu_uncorr_err_entry']   = 'caiu_uncorr_err_entry';
chi_aiu_csr_ports['caiu_uncorr_err_way']     = 'caiu_uncorr_err_way';
chi_aiu_csr_ports['caiu_uncorr_err_word']    = 'caiu_uncorr_err_word';
chi_aiu_csr_ports['caiu_uncorr_err_erraddr'] = 'caiu_uncorr_err_erraddr';

chi_aiu_csr_ports['csr_timeout_threshold']   = 'csr_timeout_threshold';
chi_aiu_csr_ports['csr_timeout_ref_en']      = 'csr_timeout_ref_en';

if ( fnEnableQos ) {
   chi_aiu_csr_ports['csr_starv_count_threshold'] = "csr_starv_count_threshold";
}

for (var i = 0; i < nregions; i++ ) {
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_ReadID_out']       = "CAIUGPRAR"+i+"_ReadID_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_WriteID_out']      = "CAIUGPRAR"+i+"_WriteID_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_Policy_out']       = "CAIUGPRAR"+i+"_Policy_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_NSX_out']          = "CAIUGPRAR"+i+"_NSX_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_Valid_out']        = "CAIUGPRAR"+i+"_Valid_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_HUT_out']          = "CAIUGPRAR"+i+"_HUT_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_Size_out']         = "CAIUGPRAR"+i+"_Size_out";
    chi_aiu_csr_ports['CAIUGPRAR'+i+'_HUI_out']          = "CAIUGPRAR"+i+"_HUI_out";
    //chi_aiu_csr_ports['CAIUGPRAR'+i+'_DIGId_out']        = "CAIUGPRAR"+i+"_DIGId_out";
    chi_aiu_csr_ports['CAIUGPRBLR'+i+'_AddrLow_out']     = "CAIUGPRBLR"+i+"_AddrLow_out";
    chi_aiu_csr_ports['CAIUGPRBHR'+i+'_AddrHigh_out']    = "CAIUGPRBHR"+i+"_AddrHigh_out";
}

    chi_aiu_csr_ports['CAIUBRAR_Valid_out']        = "CAIUBRAR_Valid_out";
    chi_aiu_csr_ports['CAIUBRAR_HUT_out']          = "CAIUBRAR_HUT_out";
    chi_aiu_csr_ports['CAIUBRAR_Size_out']         = "CAIUBRAR_Size_out";
    chi_aiu_csr_ports['CAIUBRAR_HUI_out']          = "CAIUBRAR_HUI_out";
    //chi_aiu_csr_ports['CAIUBRAR_DIGId_out']      = "CAIUBRAR_DIGId_out";
    chi_aiu_csr_ports['CAIUBRBLR_AddrLow_out']     = "CAIUBRBLR_AddrLow_out";
    chi_aiu_csr_ports['CAIUBRBHR_AddrHigh_out']    = "CAIUBRBHR_AddrHigh_out";
    chi_aiu_csr_ports['NRSBAR_NRSBA_out']          = "NRSBAR_NRSBA_out";
    chi_aiu_csr_ports['NRSBHR_NRSBA_out']          = "NRSBHR_NRSBA_out";
    chi_aiu_csr_ports['NRSBLR_BALoaded_out']       = "NRSBLR_BALoaded_out";
    chi_aiu_csr_ports['NRSBLR_NRSDIIId_out']       = "NRSBLR_NRSDIIId_out";

    chi_aiu_csr_ports['CAIUAMIGR_Valid_out']       = "CAIUAMIGR_Valid_out";
    chi_aiu_csr_ports['CAIUAMIGR_AMIGS_out']       = "CAIUAMIGR_AMIGS_out";
    chi_aiu_csr_ports['CAIUMIFSR_MIG16AIFId_out']  = "CAIUMIFSR_A16WIFId_out";
    chi_aiu_csr_ports['CAIUMIFSR_MIG8AIFId_out']   = "CAIUMIFSR_A8WIFId_out";
    chi_aiu_csr_ports['CAIUMIFSR_MIG4AIFId_out']   = "CAIUMIFSR_A4WIFId_out";
    chi_aiu_csr_ports['CAIUMIFSR_MIG3AIFId_out']   = "CAIUMIFSR_A3WIFId_out";
    chi_aiu_csr_ports['CAIUMIFSR_MIG2AIFId_out']   = "CAIUMIFSR_A2WIFId_out";

    chi_aiu_csr_ports['CAIUTAR_SysCoError_out']      = 'CAIUTAR_SysCoError_out';
    chi_aiu_csr_ports['CAIUTAR_SysCoAttached_out']   = 'CAIUTAR_SysCoAttached_out';
    chi_aiu_csr_ports['CAIUTAR_SysCoConnecting_out'] = 'CAIUTAR_SysCoConnecting_out';
    chi_aiu_csr_ports['CAIUTCR_SysCoAttach_out']     = 'CAIUTCR_SysCoAttach_out';
    chi_aiu_csr_ports['CAIUTCR_SysCoDisable_out']    = 'CAIUTCR_SysCoDisable_out';
    chi_aiu_csr_ports['CAIUTCR_EventDisable_out']    = 'CAIUTCR_EventDisable_out';

    chi_aiu_csr_ports['CAIUNRSAR_NRSAR_out'] = 'CAIUNRSAR_NRSAR_out';

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
    chi_aiu_csr_ports['csr_sys_evt_receiver_enable']     = "csr_sys_evt_receiver_enable";
    chi_aiu_csr_ports['csr_sys_evt_receiver_err_vld']    = "csr_sys_evt_receiver_err_vld";
    chi_aiu_csr_ports['csr_sys_evt_receiver_err_event_timeout'] = "csr_sys_evt_receiver_err_event_timeout";
    chi_aiu_csr_ports['csr_sys_evt_receiver_err_f_unit_id']     = "csr_sys_evt_receiver_err_f_unit_id";
    chi_aiu_csr_ports['csr_sys_coh_sender_activate']     = "csr_sys_coh_sender_activate";
    chi_aiu_csr_ports['csr_sys_coh_sender_connecting']   = "csr_sys_coh_sender_connecting";
    chi_aiu_csr_ports['csr_sys_coh_sender_attached']     = "csr_sys_coh_sender_attached";
    chi_aiu_csr_ports['csr_sys_coh_sender_syscoerr_set'] = "csr_sys_coh_sender_syscoerr_set";
    chi_aiu_csr_ports['csr_sys_coh_sender_syscoerr_clr'] = "csr_sys_coh_sender_syscoerr_clr";
    chi_aiu_csr_ports['csr_sys_coh_sender_err_detected'] = "csr_sys_coh_sender_err_detected";
    chi_aiu_csr_ports['csr_sys_coh_sender_err_f_unit_id']        = 'csr_sys_coh_sender_err_f_unit_id';
    chi_aiu_csr_ports['csr_sys_coh_sender_err_protocol_sys']     = 'csr_sys_coh_sender_err_protocol_sys';
    chi_aiu_csr_ports['csr_sys_coh_sender_err_protocol_timeout'] = 'csr_sys_coh_sender_err_protocol_timeout';
    chi_aiu_csr_ports['csr_sys_coh_protocol_timeout_value']      = "csr_sys_coh_protocol_timeout_value";
}

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (csr.spaceBlock[0].registers.find( x => x.name === "CAIU"+"SEPTOCR" )) {
    chi_aiu_csr_ports['csr_sys_evt_protocol_timeout_value']      = "csr_sys_evt_protocol_timeout_value";
}

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (/* istanbul ignore next env ncore_3p6, ncore_3p7 */ useSysReqSender || /* istanbul ignore next env ncore_3p6, ncore_3p7 */ useSysReqReceiver) {
    chi_aiu_csr_ports['csr_event_timeout_value']         = "csr_event_timeout_value";
}

    chi_aiu_csr_ports['csr_sys_evt_sender_enable'] = 'csr_sys_evt_sender_enable';
    chi_aiu_csr_ports['csr_sys_evt_sender_err_vld'] = 'csr_sys_evt_sender_err_vld';
    chi_aiu_csr_ports['csr_sys_evt_sender_err_f_unit_id'] = 'csr_sys_evt_sender_err_f_unit_id';
    chi_aiu_csr_ports['csr_sys_evt_sender_err_protocol_sys'] = 'csr_sys_evt_sender_err_protocol_sys';
    chi_aiu_csr_ports['csr_sys_evt_sender_err_protocol_timeout'] = 'csr_sys_evt_sender_err_protocol_timeout';
    chi_aiu_csr_ports['csr_sys_evt_sender_err_event_timeout'] = 'csr_sys_evt_sender_err_event_timeout';


// Create CCR CSR register input Interface only (all *out ports appear by default on chi_aiu_csr instance)
var ccrCsrInputPorts              = {};

ccrCsrIfGenerator.inputs().forEach( port => {
  ccrCsrInputPorts[port.name]     = -port.width;
});


//-----------------------------------------------------------------------------
// Creating pmonCsrReg
//-----------------------------------------------------------------------------
const pmonCsrInputPorts			= {};	// This is signal bundle of *in and *wr signals to PMON registers only

pmonCsrIfGenerator.inputs().forEach( port => {
	pmonCsrInputPorts[ port.name ]		= -port.width;
}); \jsend


\=u.instance({
    instanceName: 'chi_aiu_csr' ,
    moduleName: 'chi_aiu_csr',
    params: {
        useSysEvtCoh           : useSysEvtCoh,
        csr                    : csr,
        nregions               : nregions,
        wFUnitId               : unit_id_width,
        wNUnitId               : node_id_width,
        wRpn                   : rpn_id_width,
        wNrri                  : nrri_id_width,
        wEventTimeout          : wEventTimeout,
        wProtocolTimeout       : wProtocolTimeout,
        useResiliency          : useResiliency,
        engVerId               : engVerId,
        implVerId              : implVerId,
        clkInterface           : intClkInterface,
        apbInterface           : apbInterface,
        apbInterfaceName       : apbInterfaceName,
        irqInterface           : irqInterface,
	    traceRegInterface      : traceCaptureCsrIfGenerator.signalBundle("slave"),
        ccrCsrInputInterface   : { name: "CAIU", signals: ccrCsrInputPorts },
	    pmonCsrInputInterface  : { name: "CAIU", signals: pmonCsrInputPorts },
        regProtInterface       : regProtInterface,
        regProtInterfaceName   : regProtInterfaceName,
        regProtStyle           : regProtStyle,
        useQos                 : fnEnableQos,
		nPerfCounters		   : nPerfCounters
    },
    ports: chi_aiu_csr_ports,
    interfaces : csr_interfaces,
    portsDelimiter: '\n    '
})=\

//=============================================================================
// Placeholder
//=============================================================================

\jsbegin

var placeholder_ports = {};
var placeholderProtectionInterface = {"name" : "", "signals":{}};

if (ResilienceInfo.enableNativeIntfProtection & placeInterfaceSkip != true) {
\jsend
\=m.bundleFunctions.explodeSyn(placeInterfaceName, placeInterfaceDef, 'wire', obj.lib.bundle)=\
\jsbegin
placeholderProtectionInterface['signals'] = m.bundleFunctions.synToBundle(placeInterfaceDef,"both");
}

if (useResiliency) {
    placeholder_ports.interface_fault = 'chi_aiu_placeholder_UCE';
    placeholder_ports.cerr_fault      = 'chi_aiu_placeholder_CE';
} else {

\jsend

    assign chi_aiu_placeholder_UCE = 1'h0;
    assign chi_aiu_placeholder_CE  = 1'h0;

 \jsbegin
}

   placeholder_ports.clk     = clkInterfaceName+'clk';
   placeholder_ports.reset_n   = clkInterfaceName+'reset_n';

var placeholder_interfaces = [];

placeholder_interfaces.push({
    modulePrefix : '',
    localPrefix  : 'gated_',
    interface    : intClkInterface,
    exclude      : ['test_en']
});

if (ResilienceInfo.enableNativeIntfProtection) {
    placeholder_interfaces.push({
        modulePrefix : '',
        localPrefix  : placeInterfaceName,
        interface    : m.bundleFunctions.synToBundle(placeInterfaceDef,"both")
    });
}

placeholder_interfaces.push({
             modulePrefix : 'in_',
             localPrefix  : chiInterfaceName+'placeholder_',
             interface    : chiInterface
});

placeholder_interfaces.push({
             modulePrefix : 'out_',
             localPrefix  : chiInterfaceName,
             interface    : chiInterface
});

\jsend

    \=obj.lib.instance({
        instanceName: 'u_chiPlaceholder',
        moduleName: placeInterfaceName + 'placeholder',
        tachlName: 'protection_placeholder',

        params: {
                    nativeInterface                : chiInterface,
                    clkInterface                   : intClkInterface,
                    placeHolderDirection           : "slave",
                    useResiliency                  : useResiliency,
                    protectionEnable               : ResilienceInfo.enableNativeIntfProtection,
                    nativeIntfProtectionInterface  : placeholderProtectionInterface
                },
        interfaces     : placeholder_interfaces,
        ports          : placeholder_ports,
    })=\


//=============================================================================
// AMBA interface parity protection instance
//============================================================================= \jsbegin
var chkErrSignalList                 = [];
Object.keys( chkErrInterface.signals ).forEach( key => {
  chkErrSignalList.push( chkErrInterface.name+key );
});

var checkEnables               = {};
Object.keys(funcChiInterface.signals).forEach(function (chan) {
  checkEnables[chan]           = { "flit": "flitv" };
});

var placeholderChiInterface    = { name: chiInterfaceName+'placeholder_', signals: chiInterface }; \jsend

    \=obj.lib.instance({
        instanceName: 'u_amba_interface_protection',
        moduleName: 'amba_interface_protection',
        params: {
                    inInterface                    : placeholderChiInterface,
                    outInterface                   : funcChiInterface,
                    errInterface                   : chkErrInterface,
                    direction                      : "slave",
                    checkType                      : interfaces.chiInt.params.checkType,
                    checkEnables                   : checkEnables
        },
        interfaces: [
                           placeholderChiInterface,
                           funcChiInterface,
                           chkErrInterface
        ].map( getModuleLocalPrefixAndInterface ) // Returns array of {modulePrefix, localPrefix, interface} objects 
    })=\

assign chi_intf_chk_UCE         = \=chkErrSignalList.join(" | ")=\;
assign chi_aiu_intf_chk_UCE     = chi_intf_chk_UCE;

//=============================================================================
// CHI AIU PMA Slave Instance
//=============================================================================

\jsbegin

if (usePma ) {

// PMA Interfaces

var pma_interfaces = [];
var chi_aiu_num = 0;
pma_interfaces[chi_aiu_num] =     {
                                modulePrefix  : '',
                                localPrefix   : clkInterfaceName,
                                interface     :  intClkInterface
                              };

chi_aiu_num++;

pma_interfaces[chi_aiu_num] =     {
                                 modulePrefix  :  qInterfaceName,
                                 localPrefix   :  qInterfaceName,
                                 interface     :  qInterface
                              };

chi_aiu_num++;

var pma_intf_param =  {};

pma_intf_param["clkInt"]  =       {
                                 "name"      : "",
                                 "params"    : {},
                                 "direction" : "slave",
                                 "interface" : "InterfaceCLK"
                              };
pma_intf_param["masterInt"] =     {
                                 "name"      : qInterfaceName,
                                 "params"    : {
                                                   "wActive"     : PmaInfo.wActive,
                                                   "channelType" : PmaInfo.fnPmaInterfaceType
                                               },
                                 "direction" : "slave",
                                 "interface" : "InterfacePQChannel"
                              };

pma_intf_param["pmaControlInt"] = {
                                 "name"      : "pma_ctl_",
                                 "params"    : {},
                                 "direction" : "master",
                                 "interface" : "InterfacePMAControl"
                              };

\jsend

\=obj.lib.instance ({
                instanceName: 'chi_aiu_pma',
                moduleName: 'pma_slave',
                params : {
                             syncReq              : false,
			     pipeActive           : true,
                             channel              : "Q",
                             interfaces           : pma_intf_param  
                         },
                ports:   {
                             "pma_ctl_asleep"     : 'asleep',
                             "pma_ctl_goto_sleep" : 'goto_sleep',
                             "pma_ctl_busy"       : 'pma_busy',
                             "pma_ctl_abort"      : '1\'b0'
                         },
                verilogParams : {},
                interfaces : pma_interfaces
        })=\

\js } else {

assign asleep = 1'b0;
assign goto_sleep = 1'b0;

\js }

//=============================================================================
// Pipes for CHI interface
//=============================================================================

\jsbegin

let CHI_IN_PIPE_INTF = {};
let CHI_OUT_PIPE_INTF = {};
Object.keys(funcChiInterface.signals).forEach(function (chan) {
  Object.keys(funcChiInterface.signals[chan]).forEach(function (signal) {
    if ( funcChiInterface.signals[chan][signal] > 0) {
        CHI_IN_PIPE_INTF[chan+signal] = funcChiInterface.signals[chan][signal];
    }
    if ( funcChiInterface.signals[chan][signal] < 0) {
        CHI_OUT_PIPE_INTF[chan+signal] = -funcChiInterface.signals[chan][signal];
    }
  });
});

\jsend

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (nativeInterfacePipe) {
\jsend

    \=u.instance({
        instanceName : 'chi_in_pipe_stage',
        moduleName : 'simple_pipe_stage',
        params : {
            pipeSignals: CHI_IN_PIPE_INTF
        },
        ports : {
            clk     : clkInterfaceName+'clk',
            reset_n : clkInterfaceName+'reset_n',
            en      : "1'b1"
        },
        interfaces : [
            {modulePrefix: 'in_',  localPrefix: funcChiInterface.name, interface: CHI_IN_PIPE_INTF},
            {modulePrefix: 'out_', localPrefix: funcChiInterface.name+'pipe_',        interface: CHI_IN_PIPE_INTF}
        ]
    })=\

    \=u.instance({
        instanceName : 'chi_out_pipe_stage',
        moduleName : 'simple_pipe_stage',
        params : {
            pipeSignals: CHI_OUT_PIPE_INTF
        },
        ports : {
            clk     : clkInterfaceName+'clk',
            reset_n : clkInterfaceName+'reset_n',
            en      : "1'b1"
        },
        interfaces : [
            {modulePrefix: 'in_',  localPrefix: funcChiInterface.name+'pipe_',        interface: CHI_OUT_PIPE_INTF},
            {modulePrefix: 'out_', localPrefix: funcChiInterface.name, interface: CHI_OUT_PIPE_INTF}
        ]
    })=\

    \=u.instance({
        instanceName : 'chk_err_interface_pipe_stage',
        moduleName : 'simple_pipe_stage',
        params : {
            pipeSignals: chkErrInterface.signals
        },
        ports : {
            clk     : clkInterfaceName+'clk',
            reset_n : clkInterfaceName+'reset_n',
            en      : "1'b1"
        },
        interfaces : [
            {modulePrefix: 'in_',  localPrefix: chkErrInterface.name, "interface": chkErrInterface.signals },
            {modulePrefix: 'out_', localPrefix: chkErrInterface.name+'pipe_', "interface": chkErrInterface.signals }
        ]
    })=\

\js } else {

    \=m.bundleFunctions.assignByBundle(funcChiInterface.name+'pipe_', funcChiInterface.name,         CHI_IN_PIPE_INTF,  [], u.bundle)=\
    \=m.bundleFunctions.assignByBundle(funcChiInterface.name,         funcChiInterface.name+'pipe_', CHI_OUT_PIPE_INTF, [], u.bundle)=\
    \=m.bundleFunctions.assignByBundle(chkErrInterface.name,          chkErrInterface.name+'pipe_',  chkErrInterface.signals, [], u.bundle)=\

\js }

//PMON noc sys event
\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

assign pmon_noc_sys_req_event = sys_req_rx_valid & sys_req_rx_ready & (sys_req_rx_sys_req_op == SYSREQ_OP_EVENT);

\js } else {

assign pmon_noc_sys_req_event = 1'b0;

\js }


\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

    \jsbegin
        var sys_evt_coh_concerto_params = {
            wFUnitId                : wFUnitId,
            wFPortId                : wFPortId,
            wNUnitId                : wNUnitId,
            concParams              : concParams,
            cmType                  : cm_type,
            sysReqTxInterface       : concertoInterfaces.SYSReqTxInterface,
            sysRspRxInterface       : concertoInterfaces.SYSRspRxInterface,
            sysReqRxInterface       : concertoInterfaces.SYSReqRxInterface,
            sysRspTxInterface       : concertoInterfaces.SYSRspTxInterface,

            useSysEvtSender         : useSysReqSender,
            useSysEvtReceiver       : useSysReqReceiver,
            useSysCoh               : 1,
            useSysCohSender         : 1,
            useSysCoHwInterface     : 1,
            useSysCohEnable         : 1,
            nCoherencyAgents        : nCoherencyAgents,
            nEventAgentsForReceiver : nEventAgentsForReceiver,
            wEventTimeout           : wEventTimeout,
            wProtocolTimeout        : wProtocolTimeout
        };

        var instance_ports_for_sys_evt_coh_concerto = {
            clk                                    : clkInterfaceName+'clk',
            reset_n                                : clkInterfaceName+'reset_n',
            busy                                   : 'sys_evt_coh_busy',
            my_f_unit_id                           : unitIdInterfaceName+'my_f_unit_id',

            csr_sys_coh_protocol_timeout_value     : 'csr_sys_coh_protocol_timeout_value',
                        
            csr_sys_coh_sender_enable              : 'csr_sys_coh_sender_enable',
            csr_sys_coh_sender_activate            : 'csr_sys_coh_sender_activate',
            csr_sys_coh_sender_connecting          : 'csr_sys_coh_sender_connecting',
            csr_sys_coh_sender_attached            : 'csr_sys_coh_sender_attached',
            csr_sys_coh_sender_syscoerr_set        : 'csr_sys_coh_sender_syscoerr_set',
            csr_sys_coh_sender_syscoerr_clr        : 'csr_sys_coh_sender_syscoerr_clr',
            csr_sys_coh_sender_err_detected        : 'csr_sys_coh_sender_err_detected',
            csr_sys_coh_sender_err_f_unit_id       : 'csr_sys_coh_sender_err_f_unit_id',
            csr_sys_coh_sender_err_protocol_sys    : 'csr_sys_coh_sender_err_protocol_sys',
            csr_sys_coh_sender_err_protocol_timeout: 'csr_sys_coh_sender_err_protocol_timeout',
            sysco_req                              : 'my_sysco_req',
            sysco_ack                              : 'my_sysco_ack',
            outstanding_coherent_count_zero        : 'co_state_disconnect_ready & outstanding_coherent_count_zero'
        };

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if (useSysReqReceiver) {
	  instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_enable"] = 'csr_sys_evt_receiver_enable & ~co_state_disabled';
	  instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_err_vld"] = 'csr_sys_evt_receiver_err_vld';
	  instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_err_event_timeout"] = 'csr_sys_evt_receiver_err_event_timeout';
	  instance_ports_for_sys_evt_coh_concerto["csr_sys_evt_receiver_err_f_unit_id"] = 'csr_sys_evt_receiver_err_f_unit_id';
	  instance_ports_for_sys_evt_coh_concerto["event_out_initiator_id"] = '';
 	} 
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if (useEventInInt) {
	  instance_ports_for_sys_evt_coh_concerto['event_out_req'] = eventRequestOutInterface.name+'req';
	  instance_ports_for_sys_evt_coh_concerto['event_out_ack'] = eventRequestOutInterface.name+'ack';
 	} else {
	 instance_ports_for_sys_evt_coh_concerto['event_out_req'] = 'event_out_req';
	 instance_ports_for_sys_evt_coh_concerto['event_out_ack'] = 'event_out_ack';
	}

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
    if (/* istanbul ignore next env ncore_3p6, ncore_3p7 */ useSysReqSender || /* istanbul ignore next env ncore_3p6, ncore_3p7 */ useSysReqReceiver) {
        instance_ports_for_sys_evt_coh_concerto["csr_event_timeout_value"] = 'csr_event_timeout_value';
    }	

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
    if (useSysReqSender) {
      instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_protocol_timeout_value'] = 'csr_sys_evt_protocol_timeout_value';
    }

        for (i=0; i < nCoherencyAgents; i++) {
            if (i < nAiuConnectedDces) {
            instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = 'hexAiuConnectedDceFunitId' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
            } else {
            instance_ports_for_sys_evt_coh_concerto['coherency'+i+'_f_unit_id'] = dveIdInterfaceName + 'f_unit_id';
            }
        }

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if (useEventOutInt){
	  sys_evt_coh_concerto_params['nEventAgentsForSender'] = nDVEs; 
	}
	
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
	if (useEventOutInt){
	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_enable'] = 'csr_sys_evt_sender_enable';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_vld'] = 'csr_sys_evt_sender_err_vld';
          instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_f_unit_id'] = 'csr_sys_evt_sender_err_f_unit_id';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_protocol_sys'] = 'csr_sys_evt_sender_err_protocol_sys';
      	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_protocol_timeout'] =  'csr_sys_evt_sender_err_protocol_timeout';
       	  instance_ports_for_sys_evt_coh_concerto['csr_sys_evt_sender_err_event_timeout'] = 'csr_sys_evt_sender_err_event_timeout';
       	  instance_ports_for_sys_evt_coh_concerto['event_in_req'] = interfaces.eventRequestInInt.name+"req";
     	  instance_ports_for_sys_evt_coh_concerto['event_in_ack'] = interfaces.eventRequestInInt.name+"ack";
    	  instance_ports_for_sys_evt_coh_concerto['event_in_targets'] = 'event_in_targets';

	  for (i=0; i < nDVEs; i++) {
	    instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = dveIdInterfaceName + 'f_unit_id';
	  }
	}
	else { \jsend
	assign csr_sys_evt_sender_err_vld 		 = 1'b0;
	assign csr_sys_evt_sender_err_f_unit_id 	 = \=wFUnitId=\'b0;
	assign csr_sys_evt_sender_err_protocol_sys 	 = 1'b0;
	assign csr_sys_evt_sender_err_protocol_timeout 	 = 1'b0;
	assign csr_sys_evt_sender_err_event_timeout 	 = 1'b0; \jsbegin
	} 

var sysEvtCohConcertoInterfaces = [];
sysEvtCohConcertoInterfaces.push({modulePrefix: 'sys_req_tx_', localPrefix: 'sys_req_tx_', interface: concertoInterfaces.SYSReqTxInterface});
sysEvtCohConcertoInterfaces.push({modulePrefix: 'sys_rsp_rx_', localPrefix: 'sys_rsp_rx_', interface: concertoInterfaces.SYSRspRxInterface});
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (useSysReqReceiver) {
sysEvtCohConcertoInterfaces.push( {modulePrefix: 'sys_req_rx_', localPrefix: 'sys_req_rx_', interface: concertoInterfaces.SYSReqRxInterface});
sysEvtCohConcertoInterfaces.push({modulePrefix: 'sys_rsp_tx_', localPrefix: 'sys_rsp_tx_', interface: concertoInterfaces.SYSRspTxInterface});
} \jsend
        \=obj.lib.instance({
            instanceName: 'u_sys_evt_coh_concerto',
            moduleName: 'sys_evt_coh_concerto',
            params: sys_evt_coh_concerto_params,
            ports: instance_ports_for_sys_evt_coh_concerto,
            interfaces: sysEvtCohConcertoInterfaces

        })=\

assign csr_sys_coh_sender_enable = ~CAIUTCR_SysCoDisable_out;

assign my_co_state_disabled   = ~my_sysco_req & ~my_sysco_ack;
assign my_co_state_connect    =  my_sysco_req & ~my_sysco_ack;
assign my_co_state_enabled    =  my_sysco_req &  my_sysco_ack;
assign my_co_state_disconnect = ~my_sysco_req &  my_sysco_ack;

assign hwp_sysco_req = \=funcChiInterface.name=\pipe_sysco_req;
assign csr_sysco_req = csr_sys_coh_sender_activate;

\js }

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) { \jsend
   \jsbegin
    /* istanbul ignore if env ncore_3p6, ncore_3p7 */
       if (!useEventInInt) { \jsend
\=u.dffre(1, 'event_out_ack', 'event_out_req', "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\ //to implement the 4-phase handshake
    \js }
\js }

//=============================================================================
// System Event and Coherency Wrapper
//=============================================================================

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
  if (useEventInInt) { \jsend

  wire \=eventRequestOutInterface.name=\req_q;

  \=u.dffre(1, eventRequestOutInterface.name+'req_q', eventRequestOutInterface.name+'req', "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\

  assign pmon_agent_event_out = \=eventRequestOutInterface.name=\req & ~\=eventRequestOutInterface.name=\req_q; \jsbegin
  } 
  else { \jsend
   wire event_out_req_q;

   \=u.dffre(1, 'event_out_req_q', 'event_out_req', "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\

   assign pmon_agent_event_out = event_out_req & ~event_out_req_q; \jsbegin
  }
} else { \jsend
    
    assign pmon_agent_event_out = 1'b0;

\js }


\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

assign \=funcChiInterface.name=\pipe_sysco_req_org = my_sysco_req;

assign \=funcChiInterface.name=\pipe_sysco_ack     = hwp_sysco_ack;

assign co_state_disabled    = my_co_state_disabled;
assign co_state_connect     = my_co_state_connect;
assign co_state_enabled     = my_co_state_enabled;
assign co_state_disconnect  = my_co_state_disconnect;

\=u.instance ({
    instanceName : 'sysco_arb',
    moduleName : 'sysco_arb',
    ports : {
       clk           : clkInterfaceName+'clk',
       reset_n       : clkInterfaceName+'reset_n',
       hwp_sysco_req : 'hwp_sysco_req',
       hwp_sysco_ack : 'hwp_sysco_ack',
       csr_sysco_req : 'csr_sysco_req',
       csr_sysco_ack : 'csr_sysco_ack',
       sysco_req     : 'my_sysco_req',
       sysco_ack     : 'my_sysco_ack',
   }
})=\


\js } else {

assign \=funcChiInterface.name=\pipe_sysco_req_org = \=funcChiInterface.name=\pipe_sysco_req;

assign \=funcChiInterface.name=\pipe_sysco_ack     = \=funcChiInterface.name=\pipe_sysco_ack_org;

assign co_state_disabled    = co_state_disabled_org;
assign co_state_connect     = co_state_connect_org;
assign co_state_enabled     = co_state_enabled_org;
assign co_state_disconnect  = co_state_disconnect_org;

\js }

//=============================================================================
// Illegal CSR Access Format detection
//=============================================================================

wire dii_id_valid_d;
wire [2:0] rx_req_size_d;
wire [3:0] rx_req_mem_attr_d;
wire [1:0] rx_req_order_d;

\=u.dffre(1, 'dii_id_valid_d',    'dii_id_valid',      "1'b0", 'dff_enable', 'gated_clk', 'gated_reset_n')=\
\=u.dffre(3, 'rx_req_size_d',     'RXREQFLIT_Size',    "3'b0", 'req_valid',  'gated_clk', 'gated_reset_n')=\
\=u.dffre(4, 'rx_req_mem_attr_d', 'RXREQFLIT_MemAttr', "4'b0", 'req_valid',  'gated_clk', 'gated_reset_n')=\
\=u.dffre(2, 'rx_req_order_d',    'RXREQFLIT_Order',   "2'b0", 'req_valid',  'gated_clk', 'gated_reset_n')=\

assign q_illegal_csr_access_format = dii_id_valid_d & q_nrs_region_hit & (
                                              {|{rx_req_addr_d[1:0]}} |         // not 4 bytes aligned address
                                              (rx_req_size_d != 3'h2) |         // not 4 bytes request size
                                              (rx_req_mem_attr_d[1] != 1'b1) |  // not device transaction
                                              (rx_req_order_d != 2'b11)         // not endpoint order
                                      );

\jsbegin
//=============================================================================
// Asserts
//=============================================================================
if ( assertOn ) { \jsend
    `ifdef OVL_ASSERT_ON
    // coverage off
    // synthesis off
    // synopsys translate_off
    //
    // When debug/bist enable is de-asserted, never assert debug/trace enable from CSR
    assert_implication #(0,0,"ASSERT_ERROR: Safe Mode enable not guarding debug enables!",0,0) assert_safe_mode_guard_check (
        .clk(\=clkInterfaceName=\clk),
        .reset_n(\=clkInterfaceName=\reset_n),
        .antecedent_expr(~chiaiu_en_debug_bist),
        .consequent_expr(~(csr_trace_CCTRLR_ndn0Tx_out | csr_trace_CCTRLR_ndn0Rx_out | csr_trace_CCTRLR_ndn1Tx_out | csr_trace_CCTRLR_ndn1Rx_out | csr_trace_CCTRLR_ndn2Tx_out | csr_trace_CCTRLR_ndn2Rx_out | csr_trace_CCTRLR_dn0Tx_out | csr_trace_CCTRLR_dn0Rx_out))
    );

    // synopsys translate_on
    // synthesis on
    // coverage on
    `endif
\jsbegin
} \jsend

endmodule

