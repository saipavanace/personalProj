//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// This module defines single transaction table entry
//
//=============================================================================
\jsend

\jsbegin
var u = obj.lib;
var bundleFunctions = obj.userLib.bundleFunctions;
var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2) };

var fixCONC12825 = 1;

var assertOn = u.getParam('assertOn');
var interfaces         = u.getParam('interfaces');
var dat_flit_interface = u.getParam('WdatInterface');
var rsp_flit_interface = u.getParam('RspInterface');
var nEntries  = u.getParam('nSttEntries');
var wEntries = Math.max(log2ceil(nEntries),1);
var nOttStashEntries = u.getParam('nOttStashEntries');
var nOttCtrlEntries = u.getParam('nOttCtrlEntries');
var nOttEntries = nOttCtrlEntries + nOttStashEntries;
var wOttEntries =  Math.max(log2ceil(nOttEntries), 1);
var wOttStashEntries = Math.max(log2ceil(nOttStashEntries), 1);
var src_id_width     = u.getParam('CHI_SNPREQ_interface').SrcID;
var snp_opcode_width = u.getParam('CHI_SNPREQ_interface').OpCode;
var intf_size_width = u.getParam('intf_size_width');
var mpf1_width = u.getParam('SNPRspInterface').mpf1;
var mpf2_width = u.getParam('SNPReqInterface').mpf2;
var mpf3_width = u.getParam('SNPReqInterface').mpf3;
var qos_width  = u.getParam('SNPReqInterface').qos;
var initiator_id_width = u.getParam('initiator_id_width');
var port_id_width =  u.getParam('port_id_width');
var unit_id_width =  u.getParam('unit_id_width');
var cm_type  = u.getParam('cm_type');
var chi_a              = u.getParam('chi_a');
var chi_b              = u.getParam('chi_b');
var chi_e              = u.getParam('chi_e');
var chi_cmd  = u.getParam('chi_cmd');
var wData = u.getParam('wData');
var wAddr =  u.getParam('wAddr');
var intf_size = Math.max(log2ceil(wData/64),1);
var wTm_snp_rsp     = u.getParam('SNPRspInterface').tm;
var wHProt          = u.getParam('SNPRspInterface').h_prot;
var wTTier          = u.getParam('SNPRspInterface').t_tier;
var wSteering       = u.getParam('SNPRspInterface').steering;
var wPriority       = u.getParam('SNPRspInterface').priority;
var wQl             = u.getParam('SNPRspInterface').ql;
var wRbid           = u.getParam('SNPReqInterface').rb_id; 
var wMsgid          = u.getParam('SNPReqInterface').message_id;
var wSnp_addr       = u.getParam('SNPReqInterface').addr;
var wUser           = u.getParam('DTWReqInterface').user;
var wMProt_snp_rsp  = u.getParam('SNPRspInterface').m_prot;
var dtr_msg_id_width = u.getParam('DTRReqTxInterface').r_message_id;
var wMProt_dtr_req = u.getParam('DTRReqTxInterface').m_prot;
var wDProt_dtr_req = u.getParam('DTRReqTxInterface').dprot;
var wMProt_dtw_req = u.getParam('DTWReqInterface').m_prot;
var wDProt_dtw_req = u.getParam('DTWReqInterface').dprot;
var wDatFlit_TraceTag_local = u.getParam('wDatFlit_TraceTag_local');
var wSnpFlit_DoNotGoToSD_local = u.getParam('wSnpFlit_DoNotGoToSD_local');
var wSnpFlit_FwdTxnID_local = u.getParam('wSnpFlit_FwdTxnID_local');
var wSnpFlit_FwdNID_local = u.getParam('wSnpFlit_FwdNID_local');
var wFlit_Addr    = interfaces.chiInt.params.wAddr;
var wDatFlit_Opcode = u.getParam('wDatFlit_Opcode');

var dtw_req_data_width = bundleFunctions.getBundleWidth(u.getParam('DTWReqInterface'), ['valid','ready','last','data','be','aux','dwid','dbad'],obj.lib.bundle);
var dtr_req_data_width = bundleFunctions.getBundleWidth(u.getParam('DTRReqTxInterface'),['valid','ready','last','data','be','aux','dwid','dbad'],obj.lib.bundle);
var snp_rsp_width = bundleFunctions.getBundleWidth(u.getParam('SNPRspInterface'),['valid','ready','last'],obj.lib.bundle);
var snp_rsp_data_out_width = snp_rsp_width + wAddr + 1 + 2 + u.getParam('CHI_SNPREQ_interface').TxnID; // wAddr + wNS + wErrInfo + wTxnID
var spare_txn_id_bits =  u.getParam('CHI_SNPREQ_interface').TxnID-wEntries-wOttStashEntries-1; 

var useShiftedAddressForNonDvmSnoop = 0;
var useDoNotSendChiSnp = 1;
\jsend

\jsbegin

u.port('input', 'clk', 1);
u.port('input', 'reset_n', 1);
u.port('input', 'stt_entry_num', wEntries); //this STT entry number
u.port('input', 'init_id', initiator_id_width); //initiator ID
u.port('input', 'my_f_unit_id', unit_id_width); //my F-Unit ID
u.port('input', 'dve_f_unit_id', unit_id_width); //DVE F-Unit ID

u.port('input', 'aiu_node_stash_target', 1);
u.port('input', 'ott_initvec_stash', nOttStashEntries);
u.port('input', 'entry_validvec_stash', nOttStashEntries);
u.port('input', 'stash_entries_full', 1);
u.port('input', 'stash_entries_full_d', 1); // aligned with init_d

u.port('output','entry_valid',1);
u.port('output','entry_valid_early',1);

u.port('input','init',1);
u.port('input','snp_cdw',3);
u.interface('snp_req_slv_', 'slave', u.getParam('SNPReqInterface'), ['ready','last']); //SNPreq in
u.port('input', 'snp_req_slv_ready', 1);

u.port('output','snp_rsp_out_req', 1); //SNPrsp request
u.port('input', 'snp_rsp_out_ack', 1); //SNPrsp ack
u.port('output','snp_rsp_out_data', snp_rsp_data_out_width); //SNPrsp bundle
u.port('input', 'snp_rsp_sent', 1);  //SNPrsp is sent

u.port('output','snp_req_data', bundleFunctions.getBundleWidth(u.getParam('CHI_SNPREQ_interface'), [], obj.lib.bundle)); //CHI snoop request bundle
u.port('input', 'snp_req_sent', 1); //CHI snoop request sent
u.port('input', 'snp_req_dropped', 1); //CHI snoop request dropped
u.port('input', 'snp_req_popped', 1); // snp_req_order_fifo popped for this entry

u.port('input', 'snp_data_sel', 1); //CHI snoop data response arriving from RXDAT channel
u.port('input', 'RXDAT_LAST', 1);
u.interface('RXDAT_', 'slave', u.getParam('WdatInterface'),['TgtID','SrcID','TxnID','DBID','BE','Data', 'Poison']);

u.port('input', 'snprsp_in_sel', 1); //CHI snoop response arriving from RXRSP channel
u.interface('RXRSP_', 'slave', u.getParam('RspInterface'),['TgtID','SrcID','TxnID','DBID','PCrdType']);

u.port('input','dtr_rsp_sel',1);
u.interface('dtr_rsp_slv_', 'slave', u.getParam('DTRRspRxInterface'),['valid','ready','last','initiator_id','r_message_id','message_id']);

u.port('input','dtw_rsp_sel',1);
u.interface('dtw_rsp_slv_', 'slave', u.getParam('DTWRspInterface'),['valid','ready','last','initiator_id','r_message_id','message_id']);

u.port('input','last_dvm_write_entry',wEntries);
u.port('input','last_dvm_write_range',1);
u.port('input','snp_resp_encoded',wEntries);

u.port('input', 'rx_data_valid', 1);
u.port('output','dtr_req_data', dtr_req_data_width); //DTRreq bundle
u.port('output','dtw_req_data', dtw_req_data_width); //DTWreq bundle

u.port('output','q_snp_req_slv_intf_size', intf_size_width);
u.port('output','snp_addr_bit3',1);

u.interface('RXDATFLIT_', 'slave', u.getParam('WdatInterface'), ['TgtID','SrcID','TxnID','DBID','BE','Data','Poison','QoS','Homenode_ID','RespErr','TraceTag','CCID','DataID']);
u.port('output', 'RXDATFLIT_dtw_data_opcode', 8);
u.port('output', 'RXDATFLIT_dtr_data_opcode', 8);

u.port('output', 'stt_do_not_send_chi_snp', 1);

u.port('output', 'dvm_sync_part2_sent', 1);
u.port('output', 'dvm_sent', 1);

u.port('input','snp_req_is_dvm_sync_part2',1);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

wire [\=mpf3_width-1=\:0] aiu_provider_id;
wire q_dtr_data_rcvd;
wire [1:0] q_snp_req_slv_up;
wire [7:0] q_snp_req_slv_cm_type;
wire q_snp_rsp_flag;
wire [1:0] q_snp_resp_err_info;
wire [7:0] snp_rsp_status_rsp_channel;
wire [7:0] snp_rsp_status_dat_channel;
wire [5:0] snp_rsp_status_rsp_channel_non_error;
wire [5:0] snp_rsp_status_dat_channel_non_error;
wire [7:0] snp_rsp_status_rsp_channel_error;
wire [7:0] snp_rsp_status_dat_channel_error;
wire [7:0] q_snp_rsp_status;
wire [7:0] snp_req_stash_non_target;
wire [7:0] snp_req_slv_cm_type_mod;
wire [7:0] q_snp_req_slv_cm_type_mod, q_snp_req_slv_cm_type_mod_org;
wire [\=u.getParam('SNPReqInterface').cm_type-1=\:0] snp_req_cm_type;
wire init_d;
wire dvm_entry;
wire dvm_snoop_part1_entry;
wire dvm_snoop_part2_entry;
wire dvm_snoop_part2_write;
wire q_dtr_rsp_flag;
wire q_dtw_rsp_flag;
wire aiu_dtr_provider;
wire chi_req;
wire ace_req;
wire do_not_send_chi_snp, q_do_not_send_chi_snp, q_snp_req_popped;
wire entry_valid_en;
wire q_snp_req_flag ;
wire q_snp_rsp_out_ack;
wire stashing_ott_entry_valid;

wire [\=wRbid-1=\:0] q_snp_rb_id;
wire [\=wMsgid-1=\:0] q_snp_message_id ;

wire [4:0] chi_snp_cmd ;
wire chi_snp_stash, chi_snp_wr_stash, chi_snp_rd_stash;
wire [\=u.getParam('DTRReqTxInterface').cm_type-1=\:0] dtr_data_opcode;
wire [\=u.getParam('DTWReqInterface').cm_type-1=\:0] dtw_data_opcode;
wire [\=nOttEntries=\-1:0] snp_rsp_mpf1_onehot;
wire [\=wOttEntries=\-1:0] snp_rsp_mpf1_encoded;
wire [\=nOttStashEntries=\-1:0] q_ott_initvec_stash;
wire tie1 = 1'b1 ;
wire tie0 = 1'b0 ;

wire snp_req_DoNotGoToSD;
wire snp_req_RetToSrc;

\=bundleFunctions.wiresFromInterface('snp_rsp_', u.getParam('SNPRspInterface') , ['valid','ready','last'] , obj.lib.bundle )=\   

\=bundleFunctions.wiresFromInterface('snp_req_', u.getParam('CHI_SNPREQ_interface') , ['DoNotGoToSD', 'RetToSrc', 'TraceTag'] , obj.lib.bundle )=\    

\=bundleFunctions.wiresFromInterface('dtr_req_', u.getParam('DTRReqTxInterface'), ['valid','ready','last','data','be','aux','dwid','dbad'], obj.lib.bundle)=\    

\=bundleFunctions.wiresFromInterface('dtw_req_', u.getParam('DTWReqInterface'), ['valid','ready','last','data','be','aux','dwid','dbad'], obj.lib.bundle)=\    

\=bundleFunctions.wiresFromInterface('q_snp_req_slv_', u.getParam('SNPReqInterface') , ['up','cm_type', 'intf_size'] , obj.lib.bundle )=\

wire [\=wEntries=\-1:0] stt_index;
wire [\=wEntries=\-1:0] stt_index_a1;

wire entry_dealloc;

wire [2:0] q_snp_cdw;
wire q_snp_req_is_dvm_sync_part2;
wire dtw_mrgmrd;
wire q_stash_entries_full_d, stt_stash_entries_full;
wire dff_enable = 1'b1;

//=============================================================================
// snp_req_sent_dropped
//=============================================================================

wire snp_req_sent_dropped_set   = snp_req_dropped;
wire snp_req_sent_dropped_reset = entry_dealloc;

wire snp_req_sent_dropped_in    = snp_req_sent_dropped_reset ? 1'b0 : snp_req_sent_dropped_set;
wire snp_req_sent_dropped_en    = snp_req_sent_dropped_reset | snp_req_sent_dropped_set;

wire snp_req_sent_dropped;

\=u.dffre(1, 'snp_req_sent_dropped', 'snp_req_sent_dropped_in', "1'b0", 'snp_req_sent_dropped_en', 'clk', 'reset_n')=\


wire snp_req_sent_dropped_trig_in = (snp_req_sent_dropped & ~dvm_entry) | ((snp_req_sent_dropped_set | snp_req_sent_dropped) & (dvm_snoop_part2_write | dvm_snoop_part2_entry) & (last_dvm_write_entry == stt_index));

wire snp_req_sent_dropped_trig;

\=u.dffre(1, 'snp_req_sent_dropped_trig', 'snp_req_sent_dropped_trig_in', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

//=============================================================================
// init_d
//=============================================================================

\=u.dffre(1, 'init_d', 'init', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

//=============================================================================
// snp_req_slv_cm_type_mod
//
// If this AIU is not the stash target, the snoop stash request needs to be converted to snoop request.
//=============================================================================

wire stashing_snoop = snp_req_slv_valid & (
                          (snp_req_slv_cm_type == \=cm_type.SnpInvStsh=\)
                        | (snp_req_slv_cm_type == \=cm_type.SnpUnqStsh=\)
                        | (snp_req_slv_cm_type == \=cm_type.SnpStshShd=\)
                        | (snp_req_slv_cm_type == \=cm_type.SnpStshUnq=\)
                      );

wire snp_aiu_stash = snp_req_slv_valid & stashing_snoop & aiu_node_stash_target;

assign snp_req_stash_non_target = ({8{(snp_req_slv_cm_type == \=cm_type.SnpInvStsh=\)}} & \=cm_type.SnpInv=\)    //Snoop MakeInvalid
                                | ({8{(snp_req_slv_cm_type == \=cm_type.SnpUnqStsh=\)}} & \=cm_type.SnpInvDtr=\) //Snoop Unique
                                | ({8{(snp_req_slv_cm_type == \=cm_type.SnpStshShd=\)}} & \=cm_type.SnpVldDtr=\) //Snoop Shared
                                | ({8{(snp_req_slv_cm_type == \=cm_type.SnpStshUnq=\)}} & \=cm_type.SnpInvDtr=\) //Snoop Unique
                                ;
wire [7:0] q_snp_req_wr_stash_non_target = ({8{(q_snp_req_slv_cm_type_mod_org == \=cm_type.SnpInvStsh=\)}} & \=cm_type.SnpInv=\) //Snoop MakeInvalid
                                         | ({8{(q_snp_req_slv_cm_type_mod_org == \=cm_type.SnpUnqStsh=\)}} & \=cm_type.SnpInvDtr=\) //Snoop Unique
                                         ;
assign snp_req_slv_cm_type_mod = (~stashing_snoop | snp_aiu_stash) ? snp_req_slv_cm_type : snp_req_stash_non_target;


//=============================================================================
// stashing_entry
//=============================================================================
wire stashing_entry = entry_valid & (
                          (q_snp_req_slv_cm_type_mod == \=cm_type.SnpInvStsh=\)
                        | (q_snp_req_slv_cm_type_mod == \=cm_type.SnpUnqStsh=\)
                        | (q_snp_req_slv_cm_type_mod == \=cm_type.SnpStshShd=\)
                        | (q_snp_req_slv_cm_type_mod == \=cm_type.SnpStshUnq=\));

wire wr_stashing_entry = entry_valid & ( (q_snp_req_slv_cm_type_mod_org == \=cm_type.SnpInvStsh=\) 
                                       | (q_snp_req_slv_cm_type_mod_org == \=cm_type.SnpUnqStsh=\) );
//=============================================================================
// q_snp_req_slv_* loaded when init is asserted.
//=============================================================================

\=u.dffre(3, 'q_snp_cdw', 'snp_cdw', "3'b0", 'init', 'clk', 'reset_n')=\

\=u.dffre(8, 'q_snp_req_slv_cm_type_mod_org', 'snp_req_slv_cm_type_mod', "8'b0", 'init', 'clk', 'reset_n')=\

\js if (chi_e) {
assign q_snp_req_slv_cm_type_mod = (wr_stashing_entry & stt_stash_entries_full) ? q_snp_req_wr_stash_non_target : q_snp_req_slv_cm_type_mod_org;
\js } else {
assign q_snp_req_slv_cm_type_mod = q_snp_req_slv_cm_type_mod_org;
\js }

\jsbegin
var snp_req_interface = u.getParam('SNPReqInterface') ;

for (var dataField in snp_req_interface) {
    var width = snp_req_interface[dataField];
    if(width> 0) {
\jsend
    
\=u.dffre(width, 'q_snp_req_slv_'+dataField, 'snp_req_slv_'+dataField, width+"'b0", 'init', 'clk', 'reset_n')=\

\jsbegin   
    }
}
\jsend

\=u.dffre(wRbid,  'q_snp_rb_id',      'snp_req_slv_rb_id',      wRbid+"'b0",  'init', 'clk', 'reset_n')=\

\=u.dffre(wMsgid, 'q_snp_message_id', 'snp_req_slv_message_id', wMsgid+"'b0", 'init', 'clk', 'reset_n')=\

\=u.dffre(1, 'q_snp_req_is_dvm_sync_part2', 'snp_req_is_dvm_sync_part2', "1'b0", 'init', 'clk', 'reset_n')=\
\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if(snp_opcode_width == 5) { \jsend
wire [4:0] chi_snp_cmd_modif = chi_snp_cmd;
\js } else {
wire [3:0] chi_snp_cmd_modif = chi_snp_cmd[3:0];
\js } 
 
//=============================================================================
// snp_rsp_data (SMI snoop response bundle)
//=============================================================================

assign snp_rsp_initiator_id [\=u.getParam('SNPRspInterface').initiator_id-1=\:0] = init_id;
assign snp_rsp_target_id    [\=u.getParam('SNPRspInterface').target_id-1=\:0]    = q_snp_req_slv_initiator_id;
assign snp_rsp_message_id   [\=u.getParam('SNPRspInterface').message_id-1=\:0]   = \=u.getParam('SNPRspInterface').message_id=\'b0;
assign snp_rsp_cm_type      [\=u.getParam('SNPRspInterface').cm_type-1=\:0]      = \=u.getParam('SNPRspInterface').cm_type=\'b1111_0010; // SnpRsp

\js if (wHProt > 0) {
    \js if (wHProt == 1) {
assign snp_rsp_h_prot = 1'b0;
    \js } else {
assign snp_rsp_h_prot [\=wHProt-1=\:0] = \=wHProt=\'b0;
    \js }
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wTTier > 0) {
\jsend
assign snp_rsp_t_tier [\=wTTier-1=\:0] = \=wTTier=\'b0;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wSteering > 0) {
\jsend
assign snp_rsp_steering [\=wSteering-1=\:0] = \=wSteering=\'b0;
\js }

\js if (wPriority > 0) {
assign snp_rsp_priority [\=wPriority-1=\:0] = q_snp_req_slv_priority;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wQl > 0) {
\jsend
assign snp_rsp_ql [\=wQl-1=\:0] = \=wQl=\'b0;
\js }

\js if (wMProt_snp_rsp > 0) {
    \js if (wMProt_snp_rsp == 1) {
assign snp_rsp_m_prot = 1'b0;
    \js } else {
assign snp_rsp_m_prot [\=wMProt_snp_rsp-1=\:0] = \=wMProt_snp_rsp=\'b0;
    \js }
\js }

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wTm_snp_rsp) {
\jsend
assign snp_rsp_tm = q_snp_req_slv_tm;
\js }

assign snp_rsp_cm_status[7:0] = q_snp_rsp_status;

assign snp_rsp_r_message_id [\=u.getParam('SNPRspInterface').r_message_id-1=\:0]       =  q_snp_req_slv_message_id ;

// For the snoop response to stashing snoops, the mpf1 field indicates the OTT entry index
// so that the correct OTT entry is looked up when the corresponding DTR is received.

assign snp_rsp_mpf1_onehot[\=nOttEntries=\-1:0] = {q_ott_initvec_stash, \=nOttCtrlEntries=\'b0};

\=u.instance({
    instanceName: 'u_mpf1_encode',
    moduleName: 'encoder',
    params: { width : nOttEntries},
    verilogParams: {},
    ports: {
        invector : 'snp_rsp_mpf1_onehot', outdecode : 'snp_rsp_mpf1_encoded'
    }
})=\

wire [\=mpf1_width-1=\:0] snp_rsp_mpf1_encoded_pad =
    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (mpf1_width > wOttEntries) {
    \jsend
                              {\=mpf1_width-wOttEntries=\'b0, snp_rsp_mpf1_encoded};
    \js } else {
                              snp_rsp_mpf1_encoded;
    \js }

assign snp_rsp_mpf1 [\=mpf1_width-1=\:0] = stashing_entry ? snp_rsp_mpf1_encoded_pad : \=mpf1_width=\'b0 ;

assign snp_rsp_intf_size [\=u.getParam('SNPRspInterface').intf_size-1=\:0] = (\=intf_size=\ == 2) ? 2'b10 : 2'b01;
          
assign snp_rsp_out_data = {snp_req_TxnID, q_snp_resp_err_info, q_snp_req_slv_ns, q_snp_req_slv_addr,
            \=bundleFunctions.packetizeBundle('snp_rsp_', u.getParam('SNPRspInterface'), ['valid','ready','last'], obj.lib.bundle )=\};

//=============================================================================
// stt_index
//=============================================================================

assign stt_index_a1 = dvm_snoop_part2_write ? last_dvm_write_entry : stt_entry_num;

\=u.dffre(wEntries, 'stt_index', 'stt_index_a1', wEntries+"'b0", 'init', 'clk', 'reset_n')=\

//=============================================================================
// snp_req_data (CHI snoop request bundle)
//=============================================================================

\js if (qos_width > 0) {
assign snp_req_QoS [\=u.getParam('CHI_SNPREQ_interface').QoS-1=\:0] = q_snp_req_slv_qos ;
\js } else {
assign snp_req_QoS [\=u.getParam('CHI_SNPREQ_interface').QoS-1=\:0] = \=u.getParam('CHI_SNPREQ_interface').QoS=\'b0;
\js }

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (fixCONC12825) { \jsend
wire [\=unit_id_width-1=\:0] my_src_id = dvm_entry ? dve_f_unit_id : my_f_unit_id;
\js } else {
wire [\=unit_id_width-1=\:0] my_src_id = my_f_unit_id;
\js }

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (src_id_width > unit_id_width) {
\jsend
assign snp_req_SrcID [\=src_id_width-1=\:0] = {\=src_id_width-unit_id_width=\'b0, my_src_id};
\js } else {
assign snp_req_SrcID [\=src_id_width-1=\:0] = my_src_id[\=src_id_width-1=\:0];
\js }

// -----------------------------------------------------------------------------
// In case of stashing entries that expect data and are allocated OTT stash entries,
// the snoop txn id will be the combination of the ott entry id and stt entry id
// in order to make it unique to the agent.
//
// Also, the bit 6 of these requests will be set to 1 to distunigush them from non stashing snoops
// to avoid ID duplication in case of ID='h80.
// -----------------------------------------------------------------------------

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if ((u.getParam('CHI_SNPREQ_interface').TxnID - 1) > wEntries) {
    \jsend
assign snp_req_TxnID [\=u.getParam('CHI_SNPREQ_interface').TxnID-1=\:0] = { 1'b1, {\=u.getParam('CHI_SNPREQ_interface').TxnID-wEntries -1=\{1'b0}} , stt_index };
    \js } else {
assign snp_req_TxnID [\=u.getParam('CHI_SNPREQ_interface').TxnID-1=\:0] = { 1'b1, stt_index };
    \js }

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (wSnpFlit_FwdNID_local > 0) { \jsend
    \js if (chi_e) {
assign snp_req_FwdNID [\=u.getParam('CHI_SNPREQ_interface').FwdNID-1=\:0] =
    dvm_snoop_part1_entry ? {\=u.getParam('CHI_SNPREQ_interface').FwdNID-1=\'d0, q_snp_req_slv_mpf3[1]} :
    dvm_snoop_part2_entry ? {\=u.getParam('CHI_SNPREQ_interface').FwdNID-5=\'d0, last_dvm_write_range ? q_snp_req_slv_mpf3[5:1] : 5'b0} :
                             \=u.getParam('CHI_SNPREQ_interface').FwdNID=\'b0;
    \js } else {
assign snp_req_FwdNID [\=u.getParam('CHI_SNPREQ_interface').FwdNID-1=\:0] = \=u.getParam('CHI_SNPREQ_interface').FwdNID=\'b0;
    \js }
\js }

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (wSnpFlit_FwdTxnID_local > 0) { \jsend
wire [\=u.getParam('CHI_SNPREQ_interface').FwdTxnID=\-1:0] snp_fwd_txn_id;

assign snp_fwd_txn_id = chi_snp_stash ? {\=u.getParam('CHI_SNPREQ_interface').FwdTxnID-6=\'b0, q_snp_req_slv_mpf2[\=mpf2_width-1=\], q_snp_req_slv_mpf2[4:0]}
    \js if (chi_e) {
                                       : dvm_entry ? {\=u.getParam('CHI_SNPREQ_interface').FwdTxnID-8=\'b0, q_snp_req_slv_mpf1[7:0]}
    \js } else {
                                       : dvm_entry ? q_snp_req_slv_mpf1[7:0]
    \js }
                                       : \=u.getParam('CHI_SNPREQ_interface').FwdTxnID=\'b0;

assign snp_req_FwdTxnID [\=u.getParam('CHI_SNPREQ_interface').FwdTxnID-1=\:0] = snp_fwd_txn_id;
\js }

assign snp_req_OpCode [\=snp_opcode_width-1=\:0] = chi_snp_cmd_modif;

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useShiftedAddressForNonDvmSnoop) {
\jsend
assign snp_req_Addr [\=u.getParam('CHI_SNPREQ_interface').Addr-1=\:0] = (q_snp_req_slv_cm_type == \=cm_type.SnpDvmMsg=\) ? q_snp_req_slv_addr[\=wFlit_Addr=\-1:3] : {q_snp_req_slv_addr[\=wFlit_Addr=\-1:6], q_snp_cdw[2:0]};
\js } else {
assign snp_req_Addr [\=u.getParam('CHI_SNPREQ_interface').Addr-1=\:0] = q_snp_req_slv_addr[\=wFlit_Addr=\-1:3];
\js }

assign snp_req_NS = (q_snp_req_slv_cm_type == \=cm_type.SnpDvmMsg=\) ? 1'b0 : q_snp_req_slv_ns;

// -----------------------------------------------------------------------------
// Set the the DonotDataPull bit for stashing entries to 1 if there are
// no available entries in OTT to accept the stashing data
// -----------------------------------------------------------------------------
assign chi_snp_stash = ((chi_snp_cmd == \=chi_cmd.SnpUniqueStash=\)
                     |  (chi_snp_cmd == \=chi_cmd.SnpMakeInvalidStash=\)
                     |  (chi_snp_cmd == \=chi_cmd.SnpStashUnique=\)
                     |  (chi_snp_cmd == \=chi_cmd.SnpStashShared=\));
assign chi_snp_wr_stash = (chi_snp_cmd == \=chi_cmd.SnpUniqueStash=\) | (chi_snp_cmd == \=chi_cmd.SnpMakeInvalidStash=\);
assign chi_snp_rd_stash = (chi_snp_cmd == \=chi_cmd.SnpStashUnique=\) | (chi_snp_cmd == \=chi_cmd.SnpStashShared=\);
assign snp_req_DoNotGoToSD = ((chi_snp_cmd == \=chi_cmd.SnpUnique=\)
                           |  (chi_snp_cmd == \=chi_cmd.SnpCleanShared=\)
                           |  (chi_snp_cmd == \=chi_cmd.SnpCleanInvalid=\)
                           |  (chi_snp_cmd == \=chi_cmd.SnpMakeInvalid=\)
\js if (chi_e) {
                           |  (chi_snp_stash)
\js } else {
                           |  (chi_snp_stash & stash_entries_full)
\js }
                           ) ? 1'b1 : 1'b0;

assign snp_req_RetToSrc = ((q_snp_req_slv_up == 2'b01) |
                           ((q_snp_req_slv_up == 2'b11) & (q_snp_req_slv_mpf3 == aiu_provider_id))
                          ) &
                          ((q_snp_req_slv_cm_type == \=cm_type.SnpClnDtr=\)  |
                           (q_snp_req_slv_cm_type == \=cm_type.SnpNoSDInt=\) |
                           (q_snp_req_slv_cm_type == \=cm_type.SnpVldDtr=\)  |
                           (q_snp_req_slv_cm_type == \=cm_type.SnpInvDtr=\)  |
                           (q_snp_req_slv_cm_type == \=cm_type.SnpNitcMI=\)  |
                           (q_snp_req_slv_cm_type == \=cm_type.SnpNitcCI=\)  |
                           (q_snp_req_slv_cm_type == \=cm_type.SnpNitc=\)
                          ) ? 1'b1 : 1'b0;

wire snp_req_TraceTag = q_snp_req_slv_tm ;

assign snp_req_cm_type [\=u.getParam('SNPReqInterface').cm_type-1=\:0]= q_snp_req_slv_cm_type_mod;

assign snp_req_data = \=bundleFunctions.packetizeBundle('snp_req_', u.getParam('CHI_SNPREQ_interface'), [], obj.lib.bundle)=\;

//=============================================================================
// dtr_req_data (DTRreq bundle)
//=============================================================================

assign dtr_req_initiator_id [\=u.getParam('DTRReqTxInterface').initiator_id-1=\:0] = init_id;
assign dtr_req_target_id    [\=u.getParam('DTRReqTxInterface').target_id-1=\:0]    = ({{\=port_id_width=\{1'b0}}, q_snp_req_slv_mpf1[\=unit_id_width-1=\:0]} << \=port_id_width=\);
assign dtr_req_message_id   [\=u.getParam('DTRReqTxInterface').message_id-1=\:0]   = {{\=u.getParam('DTRReqTxInterface').message_id-wEntries=\{1'b0}}, stt_entry_num};
assign dtr_req_cm_type      [\=u.getParam('DTRReqTxInterface').cm_type-1=\:0]      = dtr_data_opcode;

\js if (wHProt > 0) {
    \js if (wHProt == 1) {
assign dtr_req_h_prot = 1'b0;
    \js } else {
assign dtr_req_h_prot [\=wHProt-1=\:0] = \=wHProt=\'b0;
    \js }
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wTTier > 0) {
\jsend
assign dtr_req_t_tier [\=wTTier-1=\:0] = \=wTTier=\'b0;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wSteering > 0) {
\jsend
assign dtr_req_steering [\=wSteering-1=\:0] = \=wSteering=\'b0;
\js }

\js if (wPriority > 0) {
assign dtr_req_priority [\=wPriority-1=\:0] = q_snp_req_slv_priority;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wQl > 0) {
\jsend
assign dtr_req_ql [\=wQl-1=\:0] = \=wQl=\'b0;
\js }

\js if (wMProt_dtr_req > 0) {
    \js if (wMProt_dtr_req == 1) {
assign dtr_req_m_prot = 1'b0;
    \js } else {
assign dtr_req_m_prot [\=wMProt_dtr_req-1=\:0] = \=wMProt_dtr_req=\'b0;
    \js }
\js }

\js if (wDProt_dtr_req > 0) {
assign dtr_req_dprot [\=wDProt_dtr_req-1=\:0] = \=wDProt_dtr_req=\'b0;
\js }

assign dtr_req_cm_status [\=u.getParam('DTRReqTxInterface').cm_status-1=\:0] =
            (RXDAT_RespErr == 2'b10) ? 8'b10000011 :
            (RXDAT_RespErr == 2'b11) ? 8'b10000100 :
                                       \=u.getParam('DTRReqTxInterface').cm_status=\'b0  ;

assign dtr_req_rl           [\=u.getParam('DTRReqTxInterface').rl-1=\:0] = \=u.getParam('DTRReqTxInterface').rl=\'b01;

assign dtr_req_r_message_id [\=dtr_msg_id_width-1=\:0] = q_snp_req_slv_mpf2[\=dtr_msg_id_width-1=\:0];

assign dtr_req_mpf1         [\=u.getParam('DTRReqTxInterface').mpf1-1=\:0] = \=u.getParam('DTRReqTxInterface').mpf1=\'b0;

assign dtr_req_tm = q_snp_req_slv_tm;

assign dtr_req_data = {
                        \=bundleFunctions.packetizeBundle('dtr_req_', u.getParam('DTRReqTxInterface'), ['valid','ready','last','data','be','aux','dwid','dbad'], obj.lib.bundle)=\};

//=============================================================================
// dtw_req_data (DTWreq bundle)
//=============================================================================

assign dtw_req_initiator_id [\=u.getParam('DTWReqInterface').initiator_id-1=\:0] =  init_id;

assign dtw_req_target_id [\=u.getParam('DTWReqInterface').target_id-1=\:0] = ({{\=port_id_width=\{1'b0}}, q_snp_req_slv_d_id} << \=port_id_width=\);

\js if ((u.getParam('DTWReqInterface').message_id-wEntries-1) > 0) {
assign dtw_req_message_id [\=u.getParam('DTWReqInterface').message_id-1=\:0] = {1'b1, \=u.getParam('DTWReqInterface').message_id-wEntries-1=\'b0, stt_entry_num};
\js } else {
assign dtw_req_message_id [\=u.getParam('DTWReqInterface').message_id-1=\:0] = {1'b1, stt_entry_num};
\js }

assign dtw_req_cm_type [\=u.getParam('DTWReqInterface').cm_type-1=\:0] = dtw_data_opcode;

\js if (wHProt > 0) {
    \js if (wHProt == 1) {
assign dtw_req_h_prot = 1'b0;
    \js }  else {
assign dtw_req_h_prot [\=wHProt-1=\:0] = \=wHProt=\'b0;
    \js }
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wTTier > 0) {
\jsend
assign dtw_req_t_tier [\=wTTier-1=\:0] = \=wTTier=\'b0;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wSteering > 0) {
\jsend
assign dtw_req_steering [\=wSteering-1=\:0] = \=wSteering=\'b0;
\js }

\js if (wPriority > 0) {
assign dtw_req_priority [\=wPriority-1=\:0] = q_snp_req_slv_priority;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wQl > 0) {
\jsend
assign dtw_req_ql [\=wQl-1=\:0] = \=wQl=\'b0;
\js }

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (wUser > 0) {
\jsend
assign dtw_req_user [\=wUser-1=\:0] = \=wUser=\'b0;
\js }

\js if (wMProt_dtw_req > 0) {
    \js if (wMProt_dtw_req == 1) {
assign dtw_req_m_prot = 1'b0;
    \js }  else {
assign dtw_req_m_prot [\=wMProt_dtw_req-1=\:0] = \=wMProt_dtw_req=\'b0;
    \js }
\js }

\js if (wDProt_dtw_req > 0) {
assign dtw_req_dprot [\=wDProt_dtw_req-1=\:0] = \=wDProt_dtw_req=\'b0;
\js }

assign dtw_req_cm_status [\=u.getParam('DTWReqInterface').cm_status-1=\:0] =
            (RXDAT_RespErr == 2'b10) ? 8'b10000011 :
            (RXDAT_RespErr == 2'b11) ? 8'b10000100 : \=u.getParam('DTWReqInterface').cm_status=\'b0;

assign dtw_req_tm = q_snp_req_slv_tm;

wire dtw_req_ac = 1'b0;
wire dtw_req_ca = 1'b0;
wire dtw_req_ns = 1'b0;

assign dtw_req_rl [\=u.getParam('DTWReqInterface').rl-1=\:0] = dtw_mrgmrd ? \=u.getParam('DTWReqInterface').rl=\'b11 : \=u.getParam('DTWReqInterface').rl=\'b10 ;

// For stashing DTWs, this field carries stash NID
assign dtw_req_mpf1 [\=u.getParam('DTWReqInterface').mpf1-1=\:0] = q_snp_req_slv_mpf1;

// mpf2 field of the snoop request which carries the message id of the original command for non stashing snoops and stashlpid for stashing snoops
assign dtw_req_mpf2 [\=u.getParam('DTWReqInterface').mpf2-1=\:0] = q_snp_req_slv_mpf2;

// Primary field be set to 0 for all snoop DTWs
assign dtw_req_primary =  1'b0;

assign dtw_req_rb_id [\=u.getParam('DTWReqInterface').rb_id-1=\:0] = q_snp_rb_id;

assign dtw_req_intf_size = q_snp_req_slv_intf_size;

assign dtw_req_data = \=bundleFunctions.packetizeBundle('dtw_req_', u.getParam('DTWReqInterface'), ['valid','ready','last','data','be','aux','dwid','dbad'], obj.lib.bundle)=\;

//=============================================================================
// chi_snp_cmd
//=============================================================================

 \=obj.lib.instance({
        instanceName: 'concerto_to_chi_snp',
        moduleName: 'concerto_to_chi_snp',
        params: {
                 chi_a           : chi_a,
                 cm_type         : cm_type,
                 chi_cmd         : chi_cmd
                },
        verilogParams: {},
        ports: {
                conc_snp_cmd : "q_snp_req_slv_cm_type_mod" ,
                chi_snp_cmd  : "chi_snp_cmd" },
        portsDelimiter: '\n'
    })=\

//=============================================================================
// snp_rsp_status_rsp_channel_error
// snp_rsp_status_rsp_channel
// snp_rsp_status_dat_channel_error
// snp_rsp_status_dat_channel
//=============================================================================
wire stash_target = (q_snp_req_slv_cm_type == q_snp_req_slv_cm_type_mod); 

assign chi_req = ((q_snp_req_slv_tof[2:0] == 3'b001) |  (q_snp_req_slv_tof[2:0] == 3'b011));
assign ace_req = (q_snp_req_slv_tof[2:0] == 3'b010);

\=u.instance({
          instanceName: 'snp_rsp_gen_rsp_channel',
          moduleName: 'snp_resp_gen',
          params: {
                    cm_type     : cm_type,
                    chi_cmd     : chi_cmd,
                    chi_e       : chi_e,
                    dat_flit_interface : dat_flit_interface,
                    rsp_flit_interface : rsp_flit_interface ,
                    } ,
          verilogParams: {},
          ports: {
                snprsp_in_sel       : 'tie1',
                snp_req_cm_type     : 'q_snp_req_slv_cm_type',
                snp_req_slv_up      : 'q_snp_req_slv_up',
                snp_wrdata_sel      : 'tie0',
                snp_rsp_status      : 'snp_rsp_status_rsp_channel_non_error',
                stash_target        : 'stash_target',
                aiu_dtr_provider    : 'aiu_dtr_provider',
                chi_req             : 'chi_req',
                ace_req             : 'ace_req'
                    } ,
   interfaces : [
{  modulePrefix : 'RXDAT_', localPrefix : 'RXDAT_', interface : dat_flit_interface, exclude : ['Data', 'BE', 'TraceTag', 'DataID', 'CCID', 'RespErr',  'Homenode_ID', 'SrcID', 'TgtID', 'QoS', 'DBID', 'TxnID', 'Poison']},
{  modulePrefix : 'RXRSP_', localPrefix : 'RXRSP_', interface : rsp_flit_interface, exclude : ['Data', 'BE', 'TraceTag', 'DataID', 'CCID',  'RespErr', 'Homenode_ID', 'SrcID', 'TgtID', 'QoS', 'DBID', 'TxnID', 'PCrdType']},
],
          portsDelimiter: '\n    '
     })=\

assign snp_rsp_status_rsp_channel_error = (RXRSP_RespErr == 2'b10) ? 8'b10000011 : 8'b10000100;

assign snp_rsp_status_rsp_channel       = RXRSP_RespErr[1] ? snp_rsp_status_rsp_channel_error : {2'b0, snp_rsp_status_rsp_channel_non_error};


\=u.instance({
          instanceName: 'snp_rsp_gen_dat_channel',
          moduleName: 'snp_resp_gen',
          params: {
                    cm_type     : cm_type,
                    chi_cmd     : chi_cmd,
                    chi_e       : chi_e,
                    dat_flit_interface : dat_flit_interface,
                    rsp_flit_interface : rsp_flit_interface ,
                  } ,
          verilogParams: {},
          ports: {
                snprsp_in_sel       : 'tie0',
                snp_req_cm_type     : 'q_snp_req_slv_cm_type',
                snp_req_slv_up      : 'q_snp_req_slv_up',
                snp_wrdata_sel      : 'tie1',
                snp_rsp_status      : 'snp_rsp_status_dat_channel_non_error',
                stash_target        : 'stash_target',
                aiu_dtr_provider    : 'aiu_dtr_provider',
                chi_req             : 'chi_req',
                ace_req             : 'ace_req'
                    } ,
  interfaces : [
{  modulePrefix : 'RXDAT_', localPrefix : 'RXDAT_', interface : dat_flit_interface, exclude : ['Data', 'BE', 'TraceTag', 'DataID', 'CCID', 'RespErr', 'Homenode_ID', 'SrcID', 'TgtID', 'QoS', 'DBID', 'TxnID', 'Poison']},
{  modulePrefix : 'RXRSP_', localPrefix : 'RXRSP_', interface : rsp_flit_interface, exclude : ['Data', 'BE', 'TraceTag', 'DataID', 'CCID', 'RespErr', 'Homenode_ID', 'SrcID', 'TgtID', 'QoS', 'DBID', 'TxnID', 'PCrdType']}
],
     })=\

assign snp_rsp_status_dat_channel_error = (RXDAT_RespErr == 2'b10) ? 8'b10000011 : 8'b10000100;

assign snp_rsp_status_dat_channel = {2'b0, snp_rsp_status_dat_channel_non_error};

//=============================================================================
// dtr_data_opcode
// dtw_data_opcode
//=============================================================================

\=u.instance({
          instanceName: 'snp_dat_gen__channel',
          moduleName: 'snp_dat_gen',
          params: {
                    cm_type     : cm_type,
                    chi_cmd     : chi_cmd,
                    dat_flit_interface : dat_flit_interface,
                   } ,
          verilogParams: {},
          ports: {
                snp_req_cm_type     : 'q_snp_req_slv_cm_type',
                snp_req_cm_type_mod : 'q_snp_req_slv_cm_type_mod',
                snp_req_slv_up      : 'q_snp_req_slv_up',
                dtr_data_opcode     : 'dtr_data_opcode',
                dtw_data_opcode     : 'dtw_data_opcode',
                stash_target        : 'stash_target',
                aiu_dtr_provider    : 'aiu_dtr_provider',
                chi_req             : 'chi_req',
                ace_req             : 'ace_req'
                    } ,
 interfaces : [
{  modulePrefix : 'RXDAT_', localPrefix : 'RXDAT_', interface : dat_flit_interface, exclude : ['Data', 'BE', 'TraceTag', 'DataID', 'CCID', 'RespErr', 'Homenode_ID', 'SrcID', 'TgtID', 'QoS', 'DBID', 'TxnID', 'Poison']},
],
     })=\

//=============================================================================
// RXDATFLIT_dtr_data_opcode
// RXDATFLIT_dtw_data_opcode
//=============================================================================

\=u.instance({
          instanceName: 'snp_dat_gen__channel_early',
          moduleName: 'snp_dat_gen',
          params: {
                    cm_type     : cm_type,
                    chi_cmd     : chi_cmd,
                    dat_flit_interface : dat_flit_interface,
                   } ,
          verilogParams: {},
          ports: {
                snp_req_cm_type     : 'q_snp_req_slv_cm_type',
                snp_req_cm_type_mod : 'q_snp_req_slv_cm_type_mod',
                snp_req_slv_up      : 'q_snp_req_slv_up',
                dtr_data_opcode     : 'RXDATFLIT_dtr_data_opcode',
                dtw_data_opcode     : 'RXDATFLIT_dtw_data_opcode',
                stash_target        : 'stash_target',
                aiu_dtr_provider    : 'aiu_dtr_provider',
                chi_req             : 'chi_req',
                ace_req             : 'ace_req'
                    } ,
 interfaces : [
{  modulePrefix : 'RXDAT_', localPrefix : 'RXDATFLIT_', interface : dat_flit_interface, exclude : ['Data', 'BE', 'TraceTag', 'DataID', 'CCID', 'RespErr', 'Homenode_ID', 'SrcID', 'TgtID', 'QoS', 'DBID', 'TxnID', 'Poison']},
],
     })=\

//=============================================================================
// q_snp_rsp_out_ack
//=============================================================================

wire snp_rsp_ack_in = entry_valid_en ? 1'b0 : snp_rsp_out_ack;
wire snp_rsp_ack_en = entry_valid_en | snp_rsp_out_ack;

\=u.dffre(1, 'q_snp_rsp_out_ack', 'snp_rsp_ack_in', "1'b0", 'snp_rsp_ack_en', 'clk', 'reset_n')=\

//=============================================================================
// entry_dealloc
//
// stt_index carries the index of the entry that has the part 1 of the snoop in case of dvm snoops
// If the snoop entry is part 2 of a dvm snoop, it should be retired when the snoop response for the dvm is sent out
//=============================================================================

assign entry_dealloc =
    dvm_snoop_part2_entry ? (entry_valid & (snp_req_sent_dropped ? snp_rsp_out_req & snp_rsp_out_ack : snp_rsp_sent & (stt_index == snp_resp_encoded))) :
                            (entry_valid & q_snp_req_popped & ~q_snp_req_flag & ~q_snp_rsp_flag & (snp_req_sent_dropped & dvm_snoop_part1_entry ? 1'b1 : q_snp_rsp_out_ack) & ~q_dtr_rsp_flag & (stashing_entry ? ~stashing_ott_entry_valid : 1'b1));

//=============================================================================
// entry_valid
//=============================================================================
assign entry_valid_early = init ? 1'b1 : entry_dealloc ? 1'b0 : entry_valid;
assign entry_valid_en = init | entry_dealloc ;

wire entry_valid_in = entry_dealloc ? 1'b0 : 1'b1 ;

\=u.dffre(1, 'entry_valid', 'entry_valid_in', "1'b0", 'entry_valid_en', 'clk', 'reset_n')=\

//=============================================================================
// q_ott_initvec_stash
//=============================================================================

\=u.dffre(nOttStashEntries, 'q_ott_initvec_stash', 'ott_initvec_stash', nOttStashEntries+"'b0", 'init', 'clk', 'reset_n')=\

//=============================================================================
// aiu_dtr_provider
//=============================================================================

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if (mpf3_width > unit_id_width) { \jsend
assign aiu_provider_id = {\=mpf3_width - unit_id_width=\'b0, my_f_unit_id};
\js } else {
assign aiu_provider_id = my_f_unit_id;
\js }

assign aiu_dtr_provider = (q_snp_req_slv_up == 2'b00)
                        | (q_snp_req_slv_up == 2'b01)
                        | (q_snp_req_slv_up == 2'b10)
                        | ((q_snp_req_slv_up == 2'b11) & (q_snp_req_slv_mpf3 == aiu_provider_id)); 

//=============================================================================
// q_dtr_rsp_flag
//=============================================================================

wire dtr_valid = (dtr_data_opcode == \=cm_type.DtrDataInv=\)
               | (dtr_data_opcode == \=cm_type.DtrDataSCln=\)
               | (dtr_data_opcode == \=cm_type.DtrDataSDty=\)
               | (dtr_data_opcode == \=cm_type.DtrDataUCln=\)
               | (dtr_data_opcode == \=cm_type.DtrDataUDty=\)
               ;

wire dtr_req = rx_data_valid & dtr_valid & aiu_dtr_provider;

wire dtr_rsp_flag_set   = entry_valid & dtr_req & snp_data_sel; 
wire dtr_rsp_flag_reset = dtr_rsp_sel;

wire dtr_rsp_flag_en = dtr_rsp_flag_set | dtr_rsp_flag_reset ;
wire dtr_rsp_flag_in = dtr_rsp_flag_set ? 1'b1 : 1'b0 ;

\=u.dffre(1, 'q_dtr_rsp_flag', 'dtr_rsp_flag_in', "1'b0", 'dtr_rsp_flag_en', 'clk', 'reset_n')=\

//=============================================================================
// q_dtw_rsp_flag
//=============================================================================

assign dtw_mrgmrd = (dtw_data_opcode == \=cm_type.DtwMrgMrdInv=\) 
                  | (dtw_data_opcode == \=cm_type.DtwMrgMrdSCln=\)
                  | (dtw_data_opcode == \=cm_type.DtwMrgMrdUCln=\)
                  | (dtw_data_opcode == \=cm_type.DtwMrgMrdUDty=\)
                  ;

wire dtw_valid = (dtw_data_opcode == \=cm_type.DtwDataFullCln=\)
               | (dtw_data_opcode == \=cm_type.DtwDataPtlDty=\)
               | (dtw_data_opcode == \=cm_type.DtwDataFullDty=\)
               | (dtw_data_opcode == \=cm_type.DtwMrgMrdInv=\)
               | (dtw_data_opcode == \=cm_type.DtwMrgMrdSCln=\)
               | (dtw_data_opcode == \=cm_type.DtwMrgMrdUCln=\)
               | (dtw_data_opcode == \=cm_type.DtwMrgMrdUDty=\)
               ;

wire dtw_req = rx_data_valid & dtw_valid;

wire dtw_rsp_flag_set   = entry_valid & dtw_req & snp_data_sel;
wire dtw_rsp_flag_reset = dtw_rsp_sel;

wire dtw_rsp_flag_en = dtw_rsp_flag_set | dtw_rsp_flag_reset ;
wire dtw_rsp_flag_in = dtw_rsp_flag_set ? 1'b1 : 1'b0 ;

\=u.dffre(1, 'q_dtw_rsp_flag', 'dtw_rsp_flag_in', "1'b0", 'dtw_rsp_flag_en', 'clk', 'reset_n')=\

//=============================================================================
// q_snp_req_flag
//=============================================================================

wire snp_req_flag_set   = init;
wire snp_req_flag_reset = snp_req_sent | do_not_send_chi_snp;

wire snp_req_flag_en = snp_req_flag_set | snp_req_flag_reset;
wire snp_req_flag_in = snp_req_flag_set ? 1'b1 : 1'b0 ;

\=u.dffre(1, 'q_snp_req_flag', 'snp_req_flag_in', "1'b0", 'snp_req_flag_en', 'clk', 'reset_n')=\

//=============================================================================
// stashing_ott_entry_valid
//=============================================================================

assign stashing_ott_entry_valid = {|{q_ott_initvec_stash & entry_validvec_stash}};

//=============================================================================
// q_snp_rsp_flag
//=============================================================================

wire snp_rsp_flag_set   = init;
wire snp_rsp_flag_reset = snprsp_in_sel | (q_dtr_data_rcvd & ~q_dtw_rsp_flag) | snp_req_sent_dropped_trig | entry_dealloc | do_not_send_chi_snp;
  
wire snp_rsp_flag_en = snp_rsp_flag_set | snp_rsp_flag_reset ;
wire snp_rsp_flag_in = snp_rsp_flag_set ? 1'b1 : 1'b0 ;

\=u.dffre(1, 'q_snp_rsp_flag', 'snp_rsp_flag_in', "1'b0", 'snp_rsp_flag_en', 'clk', 'reset_n')=\

//=============================================================================
// snp_rsp_out_req
//=============================================================================

assign snp_rsp_out_req = entry_valid & ~q_snp_req_flag & ~q_snp_rsp_flag & ~q_snp_rsp_out_ack & (snp_req_sent_dropped & dvm_entry ? dvm_snoop_part2_entry : 1'b1);

//=============================================================================
// q_snp_rsp_status
//=============================================================================

wire snp_rsp_status_en = snp_data_sel | snprsp_in_sel | snp_req_sent_dropped | do_not_send_chi_snp;

wire [7:0] snp_rsp_status_in = snp_req_sent_dropped | (do_not_send_chi_snp | q_do_not_send_chi_snp) ? 8'h0 :
                               snprsp_in_sel        ? snp_rsp_status_rsp_channel : snp_rsp_status_dat_channel; 

\=u.dffre(8, 'q_snp_rsp_status', 'snp_rsp_status_in', "8'b0", 'snp_rsp_status_en', 'clk', 'reset_n')=\

//=============================================================================
// q_snp_resp_err_info
//=============================================================================

wire       snp_resp_err_info_en = entry_dealloc | (snp_data_sel | snprsp_in_sel) | do_not_send_chi_snp;

wire [1:0] snp_resp_err_info_in = entry_dealloc | do_not_send_chi_snp ? 2'b0 : (snp_data_sel ? RXDAT_RespErr : RXRSP_RespErr);

\=u.dffre(2, 'q_snp_resp_err_info', 'snp_resp_err_info_in', "2'b0", 'snp_resp_err_info_en', 'clk', 'reset_n')=\

//=============================================================================
// q_dtr_data_rcvd
//=============================================================================

wire dtr_data_rcvd_reset = entry_valid_en;
wire dtr_data_rcvd_set   = snp_data_sel & rx_data_valid & RXDAT_LAST;

wire dtr_data_rcvd_in = dtr_data_rcvd_reset ? 1'b0 : dtr_data_rcvd_set;
wire dtr_data_rcvd_en = dtr_data_rcvd_reset | dtr_data_rcvd_set;

\=u.dffre(1, 'q_dtr_data_rcvd', 'dtr_data_rcvd_in', "1'b0", 'dtr_data_rcvd_en', 'clk', 'reset_n')=\

//=============================================================================
// DVM entry
//=============================================================================

assign dvm_entry = (q_snp_req_slv_cm_type == \=cm_type.SnpDvmMsg=\) & entry_valid;

assign dvm_snoop_part1_entry = ~q_snp_req_slv_addr[3] & (q_snp_req_slv_cm_type == \=cm_type.SnpDvmMsg=\) & entry_valid;
assign dvm_snoop_part2_entry = q_snp_req_slv_addr[3] & (q_snp_req_slv_cm_type == \=cm_type.SnpDvmMsg=\) & entry_valid;

assign dvm_sync_part2_sent  = dvm_snoop_part2_entry & q_snp_req_is_dvm_sync_part2 & ~q_snp_req_flag;
assign dvm_sent             = dvm_entry & ~q_snp_req_flag;

assign dvm_snoop_part2_write = snp_req_slv_valid & snp_req_slv_ready & snp_req_slv_addr[3] & (snp_req_slv_cm_type == \=cm_type.SnpDvmMsg=\);

//=============================================================================
// Address Bit 3 for data width adaptation logic
//=============================================================================
assign snp_addr_bit3 = snp_req_Addr[0];

//=============================================================================
// Do not send CHI snoop request
//   when stash_entries_full for CHI snoop stash request
//=============================================================================

\js if (chi_e & useDoNotSendChiSnp) {
assign do_not_send_chi_snp = init_d & chi_snp_rd_stash & stash_entries_full_d;
\js } else {
assign do_not_send_chi_snp = 1'b0;
\js }

\js if (chi_e & useDoNotSendChiSnp) {

wire do_not_send_chi_snp_clr = entry_dealloc;
wire do_not_send_chi_snp_set = do_not_send_chi_snp;

wire do_not_send_chi_snp_in = do_not_send_chi_snp_clr ? 1'b0 : do_not_send_chi_snp_set;
wire do_not_send_chi_snp_en = do_not_send_chi_snp_clr | do_not_send_chi_snp_set;

\=u.dffre(1, 'q_do_not_send_chi_snp', 'do_not_send_chi_snp_in', "1'b0", 'do_not_send_chi_snp_en', 'clk', 'reset_n')=\

\js } else {
assign q_do_not_send_chi_snp = 1'b0;
\js }

assign stt_do_not_send_chi_snp = do_not_send_chi_snp | q_do_not_send_chi_snp;

//=============================================================================
// q_snp_req_popped
//=============================================================================

wire snp_req_popped_set   = snp_req_popped;
wire snp_req_popped_reset = entry_dealloc;

wire snp_req_popped_in    = snp_req_popped_reset ? 1'b0 : snp_req_popped_set;
wire snp_req_popped_en    = snp_req_popped_reset | snp_req_popped_set;

\=u.dffre(1, 'q_snp_req_popped', 'snp_req_popped_in', "1'b0", 'snp_req_popped_en', 'clk', 'reset_n')=\

//=============================================================================
// stt_stash_entries_full
//=============================================================================

wire stash_entries_full_d_clr = entry_dealloc;
wire stash_entries_full_d_set = init_d & stash_entries_full_d;
wire stash_entries_full_d_in  = stash_entries_full_d_set;
wire stash_entries_full_d_en  = stash_entries_full_d_set | stash_entries_full_d_clr;

\=u.dffre(1, 'q_stash_entries_full_d', 'stash_entries_full_d_in', "1'b0", 'stash_entries_full_d_en', 'clk', 'reset_n')=\

assign stt_stash_entries_full = stash_entries_full_d_set | q_stash_entries_full_d;


\js if (assertOn) {

`ifdef OVL_ASSERT_ON
// synthesis_off
// pragma synthesis_off
// coverage off

assert_never #(0) assert_snp_rsp_must_wait_for_dtw_rsp (
        .clk            (clk),
        .reset_n        (reset_n),
        .test_expr      (q_dtw_rsp_flag & snp_rsp_out_req)
);

// coverage on
// pragma synthesis_on
// synthesis_on
`endif

\js }

endmodule

