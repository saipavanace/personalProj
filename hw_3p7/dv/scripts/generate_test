#!/usr/bin/env node

const readline = require('readline');
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const fs = require('fs');
const path = require('path');

rl.setPrompt("\nEnter the name of the test:> ");
rl.prompt();
rl.on('line', line => {
    const testName = line.trim();
    const testNameArray = testName.split("_");
    const nameSize = testNameArray.length;
    const fsysTestListPath = path.join(process.env.WORK_TOP, 'dv', 'full_sys', 'tests', 'concerto_test_list.svh');
    const fsysDVPkgPath = path.join(process.env.WORK_TOP, 'dv', 'full_sys', 'tb', 'dvPkg.json');
    const vseqLibPath = path.join(process.env.WORK_TOP, 'dv', 'chi_aiu', 'sub_sys', 'vseq', 'chi_subsys_vseq_lib.sv');
    const seqLibPath = path.join(process.env.WORK_TOP, 'dv', 'chi_aiu', 'sub_sys', 'seq', 'chi_subsys_seq_lib.sv');
    const seqDVPkgPath = path.join(process.env.WORK_TOP, 'dv', 'chi_aiu', 'sub_sys', 'dvPkg.json');


    if (nameSize < 4 || testNameArray[0] != 'chi' || testNameArray[1] != 'subsys' || testNameArray[nameSize-1] != 'test') {
        console.log("ERROR: Test name should have a prefix of 'chi_subsys' and a suffix of 'test' (Ctrl+C to exit)");
        console.log("Ex: chi_subsys_random_test");
        rl.prompt();
    } else {
        const baseName = testNameArray.slice(0, nameSize-1).join("_");
        const vseqName = baseName + "_vseq";
        const seqName = baseName + "_seq";
        const memberName = `m_${testNameArray.slice(2, nameSize-1).join("_")}`;
        if (typeof process.env.WORK_TOP === undefined) {
            console.log("$WORK_TOP not defined");
            process.exit(0);
        }
        const testPath = path.join(process.env.WORK_TOP, 'dv', 'chi_aiu', 'sub_sys', 'tests', `${testName}.sv`);
        const seqPath = path.join(process.env.WORK_TOP, 'dv', 'chi_aiu', 'sub_sys', 'seq', `${seqName}.sv`);
        const vseqPath = path.join(process.env.WORK_TOP, 'dv', 'chi_aiu', 'sub_sys', 'vseq', `${vseqName}.sv`);

        if (fs.existsSync(testPath)) {
            console.log("ERROR: Testname already exists!");
            process.exit(0);
        }
        if (fs.existsSync(seqPath)) {
            console.log("ERROR: Sequence Name already exists!");
            process.exit(0);
        }
        if (fs.existsSync(vseqPath)) {
            console.log("ERROR: Virtual Sequence Name already exists!");
            process.exit(0);
        }

        ///////////////////// Creating Testcase //////////////////////
        const testContent = `\
class ${testName} extends chi_subsys_base_test;
    \`uvm_component_utils(${testName})

    ${vseqName} ${memberName}_vseq;

    function new(string name = "${testName}", uvm_component parent = null);
        super.new(name, parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        ${memberName}_vseq = ${vseqName}::type_id::create("${memberName}_vseq");
    endfunction: build_phase

    task start_sequence();
        fork
            begin
                <%for(let idx = 0; idx < obj.nCHIs; idx++) { %>
                    ${memberName}_vseq.rn_xact_seqr<%=idx%> = m_concerto_env.snps.svt.amba_system_env.chi_system[0].rn[<%=idx%>].rn_xact_seqr;
                <%}%>
                \`uvm_info(get_name(), "Starting ${testName}", UVM_NONE)
                ${memberName}_vseq.start(m_concerto_env.snps.svt.amba_system_env.chi_system[0].virt_seqr);
                \`uvm_info(get_name(), "Done ${testName}", UVM_NONE)
            end
        join
    endtask: start_sequence

    task run_phase(uvm_phase phase);
        super.run_phase(phase);
    endtask: run_phase

endclass: ${testName}`;
        ///////////////////// Creating Virtual Sequence //////////////////////

        const vseqContent = `\
class ${vseqName} extends chi_subsys_base_vseq;
    \`uvm_object_utils(${vseqName})
    <%for(let idx = 0; idx < obj.nCHIs; idx++) { %>
        ${seqName} ${memberName}_seq<%=idx%>;
    <%}%>

    function new(string name = "${vseqName}");
        super.new(name);
        <%for(let idx = 0; idx < obj.nCHIs; idx++) { %>
            ${memberName}_seq<%=idx%> = ${seqName}::type_id::create("${memberName}_seq<%=idx%>");
        <%}%>
    endfunction: new

    virtual task body();
        \`uvm_info("VSEQ", "Starting ${vseqName}", UVM_LOW);
        super.body();
        fork
            <%for(let idx = 0; idx < obj.nCHIs; idx++) { %>
                ${memberName}_seq<%=idx%>.start(rn_xact_seqr<%=idx%>);
            <%}%>
        join
        \`uvm_info("VSEQ", "Finished ${vseqName}", UVM_LOW);
    endtask: body

endclass: ${vseqName}`;

        ///////////////////// Creating Sequence //////////////////////
        const seqContent = `\
class ${seqName} extends chi_subsys_base_seq;
    \`svt_xvm_object_utils(${seqName})
    \`svt_xvm_declare_p_sequencer(svt_chi_rn_transaction_sequencer)

    function new(string name = "${seqName}");
        super.new(name);
        use_directed_addr = 0;
        use_directed_mem_attr = 0;
        use_directed_non_secure_access = 0;
        use_directed_snp_attr = 0;
        use_seq_order_type = 0;
    endfunction: new

    virtual task body();
        enable_all_weights();
        super.body();
    endtask: body

endclass: ${seqName}`;

        //Create Files
        try {
            fs.writeFileSync(testPath, testContent);
            console.log(`Created ${testName}.sv at: ${testPath}`);
        } catch (err) {
            console.error('ERROR: Cannot create testcase:', err);
        }

        try {
            fs.writeFileSync(seqPath, seqContent);
            console.log(`Created ${seqName}.sv at: ${seqPath}`);
        } catch (err) {
            console.error('ERROR: Cannot create sequence:', err);
        }

        try {
            fs.writeFileSync(vseqPath, vseqContent);
            console.log(`Created ${vseqName}.sv at: ${vseqPath}`);
        } catch (err) {
            console.error('ERROR: Cannot create virtual sequence:', err);
        }

        // Adding files to fsys compile list
        fs.readFile(fsysTestListPath, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
          
            const modifiedContent = data.replace(
                /(`include "chi_subsys_base_test\.sv")/,
                '$1\n' + '        `include "' + testName + '.sv"'
              );
          
            try {
                fs.writeFileSync(fsysTestListPath, modifiedContent);
                console.log("Updated fsys testlist");
            } catch (err) {
                console.error('ERROR: Cannot update fsys testlist:', err);
            }
        });

        let pattern = /("(\.\.\/\.\.\/chi_aiu\/sub_sys\/tests\/chi_subsys_base_test\.sv)",)/;
        let myTestInclude = `../../chi_aiu/sub_sys/tests/${testName}.sv`;

        fs.readFile(fsysDVPkgPath, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
          
            const modifiedContent = data.replace(pattern, `$1\n    "${myTestInclude}",`);
          
            try {
                fs.writeFileSync(fsysDVPkgPath, modifiedContent);
                console.log("Updated fsys dvPkg.json");
            } catch (err) {
                console.error('ERROR: Cannot update fsys testlist:', err);
            }
          
        });

        ////////////////////// Adding VSEQ to compile list //////////////

        fs.readFile(vseqLibPath, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
          
            const modifiedContent = data.replace(
                /(`include "chi_subsys_base_vseq\.sv")/,
                '$1\n' + '`include "' + vseqName + '.sv"'
              );
          
            try {
                fs.writeFileSync(vseqLibPath, modifiedContent);
                console.log("Updated vseq library");
            } catch (err) {
                console.error('ERROR: Cannot update vseq library:', err);
            }
          
        });

        fs.readFile(seqLibPath, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
          
            const modifiedContent = data.replace(
                /(`include "chi_subsys_base_seq\.sv")/,
                '$1\n' + '`include "' + seqName + '.sv"'
              );
          
            try {
                fs.writeFileSync(seqLibPath, modifiedContent);
                console.log("Updated seq library");
            } catch (err) {
                console.error('ERROR: Cannot update seq library:', err);
            }
        });

        ///////////////////// Adding SEQ and VSEQ to dvPkg.json ////////////////

        const seqPattern = /("(\.\.\/sub_sys\/seq\/chi_subsys_base_seq\.sv)",)/;
        const vseqPattern = /("(\.\.\/sub_sys\/vseq\/chi_subsys_base_vseq\.sv)",)/;
        const seqInclude = `../sub_sys/seq/${seqName}.sv`;
        const vseqInclude = `../sub_sys/vseq/${vseqName}.sv`;

        fs.readFile(seqDVPkgPath, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
          
            let modifiedContent = data.replace(seqPattern, `$1\n        "${seqInclude}",`);
          
            try {
                fs.writeFileSync(seqDVPkgPath, modifiedContent);
                console.log("Updated seq dvPkg.json for sequence");

                fs.readFile(seqDVPkgPath, 'utf8', (err, data) => {
                    if (err) {
                      console.error(err);
                      return;
                    }
                  
                    modifiedContent = data.replace(vseqPattern, `$1\n       "${vseqInclude}",`);
                  
                    try {
                        fs.writeFileSync(seqDVPkgPath, modifiedContent);
                        console.log("Updated vseq dvPkg.json for vsequence");
                    } catch (err) {
                        console.error('ERROR: Cannot update dvPkg.json for vseq:', err);
                    }
                    process.exit(0);
                });
            } catch (err) {
                console.error('ERROR: Cannot update dvPkg.json for vseq:', err);
            }
        });
    }

}).on('close', () => {
    console.log("Exiting program...");
    process.exit(0);
});
