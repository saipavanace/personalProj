{
  "ncoreParams": {
    "Architecture Parameters": {
      "Structural Parameters": {
        "nCaius": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[1:32]",
          "releaseValidValues": "[1:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This exists only for the engineering team and the customer indirectly have these constraints based on the number of Coherent sockets that are created",
          "Constraints": "",
          "General Comments": ""
        },
        "nNcaius": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This exists only for the engineering team and the customer indirectly have these constraints based on the number of Non sockets that are created",
          "Constraints": "",
          "General Comments": ""
        },
        "nDces": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[1:16]",
          "releaseValidValues": "[1:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Total number of distributed coherency engines configured in a Ncore Interconnect",
          "Constraints": "",
          "General Comments": ""
        },
        "nSnoopFilters": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[1:16]",
          "releaseValidValues": "[1:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Total number of Snoop Filters configured in a Ncore interconnect",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand and implement the constraints and relationship between nSnoopFilters and nDCEs"
        },
        "nDves": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[1]",
          "releaseValidValues": "[1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Total number of distributed virtual memory system engines configured in a Ncore interconnect",
          "Constraints": "",
          "General Comments": ""
        },
        "nDmis": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[1:16]",
          "releaseValidValues": "[1:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Total number of Distributed Memory Interfaces configured in a Ncore interconnect",
          "Constraints": "",
          "General Comments": ""
        },
        "nDiis": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "",
          "Default": "",
          "architectureValidValues": "[1:15]",
          "releaseValidValues": "[1:15]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Total number of distributed IO interfaces configured in a Ncore Interconnect",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "System Parameters": {
        "projectName": {
          "Type": "string",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Project Name",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Understand what this parameter is and what it is used for"
        },
        "coherentTemplate": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "readWrite",
          "Default": "FourCtrlOneDataTemplate",
          "architectureValidValues": "[TwoCtrlOneDataTemplate, ThreeCtrlOneDataTemplate, FourCtrlOneDataTemplate]",
          "releaseValidValues": "[TwoCtrlOneDataTemplate, ThreeCtrlOneDataTemplate, FourCtrlOneDataTemplate]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Control and data network options: TwoCtrlOneDataTemplate: Adds support for two control and a single data network. ThreeCtrlOneDataTemplate: Adds support for three control and a single data network. FourCtrlOneDataTemplate: Adds support for four control and a single data network",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "nAiuPorts": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4,8,16]",
          "releaseValidValues": "[1,2,4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the number of AIU that are grouped together. These AIUs must be identical",
          "Architecture Description": "The parameter applies to any Initiator AIU type in Ncore i.e. CAIU, NCAIU or multi ported NCAIU. These set of AIUs are treated as a single group of AIUs and must be identical",
          "Constraints": "",
          "General Comments": ""
        },
        "aPrimaryAiuPortBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify Address bits for port interleaving",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Type is defined as enum in the spec which is not true. Should be an integer array\nNeed to come up with a formula to calculate this\nValues cannot overlap with the address bits used for cache sets/banks if an NCAIU contains cache for example proxy cache and interleaving bits used for nNativeInterfacePorts."
        },
        "aSecondaryAiuPortBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: The type is defined as Enum for this. It should be integer Array"
        },
        "nGPRA": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:24]",
          "releaseValidValues": "[2:24]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of general purpose address regions that the system can support",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "dceInterleavingPrimaryBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "System directory primary select bits. N address bits other than bits 0 through 5 can be chosen. The cardinal values of these bits in the order of their ordinal positions are used to identify the DMIs to be accessed",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: The description can be updated to mention what exactly will happen with these bits"
        },
        "dceInterleavingSecondaryBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "The secondary bits are chosen on oa per primary bit bases. The bits within the set for a primary bit are combined and the primary bit with an Exclusive OR combination.",
          "Architecture Description": "Not tested yet. Will not be released at NCore 3.2.",
          "Constraints": "",
          "General Comments": "FIXME: Check if the description is still valid regarding Ncore 3.2?"
        },
        "resiliencyEnabled": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable resilience-related features in the Ncore system.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "duplicationEnabled": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable unit duplication for all Ncore units only. Memories and interconnect logic are not duplicated; they may be protected separately",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "nativeIntfProtEnabled": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable capability to add protection on native Ncore interfaces. This adds an empty verilog module with specified signals at the interface. Protection logic can be added in this Verilog module",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "interUnitDelay": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:4]",
          "releaseValidValues": "[1:4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Delay between functional unit and delay unit. Delay can be specified in number of clock cycles",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "resiliencyProtectionType": {
          "Type": "string",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "None",
          "architectureValidValues": "[\"NONE\", \"PARITY\", \"SECDED\"]",
          "releaseValidValues": "[\"NONE\", \"PARITY\", \"SECDED\"]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Interconnect protection type. Both data and control header will be protected. Available options are: NONE: no protection. PARITY: Error detection, parity protection. SECDED: Single bit error correction and double bit error detection, ECC protection.",
          "Architecture Description": "This parameter affects CDTI protection only",
          "Constraints": "",
          "General Comments": "FIXME: Should this be enum instead of string?"
        },
        "fnDisableResiliencyBistDebugPin": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,1]",
          "releaseValidValues": "[0,1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "When set removes BIST and trace & debug disable pin",
          "Architecture Description": "When set removes BIST and trace & debug disable pin",
          "Constraints": "",
          "General Comments": "FIXME: Should this be boolean for the sake of consistency"
        },
        "timeoutThreshold": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16384",
          "architectureValidValues": "[1:2147483647]",
          "releaseValidValues": "[1:2147483647]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Time out threshold value. This specifies number of clock cycles within which a transaction must complete in an NCORE system. The value specified is at 4096 clock cycle granularity.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "memoryProtectionType": {
          "Type": "string",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "None",
          "architectureValidValues": "[\"NONE\", \"PARITY\", \"SECDED\"]",
          "releaseValidValues": "[\"NONE\", \"PARITY\", \"SECDED\"]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Protection type for all memories in the Ncore system. Available options are: NONE : no protection. PARITY : Error detection, parity protection. SECDED : Single bit error correction and double bit error detection, ECC protection. SRAM memory type does not support memoryProtectionType ==NONE. If the memory is configured as FLOP, then NONE is supported.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "qosEnabled": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable Qos Support",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "qosMap": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "4 bit Native interface QoS value map to 3 bit priority. Value 0 has the highest priority and value 7 has the lowest priority",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "qosEventThreshold": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[1:8192]",
          "releaseValidValues": "[1:8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "QoS starvation threshold. Maximum number of high priority requests that can bypass a lower priority request.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "nMainTraceBufSize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "64",
          "architectureValidValues": "[32:4096]",
          "releaseValidValues": "[32:1024]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of trace entries in the buffer",
          "Architecture Description": "Number Debug DTW entries the trace buffer can hold. The actual depth of the trace buffer may be larger depending on the data width for the design. Each debug DTW can be max 64 bytes",
          "Constraints": "",
          "General Comments": ""
        },
        "nTraceRegisters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:8]",
          "releaseValidValues": "[1:4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of trace trigger configuration register sets. Each set of register can enable a trace condition.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "nUnitTraceBufSize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "8",
          "architectureValidValues": "[8,16,32]",
          "releaseValidValues": "[8,16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of trace entries in each Ncore Unit. Each entry is 64 bytes",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "fnDebugAPBEnable": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,1]",
          "releaseValidValues": "[0,1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "When set enables an APB slave port on the CSR network. This port is expected to be used for on chip debug purposes only.",
          "Architecture Description": "When set enables an APB slave port on the CSR network. This port is expected to be used for on chip debug purposes only.",
          "Constraints": "",
          "General Comments": "FIXME: Should this be boolean for the sake of consistency"
        },
        "syncDepth": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2,3,4]",
          "releaseValidValues": "[2,3,4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "The depth of the synchronizers used for signals that cross domains for metastability reasons. This is only for sym_async_adapter. FIFO depth of the chi_async_adapter would be calculate considering credit at the CHI interface link.",
          "Architecture Description": "Circular FIFO depth of the sym_async_adpater would be derived by this system configuration value \n • syncDepth: 2 → circular fifo depth of sym_async_adapter: 8 \n • syncDepth: 3 → circular fifo depth of sym_async_adapter: 10 \n • syncDepth: 4 → circular fifo depth of sym_async_adapter: 12",
          "Constraints": "",
          "General Comments": ""
        },
        "assertionEnable": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Enable HW assertions",
          "Constraints": "",
          "General Comments": ""
        },
        "EngVerId": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "ImplVerId": {
          "Type": "shortint",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "Frequency": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "300",
          "architectureValidValues": "[1:1600]",
          "releaseValidValues": "[1:1600]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "NCore 3.6 supports 1.6GHz as a maximum frequency. The range should visible only for that ranges",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check the units of frequency and clarify the comment?FIXME: The above range is specified in MHz but the spec actually mentioned in GHz. Need to check if this is okay and update the document if required MAES-7558 filed"
        },
        "unitClockGating": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "When the parameter is true, then the blocks in the corresponding clock region will insert clock gating based on its internal and the state of the interfaces connected to it",
          "Architecture Description": "Not all blocks will insert clock gates when this parameter is set to true. For instance, blocks sym_async_adapter and sym_rate_adapter do not insert clock gating in response to this parameter",
          "Constraints": "",
          "General Comments": ""
        },
        "Gating": {
          "Type": "string",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "always_on",
          "architectureValidValues": "[\"always_on\",\"external\"]",
          "releaseValidValues": "[\"always_on\",\"external\"]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify 'always_on' if no gating applied, or 'external' if logic externa",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: The comment in the spec seems to be incomplete"
        },
        "noDVM": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Visibility of this should be User? Instead of Engg?"
        }
      },
      "Memory Parameters": {
        "csrMemoryBase": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0x0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify CSR region base address. This address must be aligned to the size specified",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check how to set this value and what are the limits"
        },
        "csrMemorySize": {
          "Type": "integer",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "CSR sized is fixed as 1MB from NCore 3.2",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check the data type of this parameter. Also what are the limits"
        },
        "bootMemoryBase": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0x0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify boot region base address. This address must be aligned to the size specified",
          "Architecture Description": "Must be aligned to 4KB",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype of this variable and how to set it"
        },
        "bootMemorySize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "[]",
          "releaseValidValues": "[]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the size of boot region. Minimum is 4KB and must be a power of two",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: what is the datatype of this variable and how to set it?"
        },
        "mg_ref": {
          "Type": "string",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the DMI interleave group associated with the boot region",
          "Architecture Description": "If mg_ref is specified, channel_ref cannot be specified",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype and how to set this variable"
        },
        "channel_ref": {
          "Type": "string",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the DII group associated with the boot region.",
          "Architecture Description": "If channel_ref is specified, mg_ref cannot be specified",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype and how to set this variable. channel_ref and mg_ref are mutually exclusive"
        },
        "primaryInterleavingBitOne": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8192]",
          "releaseValidValues": "[0:8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This primaryInterleavingBitOne is per MIF",
          "Constraints": "",
          "General Comments": "FIXME: How to use this parameter?"
        },
        "primaryInterleavingBitTwo": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8192]",
          "releaseValidValues": "[0:8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This primaryInterleavingBitTwo is per MIF",
          "Constraints": "",
          "General Comments": "FIXME: How to use this parameter?"
        },
        "primaryInterleavingBitThree": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8192]",
          "releaseValidValues": "[0:8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This primaryInterleavingBitThree is per MIF",
          "Constraints": "",
          "General Comments": "FIXME: How to use this parameter?"
        },
        "primaryInterleavingBitFour": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8192]",
          "releaseValidValues": "[0:8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This primaryInterleavingBitFour is per MIF",
          "Constraints": "",
          "General Comments": "FIXME: How to use this parameter?"
        }
      },
      "CHI Parameters": {
        "CHI::fnNativeInterface": {
          "Type": "Enum",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "CHI-B",
          "architectureValidValues": "[CHI-E, CHI-B, ACE, ACE5, AXI4, AXI5, ACE-Lite, ACE5-Lite,PCIe_ACE-Lite,PCIe_AXI4,PCIe_AXI5]",
          "releaseValidValues": "[CHI-E, CHI-B, ACE, ACE5, AXI4, AXI5, ACE-Lite, ACE5-Lite,PCIe_ACE-Lite,PCIe_AXI4,PCIe_AXI5]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nOttCtrlEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:128]",
          "releaseValidValues": "[4:128]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of outstanding native transactions this AIU should support",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::genericports": {
          "Type": "",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "To assign user defined ports for place holder definition",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "Understand what this parameter is and what it is used for"
        },
        "CHI::nNativeCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:15]",
          "releaseValidValues": "[2:15]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of CHI link credits this AIU should support.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nDceCmdCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for coherent transactions per DCE. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nDmiCmdCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nDiiCmdCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for non-coherent transactions per DII. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nStashSnpCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[1:8]",
          "releaseValidValues": "[1:8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of outstanding stash snoops this AIU should support.These are stash snoops issued on the CHI interface.",
          "Architecture Description": "This is used for assign Ott Stash entries in CAIU.\nTotal number of OTT entries = nOttCtrlEntries + nStshSnpCredits",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::fnCsrAccess": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable CSR access via this AIU",
          "Architecture Description": "Parameter works as a reset value for CSR BAR valid bit",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::SnoopFilter_Ref": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:64]",
          "releaseValidValues": "[0:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the snoop filter associated with this AIU",
          "Architecture Description": "User would need to bind CAIU into specific snoop filter, using update_object -name $caiu_name -type snoopFilter -bind $ snoop_filter_name.\nArch team would want to move this parameter to DCE in next NCore versions",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nPerfCounters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[0,4,8,16]",
          "releaseValidValues": "[0,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nLatencyCounters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[0,16,32]",
          "releaseValidValues": "[0,16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Latency counters in a CAIU",
          "Architecture Description": "Parameter applies only to AIUs, DMIs and DIIs only and can be set individually.",
          "Constraints": "",
          "General Comments": "This parameter applies to AIUs, DMIs and DIIs. Maybe the description can be modified. Does this apply to AXI4 and ACE-Lite configs? Can we skip the CAIU in customer description?"
        },
        "CHI::nProcessors": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4,8,16]",
          "releaseValidValues": "[1,2,4,8,16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Processors",
          "Architecture Description": ": SW must multiply the specified parameter by 2 before passing it on to RTL. This is to account for threads as each core can have up to two threads",
          "Constraints": "",
          "General Comments": "Spec says the datatype is enum for some reason. Check why"
        },
        "CHI::useSysCoEngine": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Always true for CHI",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::useSysReqSender": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::hexAiuDmiVec": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW. Every bit in the vector that is set to one specifies that the particular AIU is connected to the associated DMI at that NunitID",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::useSysReqReceiver": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::hexAiuDceVec": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW. Every bit in the vector that is set to one specifies that the particular AIU is connected to the associated DCE at that NunitID",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::hexAiuDiiVec": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW. Every bit in the vector that is set to one specifies that the particular AIU is connected to the associated DII at that NunitID",
          "Constraints": "",
          "General Comments": "FIXME: hexAiuDmiVec is missing for CHI in confluence. Need to add this"
        },
        "CHI::hexAiuConnectedDceFunitId": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW. List of DCE FuntiIDs that are connected to the AIU",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::nAiuConnectedDces": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:64]",
          "releaseValidValues": "[1:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Specifies the number of caching agents (AIUs) that are connected to DCE",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::useSysCoInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of SysCoReq and SysCoAck interface to the AIU. If customer's CPU does not have the interface, and does not set False to the parameter, it is recommended to tie SysCoReq to 0",
          "Architecture Description": "Connect the I/O to the SysCo Engine hardware.",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::useEventInInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of EventInReq and EventInAck interface to the AIU. If customer's CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventInAck to EventInReq.",
          "Architecture Description": "Connect the I/O to the SysReq Receiver hardware.",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::useEventOutInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of EventOutReq and EventOutAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventOutReq to 0",
          "Architecture Description": "Connect the I/O to the SysReq Sender hardware",
          "Constraints": "",
          "General Comments": "FIXME: Typo in the name of this parameter in the spec"
        },
        "CHI::NodeID_Width": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "7",
          "architectureValidValues": "[7:11]",
          "releaseValidValues": "[7:11]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of the Node ID of the CHI Interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::wAddr": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "48",
          "architectureValidValues": "[44:52]",
          "releaseValidValues": "[44:52]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of the address on CHI interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::REQ_RSVDC": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,4,8,12,16,24,32]",
          "releaseValidValues": "[0,4,8,12,16,24,32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "REQ_RSVDC is to define user-bit for command channel. Do not support user bit on data channel",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::wData": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "128",
          "architectureValidValues": "[128,256]",
          "releaseValidValues": "[128,256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of data on the Chi interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::enPoison": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable Poison Bit",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CHI::checkType": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "NONE",
          "architectureValidValues": "[NONE, ODD_PARITY_BYTE_ALL]",
          "releaseValidValues": "[NONE, ODD_PARITY_BYTE_ALL]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "CIOAIU Parameters": {
        "CIOAIU::fnNativeInterface": {
          "Type": "Enum",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "CHI-B",
          "architectureValidValues": "[CHI-E, CHI-B, ACE, ACE5, AXI4, AXI5, ACE-Lite, ACE5-Lite,PCIe_ACE-Lite,PCIe_AXI4,PCIe_AXI5]",
          "releaseValidValues": "[CHI-E, CHI-B, ACE, ACE5, AXI4, AXI5, ACE-Lite, ACE5-Lite,PCIe_ACE-Lite,PCIe_AXI4,PCIe_AXI5]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::genericports": {
          "Type": "string",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "Understand what this parameter is and what it is used for"
        },
        "CIOAIU::wRUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wResp": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nWays": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of sets/entries in the Cache",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Should there be any constraints on this? This parameter probably can take only powers of 2"
        },
        "CIOAIU::wProt": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wArId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:20]",
          "releaseValidValues": "[1:20]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the ArId width",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "CIOAIU::wAwId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:20]",
          "releaseValidValues": "[1:20]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the AwId width",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wAddr": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "32",
          "architectureValidValues": "[32,40,44,48]",
          "releaseValidValues": "[32,40,44,48]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of address bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "If CHI is present, wAddr can only be 44 or 48. Need to add constraint"
        },
        "CIOAIU::wData": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "64",
          "architectureValidValues": "[64,128,256]",
          "releaseValidValues": "[64,128,256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of data bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wArUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of ArUser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wAwUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of Awuser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::checkType": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "None",
          "architectureValidValues": "[NONE, ODD_PARITY_BYTE_ALL]",
          "releaseValidValues": "[NONE, ODD_PARITY_BYTE_ALL]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "Architecture Description": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nOttCtrlEntries": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:128]",
          "releaseValidValues": "[4:128]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of outstanding native transactions this AIU should support.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::fnCsrAccess": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable CSR access via this AIU",
          "Architecture Description": "Parameter works as a reset value for CSR BAR valid bit",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useSysCoInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of SysCoReq and SysCoAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie SysCoReq to 0.",
          "Architecture Description": "Connect the I/O to the SysCo Engine hardware.",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useEventOutInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of EventOutReq and EventOutAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventOutReq to 0",
          "Architecture Description": "Connect the I/O to the SysReq Sender hardware.",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useEventInInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of EventInReq and EventInAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventInAck to EventInReq",
          "Architecture Description": "Connect the I/O to the SysReq Receiver hardware",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::Memory": {
          "Type": "",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand the datatype and how to set this variable"
        },
        "CIOAIU::nProcessors": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4,8,16,32]",
          "releaseValidValues": "[1,2,4,8,16,32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Processors",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "This should be applicable only for AXI4? This is mentioned for ACE in the spec. Need to check"
        },
        "CIOAIU::AxIdProcSelectBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Processor Select Bits from AXID. If there is only one processor, the array is empty and is default as zero",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useSysCoEngine": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Always true for ACE",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useSysReqSender": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Used to instantiate SysReq Sender hardware in the AIU",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useSysReqReceiver": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::eUnique": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wCdData": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wSnoop": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::eAc": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::eDomain": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useQos": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wQos": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wLoop": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::eStash": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::eTrace": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::eAtomic": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nDiiCmdCredits": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nDmiCmdCredits": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nDceCmdCredits": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for coherent transactions per DCE. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nNativeInterfacePorts": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4,8]",
          "releaseValidValues": "[1,2,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the number of native interface ports",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: This is missing for other NC AIUs"
        },
        "CIOAIU::nPerfCounters": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[0,4,8,16]",
          "releaseValidValues": "[0,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nLatencyCounters": {
          "Type": "int",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[0,16,32]",
          "releaseValidValues": "[0,16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Latency counters in a CAIU",
          "Architecture Description": "Parameter applies only to AIUs, DMIs and DIIs only and can be set individually.",
          "Constraints": "",
          "General Comments": "This parameter applies to AIUs, DMIs and DIIs. Maybe the description can be modified. Does this apply to AXI4 and ACE-Lite configs? Can we skip the CAIU in customer description?"
        },
        "CIOAIU::aNcaiuIntvFunc": {
          "Type": "object",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Can this parameter be simplified? else need to check how to represent this param"
        },
        "CIOAIU::snoopFilterAssignment": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:64]",
          "releaseValidValues": "[0:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: This is not mentioned for CHI in the spec. Need to check. FIXME: This needs to be added for ACE"
        },
        "CIOAIU::fnDisableRdInterleave": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0, 1]",
          "releaseValidValues": "[0, 1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "When set disables read data interleaving across different AXI IDs",
          "Architecture Description": "When set disables read data interleaving across different AXI IDs. This parameter applies to NCAIU with AXI, ACE-LITE and ACE5-LITE ports",
          "Constraints": "",
          "General Comments": "FIXME: This needs to be added for ACE-Lite and ACE-Lite-E protocol. ALSO should this be boolean?"
        },
        "CIOAIU::nSets": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[16,32,64,128,256,512,1024,2048,4096,8192]",
          "releaseValidValues": "[16,32,64,128,256,512,1024,2048,4096,8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of sets/entries in the Cache",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::useScratchPad": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[false]",
          "releaseValidValues": "[false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Not applicable in AXI4",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::PriSubDiagAddrBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify address bits to be used as primary set select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check how to set this value and what are the limits"
        },
        "CIOAIU::TagBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "CIOAIU::DataBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "CIOAIU::cacheReplPolicy": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "RANDOM",
          "architectureValidValues": "[RANDOM, NRU, SRRIP, pLRU]",
          "releaseValidValues": "[RANDOM, NRU, pLRU]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Cache Replacement Policy",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::cacheReplStateWidth": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,1,2]",
          "releaseValidValues": "[0,1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "Constraints": "",
          "General Comments": "FIXME: The customer description for this parameter is wrong"
        },
        "CIOAIU::SnoopFilter_Ref": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:64]",
          "releaseValidValues": "[0:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the snoop filter associated with this AIU",
          "Architecture Description": "User would need to bind CAIU into specific snoop filter, using update_object -name $caiu_name -type snoopFilter -bind $ snoop_filter_name.\nArch team would want to move this parameter to DCE in next NCore versions",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wWUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wBUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wLen": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wSize": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wLock": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::wRegion": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::nAiuConnectedDces": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::hexAiuConnectedDceFunitId": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::hexAiuDmiVec": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::hexAiuDceVec": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::hexAiuDiiVec": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::exclusiveAccesses": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "Once it is turned on, Exclusive accesses are supported",
          "Customer Description": "Once it is turned on, Exclusive accesses are supported",
          "Architecture Description": "Once it is turned on, Exclusive accesses are supported",
          "Constraints": "",
          "General Comments": ""
        },
        "CIOAIU::atomicTransactions": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "Once this property is enabled, atomic transactions are supported for the ACE-Lite and ACE5-Lite interfaces. This property can only be selectable if the proxy cache is disable. (FIXME: This comments needs to be modified)",
          "Customer Description": "Once this property is enabled, atomic transactions are supported for the ACE-Lite and ACE5-Lite interfaces.",
          "Architecture Description": "Once this property is enabled, atomic transactions are supported for the ACE-Lite and ACE5-Lite interfaces.",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "NCIOAIU Parameters": {
        "NCIOAIU::fnNativeInterface": {
          "Type": "Enum",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "CHI-B",
          "architectureValidValues": "[CHI-E, CHI-B, ACE, ACE5, AXI4, AXI5, ACE-Lite, ACE5-Lite,PCIe_ACE-Lite,PCIe_AXI4,PCIe_AXI5]",
          "releaseValidValues": "[CHI-E, CHI-B, ACE, ACE5, AXI4, AXI5, ACE-Lite, ACE5-Lite,PCIe_ACE-Lite,PCIe_AXI4,PCIe_AXI5]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::genericports": {
          "Type": "string",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "Understand what this parameter is and what it is used for"
        },
        "NCIOAIU::wRUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wResp": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nWays": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of sets/entries in the Cache",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Should there be any constraints on this? This parameter probably can take only powers of 2"
        },
        "NCIOAIU::wProt": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wArId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:20]",
          "releaseValidValues": "[1:20]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the ArId width",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "NCIOAIU::wAwId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:20]",
          "releaseValidValues": "[1:20]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the AwId width",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wAddr": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "32",
          "architectureValidValues": "[32,40,44,48]",
          "releaseValidValues": "[32,40,44,48]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of address bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "If CHI is present, wAddr can only be 44 or 48. Need to add constraint"
        },
        "NCIOAIU::wData": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "64",
          "architectureValidValues": "[64,128,256,512]",
          "releaseValidValues": "[64,128,256,512]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of data bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wArUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of ArUser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wAwUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of Awuser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::checkType": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "None",
          "architectureValidValues": "[NONE, ODD_PARITY_BYTE_ALL]",
          "releaseValidValues": "[NONE, ODD_PARITY_BYTE_ALL]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "Architecture Description": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nOttCtrlEntries": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:128]",
          "releaseValidValues": "[4:128]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of outstanding native transactions this AIU should support.",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::fnCsrAccess": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable CSR access via this AIU",
          "Architecture Description": "Parameter works as a reset value for CSR BAR valid bit",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useSysCoInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of SysCoReq and SysCoAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie SysCoReq to 0.",
          "Architecture Description": "Connect the I/O to the SysCo Engine hardware.",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useEventOutInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of EventOutReq and EventOutAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventOutReq to 0",
          "Architecture Description": "Connect the I/O to the SysReq Sender hardware.",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useEventInInt": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Setting the parameter to enable the connection of EventInReq and EventInAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventInAck to EventInReq",
          "Architecture Description": "Connect the I/O to the SysReq Receiver hardware",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::Memory": {
          "Type": "",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand the datatype and how to set this variable"
        },
        "NCIOAIU::nProcessors": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4,8,16,32]",
          "releaseValidValues": "[1,2,4,8,16,32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Processors",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "This should be applicable only for AXI4? This is mentioned for ACE in the spec. Need to check"
        },
        "NCIOAIU::AxIdProcSelectBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Processor Select Bits from AXID. If there is only one processor, the array is empty and is default as zero",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useSysCoEngine": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Always true for ACE",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useSysReqSender": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Used to instantiate SysReq Sender hardware in the AIU",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useSysReqReceiver": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true]",
          "releaseValidValues": "[true]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::eUnique": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wCdData": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wSnoop": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::eAc": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::eDomain": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useQos": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wQos": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wLoop": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::eStash": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::eTrace": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::eAtomic": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nDiiCmdCredits": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nDmiCmdCredits": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nDceCmdCredits": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of credits for coherent transactions per DCE. This should be determined based on required bandwidth and network round trip latency",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nNativeInterfacePorts": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4,8]",
          "releaseValidValues": "[1,2,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the number of native interface ports",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: This is missing for other NC AIUs"
        },
        "NCIOAIU::nPerfCounters": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[0,4,8,16]",
          "releaseValidValues": "[0,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nLatencyCounters": {
          "Type": "int",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[0,16,32]",
          "releaseValidValues": "[0,16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Latency counters in a CAIU",
          "Architecture Description": "Parameter applies only to AIUs, DMIs and DIIs only and can be set individually.",
          "Constraints": "",
          "General Comments": "This parameter applies to AIUs, DMIs and DIIs. Maybe the description can be modified. Does this apply to AXI4 and ACE-Lite configs? Can we skip the CAIU in customer description?"
        },
        "NCIOAIU::aNcaiuIntvFunc": {
          "Type": "object",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Can this parameter be simplified? else need to check how to represent this param"
        },
        "NCIOAIU::snoopFilterAssignment": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:64]",
          "releaseValidValues": "[0:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: This is not mentioned for CHI in the spec. Need to check. FIXME: This needs to be added for ACE"
        },
        "NCIOAIU::fnDisableRdInterleave": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0, 1]",
          "releaseValidValues": "[0, 1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "When set disables read data interleaving across different AXI IDs",
          "Architecture Description": "When set disables read data interleaving across different AXI IDs. This parameter applies to NCAIU with AXI, ACE-LITE and ACE5-LITE ports",
          "Constraints": "",
          "General Comments": "FIXME: This needs to be added for ACE-Lite and ACE-Lite-E protocol. ALSO should this be boolean?"
        },
        "NCIOAIU::nSets": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[16,32,64,128,256,512,1024,2048,4096,8192]",
          "releaseValidValues": "[16,32,64,128,256,512,1024,2048,4096,8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of sets/entries in the Cache",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::useScratchPad": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[false]",
          "releaseValidValues": "[false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Not applicable in AXI4",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::PriSubDiagAddrBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify address bits to be used as primary set select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check how to set this value and what are the limits"
        },
        "NCIOAIU::TagBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "NCIOAIU::DataBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "NCIOAIU::cacheReplPolicy": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "RANDOM",
          "architectureValidValues": "[RANDOM, NRU, SRRIP, pLRU]",
          "releaseValidValues": "[RANDOM, NRU, pLRU]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Cache Replacement Policy",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::cacheReplStateWidth": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,1,2]",
          "releaseValidValues": "[0,1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "Constraints": "",
          "General Comments": "FIXME: The customer description for this parameter is wrong"
        },
        "NCIOAIU::SnoopFilter_Ref": {
          "Type": "int",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:64]",
          "releaseValidValues": "[0:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the snoop filter associated with this AIU",
          "Architecture Description": "User would need to bind CAIU into specific snoop filter, using update_object -name $caiu_name -type snoopFilter -bind $ snoop_filter_name.\nArch team would want to move this parameter to DCE in next NCore versions",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wWUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wBUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wLen": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wSize": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wLock": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::wRegion": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::nAiuConnectedDces": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::hexAiuConnectedDceFunitId": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::hexAiuDmiVec": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::hexAiuDceVec": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::hexAiuDiiVec": {
          "Type": "string",
          "Visibility": "Engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::exclusiveAccesses": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "Once it is turned on, Exclusive accesses are supported",
          "Customer Description": "Once it is turned on, Exclusive accesses are supported",
          "Architecture Description": "Once it is turned on, Exclusive accesses are supported",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::atomicTransactions": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "true",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "Once this property is enabled, atomic transactions are supported for the AXI5 interface. This property can only be selectable if the proxy cache is disable.",
          "Customer Description": "Once this property is enabled, atomic transactions are supported for the AXI5 interface",
          "Architecture Description": "Once this property is enabled, atomic transactions are supported for the AXI5 interface",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::hasProxyCache": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "This option enables a ProxyCache is configured for a NCAIU",
          "Architecture Description": "This option adds a ProxyCache in NCAIU",
          "Constraints": "",
          "General Comments": ""
        },
        "NCIOAIU::multicycleODSram": {
          "Type": "boolean",
          "Visibility": "User",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "OD timing closure optimization parameter for OWO configuration",
          "Architecture Description": "OD timing closure optimization parameter for OWO configuration",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "SnoopFilter Parameters": {
        "SF::nSets": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[16:1048576]",
          "releaseValidValues": "[16:1048576]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of sets for the selected snoop filter",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "SF::nWays": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[2:32]",
          "releaseValidValues": "[2:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of ways for the selected snoop filter",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "SF::nVictimEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[0:64]",
          "releaseValidValues": "[0:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of victim buffer entries for the specified snoop filter, per DCE",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "SF::aPrimaryBits": {
          "Type": "intArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Set selection parameter",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "SF::Memory": {
          "Type": "",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "SF::RemoteCachingAgents": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify if the caching agents is considered remote to the DCE\nEg. [AIU0, AIU2]",
          "Architecture Description": "Derive the value into array of integers for DCE, to indicate if the corresponding caching agent is remote (sync up with DCE’s Jason file parameter)",
          "Constraints": "",
          "General Comments": "FIXME: Need to change the typo. Change Jason to JSON"
        },
        "SF::LocalCachingAgents": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify if the caching agents is considered local to the DCE\nEg. [AIU1]",
          "Architecture Description": "Derive the value into array of integers for DCE, to indicate if the corresponding caching agent is local (sync up with DCE’s Jason file parameter)",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "SF::useScratchPad": {
          "Type": "boolean",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[false]",
          "releaseValidValues": "[false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Enable Scratchpad. The visibility will be overridden based on block type",
          "Constraints": "",
          "General Comments": ""
        },
        "SF::PriSubDiagAddrBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Specify address bits to be used as primary set select bits",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype and how to set this variable"
        },
        "SF::TagBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "The tag bank select bit values must be unique.\nThe tag bank selection bit must be one of the primary set selection bits.\nThe number of tag bank bits must be log2(nTagBanks)",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype and how to set this variable"
        },
        "SF::DataBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype and how to set this variable"
        },
        "SF::cacheReplPolicy": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "RANDOM",
          "architectureValidValues": "[RANDOM, PLRU]",
          "releaseValidValues": "[RANDOM, PLRU]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Cache Replacement Policy",
          "Architecture Description": "Depending on the selected policy, a dependent parameter cacheReplStateWidth needs to be calculated. That parameter defines the number of bits required to represent the current position in the replacement algorithm for each cacheline in the set",
          "Constraints": "",
          "General Comments": ""
        },
        "SF::cacheReplStateWidth": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,1,2]",
          "releaseValidValues": "[0,1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "Constraints": "",
          "General Comments": "FIXME: The customer description for this parameter is wrong"
        }
      },
      "DCE Parameters": {
        "DCE::nAttCtrlEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:64]",
          "releaseValidValues": "[4:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of active coherent transactions tracked by each DCE",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nCMDSkidBufSize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:768]",
          "releaseValidValues": "[4:768]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total depth of skid buffer for commands to DCE/DII and the non-coherent port of DMI.\nThe skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution.\nCSR Address: 0xFF0",
          "Architecture Description": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nCMDSkidBufArb": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:256]",
          "releaseValidValues": "[4:256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "Architecture Description": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFF0",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::CMDOverflowBufInSRAM": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "Architecture Description": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nDceRbCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:64]",
          "releaseValidValues": "[2:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of RB credits per DCE. The value is same for all DCEs and DMIs. Specify the maximum number of DCE write request buffer credits per DMI. These credits limit number of Coherent writes and incudes snoops that can cause a write to DMI",
          "Architecture Description": "Number of RB credits per DCE",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nAiuSnpCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of snoop request credits per AIU",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nDmiMrdCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of memory read credits per DMI",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nPerfCounters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[0,4,8,16]",
          "releaseValidValues": "[0,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total number of performance counter in Ncore Unit",
          "Architecture Description": "Archi team would modify this as a common parameter in next NCore versions",
          "Constraints": "",
          "General Comments": "FIXME: The comments says only 2 values are supported and 0 is excluded"
        },
        "DCE::nTaggedMonitors": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8]",
          "releaseValidValues": "[0:8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the desired number of tagged exclusive monitor per DCE instance. Note that each DCE instance will always have a basic exclusive monitor",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::hexDceConnectedDmiFunitID": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW\nList of DMI FuntiIDs that are connected to the DCE",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::hexDceConnectedCaFunitID": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW\nList of caching agent FuntiIDs that are connected to the DCE",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::hexDceDmiVec": {
          "Type": "hex",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:FFFFFFFF]",
          "releaseValidValues": "[0:FFFF]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW\nEvery bit in the vector that is set to one specifies that the particular DCE is connected to the associated DMI at that NunitID",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::hexDceDmiRbOffset": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This must be a port in RTL (tACHL) and tie off parameter in SW\nList of 8 bit values, where every 8 bit value specifies the RBID offset to be used by DCE for the DMI represented by the value. The offsets are ordered in incrementing DMI NunitID order.",
          "Constraints": "",
          "General Comments": "FIXME: Need to find the datatype of this parameter"
        },
        "DCE::nDceConnectedCas": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:64]",
          "releaseValidValues": "[1:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Specifies the number of caching agents (AIUs) that are connected to DCE",
          "Constraints": "",
          "General Comments": ""
        },
        "DCE::nDceConnectedDmis": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:32]",
          "releaseValidValues": "[1:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Specifies the number of DMIs that are connected to DCE",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "DVE Parameters": {
        "DVE::Memory": {
          "Type": "",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "DVE::EventBroadcasterFIFOdepth": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "Used to size FIFO of Event Broadcaster hardware in the DVE",
          "Constraints": "",
          "General Comments": ""
        },
        "DVE::nPerfCounters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4,8,16]",
          "releaseValidValues": "[4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total number of performance counter in Ncore Unit",
          "Architecture Description": "Archi team would modify this as a common parameter in next NCore versions",
          "Constraints": "",
          "General Comments": "FIXME: Total number of performance counter in Ncore unit. Does it mean this is the total of all perfcounters in Ncore?"
        },
        "DVE::nDvmCmdCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2,4]",
          "releaseValidValues": "[2,4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of DVM command credits between an AIU and a DVE",
          "Architecture Description": "This parameter is applicable to all AIUs that can issue DVMs",
          "Constraints": "",
          "General Comments": "FIXME: What does the Architecture Description mean? Only DVM has this parameter"
        },
        "DVE::nDvmSnpCredits": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "If noDVM7 system wide parameter is not set, take the maximum value out of 8 or (total number of DVM agents + 1) * 2",
          "Architecture Description": "If noDVM system wide parameter is not set, take the maximum value out of 8 or (total number of DVM agents + 1) * 2",
          "Constraints": "",
          "General Comments": "FIXME: The default value is 0 if noDVM is set else it is 8. Need to write a constraint for this"
        },
        "DVE::DVMVersionSupport": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "132",
          "architectureValidValues": "[128, 129, 132]",
          "releaseValidValues": "[128, 129, 132]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "DVM version capability of the system. The value is suggested for the User to configure the system",
          "Architecture Description": "Pass the parameter to register DVEUDVMRR “DVM Revision Register” in DVE register space\nThe version number is encoded as the concatenation of two 4 bit integers {4'd,4'd}. The first integer represents the main DVM version and the second the subversion number.\nFor example: DVM_v8.1 the version number is {4'd8,4'd1} or 129",
          "Constraints": "",
          "General Comments": "FIXME: Can we make this easier from the definition point of view making it just an integer? Also, the format says 4bit int, which is not accurate"
        }
      },
      "DMI Parameters": {
        "DMI::wArId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:28]",
          "releaseValidValues": "[1:28]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the ArId width",
          "Architecture Description": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "Constraints": "",
          "General Comments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "DMI::wAwId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:28]",
          "releaseValidValues": "[1:28]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the AwId width",
          "Architecture Description": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wAddr": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "32",
          "architectureValidValues": "[12:64]",
          "releaseValidValues": "[12:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of address bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wData": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "128",
          "architectureValidValues": "[128,256]",
          "releaseValidValues": "[128,256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of data bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wAwUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of AwUser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wArUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of ArUser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::genericports": {
          "Type": "",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check the datatype and how to set this variable"
        },
        "DMI::nRttCtrlEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:64]",
          "releaseValidValues": "[4:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of allowed outstanding read transactions on the downstream AXI interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nWttCtrlEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:64]",
          "releaseValidValues": "[4:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of allowed outstanding write transactions on the downstream AXI interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nDmiRbCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:64]",
          "releaseValidValues": "[2:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of non-coherent write request buffer credits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nCMDSkidBufSize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:768]",
          "releaseValidValues": "[4:768]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total depth of skid buffer for commands to DCE/DII and the non-coherent port of DMI.\nThe skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution",
          "Architecture Description": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection. CSR Address: 0xFF0",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nCMDSkidBufArb": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:256]",
          "releaseValidValues": "[4:256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "Architecture Description": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFF0",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::CMDOverflowBufInSRAM": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "Architecture Description": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nMrdSkidBufSize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:768]",
          "releaseValidValues": "[4:768]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total depth of skid buffer for coherent DMI transactions - arriving from DCE. The skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution",
          "Architecture Description": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection. CSR Address: 0xFE0",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nMrdSkidBufArb": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:256]",
          "releaseValidValues": "[4:256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "Architecture Description": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFE0",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::MRDOverflowBufInSRAM": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Once the size of overflow buffer/FIFO in the MRD skid buffer is over 256, implement it with SRAM",
          "Architecture Description": "Once the size of overflow buffer/FIFO in the MRD skid buffer is over 256, implement it with SRAM",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nUseMemRspIntrlv": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Use this parameter to enable the feature of DMI can accept read data interleaving from AXI interface",
          "Architecture Description": "To prevent deadlock issue of AXI write address channel, write response channel and read data channel, if the parameter is set to True, and read data buffer is instantiated. And DMI can accept any beat of read data of issued read request, then the read data/response channel and write response channel will never to backpressured",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nExclusiveEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8]",
          "releaseValidValues": "[0:8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "defines the number of exclusive monitors",
          "Architecture Description": "A value of 0 means no exclusive monitor will be instantiated",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nAddrTransRegisters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:4]",
          "releaseValidValues": "[0:4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the number of address translation registers that are available within DMI. These registers add capability to translate address on the AXI bus from DMI. Refer to the address translation section of the reference manual",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::hasSysMemCache": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "This option adds an SMC in DMI. It must be enabled when an atomic capable master is present in the system and requires at least a 4KB SMC",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::useScratchPad": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Enable ScratchPad",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nWayPartitioningRegisters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:16]",
          "releaseValidValues": "[0:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the number of cache way partitioning registers. Each register enables configuration capability to assign specific ways to a single agent. The number of registers enabled here should be equal to maximum number of agents that will be configured for way partitioning",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nTagBanks": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1,2,4]",
          "releaseValidValues": "[1,2,4]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Number of Tag banks",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nDataBanks": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::Memory": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nPerfCounters": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nLatencyCounters": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::useAtomic": {
          "Type": "boolean",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "false",
          "architectureValidValues": "[true, false]",
          "releaseValidValues": "[true, false]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "This option adds an atomic engine in DMI. It must be enabled when an atomic capable master is present in the system and requires at least a 4KB SMC",
          "Architecture Description": "FIXME: What is 4KB SMC? related to memory parameter? ALSO, CHI-E should be added to the description for this param",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::DmiQoSThVal": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "8",
          "architectureValidValues": "[1:15]",
          "releaseValidValues": "[1:15]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "DMI QoS threshold value. Traffic with QoS equal to or above this value are considered as high priority hard real time traffic",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nDmiWttQoSRsv": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:64]",
          "releaseValidValues": "[1:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "WTT entries in DMI reserved for high priority hard real time traffic",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nDmiRttQoSRsv": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "1",
          "architectureValidValues": "[1:64]",
          "releaseValidValues": "[1:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "RTT entries in DMI reserved for high priority hard real time traffic",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nSets": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[16,32,64,128,256,512,1024,2048,4096,8192]",
          "releaseValidValues": "[16,32,64,128,256,512,1024,2048,4096,8192]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of sets/entries in the Cache",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::nWays": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:16]",
          "releaseValidValues": "[2:16]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of sets/entries in the Cache",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Should there be any constraints on this? This parameter probably can take only powers of 2"
        },
        "DMI::PriSubDiagAddrBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify address bits to be used as primary set select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Check how to set this value and what are the limits"
        },
        "DMI::TagBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "DMI::DataBankSelBits": {
          "Type": "stringArray",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: Need to understand how to set this parameter"
        },
        "DMI::cacheReplPolicy": {
          "Type": "enum",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "RANDOM",
          "architectureValidValues": "[RANDOM, NRU, SRRIP, pLRU]",
          "releaseValidValues": "[RANDOM, NRU, pLRU]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Cache Replacement Policy",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::cacheReplStateWidth": {
          "Type": "int",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0,1,2]",
          "releaseValidValues": "[0,1]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "Constraints": "",
          "General Comments": "FIXME: The customer description for this parameter is wrong"
        },
        "DMI::wResp": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wWUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wBUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wRUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wLen": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wSize": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wLock": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wQos": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wRegion": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DMI::wProt": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "DII Parameters": {
        "DII::wArId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:28]",
          "releaseValidValues": "[1:28]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the ArId width",
          "Architecture Description": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "Constraints": "",
          "General Comments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "DII::wAwId": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "6",
          "architectureValidValues": "[1:28]",
          "releaseValidValues": "[1:28]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the AwId width",
          "Architecture Description": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wAddr": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "32",
          "architectureValidValues": "[12:64]",
          "releaseValidValues": "[12:64]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of address bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wData": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "64",
          "architectureValidValues": "[64,128,256]",
          "releaseValidValues": "[64,128,256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the width of data bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": "FIXME: SysDii has only one possible value. Need to check how to add this constraint"
        },
        "DII::wAwUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of Awuser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wArUser": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:32]",
          "releaseValidValues": "[0:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Width of ArUser bits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nRttCtrlEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:32]",
          "releaseValidValues": "[4:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of allowed outstanding read transactions on the downstream AXI interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nWttCtrlEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:32]",
          "releaseValidValues": "[4:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the number of allowed outstanding write transactions on the downstream AXI interface",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nLargestEndpoint": {
          "Type": "longint",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[4:549755813888]",
          "releaseValidValues": "[4:549755813888]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nDiiRbCredits": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "2",
          "architectureValidValues": "[2:32]",
          "releaseValidValues": "[2:32]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specify the maximum number of non-coherent write request buffer credits",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nCMDSkidBufSize": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:768]",
          "releaseValidValues": "[4:768]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total depth of skid buffer for commands to DCE/DII and the non-coherent port of DMI.\nThe skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution.\nCSR Address: 0xFF0",
          "Architecture Description": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nCMDSkidBufArb": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "16",
          "architectureValidValues": "[4:256]",
          "releaseValidValues": "[4:256]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "Architecture Description": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFF0",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nExclusiveEntries": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:8]",
          "releaseValidValues": "[0:8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "defines the number of exclusive monitors",
          "Architecture Description": "A value of 0 means no exclusive monitor will be instantiated",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nAddrTransRegisters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "0",
          "architectureValidValues": "[0:16]",
          "releaseValidValues": "[0:8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Specifies the number of address translation registers that are available within DII. These registers add capability to translate address on the AXI bus from DMI. Refer to the address translation section of the reference manual",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nPerfCounters": {
          "Type": "int",
          "Visibility": "user",
          "Access": "ReadWrite",
          "Default": "4",
          "architectureValidValues": "[0,4,8,16]",
          "releaseValidValues": "[0,4,8]",
          "Source": "",
          "Conditions": "",
          "Customer Description": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::nLatencyCounters": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::addressBits": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wResp": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wWUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wBUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wRUser": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wLen": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wSize": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wLock": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wQos": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wRegion": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "DII::wProt": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        }
      },
      "Legato Parameters": {
        "portDataWidth": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        },
        "inputBufferDepth": {
          "Type": "string",
          "Visibility": "engg",
          "Access": "ReadWrite",
          "Default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "Source": "",
          "Conditions": "",
          "Customer Description": "",
          "Architecture Description": "",
          "Constraints": "",
          "General Comments": ""
        }
      }
    },
    "Maestro Parameters": {}
  }
}