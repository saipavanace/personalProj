\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
//GIU
// Author: Benjamin Madon
//=============================================================================


var utilFunctions   = obj.userLib.lib_utils;

var newToOldStyleInterface	= obj.userLib.newToOldStyleInterface.bind( null, obj.userLib );
var m = obj.userLib;
var u=obj.lib;

var p = u.getParam();
var NumberOfGranulePerBeat=6;

var SMI_ndp_packing_order = ["msg_type","targ_id","src_id","ndp_len","msg_id","ndp","msg_user","dp_present"];
var SMI_dp_packing_order = ["data","user"];

/// VC related parameterss
var nVC= 4;
var MessageSizeInGranule =[3,2,1,9];
var NumberOfCredit = [16,16,16,16];
var GranuleSizeInBytes= 10 ;
var wCredit = 4;
var NumberOfBeatPerContainer =4;
var StartBits = [506,10,506,10];
var PayloadBits = [16,16,16,16];
var Generic_rdy_valid ={ "params": {
                                    "wValid": 1,
                                    "wReady": 1,
                                  },
                                  "_SKIP_": false,
                                  "interface": "InterfaceGenRdyVld",
                                  "blkClkGateOn": true
                                  };

var InterfaceGenVld = { "params" : {},
                                  "_SKIP_": false,
                                  "interface": "InterfaceGenVld",
                                  "blkClkGateOn": true}

var InterfaceGenData = { "params" : {},
                                  "_SKIP_": false,
                                  "interface": "InterfaceGenData",
                                  "blkClkGateOn": true}
\jsend

module tb_top();

reg clk_clk;
reg clk_reset_n;

	logic 	VC_0_to_deframer_valid;
	logic  VC_0_to_deframer_ready;
	logic [239:0] VC_0_to_deframer_data;
	logic credit_return_0_data;
	logic VC_1_to_deframer_valid;
	logic  VC_1_to_deframer_ready;
	logic [159:0] VC_1_to_deframer_data;
	logic credit_return_1_data;
	logic VC_2_to_deframer_valid;
	logic  VC_2_to_deframer_ready;
	logic [79:0] VC_2_to_deframer_data;
	logic credit_return_2_data;
	logic VC_3_to_deframer_valid;
	logic  VC_3_to_deframer_ready;
	logic [719:0] VC_3_to_deframer_data;
	logic credit_return_3_data;
	logic  cxs_out_deframer_in_valid;
	logic cxs_out_deframer_in_ready;
	logic  [511:0] cxs_out_deframer_in_data;
  logic [79: 0 ] g0;
  logic [79: 0 ] g1;
  logic [79: 0 ] g2;
  logic [79: 0 ] g3;
  logic [79: 0 ] g4;
  logic [79: 0 ] g5;
  logic [1:0] vc ;
  reg [1:0]counter;



\jsbegin
var GIU_Deframer_interface ={};
for(var i = 0 ; i<nVC ; i++){
  var VC = m.deepCopy(Generic_rdy_valid);
  VC["params"]["wData"]= MessageSizeInGranule[i] * GranuleSizeInBytes * 8;
  VC["name"]= "VC_"+i+"_to_deframer_";
  VC["direction"]= "master";
  GIU_Deframer_interface["VC_"+i] = VC;


  var credit_return_ = m.deepCopy(InterfaceGenData);
  credit_return_["params"]["wData"] = 1;
  credit_return_["name"] = "credit_return_"+i+"_";
  credit_return_["direction"] = "master";
  
  GIU_Deframer_interface["credit_return_VC_"+i] =credit_return_;
  
}

GIU_Deframer_interface["clkInt"] = p.interfaces ["clkInt"];
GIU_Deframer_interface["clkInt"] = m.deepCopy(p.interfaces ["clkInt"]);
GIU_Deframer_interface["clkInt"].params["wTestEn"] =0;


var cxs_out_deframer_in_ = m.deepCopy(Generic_rdy_valid);
cxs_out_deframer_in_["params"]["wData"] = 512;
cxs_out_deframer_in_["name"] = "cxs_out_deframer_in_";
cxs_out_deframer_in_["direction"] = "slave";

GIU_Deframer_interface["cxs_out_deframer_in_"] = cxs_out_deframer_in_;


var GIU_Deframer_parameterss ={}
GIU_Deframer_parameterss["interfaces"] = GIU_Deframer_interface;
GIU_Deframer_parameterss["nVC"] = nVC;
GIU_Deframer_parameterss["NumberOfGranulePerBeat"] = NumberOfGranulePerBeat;
GIU_Deframer_parameterss["GranuleSizeInBytes"] = GranuleSizeInBytes;
GIU_Deframer_parameterss["MessageSizeInGranule"] = MessageSizeInGranule;
GIU_Deframer_parameterss["NumberOfCredit"] = NumberOfCredit;

GIU_Deframer_parameterss["NumberOfBeatPerContainer"] = NumberOfBeatPerContainer;
GIU_Deframer_parameterss["StartBits"] = StartBits;
GIU_Deframer_parameterss["PayloadBits"] = PayloadBits;

\jsend

\=u.nInstance({
      instanceName: 'giu_deframer',
      moduleName: 'giu_deframer',
      params: GIU_Deframer_parameterss, 
      interfaceObj: {
      interfaces: GIU_Deframer_interface,
      prefixes: GIU_Deframer_interface
    }
  })=\

  initial begin
  clk_clk = 0;
  forever
  #5 clk_clk = ~clk_clk;
end

clocking ckb @ (posedge clk_clk);
	input VC_0_to_deframer_valid;
	output VC_0_to_deframer_ready;
	input VC_0_to_deframer_data;
	input credit_return_0_data;
	input VC_1_to_deframer_valid;
	output VC_1_to_deframer_ready;
	input  VC_1_to_deframer_data;
	input credit_return_1_data;
	input VC_2_to_deframer_valid;
	output VC_2_to_deframer_ready;
	input VC_2_to_deframer_data;
	input credit_return_2_data;
	input VC_3_to_deframer_valid;
	output VC_3_to_deframer_ready;
	input  VC_3_to_deframer_data;
	input credit_return_3_data;
	output cxs_out_deframer_in_valid;
	input cxs_out_deframer_in_ready;
	output cxs_out_deframer_in_data;
endclocking


initial begin
  clk_clk = 0;
  forever
  #5 clk_clk = ~clk_clk;
end


task send_stuff(input [5:0] start_ptr,
                input [1:0]vc0,
                input [1:0]vc1,
                input [1:0]vc2,
                input [1:0]vc3,
                input [1:0]vc4,
                input [1:0]vc5                            
              ) ;
  g0 = {76'h1111111111111111111,2'b11,vc0};
  g1 = {76'h2222222222222222222,2'b11,vc1};
  g2 = {76'h3333333333333333333,2'b11,vc2};
  g3 = {76'h4444444444444444444,2'b00,vc3};
  g4 = {76'h5555555555555555555,2'b00,vc4};
  g5 = {76'h6666666666666666666,2'b00,vc5};
  if (~counter[0]) begin
    cxs_out_deframer_in_data <= {start_ptr,10'b0000000000,g5,g4,g3,g2,g1,g0,16'b0000000000};
  end else begin
  cxs_out_deframer_in_data <= {16'b0000000000,g5,g4,g3,g2,g1,g0,start_ptr,10'b0000000000};

  end
  
  cxs_out_deframer_in_valid <= 1'b1;
  counter<=counter+1;


endtask
task idle_valid() ;
counter <=counter+1;

cxs_out_deframer_in_data <={16'b0000000000,g5,g4,g3,g2,g1,g0,16'b0000000000};
endtask

task stop() ;
  vc = 2'b11;
  g0 = 80'hde3;
  g1 = 80'had;
  g2 = 80'hbeaf;
  g3 = 80'h123;
  g4 = 80'h456;
  g5 = 80'h789;
  cxs_out_deframer_in_data <= {16'b1000000000000000,g5,g4,g3,g2,g1,g0,16'b00010000000000000};
  cxs_out_deframer_in_valid <= 1'b0;
endtask



initial begin
$vcdpluson;
counter<=2'b00;
ckb.cxs_out_deframer_in_valid <= 1'b0;
ckb.cxs_out_deframer_in_data <= 512'd0;
ckb.VC_0_to_deframer_ready <= 1'b1;
ckb.VC_1_to_deframer_ready <= 1'b1;
ckb.VC_2_to_deframer_ready <= 1'b1;
ckb.VC_3_to_deframer_ready <= 1'b1;
clk_reset_n =0;
#10;
clk_reset_n  = 1;
#20;
@clk_clk send_stuff(6'b100100,2'd0,2'd1,2'd2,2'd0,2'd1,2'd2);
@clk_clk send_stuff(6'b101001,2'd1,2'd1,2'd0,2'd0,2'd1,2'd0);
@clk_clk idle_valid();
@clk_clk send_stuff(6'b101010,2'd1,2'd0,2'd1,2'd0,2'd1,2'd2);
@clk_clk send_stuff(6'b111100,2'd2,2'd2,2'd2,2'd1,2'd3,2'd1);
@clk_clk send_stuff(6'b000001,2'd3,2'd2,2'd2,2'd1,2'd3,2'd3);
@clk_clk idle_valid();
@clk_clk send_stuff(6'b001001,2'd3,2'd2,2'd0,2'd1,2'd3,2'd3);
@clk_clk idle_valid();
@clk_clk idle_valid();
@clk_clk stop();
#200;
$finish;
end





endmodule