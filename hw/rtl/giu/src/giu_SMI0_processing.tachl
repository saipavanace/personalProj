\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
//GIU
// Author: Benjamin Madon
//=============================================================================


var m = obj.userLib;
var u=obj.lib;
var p =u.getParam();
var newToOldStyleInterface	=m.newToOldStyleInterface.bind( null, m);
var utilFunctions   = m.lib_utils;

var unit_id_width = p.system["wFUnitId"];

var encoder_in_interface = m.deepCopy(p.interfaces["smiTxInt_out"])
encoder_in_interface.name = encoder_in_interface.name+"int_";

function encode_header (interface,ResilienceEnable,TIResiliencyProtectionType){

  var oldrx2=newToOldStyleInterface(interface);
  var protection =  "none";                                 
  if (ResilienceEnable) {  
      if (TIResiliencyProtectionType === 'SECDED') {
          protection =  'ecc';  
      }  
      if (TIResiliencyProtectionType === 'PARITY') {    
          protection=  'parity';  
      }
  }

  let smiHeaderSignalsToProtect = ["targ_id","src_id","msg_type","msg_id"];
  
  var direction              = "forward";
  var inInterface            = {"name": "in_" ,
                                "signals": {}
                   };
  var outInterface           = {"name": "out_",
                                "signals": {}
                   };
  
  var protWidth = 0;
  for (let i =0; i<smiHeaderSignalsToProtect.length; i++){
   if(oldrx2.signals[smiHeaderSignalsToProtect[i]] != 0) {
     inInterface.signals["ndp_"+smiHeaderSignalsToProtect[i]]  =   oldrx2.signals.ndp_[smiHeaderSignalsToProtect[i]];
    outInterface.signals["ndp_"+smiHeaderSignalsToProtect[i]] =   oldrx2.signals.ndp_[smiHeaderSignalsToProtect[i]];
   }
   protWidth += oldrx2.signals.ndp_[smiHeaderSignalsToProtect[i]];
  }
  
  var protSigWidth = 0;
  if (TIResiliencyProtectionType == "SECDED"){
      protSigWidth = m.getEccWidth(protWidth);
  } 
  if (TIResiliencyProtectionType == "PARITY" ) {
      protSigWidth = 1;
  }

  outInterface.signals.sb_prot  = protSigWidth;
  
  var smiTxProtInterfaces    = [];
  smiTxProtInterfaces[0]     = {
                                  modulePrefix  : 'in_',
                                  localPrefix   : oldrx2.name,
                                  interface     : inInterface.signals
                                };
  
  smiTxProtInterfaces[1]     = {
                                  modulePrefix  : 'out_',
                                  localPrefix   : 'prot_out_' + oldrx2.name,
                                  interface     : outInterface.signals
                                };
  var headerProtectionScheme = {
          "all":[
              {"signals" : smiHeaderSignalsToProtect.map(item => "ndp_"+item),
               "protectionStyle" : {"protection":protection ,"protWidth": protWidth }
              }
          ]
              
      };
  return {
      instanceName: oldrx2.name+'prot_interface',
      moduleName: 'prot_interface',
      params: {
                 direction        : direction,
                 inInterface      : inInterface,
     outInterface     : outInterface,
     protectionScheme : headerProtectionScheme
               },
      verilogParams: {},
      interfaces: smiTxProtInterfaces
  };
}

u.nInterfaces(p.interfaces);

\jsend


module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);


\jsbegin
var cmd_req = obj.userLib.concMsgGen(obj, 'cmd_req_', 'ConcMsgBodyCMDReq', p.concParams.hdrParams, p.concParams.cmdReqParams, {"dp_present": 0}, 'tx');

function ordered_packet (packet,width,ndp_width){
  var result={};
  var current=0;
  for (els in packet) {

    var key=packet[els];
    result[key] = "["+(current+width[key]-1)+":"+current+"]";
    current+=width[key];
  }
  if (current < ndp_width) {
    result["zero"] = "["+(ndp_width-1)+":"+current+"]"
  }
  return result;
}

var bit_select = ordered_packet(cmd_req["order"],cmd_req["signals"],newToOldStyleInterface(p.interfaces["smiTxInt_out"]).signals.ndp_["ndp"]);
var globalidBitselect = "[" +(p.system["wLinkId"]+p.system["wChipletId"]+p.system["wFUnitId"]+p.system["wFPortId"]-1)+":" +(p.system["wFUnitId"]+p.system["wFPortId"])+"]";
var chipletIdbitselect = "[" +(p.system["wChipletId"]+p.system["wFUnitId"]+p.system["wFPortId"]-1)+":" +(p.system["wFUnitId"]+p.system["wFPortId"])+"]";
var portidsel = p.system["wFPortId"] == 1 ? "[0]":"[" +(p.system["wFPortId"]-1)+": 0 ]";

\jsend


\=m.bundleFunctions.wiresFromInterface("prot_out_" + p.interfaces["smiTxInt_out"].name+"int_ndp_",        newToOldStyleInterface(p.interfaces["smiTxInt_out"]).signals.ndp_,       [],  u.bundle)=\
\=m.bundleFunctions.wiresFromInterface(p.interfaces["smiTxInt_out"].name+"int_ndp_",        newToOldStyleInterface(p.interfaces["smiTxInt_out"]).signals.ndp_,       ["targ_id"],  u.bundle)=\
\=m.bundleFunctions.wiresFromInterface(p.interfaces["smiTxInt_in"].name+"int_ndp_",        newToOldStyleInterface(p.interfaces["smiTxInt_in"]).signals.ndp_,       ["targ_id"],  u.bundle)=\


wire SMI0_is_cmd_req;
wire SMI0_is_local;
wire SMI0_is_dmv_req;
wire update_cmd_req;
wire SMI0_is_coh;

reg [\=p.system.concertocparams["wDId"]-1=\ : 0] \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\;
reg address_map_error;
reg [\=p.interfaces["smiTxInt_out"].params["wSmiTid"]-1=\:0]  \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id ;
wire [\=p.system.concertocparams["wAddr"]-1=\ : 0] cmd_req_addr;

wire address_valid;
wire [\=p.system.concertocparams["wAddr"]-1=\ : 0] address;



wire                                                smi_valid_in;
wire  [51:0]                                        smi_address_in;
wire                                                dii_id_valid;
wire  [4 : 0 ]                                      dii_id;
wire  [\=p.system["wFUnitId"]-1=\: 0 ]              dii_f_unit_id;
wire                                                dmi_id_valid;
wire  [4 : 0 ]                                      dmi_id;
wire  [\=p.system["wFUnitId"]-1=\ : 0 ]             dmi_f_unit_id;
wire [4:0]                                          dmi_mig;
wire [3:0]                                          size_of_ig;
wire                                                dce_id_valid;
wire  [4 : 0 ]                                      dce_id;
wire  [\=p.system["wFUnitId"]-1=\ : 0 ]             dce_f_unit_id;
wire                                                nrs_selfidr_hit;
wire                                                addressing_error_hit_multi;
wire                                                addressing_error_hit_none;

wire csr_access_nrs_valid ;
wire csr_access_nrs_error ;
 
wire [1:0] GPRAR_NSX;
 
wire [31:0] NRSBAR_BaseAddr;

wire unconnected_dce_access;
wire unconnected_dmi_access;
wire unconnected_dii_access;
wire nrs_region_hit;
wire gpr_region_hit;
wire bra_region_hit;

wire remote_valid;
wire remote_dii ;
wire [\=p.system["wChipletId"]-1=\:0] remote_chiplet_id;
wire [1:0] remote_link_id;

wire inconsistent_global_addr_map;





assign cmd_req_addr = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["addr"]=\;

\jsbegin
//SMI0 is a CmdReq if the top two bits are 0
\jsend
assign SMI0_is_cmd_req = \=p.interfaces["smiTxInt_in"].name+"ndp_msg_type"=\[7:6] == 2'b00 & ~ (\=p.interfaces["smiTxInt_in"].name+"ndp_msg_type"=\[5:0] == 6'b001111) ;
assign SMI0_is_coh = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["ch"]=\;


assign SMI0_is_dmv_req = \=p.interfaces["smiTxInt_in"].name+"ndp_msg_type"=\ == 8'h0f ;
assign SMI0_is_local= \=p.interfaces["uChipletIdInt"].name+"my_chiplet_id"=\ == \=p.interfaces["smiTxInt_in"].name+"ndp_targ_id"=\ [\=p.interfaces["smiTxInt_in"].params["wSmiTid"]-1=\:\=p.interfaces["smiTxInt_in"].params["wSmiTid"]-p.system["wChipletId"]=\] ;


assign address_valid = \=p.interfaces["smiTxInt_in"].name+"ndp_msg_valid" =\ & SMI0_is_cmd_req;
assign address       = cmd_req_addr;

assign csr_access_nrs_valid = 1'b0;
\jsbegin

var addr_map_ports  = {};

    addr_map_ports['csr_access_nrs_valid'] = 'csr_access_nrs_valid';
    addr_map_ports['csr_access_nrs_error'] = 'csr_access_nrs_error';

    addr_map_ports['GPRAR_NSX']        = "GPRAR_NSX";

for (var i = 0; i < p.system["nGPWindows"]; i++ ) {
    addr_map_ports['GPRAR'+i+'_Valid']      = "GIUGPRAR"+i+"_Valid_out";
    addr_map_ports['GPRAR'+i+'_HUT']        = "GIUGPRAR"+i+"_HUT_out";
    addr_map_ports['GPRAR'+i+'_LinkID']      = "GIUGPRAR"+i+"_LinkId_out";
    addr_map_ports['GPRAR'+i+'_Interleaving'] = "GIUGPRAR"+i+"_Interleave_out";
    addr_map_ports['GPRAR'+i+'_Size']       = "GIUGPRAR"+i+"_Size_out";
    addr_map_ports['GPRAR'+i+'_HomeUnitId'] = "GIUGPRAR"+i+"_HUI_out";
    //addr_map_ports['GPRAR'+i+'_DIGId']      = "GIUGPRAR"+i+"_DIGId_out";
    addr_map_ports['GPRBAR'+i+'_AddrLo']    = "GIUGPRBLR"+i+"_AddrLow_out";
    addr_map_ports['GPRBAR'+i+'_AddrHi']    = "GIUGPRBHR"+i+"_AddrHigh_out";
    addr_map_ports['GPRAR'+i+'_NSX']        = "GIUGPRAR"+i+"_NSX_out";
}

    addr_map_ports['BRAR_Valid']            = "GIUBRAR_Valid_out";
    addr_map_ports['BRAR_HUT']              = "GIUBRAR_HUT_out";
    addr_map_ports['BRAR_Size']             = "GIUBRAR_Size_out";
    addr_map_ports['BRAR_HomeUnitId']       = "GIUBRAR_HUI_out";
    //addr_map_ports['BRAR_DIGId']            = "GIUBRAR_DIGId_out";
    addr_map_ports['BRBAR_AddrLo']          = "GIUBRBLR_AddrLow_out";
    addr_map_ports['BRBAR_AddrHi']          = "GIUBRBHR_AddrHigh_out";

    addr_map_ports['AMIGR_Valid']           = "DMIAMIGR_Valid_out";
    addr_map_ports['AMIGR_AMIGS']           = "DMIAMIGR_AMIGS_out";

    if (p.InterleaveInfo["dmi16WIFV"].length > 0) {
      addr_map_ports['AMIFR_A16WIFId']        = "DMIMIFSR_MIG16AIFId_out";
    }
      if (p.InterleaveInfo["dmi8WIFV"].length > 0) {
        addr_map_ports['AMIFR_A8WIFId']         = "DMIMIFSR_MIG8AIFId_out";
      }
      if (p.InterleaveInfo["dmi4WIFV"].length > 0) {
        addr_map_ports['AMIFR_A4WIFId']         = "DMIMIFSR_MIG4AIFId_out";
      }
      if (p.InterleaveInfo["dmi3WIFV"].length > 0) {
        addr_map_ports['AMIFR_A3WIFId']         = "DMIMIFSR_MIG3AIFId_out";
      }
      if (p.InterleaveInfo["dmi2WIFV"].length > 0) {
        addr_map_ports['AMIFR_A2WIFId']         = "DMIMIFSR_MIG2AIFId_out";
      }
  
    addr_map_ports['GIUAMIGR_AMIGS']           = "4'b0000";
    addr_map_ports['GIUAMIGR_Valid']           = "1'b0";
    addr_map_ports['NRSBAR_BaseAddr']       = "NRSBAR_BaseAddr"
    addr_map_ports['NRSBAR_DiiId']          = "4'h0";

    addr_map_ports['address_valid']         = "address_valid";
    addr_map_ports['address']               = "address";
    addr_map_ports['dii_id_valid']          = "dii_id_valid";
    addr_map_ports['dii_id']                = "dii_id";
    addr_map_ports['dii_f_unit_id']         = "dii_f_unit_id";
    addr_map_ports['dmi_id_valid']          = "dmi_id_valid";
    addr_map_ports['dmi_id']                = "dmi_id";
    addr_map_ports['dmi_f_unit_id']         = "dmi_f_unit_id";
    addr_map_ports['dmi_mig']               = "dmi_mig";
    addr_map_ports['dce_id_valid']          = "dce_id_valid";
    addr_map_ports['dce_id']                = "dce_id";
    addr_map_ports['dce_f_unit_id']         = "dce_f_unit_id";


    addr_map_ports['remote_valid'     ] = 'remote_valid'     ;
    addr_map_ports['remote_chiplet_id'] = 'remote_chiplet_id';
    addr_map_ports['remote_link_id'   ] = 'remote_link_id'   ;

    addr_map_ports['nrs_selfidr_hit']       = "nrs_selfidr_hit";
    addr_map_ports['addressing_error_hit_multi']  = "addressing_error_hit_multi";
    addr_map_ports['addressing_error_hit_none']   = "addressing_error_hit_none";


    for (var i = 0; i < p.system["nDmis"]; i++) {
    addr_map_ports['dmi'+i+'_f_unit_id'] = p.interfaces["uSysDmiIdInt"].name+ 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
    }

    for (var i = 0; i < p.system["nDiis"]; i++) {
    addr_map_ports['dii'+i+'_f_unit_id'] = p.interfaces["uSysDiiIdInt"].name+ 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
    }

    for (var i = 0; i < p.system["nDces"]; i++) {
    addr_map_ports['dce'+i+'_f_unit_id'] = p.interfaces["uSysDceIdInt"].name+ 'f_unit_id' + '[' + (((i+1)*unit_id_width)-1) + ':' + (i*unit_id_width) + ']';
    }
    
    addr_map_ports['hexAiuDceVec'] = p.interfaces["uSysDceIdInt"].name+'connectivity';
    addr_map_ports['hexAiuDmiVec'] =  p.interfaces["uSysDmiIdInt"].name+'connectivity';
    addr_map_ports['hexAiuDiiVec'] =  p.interfaces["uSysDiiIdInt"].name+'connectivity';
    addr_map_ports['unconnected_dce_access'] = 'unconnected_dce_access';
    addr_map_ports['unconnected_dmi_access'] = 'unconnected_dmi_access';
    addr_map_ports['unconnected_dii_access'] = 'unconnected_dii_access';
    addr_map_ports['nrs_region_hit'] = 'nrs_region_hit';
    addr_map_ports['gpr_region_hit'] = 'gpr_region_hit';
    addr_map_ports['bra_region_hit'] = 'bra_region_hit';
    addr_map_ports['size_of_ig'] = 'size_of_ig';

    var addr_map_interfaces =[{localPrefix : newToOldStyleInterface(p.interfaces["uChipletIdInt"]).name, modulePrefix: newToOldStyleInterface(p.interfaces["uChipletIdInt"]).name, interface : newToOldStyleInterface(p.interfaces["uChipletIdInt"]).signals}];


\jsend


\jsbegin

var ncore3_addr_map_wrapper_params= {
    useNsx:       1,
    useCsrAccess: 1,
    instantiator: 'aiu',  
    wSysAddr:    52,
    nGPRA:       p.system["nGPWindows"],
    wFUnitId:    p.system["wFUnitId"],
    nDmis:      p.system["nDmis"],
    nDiis:      p.system["nDiis"],
    nDces:      p.system["nDces"],
    dmiIGSV:     p.InterleaveInfo["dmiIGSV"],
    dmi2WIFV:    p.InterleaveInfo["dmi2WIFV"],
    dmi3WIFV:    p.InterleaveInfo["dmi3WIFV"],
    dmi4WIFV:    p.InterleaveInfo["dmi4WIFV"],
    dmi8WIFV:    p.InterleaveInfo["dmi8WIFV"],
    dmi16WIFV:   p.InterleaveInfo["dmi16WIFV"],
    
    useAMIFR_A16W_A8W: 1,
    DcePrimaryBits : p.InterleaveInfo["PriSubDiagAddrBits"],
    DceSecondaryBits : p.InterleaveInfo["SecSubRows"],
    wChipletId : p.system["wChipletId"],
    wAssemblyId : p.interfaces["uChipletIdInt"].params["wAssemblyId"],
    RemoteLinkInterleavingObject :  p.InterleaveInfo["RemoteLinkInterleavingObject"],
    optimize_ports : 1,
    myChipletIdInterface : newToOldStyleInterface(p.interfaces["uChipletIdInt"]),
    instantiateGlobalAddrMap : true
};


\jsend 

assign inconsistent_global_addr_map = remote_valid & (\=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id [\=p.system["wFUnitId"]+p.system["wFPortId"]+p.system["wChipletId"]-1=\:\=p.system["wFUnitId"]+p.system["wFPortId"]=\] == remote_chiplet_id) ;

assign NRSBAR_BaseAddr = 32\=p.CsrInfo["csrBaseAddress"]=\ + \=p.interfaces["uChipletIdInt"].name=\my_chiplet_id<<4'd12 ;

\=u.instance({
        moduleName: 'ncore3_addr_map',
        instanceName: 'ncore3_addr_map',
        params: ncore3_addr_map_wrapper_params,
        ports : addr_map_ports,
        interfaces : addr_map_interfaces,
        portsDelimiter: '\n\t'
})=\


assign update_cmd_req = SMI0_is_cmd_req  & SMI0_is_local;

always@(*) begin 

case ({update_cmd_req,nrs_region_hit,gpr_region_hit})
      3'b101 : begin 
      \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = (dce_id_valid & SMI0_is_coh)   ? {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=globalidBitselect=\,dce_f_unit_id,\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=portidsel=\}:
                                                              (dmi_id_valid & ~SMI0_is_coh) ? {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=globalidBitselect=\,dmi_f_unit_id,\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=portidsel=\} :
                                                               dii_id_valid ?                 {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=globalidBitselect=\,dii_f_unit_id,\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=portidsel=\}:
                                                                                              \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id ;
      
      \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = dmi_id_valid ?  {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=chipletIdbitselect=\,dmi_f_unit_id} :
                                                                                dii_id_valid ?                 {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=chipletIdbitselect=\,dii_f_unit_id}:                                                                                     
                                                                                \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ;
                                                                                
      address_map_error = addressing_error_hit_multi | addressing_error_hit_none | ~(dmi_id_valid | dii_id_valid) ;
      end
      3'b110 : begin  
        \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=globalidBitselect=\,dii_f_unit_id,\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=portidsel=\};
        \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
        address_map_error = 1'b0 ;
      end
      3'b111 : begin  
      \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = {\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=globalidBitselect=\,dii_f_unit_id,\=p.interfaces["smiTxInt_in"].name=\ndp_targ_id\=portidsel=\};
      \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
      address_map_error = 1'b0 ;
    end
      3'b100 : begin
        \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id;
        \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
        address_map_error = 1'b1;
      end
    3'b000 : begin 
      \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id;
      \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
      address_map_error = 1'b0;
    end
    3'b001 : begin 
      \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id;
      \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
      address_map_error = 1'b0;
    end
    3'b010 : begin 
      \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id;
      \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
      address_map_error = 1'b0;
    end
    3'b011 : begin 
      \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id;
      \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
      address_map_error = 1'b0;
    end
      default :begin
        \=p.interfaces["smiTxInt_out"].name=\int_ndp_targ_id = \=p.interfaces["smiTxInt_in"].name=\ndp_targ_id;
        \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select["d_id"] =\ ; 
        address_map_error = 1'b1;
      end
      

endcase

end 


\jsbegin
for (field in bit_select){
  if (field == "d_id"){
  \jsend
    assign \=p.interfaces["smiTxInt_out"].name+"int_ndp_ndp"+bit_select["d_id"] =\ = \=p.interfaces["smiTxInt_out"].name+"ndp_ndp_did"=\;
  \jsbegin
    } else {
  \jsend

    assign \=p.interfaces["smiTxInt_out"].name+"int_ndp_ndp"+bit_select[field] =\ = \=p.interfaces["smiTxInt_in"].name+"ndp_ndp"+bit_select[field]=\;
\jsbegin
  }
}
\jsend
  

\jsbegin
var encode_trace_header = encode_header (encoder_in_interface,p.system["ResilienceEnable"],p.system["TIResiliencyProtectionType"]);

if (((p.system.TIResiliencyProtectionType === 'SECDED') | (p.system.TIResiliencyProtectionType === 'PARITY')) & p.system.ResilienceEnable) {
  \jsend
\=u.instance (encode_trace_header)=\

assign  \=p.interfaces["smiTxInt_out"].name+"ndp_user" =\ = prot_out_encode_insmi_tx0_sb_prot;
\jsbegin
} else {
\jsend
  \=m.bundleFunctions.assignByBundle("prot_out_" + encoder_in_interface.name+"ndp_",  encoder_in_interface.name+"ndp_",       newToOldStyleInterface(p.interfaces["smiTxInt_in"]).signals.ndp_,       [],  u.bundle)=\

\jsbegin
}
\jsend

\=m.bundleFunctions.assignByBundle( encoder_in_interface.name+"ndp_", p.interfaces["smiTxInt_in"].name+"ndp_",       newToOldStyleInterface(p.interfaces["smiTxInt_in"]).signals.ndp_,       ["targ_id","ndp"],  u.bundle)=\
\=m.bundleFunctions.assignByBundle(p.interfaces["smiTxInt_out"].name+"ndp_", "prot_out_" + encoder_in_interface.name+"ndp_",      newToOldStyleInterface(p.interfaces["smiTxInt_out"]).signals.ndp_,       [],  u.bundle)=\

assign \=p.interfaces["active"].name=\active = 1'b1;

endmodule