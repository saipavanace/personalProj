\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
//GIU
// Author: Benjamin Madon
//=============================================================================


var utilFunctions   = obj.userLib.lib_utils;

var newToOldStyleInterface	= obj.userLib.newToOldStyleInterface.bind( null, obj.userLib );
var m = obj.userLib;
var u=obj.lib;

function padd_smi_to_VC_size (smi_interface,SMI_ndp_packing_order,SMI_dp_packing_order,GranuleSizeInBytes,MessageSizeInGranule){
    var width =m.log2ceil(p.nVC);
    var signals = [];
    var signal_list = u.getInterfaceSignals(smi_interface);
    var smi_size=0;
    var dp_size = SMI_dp_packing_order.length;
    var ndp_size = SMI_ndp_packing_order.length;


    for (var i in SMI_dp_packing_order){
        width = signal_list["dp_"][SMI_dp_packing_order[dp_size-1-i]].width
        smi_size+=width;
        if (width > 0) { signals.push("dp_"+SMI_dp_packing_order[dp_size-1-i]);}
    }
    for (var i in SMI_ndp_packing_order){
        width = signal_list["ndp_"][SMI_ndp_packing_order[ndp_size-1-i]].width
        smi_size+=width;
        if (width > 0) { signals.push("ndp_"+SMI_ndp_packing_order[ndp_size-1-i]);}
    }
    signals.push("VC");
    return {padding : GranuleSizeInBytes*MessageSizeInGranule*8-smi_size-2, signals : signals};
  }
  
  function pack_VC_to_SMI (smi_interface,SMI_ndp_packing_order,SMI_dp_packing_order,GranuleSizeInBytes,MessageSizeInGranule){

    var pad = padd_smi_to_VC_size(smi_interface,SMI_ndp_packing_order,SMI_dp_packing_order,GranuleSizeInBytes,MessageSizeInGranule);
    var res= "{ "
    for (var i in pad.signals){
        if (i==0){
            res+=smi_interface.name+pad.signals[i];
        } else {
            res+=","+smi_interface.name+pad.signals[i];
        }
    }
    return res+"}";
  }
var p =u.getParam();

u.nInterfaces(p.interfaces);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);


\jsbegin
for (var i=0; i<p.vc_descriptor["nVC"];i++){
    for (var int in p.interfaces["smiTxInt"]){
        if (p.interfaces["smiTxInt"][int]["name"].includes(i)){
            var pad = padd_smi_to_VC_size (p.interfaces["smiTxInt"][int],p.packet_descriptor["SMI_ndp_packing_order"],p.packet_descriptor["SMI_dp_packing_order"],p.packet_descriptor["GranuleSizeInBytes"],p.vc_descriptor["MessageSizeInGranule"][i]);
\jsend
            wire [\=m.log2ceil(p.vc_descriptor["nVC"])-1=\:0] \=p.interfaces["smiTxInt"][int]["name"]=\VC ;
            assign \=pack_VC_to_SMI(p.interfaces["smiTxInt"][int],p.packet_descriptor["SMI_ndp_packing_order"],p.packet_descriptor["SMI_dp_packing_order"],p.packet_descriptor["GranuleSizeInBytes"],p.vc_descriptor["MessageSizeInGranule"][i])=\ = \=p.interfaces["VC_"+i].name=\data[\=p.vc_descriptor["MessageSizeInGranule"][i]*p.packet_descriptor["GranuleSizeInBytes"]*8-pad.padding-1=\ : 0];

            \jsbegin
            if (p.interfaces["smiTxInt"][int].params["wSmiDPdata"]>0){
                \jsend
                    assign \=p.interfaces["smiTxInt"][int].name=\ndp_msg_valid = \=p.interfaces["VC_"+i].name=\valid ;
                    assign \=p.interfaces["smiTxInt"][int].name=\dp_valid = \=p.interfaces["VC_"+i].name=\valid ;
                    assign \=p.interfaces["smiTxInt"][int].name=\dp_last = 1'b1;
                    assign \=p.interfaces["VC_"+i].name=\ready = \=p.interfaces["smiTxInt"][int].name=\ndp_msg_ready & \=p.interfaces["smiTxInt"][int].name=\dp_ready;
                \jsbegin
                } else {
                \jsend
                assign \=p.interfaces["smiTxInt"][int].name=\ndp_msg_valid = \=p.interfaces["VC_"+i].name=\valid ;
                assign \=p.interfaces["VC_"+i].name=\ready = \=p.interfaces["smiTxInt"][int].name=\ndp_msg_ready ;

                \jsbegin
                }

        }
    }
}
\jsend

endmodule