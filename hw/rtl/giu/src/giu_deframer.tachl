\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
//GIU
// Author: Benjamin Madon
//=============================================================================

var m = obj.userLib;
var utilFunctions   = m.lib_utils;
var newToOldStyleInterface	= m.newToOldStyleInterface.bind( null, m );

var u=obj.lib;

var p =u.getParam();



/// VC related parameters
var nVC                       = p.vc_descriptor["nVC"];
var wCredit                   = p.vc_descriptor["wCredit"];
var NumberOfCredit            = p.vc_descriptor["NumberOfCredit"];
var MessageSizeInGranule      = p.vc_descriptor["MessageSizeInGranule"];   


// Packet related parameters
var SMI_ndp_packing_order     = p.packet_descriptor["SMI_ndp_packing_order"];
var SMI_dp_packing_order      = p.packet_descriptor["SMI_dp_packing_order"];
var NumberOfGranulePerBeat    = p.packet_descriptor["NumberOfGranulePerBeat"];
var GranuleSizeInBytes        = p.packet_descriptor["GranuleSizeInBytes"];
var NumberOfBeatPerContainer  = p.packet_descriptor["NumberOfBeatPerContainer"];
var StartBits                 = p.packet_descriptor["StartBits"];
var PayloadBits               = p.packet_descriptor["PayloadBits"];
var CreditReturnBits          = p.packet_descriptor["CreditReturnBits"];


var Generic_interface ={ "params": {},
"_SKIP_": false,
"interface": "InterfaceGeneric",
"blkClkGateOn": true
};

var Generic_data ={ "params": {},
"_SKIP_": false,
"interface": "InterfaceGenData",
"blkClkGateOn": true
};

var InterfaceGenVld = { "params" : {},
                        "_SKIP_": false,
                        "interface": "InterfaceGenVld",
                        "blkClkGateOn": true}
u.nInterfaces(p.interfaces);

function wire(prefix,NewInterface,exclude){
  return m.bundleFunctions.wiresFromInterface(prefix+NewInterface.name,        newToOldStyleInterface(NewInterface).signals,       exclude,  u.bundle)

}

function verilog_assign(NewInterface,to,from){
  return m.bundleFunctions.assignByBundle(to, from, newToOldStyleInterface(NewInterface).signals, [], u.bundle)
}

//m.bundleFunctions.wiresFromInterface(p.interfaces["clkInt"].name,        newToOldStyleInterface(p.interfaces["clkInt"]).signals,       [],  u.bundle)
\jsend


module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

wire fifo_depack_in_active;
wire fifo_depack_out_active;


assign cxs_out_deframer_in_ready = 1'b1;


\jsbegin
///////////////////////////////////////////////////////////////////////////
//
//GIU_current_beat isntanciation.
//This module calculate the current beat within the container
//It takes the vald of the CXS as an interface and output the current beat 
//encoded in decimal format.
// NumberOfBeatPerContainer is the number of beat in a container
///////////////////////////////////////////////////////////////////////////
var GIU_current_beat_interfaces={};
var cxs_out_deframer_in_ = m.deepCopy(p.interfaces["cxs_out_deframer_in_"]);
cxs_out_deframer_in_["interface"]="InterfaceGenVld";
cxs_out_deframer_in_["params"]["wData"]=0;
cxs_out_deframer_in_["direction"] = "slave";
GIU_current_beat_interfaces["cxs_out_deframer_in_"] =cxs_out_deframer_in_;


var current_beat_ = m.deepCopy(Generic_interface); 
current_beat_["params"]["wOut"] = 0;
current_beat_["params"]["wIn"] = m.log2ceil(NumberOfBeatPerContainer);
current_beat_["name"] = "current_beat_";
current_beat_["direction"] = "slave";
GIU_current_beat_interfaces["current_beat_"] =current_beat_;
GIU_current_beat_interfaces["clkInt"] = m.deepCopy(p.interfaces ["clkInt"]);
var GIU_current_beat_parameters = {};
GIU_current_beat_parameters["interfaces"] = GIU_current_beat_interfaces;
GIU_current_beat_parameters["NumberOfBeatPerContainer"] = NumberOfBeatPerContainer;
\jsend

\=wire("",GIU_current_beat_interfaces["current_beat_"],[])=\

  \=u.nInstance({
      instanceName: 'GIU_current_beat',
      moduleName: 'GIU_current_beat',
      params: GIU_current_beat_parameters, 
      interfaceObj: {
      interfaces: GIU_current_beat_interfaces,
      prefixes: GIU_current_beat_interfaces
    }
  })=\

\jsbegin

///////////////////////////////////////////////////////////////////////////
//
//GIU_credit_return.
//This module calculate the current beat within the container
//It takes the vald of the CXS as an interface and output the current beat 
//encoded in decimal format.
// NumberOfBeatPerContainer is the number of beat in a container
///////////////////////////////////////////////////////////////////////////
var giu_credit_return_interfaces={};
var cxs_out_deframer_in_ = m.deepCopy(p.interfaces["cxs_out_deframer_in_"]);
cxs_out_deframer_in_["interface"]="InterfaceGenVld";
cxs_out_deframer_in_["direction"] = "slave";
giu_credit_return_interfaces["cxs_out_deframer_in_"] =cxs_out_deframer_in_;


var current_beat_ = m.deepCopy(Generic_interface); 
current_beat_["params"]["wOut"] = 0;
current_beat_["params"]["wIn"] = m.log2ceil(NumberOfBeatPerContainer);
current_beat_["name"] = "current_beat_";
current_beat_["direction"] = "master";
giu_credit_return_interfaces["current_beat_"] =current_beat_;

for (var vc=0; vc<nVC; vc++) {
  giu_credit_return_interfaces["message_credit_return_VC_"+vc] = p.interfaces["message_credit_return_VC_"+vc]
}
var giu_credit_return_parameters = {};
giu_credit_return_parameters["interfaces"] = giu_credit_return_interfaces;
giu_credit_return_parameters["vc_descriptor"] = p.vc_descriptor;
giu_credit_return_parameters["packet_descriptor"] = p.packet_descriptor;

\jsend


  \=u.nInstance({
      instanceName: 'giu_credit_return',
      moduleName: 'giu_credit_return',
      params: giu_credit_return_parameters, 
      interfaceObj: {
      interfaces: giu_credit_return_interfaces,
      prefixes: giu_credit_return_interfaces
    }
  })=\
\jsbegin
///////////////////////////////////////////////////////////////////////////
//
//GIU_Start_pointer_decoding isntanciation.
//This module finds the stat pointer for each granule
// NumberOfGranulePerBeat is the number of granule per beat.
//StartBits is an array which indicates where the start vector starts in each beat.
//The StartBits array is indexed from NumberOfGranulePerBeat-1 to 0 when going from lsb to msb
///////////////////////////////////////////////////////////////////////////



  var GIU_Start_pointer_decoding_interfaces={};
  var cxs_out_deframer_in_ = m.deepCopy(p.interfaces["cxs_out_deframer_in_"]);
  cxs_out_deframer_in_["interface"]="InterfaceGenData";
  cxs_out_deframer_in_["direction"] = "slave";
  GIU_Start_pointer_decoding_interfaces["cxs_out_deframer_in_"] =cxs_out_deframer_in_;

  for (var i=0;i<NumberOfGranulePerBeat;i++){
    var start_ptr_ = m.deepCopy(Generic_interface);
  
  start_ptr_["params"]["wOut"] = 1;
  start_ptr_["params"]["wIn"] = 0;
  start_ptr_["name"] = "start_ptr_"+i+"_";
  start_ptr_["direction"] = "master";
  GIU_Start_pointer_decoding_interfaces["start_ptr_"+i] =start_ptr_;
  }

    var current_beat_ = m.deepCopy(Generic_interface); 
    current_beat_["params"]["wOut"] = 0;
    current_beat_["params"]["wIn"] = m.log2ceil(NumberOfBeatPerContainer);
    current_beat_["name"] = "current_beat_";
    current_beat_["direction"] = "master";
  GIU_Start_pointer_decoding_interfaces["current_beat_"] =current_beat_;


  var GIU_Start_pointer_decoding_parameters = {};
  GIU_Start_pointer_decoding_parameters["interfaces"] = GIU_Start_pointer_decoding_interfaces;
  GIU_Start_pointer_decoding_parameters["NumberOfGranulePerBeat"] = NumberOfGranulePerBeat;
  GIU_Start_pointer_decoding_parameters["StartBits"] = StartBits;
  GIU_Start_pointer_decoding_parameters["NumberOfBeatPerContainer"] = NumberOfBeatPerContainer;

\jsend

\jsbegin
for (var gr=0;gr<NumberOfGranulePerBeat;gr++){
\jsend
\=wire("",GIU_Start_pointer_decoding_interfaces["start_ptr_"+gr],[])=\
\jsbegin
}
\jsend

    \=u.nInstance({
        instanceName: 'GIU_Start_pointer_decoding',
        moduleName: 'GIU_Start_pointer_decoding',
        params: GIU_Start_pointer_decoding_parameters, 
        interfaceObj: {
        interfaces: GIU_Start_pointer_decoding_interfaces,
        prefixes: GIU_Start_pointer_decoding_interfaces
      }
    })=\
  
\jsbegin





for (var vc =0; vc<nVC;vc++){
  var GIU_Start_pointer_per_VC_interfaces={};
  var GIU_Start_pointer_per_VC_prefix={};
  var cxs_out_deframer_in_ = m.deepCopy(p.interfaces["cxs_out_deframer_in_"]);
  cxs_out_deframer_in_["interface"] = "InterfaceGenData"
  cxs_out_deframer_in_["direction"] = "slave";
  GIU_Start_pointer_per_VC_interfaces["cxs_out_deframer_in_"] =cxs_out_deframer_in_;
  GIU_Start_pointer_per_VC_prefix["cxs_out_deframer_in_"] = {name:cxs_out_deframer_in_.name};

  for (var gr=0;gr<NumberOfGranulePerBeat;gr++){

    var start_ptr_vc = m.deepCopy(Generic_interface);
    start_ptr_vc["params"]["wOut"] = 1;
    start_ptr_vc["params"]["wIn"] = 0;
    start_ptr_vc["name"] = "VC_start_ptr_"+gr+"_";
    start_ptr_vc["direction"] = "master";
    GIU_Start_pointer_per_VC_interfaces["start_ptr_vc_"+gr] =start_ptr_vc;
    GIU_Start_pointer_per_VC_prefix["start_ptr_vc_"+gr] ={name: "VC_"+vc+"_VC_start_ptr_"+gr+"_"};



    var start_ptr_ = m.deepCopy(Generic_interface);
    start_ptr_["params"]["wOut"] = 1;
    start_ptr_["params"]["wIn"] = 0;
    start_ptr_["name"] = "start_ptr_"+gr+"_";
    start_ptr_["direction"] = "slave";
    GIU_Start_pointer_per_VC_interfaces["start_ptr_"+gr] =start_ptr_;
    GIU_Start_pointer_per_VC_prefix["start_ptr_"+gr] ={name: "start_ptr_"+gr+"_"};

  }

  var current_beat_ = m.deepCopy(Generic_interface); 
        current_beat_["params"]["wOut"] = 0;
        current_beat_["params"]["wIn"] = m.log2ceil(NumberOfBeatPerContainer);
        current_beat_["name"] = "current_beat_";
        current_beat_["direction"] = "master";
        GIU_Start_pointer_per_VC_interfaces["current_beat_"] =current_beat_;
        GIU_Start_pointer_per_VC_prefix["current_beat_"] ={name:"current_beat_"};

  var GIU_Start_pointer_per_VC_parameters = {};
  GIU_Start_pointer_per_VC_parameters["interfaces"] = GIU_Start_pointer_per_VC_interfaces;
  GIU_Start_pointer_per_VC_parameters["NumberOfGranulePerBeat"] = NumberOfGranulePerBeat;
  GIU_Start_pointer_per_VC_parameters["GranuleSizeInBytes"] = GranuleSizeInBytes;
  GIU_Start_pointer_per_VC_parameters["NumberOfBeatPerContainer"] = NumberOfBeatPerContainer;
  GIU_Start_pointer_per_VC_parameters["VC"] = vc;
  GIU_Start_pointer_per_VC_parameters["nVC"] = nVC;
  GIU_Start_pointer_per_VC_parameters["VC_location"] = 0;
  GIU_Start_pointer_per_VC_parameters["PayloadBits"] = PayloadBits;



\jsend
\jsbegin
for (var gr=0;gr<NumberOfGranulePerBeat;gr++){
\jsend
\=wire("VC_"+vc+"_",GIU_Start_pointer_per_VC_interfaces["start_ptr_vc_"+gr],[])=\
\jsbegin
}
\jsend

    \=u.nInstance({
        instanceName: 'GIU_Start_pointer_per_VC_'+vc,
        moduleName: 'GIU_Start_pointer_per_VC',
        params: GIU_Start_pointer_per_VC_parameters, 
        interfaceObj: {
        interfaces: GIU_Start_pointer_per_VC_interfaces,
        prefixes: GIU_Start_pointer_per_VC_prefix
      }
    })=\
  
\jsbegin
  }
\jsend


\jsbegin
for (var vc =0; vc<nVC;vc++){
    var GIU_deframer_valid_generation_interfaces={};
    var GIU_deframer_valid_generation_prefix={};
    var cxs_out_deframer_in_ = m.deepCopy(p.interfaces["cxs_out_deframer_in_"]);
    cxs_out_deframer_in_["interface"] = "InterfaceGenVld"
    cxs_out_deframer_in_["params"]["wready"]=0;
    cxs_out_deframer_in_["params"]["wData"]=0;
    cxs_out_deframer_in_["direction"] = "slave";
    GIU_deframer_valid_generation_interfaces["cxs_out_deframer_in_"] =cxs_out_deframer_in_;
    GIU_deframer_valid_generation_prefix["cxs_out_deframer_in_"] = {name:cxs_out_deframer_in_.name};
  
    for (var i=0;i<NumberOfGranulePerBeat;i++){
      var start_ptr_ = m.deepCopy(Generic_interface);
    
    start_ptr_["params"]["wOut"] = 1;
    start_ptr_["params"]["wIn"] = 0;
    start_ptr_["name"] = "start_ptr_"+i+"_";
    start_ptr_["direction"] = "slave";
    GIU_deframer_valid_generation_interfaces["start_ptr_"+i] =start_ptr_;
    GIU_deframer_valid_generation_prefix["start_ptr_"+i] ={name: "VC_"+vc+"_VC_start_ptr_"+i+"_"};



    var valid_ = m.deepCopy(InterfaceGenVld);
    
    valid_["params"]["wData"] = 0;
    valid_["name"] = "push_"+i+"_";
    valid_["direction"] = "master";
    GIU_deframer_valid_generation_interfaces["valid_"+i] =valid_;
    GIU_deframer_valid_generation_prefix["valid_"+i] ={name: "VC_"+vc+"_push_"+i+"_"};

    }

if( MessageSizeInGranule[vc] > 1){
    GIU_deframer_valid_generation_interfaces["clkInt"] = m.deepCopy(p.interfaces ["clkInt"]);
    GIU_deframer_valid_generation_prefix["clkInt"] = {name:m.deepCopy(p.interfaces ["clkInt"]).name};
}

    var GIU_deframer_valid_generation_parameters = {};
    GIU_deframer_valid_generation_parameters["interfaces"] = GIU_deframer_valid_generation_interfaces;
    GIU_deframer_valid_generation_parameters["NumberOfGranulePerBeat"] = NumberOfGranulePerBeat;
    GIU_deframer_valid_generation_parameters["message_length"] = MessageSizeInGranule[vc];
    GIU_deframer_valid_generation_parameters["NumberOfBeatPerContainer"] = NumberOfBeatPerContainer;
    GIU_deframer_valid_generation_parameters["assertOn"] = p.assertOn;  
  \jsend
  

  \jsbegin
  for (var i=0;i<NumberOfGranulePerBeat;i++){
    \jsend
\=wire("VC_"+vc+"_",GIU_deframer_valid_generation_interfaces["valid_"+i],[] )=\
    \jsbegin
  }
  \jsend
      \=u.nInstance({
          instanceName: 'GIU_deframer_valid_generation_'+vc,
          moduleName: 'GIU_deframer_valid_generation',
          params: GIU_deframer_valid_generation_parameters, 
          interfaceObj: {
          interfaces: GIU_deframer_valid_generation_interfaces,
          prefixes: GIU_deframer_valid_generation_prefix
        }
      })=\
    
\jsbegin
    }
  \jsend



  \jsbegin


  for (var vc=0;vc<nVC;vc++) {
        var prefix="VC_"+vc+"_push_";
        var GIU_Granule_separator_interfaces={};
        var GIU_Granule_separator_prefix={};
        for (var i=0; i<NumberOfGranulePerBeat;i++){
          GIU_Granule_separator_interfaces["push_"+i+"_"] = m.deepCopy(Generic_data);
          GIU_Granule_separator_interfaces["push_"+i+"_"]["params"]["wData"]=GranuleSizeInBytes*8;       
          GIU_Granule_separator_interfaces["push_"+i+"_"]["direction"]= "master";   
          GIU_Granule_separator_interfaces["push_"+i+"_"]["name"]="push_"+i+"_"; 

          GIU_Granule_separator_prefix["push_"+i+"_"] ={name : prefix+i+"_"};
        }

        var cxs_out_deframer_in_ = m.deepCopy(p.interfaces["cxs_out_deframer_in_"]);
        cxs_out_deframer_in_["interface"] = "InterfaceGenData"
        cxs_out_deframer_in_["direction"] = "slave";
        GIU_Granule_separator_interfaces["cxs_out_deframer_in_"] =cxs_out_deframer_in_;
        GIU_Granule_separator_prefix["cxs_out_deframer_in_"] = {name:cxs_out_deframer_in_.name};

        var current_beat_ = m.deepCopy(Generic_interface); 
        current_beat_["params"]["wOut"] = 0;
        current_beat_["params"]["wIn"] = m.log2ceil(NumberOfBeatPerContainer);
        current_beat_["name"] = "current_beat_";
        current_beat_["direction"] = "master";
        GIU_Granule_separator_interfaces["current_beat_"] =current_beat_;
        GIU_Granule_separator_prefix["current_beat_"] ={name:"current_beat_"};

        var GIU_Granule_separator_parameters ={interfaces : GIU_Granule_separator_interfaces,
                                    NumberOfGranulePerBeat  : NumberOfGranulePerBeat,
                                    GranuleSizeInBytes : GranuleSizeInBytes,
                                    PayloadBits : PayloadBits,
                                    NumberOfBeatPerContainer : NumberOfBeatPerContainer
                                    }
  \jsend
  \jsbegin
  for (var i=0; i<NumberOfGranulePerBeat;i++){
  \jsend
      \=wire("VC_"+vc+"_",GIU_Granule_separator_interfaces["push_"+i+"_"],[])=\
  \jsbegin
  }
  \jsend
        \=u.nInstance({
            instanceName: prefix+'GIU_Granule_separator',
            moduleName: 'GIU_Granule_separator',
            params: GIU_Granule_separator_parameters, 
            interfaceObj: {
                interfaces: GIU_Granule_separator_interfaces,
                prefixes: GIU_Granule_separator_prefix
            }
          })=\
  
  \jsbegin
        }
  \jsend






\jsbegin


for (var j=0;j<nVC;j++) {
      var prefix="VC_"+j+"_push_";
      var Fifo_depack_interface={};
      var Fifo_depack_prefix={};
      for (var i=0; i<NumberOfGranulePerBeat;i++){
        Fifo_depack_interface["push_"+i+"_"] ={
          "params": {
            "wData": GranuleSizeInBytes*8,
            },
          "name": "push_"+i+"_",
          "_SKIP_": false,
          "interface": "InterfaceGenRdyVld",
          "direction": "slave",
          "blkClkGateOn": true
        };
        Fifo_depack_prefix["push_"+i+"_"] ={name : prefix+i+"_"};
      }
      Fifo_depack_interface["clkInt"] = m.deepCopy(p.interfaces ["clkInt"]);
      Fifo_depack_interface["clkInt"].name = "";
      Fifo_depack_prefix["clkInt"] ={name: p.interfaces ["clkInt"].name};
      Fifo_depack_interface["pop_"] ={
        "params": {
          "wData": MessageSizeInGranule[j]*8*GranuleSizeInBytes,
          },
        "name": "pop_",
        "_SKIP_": false,
        "interface": "InterfaceGenRdyVld",
        "direction": "master",
        "blkClkGateOn": true
      };
      Fifo_depack_prefix["pop_"] ={name:p.interfaces["VC_"+j].name};


      var Fifo_depack_parameters ={interfaces : Fifo_depack_interface,
                                  NumberOfGranulePerBeat  : NumberOfGranulePerBeat,
                                  GranuleSizeInBytes : GranuleSizeInBytes,
                                  MessageSizeinG :MessageSizeInGranule[j],
                                  size : MessageSizeInGranule[j] * NumberOfCredit[j]
}

\jsend
\jsbegin
for (var i=0; i<NumberOfGranulePerBeat;i++){
\jsend
\=wire("VC_"+j+"_",Fifo_depack_interface["push_"+i+"_"],["valid","data"] )=\
\jsbegin
}
\jsend
      \=u.nInstance({
          instanceName: prefix+'Fifo_depack',
          moduleName: 'Fifo_depack',
          params: Fifo_depack_parameters, 
          interfaceObj: {
              interfaces: Fifo_depack_interface,
              prefixes: Fifo_depack_prefix
          }
        })=\


\jsbegin
      }
\jsend

\jsbegin
for (var vc = 0; vc < p.vc_descriptor["nVC"]; vc++){
\jsend
  assign \=p.interfaces["credit_return_VC_"+vc].name=\valid = \=p.interfaces["VC_"+vc].name=\valid & \=p.interfaces["VC_"+vc].name=\ready;
  assign \=p.interfaces["credit_return_VC_"+vc].name=\data = \=p.packet_descriptor.CreditReturnBits[vc]["values"][2]=\'d1;
\jsbegin
}
\jsend

assign fifo_depack_in_active = 1'b0 
                              \jsbegin
                              for (var i=0; i<NumberOfGranulePerBeat;i++){
                                for (var j=0;j<nVC;j++) {
                              \jsend
                            | VC_\=j=\_push_\=i=\_valid
                            \jsbegin
                                }
                              }
                            \jsend
                            ;

                            
assign fifo_depack_out_active = VC_0_from_deframer_valid 
                              \jsbegin
                                for (var j=1;j<nVC;j++) {
                              \jsend
                            | VC_\=j=\_from_deframer_valid
                            \jsbegin
                                }
                            \jsend
                            ;
assign \=p.interfaces["active"].name=\active = fifo_depack_out_active | 
                                  fifo_depack_in_active |
                                  cxs_out_deframer_in_valid;
endmodule
