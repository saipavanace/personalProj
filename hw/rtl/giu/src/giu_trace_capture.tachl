\jsbegin
var m = obj.userLib;;
var u=obj.lib;
var p =u.getParam();
u.setAttribute("csr", p.csr);


var newToOldStyleInterface	=m.newToOldStyleInterface.bind( null, m);
var utilFunctions   = m.lib_utils;

u.nInterfaces(p.interfaces);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);


\jsbegin


  var nNonDataNetworks =0;
  var nDataNetworks = 0;
var SMI_TX_INTF = [];
var SMI_TX_INTF_DIRECTION = [];
var SMI_RX_INTF = [];
var SMI_RX_INTF_DIRECTION = [];
for(var i = 0; i< p.interfaces["smiTxInt"].length; i++) {
    SMI_TX_INTF.push(newToOldStyleInterface(p.interfaces["smiTxInt"][i]));
};
for(var i = 0; i < p.interfaces["smiRxInt"].length; i++) {
  SMI_TX_INTF.push(newToOldStyleInterface(p.interfaces["smiRxInt"][i]));
};


var SMI_TX_INTF = [];
var SMI_RX_INTF = [];
var SMI_TX_INTF_DIRECTION = [];
var SMI_RX_INTF_DIRECTION = [];
var smiTxPortParams = p.unit.SmiPortMsgMap.tx;
var smiRxPortParams = p.unit.SmiPortMsgMap.rx;

for(var i = 0; i< smiTxPortParams.length; i++) {
    SMI_TX_INTF.push(m.smiPortGen(obj, smiTxPortParams[i], p.interfaces.smiTxInt[i].params, 'tx'));
    SMI_TX_INTF_DIRECTION.push(p.interfaces.smiTxInt[i].direction);
};
for(var i = 0; i < smiRxPortParams.length; i++) {
    SMI_RX_INTF.push(m.smiPortGen(obj, smiRxPortParams[i], p.interfaces.smiRxInt[i].params, 'rx'));
    SMI_RX_INTF_DIRECTION.push(p.interfaces.smiRxInt[i].direction);
 };

//for(var i = 0; i< smiTxPortParams.length; i++) {
// SMI_TX_INTF.push(m.smiPortGen(obj, smiTxPortParams[i], p.interfaces.smiTxInt[i].params, 'tx'));
// SMI_TX_INTF_DIRECTION.push(p.interfaces.smiTxInt[i].direction);
//;
//for(var i = 0; i < smiTxPortParams.length; i++) {
// SMI_TX_INTF.push(m.smiPortGen(obj, smiTxPortParams[i], p.interfaces.smiTxInt[i].params, 'rx'));
// SMI_TX_INTF_DIRECTION.push(p.interfaces.smiTxInt[i].direction);
//;
//
var TRACE_CAPTURE_INTF = [];
 for (var i=0; i<SMI_TX_INTF.length; i++) {
   TRACE_CAPTURE_INTF.push({
                              modulePrefix: SMI_TX_INTF[i].name, 
                              localPrefix: SMI_TX_INTF[i].name, 
                              interface: SMI_TX_INTF[i].signals
   });

if(SMI_TX_INTF[i].params.dpPresent) {
  nDataNetworks++;
   TRACE_CAPTURE_INTF.push({
                           modulePrefix: SMI_TX_INTF[i].name, 
                           localPrefix: SMI_TX_INTF[i].name, 
                           interface: SMI_TX_INTF[i].dpSignals,
                           exclude: ['dp_ready']
   });
  } else {
    nNonDataNetworks++;
  }

   };

for (var i=0; i<SMI_RX_INTF.length; i++){
 TRACE_CAPTURE_INTF.push({
                            modulePrefix: SMI_RX_INTF[i].name, 
                            localPrefix: SMI_RX_INTF[i].name, 
                            interface: SMI_RX_INTF[i].signals
 });

if (SMI_RX_INTF[i].params.dpPresent) {

 TRACE_CAPTURE_INTF.push({
                         modulePrefix: SMI_RX_INTF[i].name, 
                         localPrefix: SMI_RX_INTF[i].name, 
                         interface: SMI_RX_INTF[i].dpSignals,
                         exclude: ['dp_ready']
 });
 }
}

var dtwdbgreq= {
  "enablePipe": 0,
  "pipeDepth": 0,
  "dpPresent": 1,
  "wNdpBits": p.system.concertocrequestmessagefields.wDTWDBGNdp,
  "wDpBits": p.interfaces["smitxout"].params["wSmiDPdata"],
  "protection": p.system.safetyConfiguration["resiliencyProtectionType"],
  "dpProtection": p.system.safetyConfiguration["resiliencyProtectionType"]
};

var dtwdbgrsp= {
  "enablePipe": 0,
  "pipeDepth": 0,
  "dpPresent": 0,
  "wNdpBits": p.system.concertocresponsemessagefields.wDTWDBGrspNdp,
  "wDpBits": 0,
  "protection": p.system.safetyConfiguration["resiliencyProtectionType"],
  "dpProtection": p.system.safetyConfiguration["resiliencyProtectionType"]
};

p.concParams.dtwDbgReqParams["wData"] = p.interfaces["smiRxInt"][3].params["wSmiDPdata"];
p.concParams.dtwDbgReqParams["wBE"] = p.concParams.dtwDbgReqParams["wData"]/8;
p.concParams.dtwDbgReqParams["wDBad"] = p.concParams.dtwDbgReqParams["wData"]/64;
p.concParams.dtwDbgReqParams["wDwId"] = p.concParams.dtwDbgReqParams["wData"]/64*3;
var DTWDBG_REQ = m.concMsgGen(obj, 'dtw_dbg_req_', 'ConcMsgBodyDTWDBGReq', p.concParams.hdrParams, p.concParams.dtwDbgReqParams, dtwdbgreq, 'tx');
var DTWDBG_RSP    = m.concMsgGen(obj, 'dtw_dbg_rsp_',    'ConcMsgBodyDTWDBGRsp',   p.concParams.hdrParams, p.concParams.dtwDbgRspParams,   dtwdbgrsp, 'rx');

var CONC_INTF={}
CONC_INTF['DTWDBGReqInterface']  = DTWDBG_REQ;
CONC_INTF['DTWDBGRespInterface']   = DTWDBG_RSP;

TRACE_CAPTURE_INTF.push({
  modulePrefix: "",
  localPrefix: p.interfaces.clkInt.name,
  interface: newToOldStyleInterface(p.interfaces.clkInt).signals
});

TRACE_CAPTURE_INTF.push({
  modulePrefix: 'dtw_req_',
  localPrefix: 'dtw_req_',
  interface: CONC_INTF['DTWDBGReqInterface'].signals
});

TRACE_CAPTURE_INTF.push({
  modulePrefix: 'dtw_resp_',
  localPrefix: 'dtw_dbg_rsp_',
  interface: CONC_INTF['DTWDBGRespInterface'].signals
});
TRACE_CAPTURE_INTF.push({
  modulePrefix: 'csr_trace_',
  localPrefix: "GIU",
  interface: p.traceCsrIfGenerator.signalBundle("slave")
});

var trace_capture_intf_param ={};

trace_capture_intf_param['clkInt'] = {
  name: '',
  params: {},
  direction: 'slave',
  interface: 'InterfaceCLK'
};
\jsend


\=m.bundleFunctions.wiresFromInterface("dtw_req_",DTWDBG_REQ.signals,[],u.bundle)=\
\=m.bundleFunctions.wiresFromInterface("dtw_dbg_rsp_",DTWDBG_RSP.signals,[],u.bundle)=\
wire [3:0] pm_trace_messages_captured, pm_trace_messages_dropped;
wire trace_capture_busy;
\=u.instance({
  instanceName: 'trace_capture',
  moduleName: 'trace_capture',
  params: {
      assertOn: p.system.AssertionEnable,
      smiRxPortInterfaces : SMI_RX_INTF,
      smiTxPortInterfaces: SMI_TX_INTF,
      nNDN: nNonDataNetworks,
      nDN: nDataNetworks,
      nUnitTraceBufSize: p.unit.nUnitTraceBufSize,
      wForceAccumTimeout: 10,
      DTWReqInterface: CONC_INTF['DTWDBGReqInterface'].signals,
      DTWRespInterface: CONC_INTF['DTWDBGRespInterface'].signals,
      traceRegInterface: {"name": 'csr_trace_', "signals":p.traceCsrIfGenerator.signalBundle("slave")},
      wFUnitId: p.system.wFUnitId+p.system.wChipletId+p.system.wLinkId,
      wFPortId: p.system.wFPortId,
      cmType: p.cmType,
      interfaces: trace_capture_intf_param
  },
  verilogParams: {},
  ports: {
      MyId:               "{"+p.system.wLinkId+"'d0,"+p.interfaces["uChipletIdInt"].name+"my_chiplet_id"+","+p.interfaces["uIdInt"][0].name+'my_f_unit_id}',
      TargId:             "{"+p.system.wLinkId+"'d0,"+p.interfaces["uChipletIdInt"].name+"my_chiplet_id"+","+p.interfaces["uSysDveIdInt"].name+'f_unit_id}',
      pm_trace_messages_captured: 'pm_trace_messages_captured',
      pm_trace_messages_dropped: 'pm_trace_messages_dropped',
      trace_capture_busy: 'trace_capture_busy'
         },
  interfaces: TRACE_CAPTURE_INTF,
  portsDelimiter: '\n        '
})=\




assign \=p.interfaces["smitxout"].name=\ndp_targ_id = dtw_req_target_id;
assign \=p.interfaces["smitxout"].name=\ndp_src_id = dtw_req_initiator_id;
assign \=p.interfaces["smitxout"].name=\ndp_msg_id = dtw_req_message_id;
assign \=p.interfaces["smitxout"].name=\ndp_msg_type = dtw_req_cm_type;
assign \=p.interfaces["smitxout"].name=\ndp_dp_present = 1'b1;
assign \=p.interfaces["smitxout"].name=\ndp_ndp_len = \=p.interfaces["smitxout"].params["wSmiNDPLen"]=\'d\=p.system.concertocrequestmessagefields["wDTWDBGNdp"]=\;
assign \=p.interfaces["smitxout"].name=\ndp_msg_pri = dtw_req_priority;
assign dtw_req_ready = \=p.interfaces["smitxout"].name=\ndp_msg_ready & \=p.interfaces["smitxout"].name=\dp_ready;
assign  \=p.interfaces["smitxout"].name=\ndp_msg_valid = dtw_req_valid ;
\jsbegin
var ndpSignalKeys = DTWDBG_REQ.order.filter(key => (DTWDBG_REQ.signals[key] != 0 & key != "data"));
\jsend
assign \=p.interfaces["smitxout"].name=\ndp_ndp = {\=p.interfaces["smitxout"].params["wSmiNDP"] - p.system.concertocrequestmessagefields["wDTWDBGNdp"]=\'d0 ,
                                                  \jsbegin
                                                  for (var i=0; i< ndpSignalKeys.length-1 ; i++){
                                                    \jsend
                                                    dtw_req_\=ndpSignalKeys[i]=\,
                                                  \jsbegin
                                                  }
                                                \jsend
                                                  dtw_req_\=ndpSignalKeys[ndpSignalKeys.length-1]=\
                                                  };

assign \=p.interfaces["smitxout"].name=\dp_user = {
                                                    \jsbegin
                                                    for (var i=0; i< DTWDBG_REQ.dpOrder.length-1 ; i++){
                                                      \jsend
                                                      dtw_req_\=DTWDBG_REQ.dpOrder[i]=\,
                                                    \jsbegin
                                                    }
                                                  \jsend
                                                    dtw_req_\=DTWDBG_REQ.dpOrder[DTWDBG_REQ.dpOrder.length-1]=\
                                                    };
assign \=p.interfaces["smitxout"].name=\dp_data = dtw_req_data;
assign \=p.interfaces["smitxout"].name=\dp_valid = dtw_req_valid;
assign \=p.interfaces["smitxout"].name=\dp_last = dtw_req_last;




assign dtw_dbg_rsp_target_id = \=p.interfaces["smirx_trace"].name=\ndp_targ_id ;
assign dtw_dbg_rsp_initiator_id = \=p.interfaces["smirx_trace"].name=\ndp_src_id ;
assign dtw_dbg_rsp_message_id = \=p.interfaces["smirx_trace"].name=\ndp_msg_id ;
assign dtw_dbg_rsp_cm_type = \=p.interfaces["smirx_trace"].name=\ndp_msg_type;
assign dtw_dbg_rsp_priority = \=p.interfaces["smirx_trace"].name=\ndp_msg_pri ;
assign \=p.interfaces["smirx_trace"].name=\ndp_msg_ready = dtw_dbg_rsp_ready ;
assign dtw_dbg_rsp_valid  = \=p.interfaces["smirx_trace"].name=\ndp_msg_valid  ;

assign {
                                                  \jsbegin
                                                  for (var i=0; i< DTWDBG_RSP.order.length-1 ; i++){
                                                    \jsend
                                                    dtw_dbg_rsp_\=DTWDBG_RSP.order[i]=\,
                                                  \jsbegin
                                                  }
                                                \jsend
                                                dtw_dbg_rsp_\=DTWDBG_RSP.order[DTWDBG_RSP.order.length-1]=\
                                                  }  = \=p.interfaces["smirx_trace"].name=\ndp_ndp;


endmodule