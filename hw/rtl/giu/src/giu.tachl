\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
//GIU
// Author: Benjamin Madon
//=============================================================================


var m = obj.userLib;
var u=obj.lib;
var p =u.getParam();
u.setAttribute("csr", p.csr);

var newToOldStyleInterface	=m.newToOldStyleInterface.bind( null, m);
var utilFunctions   = m.lib_utils;

function wire(prefix,NewInterface,exclude){
  return m.bundleFunctions.wiresFromInterface(prefix+NewInterface.name,        newToOldStyleInterface(NewInterface).signals,       exclude,  u.bundle)
}

function suffix (simplejson,suffix){
  var suffixedJson={};
for (var key in Object.keys(simplejson)){
  suffixedJson[Object.keys(simplejson)[key]+suffix]=simplejson[Object.keys(simplejson)[key]];
}
return suffixedJson;
}

var Generic_interfaces = {
  InterfaceGenRdyVld : { "params": {},
"_SKIP_": false,
"interface": "InterfaceGenRdyVld",
"blkClkGateOn": true
},
InterfaceGenVld :{ "params" : {},
"_SKIP_": false,
"interface": "InterfaceGenVld",
"blkClkGateOn": true},
InterfaceGenData :{ "params" : {},
"_SKIP_": false,
"interface": "InterfaceGenData",
"blkClkGateOn": true},
Generic_interface  : { "params": {},
"_SKIP_": false,
"interface": "InterfaceGeneric",
"blkClkGateOn": true
}
};

var InterfaceGPRAR = {  "direction" : "slave" ,   
                        "_SKIP_": false,
                        "interface": "InterfaceGPRAR",
                        "blkClkGateOn": true};

var InterfaceBRAR = { "direction" : "slave" , 
                      "_SKIP_": false,
                      "interface": "InterfaceBRAR",
                      "blkClkGateOn": true};

var InterfaceMIG = { "direction" : "slave" , 
                      "params" : p.InterleaveInfo,
                     "_SKIP_": false,
                     "interface": "InterfaceMIG",
                     "blkClkGateOn": true};

var InterfaceAMIGR = { "direction" : "slave" , 
                      "_SKIP_": false,
                      "interface": "InterfaceAMIGR",
                      "blkClkGateOn": true};

var InterfaceGPRBHR = { "direction" : "slave" , 
                        "_SKIP_": false,
                        "interface": "InterfaceGPRBHR",
                        "blkClkGateOn": true};

var InterfaceGPRBLR = { "direction" : "slave" , 
                          "_SKIP_": false,
                          "interface": "InterfaceGPRBLR",
                          "blkClkGateOn": true};

var InterfaceNRS = {"direction" : "slave" , 
                          "_SKIP_": false,
                          "interface": "InterfaceNRS",
                          "blkClkGateOn": true};

var InterfaceFUIDR = {"direction" : "slave" , 
                            "_SKIP_": false,
                            "interface": "InterfaceFUIDR",
                            "blkClkGateOn": true};

var InterfaceCXSLR = {"direction" : "slave" , 
                              "_SKIP_": false,
                              "interface": "InterfaceCXSLR",
                              "blkClkGateOn": true};

const traceRegisters		    =m.genTraceCaptureRegisters(p.csr.spaceBlock[0].registers, "GIU");
const traceCsrIfGenerator   	= m.createCSRInterfaceGenerator( traceRegisters );

var csr_interfaces={};
for (var register=0; register < p.csr.spaceBlock[0].registers.length ; register++){
csr_interfaces[p.csr.spaceBlock[0].registers[register].name] =m.createCSRInterfaceGenerator([p.csr.spaceBlock[0].registers[register]]);
}
var test0 = csr_interfaces["GIUGPRAR0"].interfaceGeneric();
test0.direction = "master"
var test1 = csr_interfaces["GIUGPRBLR1"].interfaceGeneric();
test1.direction="slave"
var csr_interface = traceCsrIfGenerator.interfaceGeneric();

u.nInterfaces(p.interfaces);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);
\jsbegin
for (var reg=0; reg< p.system["nGPWindows"]; reg++){
\jsend
\=m.wiresFromSyn("",csr_interfaces["GIUGPRAR"+reg].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("",csr_interfaces["GIUGPRBHR"+reg].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("",csr_interfaces["GIUGPRBLR"+reg].synonymsGeneric(),u.bundle)=\
\jsbegin
}
\jsend
\=m.wiresFromSyn("",  csr_interfaces["GIUBRAR"].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("", csr_interfaces["DMIAMIGR"].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("", csr_interfaces["DMIMIFSR"].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("",csr_interfaces["GIUNRSBHR"].synonymsGeneric(),u.bundle)=\
wire GIUNRSBHR_sw_wr;
\=m.wiresFromSyn("",csr_interfaces["GIUNRSBLR"].synonymsGeneric(),u.bundle)=\
wire GIUNRSBLR_sw_rd;
\=m.wiresFromSyn("", csr_interfaces["GIUBRBLR"].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("", csr_interfaces["GIUBRBHR"].synonymsGeneric(),u.bundle)=\

\=m.wiresFromSyn("",csr_interfaces["GIUNRSBAR"].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("",csr_interfaces["GIUUFUIDR"].synonymsGeneric(),u.bundle)=\

\=m.wiresFromSyn("",csr_interfaces["GIUUIDR"].synonymsGeneric(),u.bundle)=\
\=m.wiresFromSyn("", csr_interfaces["GIUCXSLR"].synonymsGeneric(),u.bundle)=\
\=m.bundleFunctions.wiresFromInterface("GIU",traceCsrIfGenerator.signalBundle(),[],u.bundle)=\

\jsbegin 
for (var i=0; i< p.unit.nPerfCounters;i++){
\jsend
  \=m.wiresFromSyn("", csr_interfaces["GIUCNTCR"+i].synonymsGeneric(),u.bundle)=\
  \=m.wiresFromSyn("", csr_interfaces["GIUCNTVR"+i].synonymsGeneric(),u.bundle)=\
  \=m.wiresFromSyn("", csr_interfaces["GIUCNTSR"+i].synonymsGeneric(),u.bundle)=\
  \=m.wiresFromSyn("", csr_interfaces["GIUBCNTFR"+i].synonymsGeneric(),u.bundle)=\
  \=m.wiresFromSyn("", csr_interfaces["GIUBCNTMR"+i].synonymsGeneric(),u.bundle)=\

\jsbegin
}
\jsend

  \=m.wiresFromSyn("", csr_interfaces["GIUMCNTCR"].synonymsGeneric(),u.bundle)=\

  \=m.wiresFromSyn("", csr_interfaces["GIULDSR"].synonymsGeneric(),u.bundle)=\
  \=m.wiresFromSyn("", csr_interfaces["GIULCSTR"].synonymsGeneric(),u.bundle)=\
\jsbegin
for (var i=0;i<16;i++){
\jsend
      \=m.wiresFromSyn("", csr_interfaces["GIULDMSR"+i].synonymsGeneric(),u.bundle)=\
\jsbegin
}
\jsend

wire loop_out_cxs_in_valid ;
wire cxs_out_loop_in_valid ;
wire loop_out_cxs_in_ready ;
wire cxs_out_loop_in_ready ;
wire [511:0] loop_out_cxs_in_data;
wire [511:0] cxs_out_loop_in_data;

\jsbegin


var GIU_unit_interfaces = {}
GIU_unit_interfaces["cxsRxInt"]  = p.interfaces["cxsRxInt"];
GIU_unit_interfaces["cxsTxInt"]  = p.interfaces["cxsTxInt"];
GIU_unit_interfaces["clkInt"]  = m.deepCopy(p.interfaces["clkInt"]);
GIU_unit_interfaces["smiTxInt"]  = p.interfaces ["smiTxInt"];
GIU_unit_interfaces["smiRxInt"]  = p.interfaces ["smiRxInt"];
GIU_unit_interfaces["uChipletIdInt"]  = p.interfaces ["uChipletIdInt"];


GIU_unit_interfaces["loop_out_cxs_in_"] = { "params": {"wData":512},
                                                                "_SKIP_": false,
                                                                "interface": "InterfaceGenRdyVld",
                                                                "blkClkGateOn": true,
                                                                "name" : "loop_out_cxs_in_",
                                                                "direction" : "slave"
                                                                };

GIU_unit_interfaces["cxs_out_loop_in_"] = { "params": {"wData":512},
                                                                "_SKIP_": false,
                                                                "interface": "InterfaceGenRdyVld",
                                                                "blkClkGateOn": true,
                                                                "name" : "cxs_out_loop_in_",
                                                                "direction" : "master"
                                                                };
GIU_unit_interfaces["GIULCSTR"] = csr_interfaces["GIULCSTR"].interfaceGeneric();
GIU_unit_interfaces["GIULCSTR"].direction = "slave";
GIU_unit_interfaces["GIULCSTR"].synonyms.out = [{ name: 'GIULCSTR_LoopBackEn_out', width: 1 },{ name: 'GIULCSTR_NearLoopEn_out', width: 1 },{ name: 'GIULCSTR_FarLoopEn_out', width: 1 }];
GIU_unit_interfaces["GIULCSTR"].synonyms.in = [];


for (var reg=0; reg< p.system["nGPWindows"]; reg++){
  GIU_unit_interfaces["GIUGPRAR"+reg ] = csr_interfaces["GIUGPRAR"+reg].interfaceGeneric();
  GIU_unit_interfaces["GIUGPRAR"+reg ].direction = "master";
  GIU_unit_interfaces["GIUGPRBHR"+reg] = csr_interfaces["GIUGPRBHR"+reg].interfaceGeneric();
  GIU_unit_interfaces["GIUGPRBHR"+reg].direction = "master";
  GIU_unit_interfaces["GIUGPRBLR"+reg] = csr_interfaces["GIUGPRBLR"+reg].interfaceGeneric();
  GIU_unit_interfaces["GIUGPRBLR"+reg].direction = "master";
}


GIU_unit_interfaces["GIUBRAR"] = csr_interfaces["GIUBRAR"].interfaceGeneric();
GIU_unit_interfaces["GIUBRAR"].direction = "master";

GIU_unit_interfaces["DMIAMIGR"] = csr_interfaces["DMIAMIGR"].interfaceGeneric();
GIU_unit_interfaces["DMIAMIGR"].direction = "master";

GIU_unit_interfaces["DMIMIFSR"] = csr_interfaces["DMIMIFSR"].interfaceGeneric();
GIU_unit_interfaces["DMIMIFSR"].direction = "master";

GIU_unit_interfaces["GIUNRSBHR"] = m.deepCopy(csr_interfaces["GIUNRSBHR"].interfaceGeneric());
GIU_unit_interfaces["GIUNRSBHR"].synonyms.out=[]
GIU_unit_interfaces["GIUNRSBHR"].direction = "master";

GIU_unit_interfaces["GIUNRSBLR"] = m.deepCopy(csr_interfaces["GIUNRSBLR"].interfaceGeneric());
GIU_unit_interfaces["GIUNRSBLR"].synonyms.out=[]
GIU_unit_interfaces["GIUNRSBLR"].direction = "master";

GIU_unit_interfaces["GIUBRBLR"] = csr_interfaces["GIUBRBLR"].interfaceGeneric();
GIU_unit_interfaces["GIUBRBLR"].direction = "master";

GIU_unit_interfaces["GIUBRBHR"] = csr_interfaces["GIUBRBHR"].interfaceGeneric();
GIU_unit_interfaces["GIUBRBHR"].direction = "master";


GIU_unit_interfaces["GIUNRSBAR"] = m.deepCopy(csr_interfaces["GIUNRSBAR"].interfaceGeneric());
GIU_unit_interfaces["GIUNRSBAR"].synonyms.out=[]
GIU_unit_interfaces["GIUNRSBAR"].direction = "master";

GIU_unit_interfaces["GIUUFUIDR"] = m.deepCopy(csr_interfaces["GIUUFUIDR"].interfaceGeneric());
GIU_unit_interfaces["GIUUFUIDR"].synonyms.out=[]
GIU_unit_interfaces["GIUUFUIDR"].direction = "master";

GIU_unit_interfaces["GIUCXSLR"] = csr_interfaces["GIUCXSLR"].interfaceGeneric();
GIU_unit_interfaces["GIUCXSLR"].direction = "master";


var smi_tx_trace_ = m.deepCopy(p.interfaces["smiTxInt"][3]);
smi_tx_trace_["name"] ="smi_tx_trace_";
smi_tx_trace_.direction = "slave"
GIU_unit_interfaces["smi_tx_trace_"]=smi_tx_trace_;


var giu_smi_rx2_demux_interfaces = {};
var smirx= m.deepCopy(p.interfaces["smiRxInt"]);

for (var smi in smirx){
  if (smirx[smi].name == "smi_rx2_"){
      var smirx_trace = m.deepCopy(smirx[smi]);
      smirx_trace["direction"] ="master";
      smirx_trace.name ="smi_rx2_demux_trace_";
      GIU_unit_interfaces["smirx_trace"] = smirx_trace;
  }
}


GIU_unit_interfaces["uSysDmiIdInt"] = p.interfaces["uSysDmiIdInt"];
GIU_unit_interfaces["uSysDiiIdInt"] = p.interfaces["uSysDiiIdInt"];
GIU_unit_interfaces["uSysDceIdInt"] = p.interfaces["uSysDceIdInt"];
GIU_unit_interfaces["uIdInt"] = p.interfaces["uIdInt"];
var GIU_unit_parameters ={};
GIU_unit_parameters["interfaces"] = GIU_unit_interfaces;
GIU_unit_parameters["packet_descriptor"] = p.unit.packet_descriptor;
GIU_unit_parameters["vc_descriptor"] = p.unit.vc_descriptor;
GIU_unit_parameters["Generic_interfaces"] = Generic_interfaces;
GIU_unit_parameters["system"] = p.system;
GIU_unit_parameters["concParams"] = p.concParams;
GIU_unit_parameters["CsrInfo"] = p.CsrInfo;
GIU_unit_parameters["InterleaveInfo"] = p.InterleaveInfo;
GIU_unit_parameters["cmType"] = p.cmType;
GIU_unit_parameters["csr_interfaces"]=csr_interfaces;
\jsend
\=wire("",smirx_trace,[])=\

\=m.bundleFunctions.wiresFromInterface(smi_tx_trace_.name+"dp_",        newToOldStyleInterface(smi_tx_trace_).signals.dp_,       [],  u.bundle)=\

\=m.bundleFunctions.wiresFromInterface(smi_tx_trace_.name+"ndp_",        newToOldStyleInterface(smi_tx_trace_).signals.ndp_,   []    ,  u.bundle)=\

\=u.nInstance({
    instanceName: 'giu_unit',
    moduleName: 'giu_unit',
    params: GIU_unit_parameters, 
    interfaceObj: {
        interfaces: GIU_unit_interfaces,
        prefixes: GIU_unit_interfaces
    }
  })=\



\jsbegin

///////////////////////////////////////////////////////////////////////////
//Instanciation of loopback controller
///////////////////////////////////////////////////////////////////////////

var giu_cxs_loopback_controller_interfaces ={};


giu_cxs_loopback_controller_interfaces["loop_out_cxs_in_"] = { "params": {"wData":512},
                                                                "_SKIP_": false,
                                                                "interface": "InterfaceGenRdyVld",
                                                                "blkClkGateOn": true,
                                                                "name" : "loop_out_cxs_in_",
                                                                "direction" : "master"
                                                                };

giu_cxs_loopback_controller_interfaces["cxs_out_loop_in_"] = { "params": {"wData":512},
                                                                "_SKIP_": false,
                                                                "interface": "InterfaceGenRdyVld",
                                                                "blkClkGateOn": true,
                                                                "name" : "cxs_out_loop_in_",
                                                                "direction" : "slave"
                                                                };


giu_cxs_loopback_controller_interfaces["GIULCSTR"] = csr_interfaces["GIULCSTR"].interfaceGeneric();
giu_cxs_loopback_controller_interfaces["GIULCSTR"].direction = "master";

giu_cxs_loopback_controller_interfaces["GIULDSR"] = csr_interfaces["GIULDSR"].interfaceGeneric();
giu_cxs_loopback_controller_interfaces["GIULDSR"].direction = "master";


for (var i=0;i<16;i++){
giu_cxs_loopback_controller_interfaces["GIULDMSR"+i] = csr_interfaces["GIULDMSR"+i].interfaceGeneric();
giu_cxs_loopback_controller_interfaces["GIULDMSR"+i].direction = "master";
}


giu_cxs_loopback_controller_interfaces["clkInt"]  = m.deepCopy(p.interfaces["clkInt"]);
giu_cxs_loopback_controller_interfaces["clkInt"].params["wTestEn"]=0;

var giu_cxs_loopback_controller_parameters={};
giu_cxs_loopback_controller_parameters["interfaces"] = giu_cxs_loopback_controller_interfaces;
giu_cxs_loopback_controller_parameters["assertOn"] = p.system.AssertionEnable;
\jsend

\=u.nInstance({
    instanceName: 'giu_cxs_loopback_controller',
    moduleName: 'giu_cxs_loopback_controller',
    params: giu_cxs_loopback_controller_parameters, 
    interfaceObj: {
        interfaces: giu_cxs_loopback_controller_interfaces,
        prefixes: giu_cxs_loopback_controller_interfaces
    }
  })=\




\jsbegin
///////////////////////////////////////////////////////////////////////////
//Instanciation of the dup unit if duplication is enabled.
///////////////////////////////////////////////////////////////////////////
if (p.system.safetyConfiguration.duplicationEnabled){
var GIU_dup_unit_interfaces = m.deepCopy(GIU_unit_interfaces);
for (interface in GIU_dup_unit_interfaces){
  if(Array.isArray(GIU_dup_unit_interfaces[interface])){
    for (var i=0; i<GIU_dup_unit_interfaces[interface].length;i++){
      GIU_dup_unit_interfaces[interface][i].name = "dup_unit_"+GIU_unit_interfaces[interface][i].name;
      \jsend
      \=wire("",GIU_dup_unit_interfaces[interface][i],[])=\
      \jsbegin
    }
  } else {
  GIU_dup_unit_interfaces[interface].name = "dup_unit_"+GIU_unit_interfaces[interface].name;
  \jsend
  \=wire("",GIU_dup_unit_interfaces[interface],[])=\
  \jsbegin
  }
}
\jsend

\=u.nInstance({
  instanceName: 'giu_dup_unit',
  moduleName: 'giu_unit',
  params: GIU_unit_parameters, 
  interfaceObj: {
      interfaces: GIU_unit_interfaces,
      prefixes: GIU_dup_unit_interfaces
  }
})=\


  \jsbegin
var delayInterfaceBundle = {};
var checkerInterfaceBundle = {};

for (var interface in GIU_unit_interfaces){

  if(Array.isArray(GIU_unit_interfaces[interface])){
    for (var i=0; i<GIU_unit_interfaces[interface].length;i++){
      var intname = GIU_unit_interfaces[interface][i].name;
      var bundle = newToOldStyleInterface(GIU_unit_interfaces[interface][i]).signals
      for (var signal in bundle) {
        if ((typeof signal) == 'number'){
          if (bundle[signal]>0) {
            delayInterfaceBundle[intname+signal]=bundle[signal];
          } else if (bundle[signal]<0){
            checkerInterfaceBundle[intname+signal]= -bundle[signal];  
          }
        } else {
          for(var actualsig in bundle[signal]){
            if (bundle[signal][actualsig]>0) {
              delayInterfaceBundle[intname+signal+actualsig]=bundle[signal][actualsig];
            } else if (bundle[signal][actualsig]<0){
              checkerInterfaceBundle[intname+signal+actualsig]= -bundle[signal][actualsig];  
            }
          }
        }
      }


    }
  } else {
    var intname = GIU_unit_interfaces[interface].name;
    var bundle = newToOldStyleInterface(GIU_unit_interfaces[interface]).signals
    if ((typeof signal) == 'number'){
      if (bundle[signal]>0) {
        delayInterfaceBundle[intname+signal]=bundle[signal];
      } else if (bundle[signal]<0){
        checkerInterfaceBundle[intname+signal]= -bundle[signal];  
      }
    } else {
      for(var actualsig in bundle[signal]){
        if (bundle[signal][actualsig]>0) {
          delayInterfaceBundle[intname+signal+actualsig]=bundle[signal][actualsig];
        } else if (bundle[signal][actualsig]<0){
          checkerInterfaceBundle[intname+signal+actualsig]= -bundle[signal][actualsig];  
        }
      }
    }
  }
}
var delayInterfaces = [];

delayInterfaces.push({
        modulePrefix: '',
        localPrefix: newToOldStyleInterface(p.interfaces["clkInt"]).name,
        interface: newToOldStyleInterface(p.interfaces["clkInt"]).sgnals
});

delayInterfaces.push({
        modulePrefix: 'in_',
        localPrefix: '',
        interface: delayInterfaceBundle
});

delayInterfaces.push({
        modulePrefix: 'out_',
        localPrefix: 'dup_unit_',
        interface: delayInterfaceBundle
});

var checkerInterfaces = [];

checkerInterfaces.push({
        modulePrefix: '',
        localPrefix: newToOldStyleInterface(p.interfaces["clkInt"]).name,
        interface: newToOldStyleInterface(p.interfaces["clkInt"]).sgnals
});

checkerInterfaces.push({
        modulePrefix: 'func_',
        localPrefix: '',
        interface: checkerInterfaceBundle
});

checkerInterfaces.push({
        modulePrefix: 'check_',
        localPrefix: 'dup_unit_',
        interface: checkerInterfaceBundle
});

var checker_delay_ports = {reset_n_delay : "reset_n_delay"};

var checkerPorts = {reset_n_delay : "reset_n_delay"};

for(var reg=0; reg < p.csr.spaceBlock[0].registers.length; reg++) { 
  var reg_name = p.csr.spaceBlock[0].registers[reg].name ;
  for(var field=0; field < p.csr.spaceBlock[0].registers[reg].fields.length ; field++) {
      var entry = p.csr.spaceBlock[0].registers[reg].fields[field];
          if(reg_name == "GIUUCRTR" && entry.name == "ResThreshold") {
              var wResThreshold = entry.bitWidth;
          }
    }
}

if ( wResThreshold == undefined ) { 
var wResThreshold = 0;
}
  \jsend

wire reset_n_delay;

  \=u.instance({
    instanceName   : 'giu_checker_delay',
    moduleName     : 'checker_delay',
    params         :  {
                         clkInterface    : newToOldStyleInterface(p.interfaces["clkInt"]),
                         delayInterface  : delayInterfaceBundle,
                         nDelay          : p.system.InterUnitDelay
                      },
    interfaces     : delayInterfaces,
    ports          : checker_delay_ports, 
    verilogParams  :  {},
    portsDelimiter : '\n    '
})=\




\=obj.lib.instance({
  instanceName   : 'giu_fault_checker',
  moduleName     : 'fault_checker',
  params         :  {
                       nDelay                 : p.system.InterUnitDelay,
                       wThresWidth            : wResThreshold,
                       clkInterface           : newToOldStyleInterface(p.interfaces["clkInt"]).signals,
                       enableUnitDuplication  : 1,
                       checkerInterface       : checkerInterfaceBundle,
                       numFaultInputs         : 0,
                       eSignalPipe            : 1	     
                    },
  verilogParams  :  {},
  interfaces     :  checkerInterfaces,
  ports          :  checkerPorts,
  portsDelimiter : '\n    '
})=\


\jsbegin


}
///////////////////////////////////////////////////////////////////////////
//Instanciation of the apb CSR
///////////////////////////////////////////////////////////////////////////
    var GIU_apb_csr_interfaces=[];

for (var reg=0; reg< p.system["nGPWindows"]; reg++){
  GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUGPRAR"+reg].signalBundle("master"),exclude : []});
  GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUGPRBLR"+reg].signalBundle("master"),exclude : []});
  GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUGPRBHR"+reg].signalBundle("master"),exclude : []});
}

GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUBRAR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["DMIAMIGR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["DMIMIFSR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUNRSBHR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUNRSBLR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :  {"GIUNRSBLR_sw_rd":-1,"GIUNRSBHR_sw_wr":-1},exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :  csr_interfaces["GIUUIDR"].signalBundle("master"),exclude: ["GIUUIDR_ConnectedChipletId_in","GIUUIDR_ConnectedChipletId_out","GIUUIDR_LinkId_in","GIUUIDR_LinkId_out"]});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUNRSBAR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUBRBLR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUBRBHR"].signalBundle("master"),exclude : []});


GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUUFUIDR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUCXSLR"].signalBundle("master"),exclude : []});

GIU_apb_csr_interfaces.push({modulePrefix: "GIU",localPrefix: "GIU",interface: traceCsrIfGenerator.signalBundle("master"),exclude : []});

for (var i=0; i< p.unit.nPerfCounters;i++){
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUCNTCR"+i].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUCNTVR"+i].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUCNTSR"+i].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUBCNTFR"+i].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUBCNTMR"+i].signalBundle("master"),exclude : []});
}
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIUMCNTCR"].signalBundle("master"),exclude : []});

GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIULDSR"].signalBundle("master"),exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIULCSTR"].signalBundle("master"),exclude : []});

for(var i=0;i<16;i++){
GIU_apb_csr_interfaces.push({modulePrefix: "", localPrefix : "", interface :   csr_interfaces["GIULDMSR"+i].signalBundle("master"),exclude : []});
}

GIU_apb_csr_interfaces.push({modulePrefix: newToOldStyleInterface( p.interfaces["apbInt"]).name, localPrefix :  newToOldStyleInterface( p.interfaces["apbInt"]).name, interface : newToOldStyleInterface( p.interfaces["apbInt"]).signals ,exclude : []});
GIU_apb_csr_interfaces.push({modulePrefix: newToOldStyleInterface( p.interfaces["clkInt"]).name, localPrefix :  newToOldStyleInterface( p.interfaces["clkInt"]).name , interface : newToOldStyleInterface( p.interfaces["clkInt"]).signals ,exclude : []});
var selected_array=[];
for (intf in GIU_apb_csr_interfaces) {
   Object.keys(GIU_apb_csr_interfaces[intf].interface).forEach(rf => {	selected_array.push(GIU_apb_csr_interfaces[intf].modulePrefix+rf)	});
 }


var selected_array2=[];
for (intf in GIU_apb_csr_interfaces) {

   Object.keys(GIU_apb_csr_interfaces[intf].interface).forEach(rf => { if((GIU_apb_csr_interfaces[intf].interface[rf] !=0) & ~(GIU_apb_csr_interfaces[intf].exclude.includes(GIU_apb_csr_interfaces[intf].modulePrefix+rf) )){selected_array2.push(GIU_apb_csr_interfaces[intf].modulePrefix+rf)	}});
 }
var GIU_apb_parameters = {
    csr                     : p.csr,
    flopAPB                 : "yes",
    protectionStyle         : null,
    protectionInterface     : {"name": "", "signals": ""},
    cfgInterface            : newToOldStyleInterface(p.interfaces["apbInt"]),
    clkInterface            : newToOldStyleInterface(p.interfaces["clkInt"]),
    selected_array          : selected_array2,
    selected_ports          : 1,
    enSwReadPorts           :1
  };



  \jsend
  
\jsbegin
//=============================================================================
// NRS Base Address Registers
//=============================================================================
\jsend

assign GIUNRSBAR_NRSBA_wr = GIUNRSBLR_sw_rd & GIUNRSBLR_BALoaded_out;
assign GIUNRSBAR_NRSBA_in = GIUNRSBHR_NRSBA_out;

assign GIUNRSBLR_BALoaded_wr = GIUNRSBHR_sw_wr | GIUNRSBLR_sw_rd;
assign GIUNRSBLR_BALoaded_in = GIUNRSBHR_sw_wr;

assign GIUNRSBLR_NRSDIIId_in = 10'h0; //Value set in CSR CPR: nDiis - 1

assign GIUNRSBHR_NRSBA_in    = 'h0; 

assign GIUUFUIDR_FUnitId_in = {\= csr_interfaces["GIUUFUIDR"].signalBundle("master")["GIUUFUIDR_FUnitId_in"]-p.system.wFUnitId=\'d0,\=p.interfaces["uIdInt"][0].name=\my_f_unit_id};
assign GIUUIDR_NUnitId_in = {\= csr_interfaces["GIUUIDR"].signalBundle("master")["GIUUIDR_NUnitId_in"]-p.system.wFUnitId=\'d0,\=p.interfaces["uIdInt"][0].name=\my_n_unit_id};
assign GIUUIDR_RPN_in = \=p.interfaces["uIdInt"][0].name=\my_csr_rpn;
assign GIUUIDR_NRRI_in = \=p.interfaces["uIdInt"][0].name=\my_csr_nrri;
assign GIUUIDR_ConnectedChipletId_in = \=p.system.wChipletId=\'d0;
assign GIUUIDR_LinkId_in = \=p.system.wLinkId=\'d0;
assign GIUUIDR_Valid_in = 1'd0;


\=u.instance({
    instanceName: 'giu_apb_csr',
    moduleName: 'apb_csr',
    params: GIU_apb_parameters,
    verilogParams: {},
    ports: {},
    interfaces: GIU_apb_csr_interfaces,
    portsDelimiter: '\n'
})=\



\jsbegin
//=============================================================================
// Trace capture
//=============================================================================


csr_interface.name = "GIU";
csr_interface.direction = "master";

var GIU_trace_capture_interfaces ={};
GIU_trace_capture_interfaces["smiTxInt"] =m.deepCopy(p.interfaces ["smiTxInt"]);
GIU_trace_capture_interfaces["smiRxInt"] =m.deepCopy(p.interfaces ["smiRxInt"]);

for (var i=0; i< p.interfaces["smiRxInt"].length;i++){
  GIU_trace_capture_interfaces["smiRxInt"][i].direction = "slave" ;
  GIU_trace_capture_interfaces["smiRxInt"][i].interface = "InterfaceSMIprobe";
}
for (var i=0; i< p.interfaces["smiTxInt"].length;i++){
  GIU_trace_capture_interfaces["smiTxInt"][i].direction = "slave" ;
  GIU_trace_capture_interfaces["smiTxInt"][i].interface = "InterfaceSMIprobe";
}

GIU_trace_capture_interfaces["uIdInt"] = m.deepCopy(p.interfaces ["uIdInt"]);
GIU_trace_capture_interfaces["uIdInt"]["wNUnitId"]=0;
GIU_trace_capture_interfaces["uIdInt"]["wRpn"]=0
GIU_trace_capture_interfaces["uIdInt"]["wNrri"]=0
GIU_trace_capture_interfaces["uChipletIdInt"] = m.deepCopy(p.interfaces ["uChipletIdInt"]);
GIU_trace_capture_interfaces["uSysDveIdInt"] = p.interfaces["uSysDveIdInt"];
GIU_trace_capture_interfaces["GIU"] = csr_interface;
GIU_trace_capture_interfaces["clkInt"] = m.deepCopy(p.interfaces["clkInt"]);
GIU_trace_capture_interfaces["clkInt"].params["wTestEn"]=0;
GIU_trace_capture_interfaces["smirx_trace"]= m.deepCopy(smirx_trace);
GIU_trace_capture_interfaces["smirx_trace"].direction= "slave";
var smitxmout = m.deepCopy(p.interfaces["smiTxInt"][3]);
smitxmout["name"] ="smi_tx_trace_";
smitxmout.direction = "master"
GIU_trace_capture_interfaces["smitxout"]=smitxmout;


var GIU_trace_capture_parameters={}
GIU_trace_capture_parameters["system"]=p.system;
GIU_trace_capture_parameters["unit"]=p.unit;
GIU_trace_capture_parameters["interfaces"]=GIU_trace_capture_interfaces;
GIU_trace_capture_parameters["csr"]=p.csr;
GIU_trace_capture_parameters["concParams"]=p.concParams;
GIU_trace_capture_parameters["traceRegisters"] = traceRegisters;
GIU_trace_capture_parameters["traceCsrIfGenerator"] = traceCsrIfGenerator;
GIU_trace_capture_parameters["cmType"] = p.cmType;

\jsend

\=u.nInstance({
  instanceName: 'giu_trace_capture',
  moduleName: 'giu_trace_capture',
  params: GIU_trace_capture_parameters, 
  interfaceObj: {
      interfaces: GIU_trace_capture_interfaces,
      prefixes: GIU_trace_capture_interfaces
  }
})=\





\jsbegin
//=============================================================================
// Performance monitors
//=============================================================================


var flattenInterface		= m.flattenInterface;
function declareOldStyleInterface ( oldStyleInterface ) {
	return m.bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}
function genPmonEvtInterfaces( table ) {
	const result				= [];

	for(let i=0; i<table.length; i++) {
		result.push({
			name:			"evt"+i+"_",
			direction:		"slave",
			"interface":	"InterfaceEvt",
			params:			{ width: table[i].width }
		});
	}
	
	return result;
}

function getModuleLocalPrefixAndInterface (intrface) {
	const modulePrefix		= intrface.name;
	const localPrefix		= intrface.name;
	return { modulePrefix, localPrefix, "interface": intrface.signals };
}

function declareNewStyleInterface ( newStyleInterface ) {
	const oldStyleInterface		= newToOldStyleInterface( newStyleInterface );
	const flatOldInterface		= flattenInterface ( oldStyleInterface );
	return declareOldStyleInterface( flatOldInterface );
}

var filterAttributesMap = [
  { eventIndex: 5, name:"pmon_smi3_rx_validready_" , signals: {"funit_id": p.system.wFUnitId} },
  { eventIndex: 9, name:"pmon_smi3_tx_validready_" , signals: {"funit_id": p.system.wFUnitId} },
]; 
var nPerfCounters = p.unit.nPerfCounters;

var intclk = {
	name:			"",
	direction:		"slave",
	"interface":	"InterfaceCLK",
	params: {}	// This results in clk and reset_n signals only 
};


const clk16Interface	= { name: p.interfaces["clkInt"].name+"ungated_16_", signals:  newToOldStyleInterface(intclk).signals };
const clkInterface    = { name: p.interfaces["clkInt"].name, signals:  newToOldStyleInterface(intclk).signals };

const giuEventTable			= [
  { width: 1, expr: "pmon_cxs_tx_flit_valid"},
  { width: 1,expr : "pmon_cxs_rx_flit_valid"},
  {width : 1,expr : "pmon_smi0_rx_validready"},
  {width : 1,expr : "pmon_smi1_rx_validready"},
  {width : 1,expr : "pmon_smi2_rx_validready"},
  {width : 1,expr : "pmon_smi3_rx_validready"},
  {width : 1,expr : "pmon_smi0_tx_validready"},
  {width : 1,expr : "pmon_smi1_tx_validready"},
  {width : 1,expr : "pmon_smi2_tx_validready"},
  {width : 1,expr : "pmon_smi3_tx_validready"},
  { width: 1, expr: "pmon_smi0_rx_not_ready"},
	{ width: 1, expr: "pmon_smi1_rx_not_ready"},
	{ width: 1, expr: "pmon_smi2_rx_not_ready"},
	{ width: 1, expr: "pmon_smi3_rx_not_ready"},
	{ width: 1, expr: "pmon_smi0_tx_not_ready"},
	{ width: 1, expr: "pmon_smi1_tx_not_ready"},
	{ width: 1, expr: "pmon_smi2_tx_not_ready"}, 
	{ width: 1, expr: "pmon_smi3_tx_not_ready"},
	{ width: 1, expr: "pmon_cxs_tx_flit_not_valid"},
	{ width: 1, expr: "pmon_cxs_rx_flit_not_valid"},
	{ width: 2, expr: "2'b0"},
	{ width: 1, expr: "1'b0"},
	{ width: 1, expr: "1'b0"},
	{ width: 1, expr: "1'b0"},
	{ width: 1, expr: "1'b0"},
  { width: 1, expr: "1'b0"},
	{ width: 1, expr: "1'b0"},
	{ width: 1, expr: "1'b0"},
	{ width: 1, expr: "1'b0"},
  { width: 1, expr:  clk16Interface.name+"clk"},
	{ width: 1, expr: "1'b0"},
  { width: 1, expr: "1'b0"}

];
const pmonRegisters				= m.genNcorePmonRegisters(p.csr.spaceBlock[0].registers, "GIU", { nPerfCounters });
const pmonCsrIfGenerator		= m.createCSRInterfaceGenerator( pmonRegisters );

var pmonInterfaces	= {
	clkInterface: p.interfaces["clkInt"],
	csrInterface: pmonCsrIfGenerator.interfaceGeneric("slave", "GIU"),	// Returns a new-style InterfaceGeneric instance
	evtInterfaces: genPmonEvtInterfaces( giuEventTable ),
	masterTriggerInterface: p.interfaces["masterTriggerInt"],
	filterAttrInterfaces: m.genFilterAttrInterfaces(filterAttributesMap)
};
\jsend


wire pmon_cxs_tx_flit_valid   ;
wire pmon_cxs_rx_flit_valid   ;
wire pmon_smi0_rx_validready  ;
wire pmon_smi1_rx_validready  ;
wire pmon_smi2_rx_validready  ;
wire pmon_smi3_rx_validready  ;
wire pmon_smi0_tx_validready  ;
wire pmon_smi1_tx_validready  ;
wire pmon_smi2_tx_validready  ;
wire pmon_smi3_tx_validready  ;
wire pmon_smi0_rx_not_ready   ;
wire pmon_smi1_rx_not_ready   ;
wire pmon_smi2_rx_not_ready   ;
wire pmon_smi3_rx_not_ready   ;
wire pmon_smi0_tx_not_ready   ;
wire pmon_smi1_tx_not_ready   ;
wire pmon_smi2_tx_not_ready   ;
wire pmon_smi3_tx_not_ready   ;

\=m.bundleFunctions.wiresFromInterface(clk16Interface.name, clk16Interface.signals, [], u.bundle)=\

wire [\=p.system.wFUnitId-1=\:0] pmon_smi3_tx_validready_funit_id;
wire [\=p.system.wFUnitId-1=\:0] pmon_smi3_rx_validready_funit_id;

\jsbegin
for (let i=0; i< giuEventTable.length; i++) { 
\jsend

	wire \=(pmonInterfaces.evtInterfaces[i].params["width"] > 1 ?  "["+(pmonInterfaces.evtInterfaces[i].params["width"]-1)+" : 0 ]" :"") + pmonInterfaces.evtInterfaces[i].name=\val; 
\jsbegin
} 
\jsend


assign pmon_cxs_tx_flit_valid = \=p.interfaces["cxsTxInt"].name=\valid ;
assign pmon_cxs_rx_flit_valid = \=p.interfaces["cxsRxInt"].name=\valid ;

assign pmon_smi0_rx_validready = \=p.interfaces["smiRxInt"][0].name=\ndp_msg_valid & \=p.interfaces["smiRxInt"][0].name=\ndp_msg_ready;
assign pmon_smi1_rx_validready = \=p.interfaces["smiRxInt"][1].name=\ndp_msg_valid & \=p.interfaces["smiRxInt"][1].name=\ndp_msg_ready;
assign pmon_smi2_rx_validready = \=p.interfaces["smiRxInt"][2].name=\ndp_msg_valid & \=p.interfaces["smiRxInt"][2].name=\ndp_msg_ready;
assign pmon_smi3_rx_validready = \=p.interfaces["smiRxInt"][3].name=\ndp_msg_valid & \=p.interfaces["smiRxInt"][3].name=\ndp_msg_ready;

assign pmon_smi0_tx_validready = \=p.interfaces["smiTxInt"][0].name=\ndp_msg_valid & \=p.interfaces["smiTxInt"][0].name=\ndp_msg_ready;
assign pmon_smi1_tx_validready = \=p.interfaces["smiTxInt"][1].name=\ndp_msg_valid & \=p.interfaces["smiTxInt"][1].name=\ndp_msg_ready;
assign pmon_smi2_tx_validready = \=p.interfaces["smiTxInt"][2].name=\ndp_msg_valid & \=p.interfaces["smiTxInt"][2].name=\ndp_msg_ready;
assign pmon_smi3_tx_validready = \=p.interfaces["smiTxInt"][3].name=\ndp_msg_valid & \=p.interfaces["smiTxInt"][3].name=\ndp_msg_ready;

assign pmon_smi0_rx_not_ready = ~ \=p.interfaces["smiRxInt"][0].name=\ndp_msg_ready;
assign pmon_smi1_rx_not_ready = ~ \=p.interfaces["smiRxInt"][1].name=\ndp_msg_ready;
assign pmon_smi2_rx_not_ready = ~ \=p.interfaces["smiRxInt"][2].name=\ndp_msg_ready;
assign pmon_smi3_rx_not_ready = ~ \=p.interfaces["smiRxInt"][3].name=\ndp_msg_ready;
assign pmon_smi0_tx_not_ready = ~ \=p.interfaces["smiTxInt"][0].name=\ndp_msg_ready;
assign pmon_smi1_tx_not_ready = ~ \=p.interfaces["smiTxInt"][1].name=\ndp_msg_ready;
assign pmon_smi2_tx_not_ready = ~ \=p.interfaces["smiTxInt"][2].name=\ndp_msg_ready;
assign pmon_smi3_tx_not_ready = ~ \=p.interfaces["smiTxInt"][3].name=\ndp_msg_ready;


assign pmon_cxs_tx_flit_not_valid = ~\=p.interfaces["cxsTxInt"].name=\valid ;
assign pmon_cxs_rx_flit_not_valid = ~\=p.interfaces["cxsRxInt"].name=\valid ;

assign pmon_smi3_tx_validready_funit_id = smi_tx3_ndp_targ_id[\=p.system.wFUnitId-1=\:0] ;
assign pmon_smi3_rx_validready_funit_id = smi_rx3_ndp_src_id[\=p.system.wFUnitId-1=\:0] ;


\jsbegin
for (let i=0; i< giuEventTable.length; i++) { 
\jsend
	assign \=pmonInterfaces.evtInterfaces[i].name=\val		= \=giuEventTable[i].expr=\; 
\jsbegin
} \jsend


\=u.instance({
  instanceName: 'clk_divider' ,
  moduleName: 'clk_divider',
  params: {
clkInterface :clkInterface,	
clkOutInterfaces: [clk16Interface]},
  interfaces :[clkInterface, clk16Interface].map(getModuleLocalPrefixAndInterface),
  portsDelimiter: '\n    '
})=\

\=u.nInstance({
  instanceName : 'u_ncr_pmon',
  moduleName : 'ncr_pmon',
  params: {
      nPerfCounters,
interfaces: pmonInterfaces,
bwEvtMapping: m.generateBwEvtMapping(filterAttributesMap),
nLatencyCounters : 0
  },
  interfaceObj: {
  interfaces: pmonInterfaces,
  prefixes: pmonInterfaces 
  }
})=\


\jsbegin

//=============================================================================
// Temporary tie offs to clean up compile
//=============================================================================
\jsend

assign irq_c = 1'b0;
assign irq_uc = 1'b0;

endmodule


