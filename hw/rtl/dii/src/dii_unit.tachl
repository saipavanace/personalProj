// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// This module defines dii unit level
//
//=============================================================================
\jsend

\jsbegin
var u                           = obj.lib;
var m                           = obj.userLib;
var bundleFunctions             = obj.userLib.bundleFunctions;
var log2ceil                    = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };
var assertOn                    = obj.lib.getParam('assertOn');
var memFunctions                = obj.userLib.lib_utils;
var newToOldStyleInterface	= m.newToOldStyleInterface.bind( null, obj.userLib );
var flattenInterface		= m.flattenInterface;

var wChipletId                  = obj.lib.getParam('wChipletId');
var wLinkId                     = obj.lib.getParam('wLinkId');

var hasChipletIdInterface       = obj.lib.getParam('hasChipletIdInterface');

let chipletIdInterface;
let chipletIdInterfaceName;

if (hasChipletIdInterface) {

chipletIdInterface          = obj.lib.getParam('chipletIdInterface');
chipletIdInterfaceName      = obj.lib.getParam('chipletIdInterfaceName');

}

var wTotalSmiPortsNum       = obj.lib.getParam('wTotalSmiPortsNum');

// Function that returns wire declarations of an old-style interface (with properties 'name' and 'signals')
function declareOldStyleInterface ( oldStyleInterface ) {
	return bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}


// Function that returns wire declarations of a new-style interface
function declareNewStyleInterface ( newStyleInterface ) {
	const oldStyleInterface		= newToOldStyleInterface( newStyleInterface );
	const flatOldInterface		= flattenInterface ( oldStyleInterface );
	return declareOldStyleInterface( flatOldInterface );
}

// Function to convert an interface {{name, signals}) to a { modulePrefix, localPrefix, interface} object
// that is used to specify how local interfaces are mapped to module interfaces of an instance
function getModuleLocalPrefixAndInterface (intrface) {
	const modulePrefix		= intrface.name;
	const localPrefix		= intrface.name;
	return { modulePrefix, localPrefix, "interface": intrface.signals };
}

//=============================================================================
// Top Level Parameters
//=============================================================================

u.paramDefault('regProtectionInterface', 'object', {});
u.paramDefault('regProtectionInterfaceName', 'string', "");
u.paramDefault('regProtectionStyle', 'object', null);


//-----------------------------------------------------------------------------
// Internal Interfaces
var masterTriggerNewStyleInterface	    = obj.lib.getParam('masterTriggerNewStyleInterface');

var TTentryDTR              = obj.lib.getParam('internalInterfaces', 'tt_entry_dtr');
var TTentryDTW              = obj.lib.getParam('internalInterfaces', 'tt_entry_dtw');
var TTentryCtl              = obj.lib.getParam('internalInterfaces', 'tt_ctl_entry');
var TTCtl                   = obj.lib.getParam('internalInterfaces', 'tt_ctl');
var TTentry1                = obj.lib.getParam('internalInterfaces', 'tt_entry_1');
var TTentry2                = obj.lib.getParam('internalInterfaces', 'tt_entry_2');
var TT1                     = obj.lib.getParam('internalInterfaces', 'tt_1');
var TT2                     = obj.lib.getParam('internalInterfaces', 'tt_2');
var internalFaultInterface  = obj.lib.getParam('internalInterfaces', 'internalFaultInterface');
var useExternalMemory       = obj.lib.getParam('useExternalMemory');

var blkClkGateOn            = obj.lib.getParam('blkClkGateOn');
var nativeInterfacePipe     = obj.lib.getParam('nativeInterfacePipe');

var memGen		    = obj.lib.getParam('memGen');
var skidInterfaceBundle     = obj.lib.getParam('skidInterfaceBundle');

var nRttEntries             = obj.lib.getParam('cmpInfo', 'nRttCtrlEntries');
var nWttEntries             = obj.lib.getParam('cmpInfo', 'nWttCtrlEntries');
var nCmdReq                 = obj.lib.getParam('cmpInfo', 'nNcCmdInFlightToDii');
var nDtrId                  = obj.lib.getParam('cmpInfo', 'nDtrInFlight');

var nWriteBufferEntries     = obj.lib.getParam('cmpInfo', 'nWriteBufferEntries');
var nWriteRBIDs             = obj.lib.getParam('cmpInfo', 'nWriteRBIDs');
var nNcCmdInFlightToDii     = obj.lib.getParam('cmpInfo', 'nNcCmdInFlightToDii');

var nPerfCounters      	    = obj.lib.getParam('nPerfCounters');
var configuration           = obj.lib.getParam('configuration');

var axi_id_width            = Math.max(obj.lib.getParam('axiInterface', 'ar_', 'id'), obj.lib.getParam('axiInterface', 'aw_', 'id'));
var axi_id_num_wr           = (Math.pow(2,axi_id_width) < nWttEntries) ? Math.pow(2,axi_id_width) : nWttEntries;
var axi_id_num_rd           = (Math.pow(2,axi_id_width) < nRttEntries) ? Math.pow(2,axi_id_width) : nRttEntries;

var wSize                   = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'size');
var wAddr                   = obj.lib.getParam('wAddr');
var cmdAddr                 = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'addr');
var wCacheLineOffset        = obj.lib.getParam('wCacheLineOffset');
var wData                   = u.getParam('wData');
var wIntfSize               = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'intf_size');
var wMpf1                   = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'mpf1');
var wMpf2                   = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'mpf2');
var wTOF                    = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'tof');

// MAximum bits needed in any AXI ID comparison
var axi_id_comp_width       = Math.max(log2ceil(axi_id_num_wr), log2ceil(axi_id_num_rd), wMpf2);
var axi_id_num              = Math.pow(2,axi_id_width);
var cmType                  = obj.lib.getParam('cmType');

var wQos                    = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'qos');
var wPriority               = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'priority');
var wQl                     = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'ql');

var wAux                    = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'aux');
var wOrder                  = obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'or');
var wRL                     = obj.lib.getParam('concertoInterfaces', 'DTWReqInterface', 'rl');

var hasAux                  = (obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'aux') === 0)    ? "N" : "Y";
var hasUser                 = (obj.lib.getParam('axiInterface', 'ar_',  'user')  === 0)                   ? "N" : "Y";

var CMDOverflowBufInSRAM  = obj.lib.getParam('CMDOverflowBufInSRAM');

var nSkidBufSize          = obj.lib.getParam('nSkidBufSize');
var nSkidBufArb           = obj.lib.getParam('nSkidBufArb');

var wSkidEntry              = (CMDOverflowBufInSRAM) ? log2ceil(nSkidBufSize-nSkidBufArb)+1 : 1;

// Always have NS
/* istanbul ignore if env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (obj.lib.getParam('concertoInterfaces', 'CMDReqInterface', 'ns') === 0) {
var hasNs = "N";
} else {
var hasNs = "Y";
}

//Now SMI defines Width to handle 32bit Case. Math.abs(u.getParam('axiInterface', 'r_', 'data'));
var data_width              = u.getParam('wData');
var arprot_width            = Math.abs(u.getParam('axiInterface', 'ar_', 'prot'));
var aruser_width            = Math.abs(u.getParam('axiInterface', 'ar_', 'user'));
var awuser_width 	    = Math.abs(u.getParam('axiInterface', 'aw_', 'user'));

var arcache_width           = Math.abs(u.getParam('axiInterface', 'ar_', 'cache'));
var arlock_width            = Math.abs(u.getParam('axiInterface', 'ar_', 'lock'));
var arid_width              = Math.abs(u.getParam('axiInterface', 'ar_', 'id'));
var awid_width              = Math.abs(u.getParam('axiInterface', 'aw_', 'id'));
var rresp_width             = Math.abs(u.getParam('axiInterface', 'r_', 'resp'));
var ruser_width             = Math.abs(u.getParam('axiInterface', 'r_', 'user'));
var wuser_width             = Math.abs(u.getParam('axiInterface', 'w_', 'user'));

var wFUnitId                = u.getParam('wFUnitId');
var wFPortId                = obj.lib.getParam('wFPortId');
var wGlobalFUnitId          = wChipletId + wFUnitId;
var wNUnitId                = obj.lib.getParam('wNUnitId');
var wRpn                    = obj.lib.getParam('wRpn');
var wNrri                   = obj.lib.getParam('wNrri');
var nUnitTraceBufSize       = obj.lib.getParam('nUnitTraceBufSize');

var nExclusiveEntries      = obj.lib.getParam('nExclusiveEntries');

var implVerId               = obj.lib.getParam('implVerId');
var engVerId                = obj.lib.getParam('engVerId');

var ResilienceInfo               = obj.lib.getParam('ResilienceInfo');
var useResiliency                = obj.lib.getParam('useResiliency');
var readBufferBlockWidths        = obj.lib.getParam('readBufferBlockWidths');
var doublePortReadBuffer         = obj.lib.getParam('doublePortReadBuffer');
var fnErrDetectCorrect           = obj.lib.getParam('fnErrDetectCorrect');
var enableNativeIntfProtection   = obj.lib.getParam('ResilienceInfo', 'enableNativeIntfProtection');

var usePma                  = obj.lib.getParam('usePma');
var PmaInfo                 = obj.lib.getParam('PmaInfo');
var useAddrTranslation      = obj.lib.getParam('useAddrTranslation');
var nAddrTransRegisters     = obj.lib.getParam('nAddrTransRegisters');

var memoryType              = obj.lib.getParam('memoryType');
var memDepth                = obj.lib.getParam('memDepth');
//var instance_ports_for_ram  = obj.lib.getParam('instance_ports_for_ram');
var readDataMemStructure    = obj.lib.getParam('readDataMemStructure');
var readDataMemInterface    = obj.lib.getParam('readDataMemInterface');
var portType                = obj.lib.getParam('portType');

var be_width           = u.getParam('be_width');
var unit_id_width      = wFUnitId;
var port_id_width_data = wFPortId;
var port_id_width_ctl  = wFPortId;
var bresp_width        = Math.abs(u.getParam('axiInterface', 'b_', 'resp'));
var cmd_attrv_width    = 16;
var rtt_id_width       = log2ceil(nRttEntries);
var wtt_id_width       = log2ceil(nWttEntries);
var tt_id_width        =  Math.max(rtt_id_width, wtt_id_width);
var wLargestEndpoint   = u.getParam('wLargestEndpoint');

var useSysReqSender    = u.getParam('useSysReqSender');

var addressIdMap       = u.getParam('addressIdMap');

var wInitiatorId       = obj.lib.getParam('concParams', 'hdrParams',    'wInitiatorId');
var wMsgId             = obj.lib.getParam('concParams', 'hdrParams',    'wMsgId');
var wHProt             = obj.lib.getParam('concParams', 'hdrParams',    'wHProt');
var wTtier             = obj.lib.getParam('concParams', 'hdrParams',    'wTTier');
var wSteering          = obj.lib.getParam('concParams', 'hdrParams',    'wSteering');
var wCmType            = obj.lib.getParam('concParams', 'hdrParams',    'wCmType');
var wCmStatus          = obj.lib.getParam('concParams', 'cmdReqParams', 'wCmStatus');

var SMI_TX_INTF        = m.ParamDefaultGet(u, 'smiTxPortInterfaces',  'array', []);
var SMI_RX_INTF        = m.ParamDefaultGet(u, 'smiRxPortInterfaces',  'array', []);
var CONC_TX_INTF       = m.ParamDefaultGet(u, 'concertoTxInterfaces', 'array', []);
var CONC_RX_INTF       = m.ParamDefaultGet(u, 'concertoRxInterfaces', 'array', []);

var nDves	       = obj.lib.getParam('nDves');
var wEventTimeout = 20; //must be the same as wProtocolTimeout
var wProtocolTimeout = 20;

// Define local reqAckEventInterface
const reqAckEventInterface		= { name: "event_in_", signals: { req: 1, ack: -1 } }; 

var index              = CONC_RX_INTF.findIndex(function(element) {return element.name === 'cmd_req_'; }); 
var CMDReqInterface    = CONC_RX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'cmd_rsp_'; }); 
var NCCMDRspInterface  = CONC_TX_INTF[index].signals;
         
index                  = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_req_'; });
var DTWReqInterface    = CONC_RX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_rsp_'; });
var DTWRspInterface    = CONC_TX_INTF[index].signals;
              
index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtr_req_'; });
var DTRReqInterface    = CONC_TX_INTF[index].signals;
   
index                  = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtr_rsp_'; });
var DTRRspInterface    = CONC_RX_INTF[index].signals;

index                  = CONC_TX_INTF.findIndex(function(element) {return element.name === 'str_req_'; });
var STRReqInterface    = CONC_TX_INTF[index].signals;
   
index                  = CONC_RX_INTF.findIndex(function(element) {return element.name === 'str_rsp_'; });
var STRRspInterface    = CONC_RX_INTF[index].signals;



// If the DTW Trace Channel Exists.
index                  = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_dbg_rsp_'; });
var trace_defined = (index != -1);

/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (trace_defined){ 
  var DTWDbgRspInterface    = CONC_RX_INTF[index].signals;
  
  index                     = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_dbg_req_'; });
  var DTWDbgReqInterface    = CONC_TX_INTF[index].signals;
} else {
  index                     = CONC_TX_INTF.findIndex(function(element) {return element.name === 'dtw_rsp_'; });
  var DTWDbgRspInterface    = CONC_TX_INTF[index].signals;

  index                     = CONC_RX_INTF.findIndex(function(element) {return element.name === 'dtw_req_'; });
  var DTWDbgReqInterface    = CONC_RX_INTF[index].signals;
}

/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysReqSender) {
index = CONC_RX_INTF.findIndex(function(element) {return element.name === 'sys_rsp_rx_'; });
var SYS_RSP_RX_INTF = CONC_RX_INTF[index].signals;
index = CONC_TX_INTF.findIndex(function(element) {return element.name === 'sys_req_tx_'; });
var SYS_REQ_TX_INTF = CONC_TX_INTF[index].signals;
}


var CSR                = obj.lib.getParam('csr');



var AXI_Interface          = obj.lib.getParam('axiInterface');

var AXI_Interface_smiWidth = {};

AXI_Interface_smiWidth['ar_'] = Object.assign({},AXI_Interface['ar_']); 
AXI_Interface_smiWidth['aw_'] = Object.assign({},AXI_Interface['aw_']); 
AXI_Interface_smiWidth['w_']  = Object.assign({},AXI_Interface['w_']); 
AXI_Interface_smiWidth['r_']  = Object.assign({},AXI_Interface['r_']); 
AXI_Interface_smiWidth['b_']  = Object.assign({},AXI_Interface['b_']); 

AXI_Interface_smiWidth['r_'].data = -wData;
AXI_Interface_smiWidth['w_'].data = wData;
AXI_Interface_smiWidth['w_'].strb = wData/8;

var AXI_Interface_invDir = {};

AXI_Interface_invDir['r_']  = Object.assign({},AXI_Interface['r_']); 
AXI_Interface_invDir['b_']  = Object.assign({},AXI_Interface['b_']);

for( var key in AXI_Interface_invDir['r_']) {
  AXI_Interface_invDir['r_'][key] = -AXI_Interface_invDir['r_'][key];
}

for( var key in AXI_Interface_invDir['b_']) {
  AXI_Interface_invDir['b_'][key] = -AXI_Interface_invDir['b_'][key];
}

var clkInterface       = obj.lib.getParam('clkInterface');
var clkInterfaceNoTest = {'clk':1, 'reset_n':1};

var clkInterfaceParams = obj.lib.getParam('clkInterfaceParams');
var memoryInterface    = obj.lib.getParam('memoryInterface');
var apbInterface       = obj.lib.getParam('apbInterface');
var apbInterfaceName   = obj.lib.getParam('apbInterfaceName');
 

if (usePma) {
  var qInterface         = obj.lib.getParam('qInterface');
  var qInterfaceName     = obj.lib.getParam('qInterfaceName');
}

var fnNativeInterface   = obj.lib.getParam('fnNativeInterface');
var placeInterface      = obj.lib.getParam('placeInterface');
var placeInterfaceName  = obj.lib.getParam('placeInterfaceName');
var placeInterfaceDef   = obj.lib.getParam('placeInterfaceDef');
var placeInterfaceSkip  = obj.lib.getParam('placeInterfaceSkip');

var regProtectionInterface     = obj.lib.getParam('regProtectionInterface');
var regProtectionInterfaceName = obj.lib.getParam('regProtectionInterfaceName');
var regProtectionStyle         = obj.lib.getParam('regProtectionStyle');

//-----------------------------------------------------------------------------
// Width Calculations

var read_resp_width    = axi_id_width + data_width + rresp_width + ruser_width +1;

//-----------------------------------------------------------------------------
// Error Check the Memory Width

var memory_width      = Math.abs(u.getParam('memoryInterface', 'int_data_in'));

/* istanbul ignore if env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if ( read_resp_width >  memory_width) {
  console.log("Error: "+u.getModuleName()+" - readDataWidthParams must have a data width greater than " + read_resp_width + ". (Derived from axi_id_width + data_width + rresp_width + aruser_width + 1)");
} 

var cmd_req_width      = wChipletId + wFUnitId + wCmType + wMsgId + cmdAddr + cmd_attrv_width + wMpf1 + wMpf2  + wSize + wTOF + wQos + wAux + wIntfSize + wQl + wPriority;

  
var read_req_width     = wMpf1 + axi_id_width + wAddr + wSize + wQos + arprot_width + aruser_width + 1 + 1 + 1 + 1 + wOrder + arlock_width + 1 + 1 + wTOF; //ID width, add width, size, 1's are st,ca,ac,vz,sh,narrow fields
var write_resp_width   = bresp_width + axi_id_width;
var str_req_width      = tt_id_width + wGlobalFUnitId + wMsgId + 1 + wQos + wQl + wPriority + 1;
var write_req_width    = wMpf1 + wtt_id_width + axi_id_width + wAddr + wSize + wQos + arprot_width + aruser_width + 1 + 1 + 1 + 1 + wOrder + arlock_width + 1 + 1 + wTOF + 1 + 1; //assuming arprot & awprot widths are equal, 1's are st,ca,ac,vz,sh,expass fields
//
var cmd_attr_width     = 16;

//-----------------------------------------------------------------------------
// Internal Variables

//=============================================================================
// Addr Translation Interface
//=============================================================================

var csrAddrTransInterface = {};
if(useAddrTranslation) {
    for (var i = 0; i < nAddrTransRegisters; i++) {
        csrAddrTransInterface['csr_ATER_'+i+'_Valid']    = 1,
        csrAddrTransInterface['csr_ATER_'+i+'_Mask']     = 5,    
        csrAddrTransInterface['csr_RFAR_'+i+'_FromAddr'] = Math.abs(apbInterface.prdata), 
        csrAddrTransInterface['csr_RTAR_'+i+'_ToAddr']   = Math.abs(apbInterface.prdata)
    }
}

var interfaceGen = obj.userLib.interfaceGenerators;

const clkInterfaceJson = {
                                            "name"         : 'to_clk_gate_',
                                            "params"       : clkInterfaceParams,
                                            "blkClkGateOn" : blkClkGateOn,
                                            "direction"    : "slave",
                                            "interface"    : "InterfaceCLK"
};


//=============================================================================
// Trace CSR Interface
//=============================================================================

const traceRegisters		    = m.genTraceCaptureRegisters(CSR.spaceBlock[0].registers, "DII");
const traceCsrIfGenerator   	    = m.createCSRInterfaceGenerator( traceRegisters );

//=============================================================================
// PMON CSR Interface
//=============================================================================
// Function to generate pmon evtInterfaces
function genPmonEvtInterfaces( table ) {
	const result				= [];

	for(let i=0; i<table.length; i++) {
		result.push({
			name:			"evt"+i+"_",
			direction:		"slave",
			"interface":	"InterfaceEvt",
			params:			{ width: table[i].width }
		});
	}
	
	return result;
}


const pmonRegisters		= m.genNcorePmonRegisters(CSR.spaceBlock[0].registers, "DII", { nPerfCounters });
const pmonCsrIfGenerator	= m.createCSRInterfaceGenerator( pmonRegisters );
const oldStylePmonCsrInterface	= { name: "DII", signals: pmonCsrIfGenerator.signalBundle("master") };

//=============================================================================
// Clk, ID, and IRQ Interfaces
//=============================================================================

obj.lib.interface('to_clk_gate_', 'slave', clkInterface);

if (hasChipletIdInterface) {

u.interface(chipletIdInterfaceName, 'slave', chipletIdInterface);

}

u.port('input', 'my_f_unit_id' , wFUnitId);
u.port('input', 'my_n_unit_id' , wNUnitId)
u.port('input', 'my_csr_rpn'   , wRpn);
u.port('input', 'my_csr_nrri'  , wNrri);
u.port('output','c'            , 1);
u.port('output','uc'           , 1);

/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if ( obj.lib.getParam('haveDveInterface') ) {
  u.port('input', 'dve_f_unit_id', wFUnitId);
}

// Trace Capture Ports
obj.lib.interface('csr_trace_','master',traceCsrIfGenerator.signalBundle('slave'));
obj.lib.interface('dtw_dbg_req_','slave',DTWDbgReqInterface);
obj.lib.interface('dtw_dbg_rsp_','master',DTWDbgRspInterface);
u.port('input', 'trace_capture_busy', 1);
u.port('input', 'pm_trace_messages_dropped', wTotalSmiPortsNum);
u.port('input', 'pm_trace_messages_captured', wTotalSmiPortsNum);
u.port('input', 'dii_en_debug_bist', 1);

//=============================================================================
// Clk, ID, and IRQ Interfaces
//=============================================================================

u.port('output','cerr_threshold'          , 32);

//=============================================================================
// Output to Fault Checker
//=============================================================================

obj.lib.interface('dii_', 'master', internalFaultInterface);

//=============================================================================
// APB Interface
//=============================================================================

obj.lib.interface(apbInterfaceName, 'slave', apbInterface);


//=============================================================================
// Q Interface
//=============================================================================

if(usePma) {
  obj.lib.interface(qInterfaceName, 'slave', qInterface);
}

//=============================================================================
// Memory Interface
//=============================================================================

if(memGen.skidMem[0].MemType == "SYNOPSYS") {
  obj.lib.interface("skid0_", 'master', skidInterfaceBundle);
  obj.lib.interface("skid1_", 'master', skidInterfaceBundle);  
}

//=============================================================================
// Master Trigger Interface
//=============================================================================
// trigger intf always present on 3.4 
/* istanbul ignore else env ncore_3p4,ncore_3p6,ncore_3p7 */
if(masterTriggerNewStyleInterface && !masterTriggerNewStyleInterface._SKIP_ ) {
  var masterTriggerInterface      = newToOldStyleInterface( masterTriggerNewStyleInterface );
  obj.lib.interface( masterTriggerInterface.name, 'slave', masterTriggerInterface.signals);
}

//=============================================================================
// SMI Interfaces
//=============================================================================

for (var i=0; i<SMI_TX_INTF.length; i++) {
    m.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].signals, u.port);
    if(SMI_TX_INTF[i].params.dpPresent) {
        m.defineMasterPortsFromInterface(SMI_TX_INTF[i].name, SMI_TX_INTF[i].dpSignals, u.port);    
        }
    }

for (var i=0; i<SMI_RX_INTF.length; i++) {
    m.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].signals, u.port);
    if(SMI_RX_INTF[i].params.dpPresent) {
        m.defineSlavePortsFromInterface(SMI_RX_INTF[i].name, SMI_RX_INTF[i].dpSignals, u.port);    
        }
    }

//=============================================================================
// AXI Interface
//=============================================================================

obj.lib.interface('axi_mst_', 'master', obj.lib.getParam('axiInterface'));

//=============================================================================
// Memory Interface
//=============================================================================

/* istanbul ignore if env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if ( useExternalMemory == 1) {
 obj.lib.interface('mem_read_buffer_', 'master', memoryInterface);
}

//=============================================================================
// Placeholder Interface
//=============================================================================

if(enableNativeIntfProtection){
   obj.lib.interface(placeInterfaceName,'master',placeInterface);
 }

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

//=============================================================================
// Internal Wires
//=============================================================================

\js if (wChipletId > 0) {
    \js if (hasChipletIdInterface) {
wire [\=wChipletId-1=\:0] my_chiplet_id = \=chipletIdInterfaceName=\my_chiplet_id[\=wChipletId-1=\:0];
    \js } else {
wire [\=wChipletId-1=\:0] my_chiplet_id = \=wChipletId=\'h0;
    \js }
\js }

    wire csr_force_arid_low;
    wire csr_force_awid_low;
    wire csr_force_ro_vz_hi;
    wire csr_force_eo_vz_hi;
    wire csr_exclude_ro_write_from_wo;
    wire csr_exclude_initiator_from_ordering;

    wire                              skid_cerr;
    wire                              skid_ucerr;
    wire [\=wSkidEntry=\-1:0]         skid_cerr_entry;
    wire [\=wSkidEntry=\-1:0]         skid_ucerr_entry;
    wire [1:0]                        bresp;
    wire [\=wAddr-1=\:0]              bresp_addr;
    wire                              bresp_valid;
    wire                              bresp_ns;    
    wire [1:0]                        rresp;
    wire [\=wAddr-1=\:0]              rresp_addr;
    wire                              rresp_valid;
    wire                              rresp_ns;    
    wire                              cmux_busy;
    wire                              r_busy; 
    wire [\=cmd_req_width-1=\:0]      cmd_req_fifo_data;
    wire [\=write_resp_width-1=\:0]   write_resp_data;
    wire [\=wtt_id_width-1=\:0]       write_req_rb_id;
    wire                              write_req_ex_pass;    
    wire [\=nRttEntries-1=\:0]        rtt_retire_entry;
    wire [\=nWttEntries-1=\:0]        wtt_retire_entry;
    wire [\=nRttEntries-1=\:0]        rtt_retire_entry_cmo;
    wire [\=nRttEntries-1=\:0]        rtt_new_wr_entry;
    wire [\=nWttEntries-1=\:0]        wtt_new_wr_entry;
    wire [\=nRttEntries-1=\:0]        rtt_grant_given;
    wire [\=nWttEntries-1=\:0]        wtt_grant_given;
    wire [\=nRttEntries-1=\:0]        rtt_grant_given_in;
    wire [\=nWttEntries-1=\:0]        wtt_grant_given_in;
    wire [\=nRttEntries-1=\:0]        addr_match_rtt;
    wire [\=nWttEntries-1=\:0]        addr_match_wtt;
    wire [\=nRttEntries-1=\:0]        init_id_match_rtt;
    wire [\=nWttEntries-1=\:0]        init_id_match_wtt;    
    wire [\=nWttEntries-1=\:0]        wtt_ewa_sent_set;
    wire [\=nRttEntries-1=\:0]        rtt_cmo_blocked;
    wire [\=axi_id_width-1=\:0]       wr_axi_id_comp;
    wire [\=axi_id_width-1=\:0]       rd_axi_id_comp;
    wire [\=axi_id_width-1=\:0]       rtt_axi_id;
    wire [\=rtt_id_width-1=\:0]       rtt_entry_id;    
    wire [\=axi_id_width-1=\:0]       wtt_axi_id;
    wire [\=wtt_id_width-1=\:0]       wtt_entry_id;    
    wire [\=axi_id_num_wr-1=\:0]      invalid_wr_axi_ids;
    wire [\=read_req_width-1=\:0]     read_req_data;
    wire [\=read_resp_width-1=\:0]    read_resp_data;
    wire [\=str_req_width-1=\:0]      str_req_fifo_data_wr;
    wire [\=str_req_width-1=\:0]      str_req_fifo_data_rd;
    wire [\=str_req_width-1=\:0]      str_req_fifo_data_cmo;
    wire [\=axi_id_width-1=\:0 ]      str_req_fifo_axi_id_cmo;     
    wire [\=write_req_width-1=\:0]    write_req_data;
    wire [\=nRttEntries-1=\:0]        rd_axi_depnd_id_entry;
    wire [\=nWttEntries-1=\:0]        wr_axi_depnd_id_entry;
    wire [\=nRttEntries-1=\:0]        rd_ro_depnd_clear;
    wire [\=nRttEntries-1=\:0]        rd_eo_depnd_clear;
    wire [\=nRttEntries-1=\:0]        rd_axi_depnd_clear;
    wire [\=nWttEntries-1=\:0]        wr_ro_depnd_clear;
    wire [\=nWttEntries-1=\:0]        wr_eo_depnd_clear;
    wire [\=nWttEntries-1=\:0]        wr_axi_depnd_clear;
    wire [\=nWttEntries-1=\:0]        wr_wo_depnd_clear;
    wire [\=nRttEntries-1=\:0]        rd_sleep_clear;
    wire [\=nWttEntries-1=\:0]        wr_sleep_clear;
    wire [\=tt_id_width-1=\:0]        rtt_read_alloc_id;
    wire [\=tt_id_width-1=\:0]        rd_ro_depnd_id_in;
    wire [\=tt_id_width-1=\:0]        rd_eo_depnd_id_in;
    wire [\=tt_id_width-1=\:0]        rd_axi_depnd_id_in;
    wire [\=axi_id_width-1=\:0]       rd_axi_id_in;        
    wire [\=tt_id_width-1=\:0]        wr_ro_depnd_id_in;
    wire [\=tt_id_width-1=\:0]        wr_eo_depnd_id_in;
    wire [\=tt_id_width-1=\:0]        wr_wo_depnd_id_in;
    wire [\=tt_id_width-1=\:0]        wr_axi_depnd_id_in;
    wire [\=axi_id_width-1=\:0]       wr_axi_id_in;    
    wire [\=nRttEntries-1=\:0]        ro_match_rtt_id;
    wire [\=nRttEntries-1=\:0]        eo_match_rtt_id;
    wire [\=nWttEntries-1=\:0]        ro_match_wtt_id;
    wire [\=nWttEntries-1=\:0]        eo_match_wtt_id;
    wire [\=nWttEntries-1=\:0]        wo_match_wtt_id;
    wire [\=nWttEntries-1=\:0]        wtt_addr_ewa_match_id;
    wire [\=nWttEntries-1=\:0]        wtt_muxarb_grant;
    wire [\=nWttEntries-1=\:0]        wtt_valid_entries;
    wire [\=nRttEntries-1=\:0]        rtt_muxarb_grant;
    wire [\=nRttEntries-1=\:0]        rtt_valid_entries;
    wire                              no_more_wr_axi_id;
    wire                              no_more_rd_axi_id;
    wire                              wtt_addr_ewa_match;
    wire                              dtw_data_done;  
    wire                              init_cond;
    wire [\=nRttEntries-1=\:0]        axi_id_match_rd;
    wire [\=nWttEntries-1=\:0]        axi_id_match_wr;
    wire                              cmd_req_fifo_valid;
    wire                              cmd_req_fifo_empty;
    wire                              cmd_resp_fifo_ready;
    wire                              str_req_rd_fifo_in_ready;
    wire                              rtt_empty;
    wire                              wtt_empty;
    wire                              rtt_full;
    wire                              wtt_full;
    wire                              out_cmd_req_fifo_ready;
    wire                              str_req_fifo_ready_rd;
    wire                              str_req_fifo_valid_rd;
    wire                              str_req_fifo_last_rd;
    wire                              read_resp_valid;
    wire                              read_resp_ready;
    wire                              rd_axi_id_retire;
    wire                              use_new_axi_id;
    wire                              all_axi_ids_in_use;
    wire                              rd_ro_depnd_set;
    wire                              rd_eo_depnd_set;
    wire                              read_req_fifo_ready;
    wire                              read_req_valid;
    wire                              rd_axi_depnd_set;
    wire                              rd_sleep_set;
    wire                              str_req_fifo_ready_wr;
    wire                              str_req_fifo_valid_wr;
    wire                              str_req_fifo_last_wr;
    wire                              write_resp_valid;
    wire                              write_req_fifo_out_valid;
    wire                              out_write_req_ready;
    wire                              wr_axi_id_retire;
    wire                              write_resp_ready;
    wire                              wr_ro_depnd_set;
    wire                              wr_eo_depnd_set;
    wire                              wr_wo_depnd_set;
    wire                              write_req_fifo_ready;
    wire                              write_req_valid;
    wire                              wtt_wo_match_wr;
    wire                              wr_axi_depnd_set;
    wire                              wr_sleep_set;
    wire                              read_resp_fifo_in_valid;
    wire                              read_resp_fifo_ready;
    wire                              str_req_fifo_valid_cmo;
    wire                              str_req_fifo_last_cmo;
    wire                              str_req_fifo_ready_cmo;
    wire                              rtt_has_muxarb_valid_entry;
    wire                              read_resp_data_uc;
    wire                              read_resp_data_c;
    wire                              mem_data_uc;
    wire                              mem_data_c;
    wire                              r_mem_data_c;
    wire                              rtt_cmo_match;
    wire                              str_busy;
    wire                              dtr_busy;
    wire                              addr_match_on_wtt;
    wire                              addr_match_on_rtt;    
    wire                              release_rbid_credit;
    wire                              pmon_address_collision;
    wire                              pmon_div_by_sixteen;
    wire [7:0]                        pmon_wtt_count;
    wire [7:0]                        pmon_rtt_count;  
    wire                              wtt_eo_full;
    wire			      pmon_dtwreq_BW;
    wire 			      pmon_dtrreq_BW; \jsbegin
if (aruser_width != 0) { \jsend
    wire [\=wAux-1=\:0] pmon_dtr_req_user_bits; \jsbegin
} 

if (awuser_width != 0) { \jsend
    wire [\=wAux-1=\:0] pmon_dtw_req_user_bits; \jsbegin
} 

/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysReqSender) { \jsend
 wire event_in_targets = 1'b1;
 wire sys_evt_coh_busy; 
 wire evt_buffer_busy; \jsbegin 
}\jsend

wire [\=wEventTimeout-1=\:0] csr_event_timeout_value;
wire [\=wProtocolTimeout-1=\:0] csr_protocol_timeout_value;
wire csr_sys_evt_sender_enable;
wire csr_sys_evt_sender_err_vld;
wire [\=wFUnitId-1=\:0] csr_sys_evt_sender_err_f_unit_id;
wire csr_sys_evt_sender_err_protocol_sys;
wire csr_sys_evt_sender_err_protocol_timeout;
wire csr_sys_evt_sender_err_event_timeout; 

                               
//=============================================================================
// Wire Bundles
//=============================================================================
    \=m.bundleFunctions.wiresFromInterface(reqAckEventInterface.name, reqAckEventInterface.signals, [], u.bundle)=\

    \=m.bundleFunctions.wiresFromInterface('', csrAddrTransInterface, [], u.bundle)=\
    \=m.bundleFunctions.wiresFromInterface('axi_mst_placeholder_', AXI_Interface, [], u.bundle)=\
    \=m.bundleFunctions.wiresFromInterface('axi_mst_shim_', AXI_Interface_smiWidth, [], u.bundle)=\
    \=m.bundleFunctions.wiresFromInterface('axi_mst_pipe_', AXI_Interface, [], u.bundle)=\ 

    \=m.bundleFunctions.wiresFromInterface('DII',pmonCsrIfGenerator.signalBundle('slave'), [], u.bundle)=\

\jsbegin
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if(useExternalMemory != 1){
\jsend
    \=bundleFunctions.wiresFromInterface('mem__' + readDataMemInterface.rtlPrefixString, memoryInterface,   [], obj.lib.bundle)=\
\js}

    \=bundleFunctions.wiresFromInterface('rtt_',         TTCtl,             ['retire_entry','valid_entries','muxarb_grant'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('wtt_',         TTCtl,             ['retire_entry','valid_entries','muxarb_grant'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('tt_',          TTCtl,             [], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('tt_',          TTentry2,          ['cmo','prot','ex_pass','lock'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('tt_',          TT1,               ['addr', 'ordering', 'init_id','ewa','narrow','tof','prot'], obj.lib.bundle)=\

\jsbegin
for (var i = 0; i < nRttEntries; i++) {
\jsend
    \=bundleFunctions.wiresFromInterface('rtt_entry'+i+'_', TTentryDTR, ['lock','addr','size','intfsize','mpf1', 'ca','ch','st','narrow','ql','priority','qos','tof', 'user'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('rtt_entry'+i+'_', TTentry1, ['tid', 'init_id', 'tm','data_pending'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('rtt_entry'+i+'_', TTentry2, ['valid','prot', 'oldest', 'axi_id', 'wo_depnd_id', 'wo_depnd', 'youngest_wo','ewa','ewa_sent'], obj.lib.bundle)=\
\jsbegin
}

for (var i = 0; i < nWttEntries; i++) {
\jsend
    \=bundleFunctions.wiresFromInterface('wtt_entry'+i+'_', TTentryDTW, ['tid','addr', 'size','intfsize','dbad','tof','narrow', 'user','data_pending'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('wtt_entry'+i+'_', TTentry1, [ 'init_id','mpf1', 'tm', 'ca','ch','st','cmo','ql','priority','qos'], obj.lib.bundle)=\
    \=bundleFunctions.wiresFromInterface('wtt_entry'+i+'_', TTentry2, ['valid','prot', 'oldest', 'axi_id', 'dtw_tid','dtw_ql','dtw_priority','ewa','lock','ex_pass','ewa_sent','cmo'], obj.lib.bundle)=\
\jsbegin
}

//=============================================================================
// DII Clock Gating
//=============================================================================

\jsend
\=bundleFunctions.wiresFromInterface('',     clkInterface, [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface('ott_', clkInterface, [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface('dtw_', clkInterface, [], obj.lib.bundle)=\

wire busy;
wire gated_test_en;
wire gated_clk_en;

assign reset_n = to_clk_gate_reset_n;
assign ott_reset_n = to_clk_gate_reset_n;
assign dtw_reset_n = to_clk_gate_reset_n;

\js if (blkClkGateOn != undefined & blkClkGateOn) {

\jsbegin
// Always have wTestEn as 1
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (clkInterfaceParams.wTestEn) {
\jsend
assign gated_test_en = to_clk_gate_test_en;
  \js } else {
assign gated_test_en = 1'b0;  
  \js }

assign gated_clk_en = r_busy | busy | cmux_busy | \=apbInterfaceName=\psel;

\=u.instance ({
	     instanceName : 'blk_clk_gate',
	     moduleName : 'cg',
	     params : {
	     	    width : 1
		      },
	     ports : {
	     	   clk_in  : 'to_clk_gate_clk',
		   clk_out : 'clk',
		   test_en : 'gated_test_en',
		   en      : 'gated_clk_en'
		   }
		   })=\

\=u.instance ({
	     instanceName : 'blk_clk_gate_ott',
	     moduleName : 'cg',
	     params : {
	     	    width : 1
		      },
	     ports : {
	     	   clk_in  : 'to_clk_gate_clk',
		   clk_out : 'ott_clk',
		   test_en : 'gated_test_en',
		   en      : 'gated_clk_en'
		   }
		   })=\

\=u.instance ({
	     instanceName : 'blk_clk_gate_dtw',
	     moduleName : 'cg',
	     params : {
	     	    width : 1
		      },
	     ports : {
	     	   clk_in  : 'to_clk_gate_clk',
		   clk_out : 'dtw_clk',
		   test_en : 'gated_test_en',
		   en      : 'gated_clk_en'
		   }
		   })=\

\js } else {
assign clk     = to_clk_gate_clk;
assign ott_clk = to_clk_gate_clk;
assign dtw_clk = to_clk_gate_clk;
\js }

//=============================================================================
// DII Clock in F Unit ID to cut IO Paths
//=============================================================================

wire [\=wFUnitId-1=\:0] r_my_f_unit_id;

\=u.dffre(  wFUnitId
          , 'r_my_f_unit_id'
	  , 'my_f_unit_id'
	  , wFUnitId+'\'b0'
	  , "1'b1"
	  , 'to_clk_gate_clk'
	  , 'to_clk_gate_reset_n')=\
\jsbegin

//=============================================================================
// DII PMA Slave Instance
//=============================================================================

\jsend
wire rtt_busy = |rtt_valid_entries;
wire wtt_busy = |wtt_valid_entries;

wire r_cmux_busy;

\=u.dffre(  1
          , 'r_cmux_busy'
	  , 'cmux_busy'
	  , "1'b0"
	  , "1'b1"
	  , 'to_clk_gate_clk'
	  , 'to_clk_gate_reset_n')=\

\=u.dffre(  1
          , 'r_busy'
          , 'busy'
          , "1'b0"
          , "1'b1"
          , 'to_clk_gate_clk'
          , 'to_clk_gate_reset_n')=\
	  
assign busy     = ~cmd_req_fifo_empty | wtt_busy | rtt_busy | r_cmux_busy | dtr_busy | str_busy | \=apbInterfaceName=\psel | trace_capture_busy 
\jsbegin
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysReqSender) { \jsend
		| sys_evt_coh_busy | evt_buffer_busy
\js } 
				; \jsbegin
if (usePma ) {
//-----------------------------------------------------------------------------
// CSR Interfaces

var pma_interfaces = [];
var dii_num = 0;

pma_interfaces[dii_num] =     {
                                modulePrefix  : '',
                                localPrefix   : 'to_clk_gate_' ,
                                interface     :  clkInterfaceNoTest
                              };

dii_num++;

pma_interfaces[dii_num] =     {
                                 modulePrefix  :  qInterfaceName,
                                 localPrefix   :  qInterfaceName,
                                 interface     :  qInterface 
                              };

dii_num++;

var interfaces   =  {};

interfaces["clkInt"]  =       {
                                 "name"      : "",
                                 "params"    : {},
                                 "direction" : "slave",
                                 "interface" : "InterfaceCLK"
                              };

interfaces["masterInt"] =     {
                                 "name"      : qInterfaceName,
                                 "params"    : {
				                  "wActive"     : PmaInfo.wActive,
						  "channelType" : PmaInfo.fnPmaInterfaceType
				               },
                                 "direction" : "slave",
                                 "interface" : "InterfacePQChannel"
                              };

interfaces["pmaControlInt"] = {
                                 "name"      : "pma_ctl_",
                                 "params"    : {},
                                 "direction" : "master",
                                 "interface" : "InterfacePMAControl"
			      };
\jsend

\js // Break Feedthrough Path

wire goto_sleep;
wire asleep;

\=obj.lib.instance ({
                instanceName: 'dii_pma',
                moduleName: 'pma_slave',
                params : {
                             syncReq              : false,
                             channel              : "Q",
			     pipeActive           : true,
			     interfaces           : interfaces
                         },
	        ports:   {
                             "pma_ctl_asleep"     : 'asleep',
			     "pma_ctl_goto_sleep" : 'goto_sleep',
			     "pma_ctl_busy"       : 'busy',
			     "pma_ctl_abort"      : '1\'b0'
			 },
                verilogParams : {},
                interfaces : pma_interfaces
	})=\
\js }

//=============================================================================
// DII  Concerto Mux Instance
//=============================================================================

//-----------------------------------------------------------------------------
// Concerto Mux Interfaces


\js for (var i=0; i<CONC_TX_INTF.length; i++) {
    \js if (CONC_TX_INTF[i].name!='dtw_dbg_req_') {
    \=m.bundleFunctions.wiresFromInterface(CONC_TX_INTF[i].name, CONC_TX_INTF[i].signals, [], u.bundle)=\
    \js }
\js }
\js for (var i=0; i<CONC_RX_INTF.length; i++) {
    \js if (CONC_RX_INTF[i].name!='dtw_dbg_rsp_') {
    \=m.bundleFunctions.wiresFromInterface(CONC_RX_INTF[i].name, CONC_RX_INTF[i].signals, [], u.bundle)=\
    \js }
\js }

\jsbegin
    var concertoMuxFaultPorts = {};
    var concertoMuxInterfaces = [];
    var CONCERTO_MUX_INTF = [];
    var conc_intf_iterated = [];

    // Create CMUX/Tre Fault Ports if they Exist
    var create_UCE = false;
    for(let i=0; i<SMI_RX_INTF.length; i++) 
    {    
       for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
       {
         let name = SMI_RX_INTF[i].params.fnMsgClass[j];
         let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });

         var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
	 var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
	 var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
         var isDuplicate     = conc_intf_iterated.includes(name);

         if( (hasMessageProt | hasDataProt | hasHeaderProt) & !isDuplicate ) {
            u.port('output', CONC_RX_INTF[index].name + 'CE', 1);
	    concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'CE'] = 'dii_cmux_' + CONC_RX_INTF[index].name + 'CE';
         } else {\jsend
	    assign  dii_cmux_\=CONC_RX_INTF[index].name=\CE = 1'h0;
	 \jsbegin
	 } 

         if(hasHeaderProt & !isDuplicate ) {
	    \jsend
	    wire dii_cmux_\=CONC_RX_INTF[index].name=\header_UCE;
	    \jsbegin
	    concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'header_UCE'] = 'dii_cmux_' + CONC_RX_INTF[index].name + 'header_UCE';
            create_UCE = true;
         }

         if(hasMessageProt & !isDuplicate ) {
	    \jsend
	    wire dii_cmux_\=CONC_RX_INTF[index].name=\message_UCE;
	    \jsbegin
	    concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'message_UCE'] = 'dii_cmux_' + CONC_RX_INTF[index].name + 'message_UCE';
         }
	 
         if(hasDataProt & !isDuplicate ) {
	    \jsend
	    wire dii_cmux_\=CONC_RX_INTF[index].name=\data_UCE;
	    \jsbegin
	    concertoMuxFaultPorts[CONC_RX_INTF[index].name + 'data_UCE'] = 'dii_cmux_' + CONC_RX_INTF[index].name + 'data_UCE';
         }
	 
	 conc_intf_iterated.push(name);
       }
    }

    concertoMuxFaultPorts['busy'] = 'cmux_busy';
    
    // Aggregate header Uncorretable errors into one UCE signal
    \jsend
	assign dii_cmux_UCE = 1'b0 
	\jsbegin
        for(let i=0; i<SMI_RX_INTF.length; i++) 
        {    
          for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
          {
                 let name = SMI_RX_INTF[i].params.fnMsgClass[j];
                 let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });	  
	 
	  	 var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
		 if( hasHeaderProt ) { \jsend
		    | dii_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\header_UCE  \jsbegin
		 }
		 
                 var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
		 if( hasMessageProt ) { \jsend
		    | dii_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\message_UCE  \jsbegin
		 }

    	         var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
		 if( hasDataProt ) { \jsend
		    | dii_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\data_UCE  \jsbegin
		 }
	  }
	} \jsend
	;

	\jsbegin
        for(let i=0; i<SMI_RX_INTF.length; i++) 
        {    
          for (let j=0; j<SMI_RX_INTF[i].params.fnMsgClass.length; j++)
          {
                 let name = SMI_RX_INTF[i].params.fnMsgClass[j];
                 let index = CONC_RX_INTF.findIndex(function(element) {return element.name === name; });
		 
	         \jsend
		 wire \=SMI_RX_INTF[i].params.fnMsgClass[j]=\UCE = 1'b0 
		 \jsbegin
	  	 var hasHeaderProt   = (SMI_RX_INTF[i].params.protection != null & SMI_RX_INTF[i].params.protection != "none");
		 if( hasHeaderProt ) { \jsend
		    | dii_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\header_UCE  \jsbegin
		 }
		 
                 var hasMessageProt  = (CONC_RX_INTF[index].params.protection != null & CONC_RX_INTF[index].params.protection != "none");
		 if( hasMessageProt ) { \jsend
		    | dii_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\message_UCE  \jsbegin
		 }

	         var hasDataProt     = (CONC_RX_INTF[index].params.dpProtection != null & CONC_RX_INTF[index].params.dpProtection != "none" & CONC_RX_INTF[index].params.dpPresent);
		 if( hasDataProt ) { \jsend
		    | dii_cmux_\=SMI_RX_INTF[i].params.fnMsgClass[j]=\data_UCE  \jsbegin
		 }
		 \jsend
		 ;
		 \jsbegin
	  }
	} \jsend


    \jsbegin


    CONCERTO_MUX_INTF.push({
        modulePrefix: '',
        localPrefix: 'to_clk_gate_',
        interface: clkInterfaceNoTest
    });
    
    for (var i=0; i<SMI_TX_INTF.length; i++) {
       CONCERTO_MUX_INTF.push({
                               modulePrefix: SMI_TX_INTF[i].name, 
                               localPrefix: SMI_TX_INTF[i].name, 
                               interface: SMI_TX_INTF[i].signals});
//console.log("SMI_tx: ", SMI_TX_INTF[i].signals);

     if(SMI_TX_INTF[i].params.dpPresent) {
        CONCERTO_MUX_INTF.push({
                         modulePrefix: SMI_TX_INTF[i].name, 
                         localPrefix: SMI_TX_INTF[i].name, 
                         interface: SMI_TX_INTF[i].dpSignals
                         });
     }

    };
    for (var i=0; i<SMI_RX_INTF.length; i++) {
      CONCERTO_MUX_INTF.push({
                               modulePrefix: SMI_RX_INTF[i].name, 
                               localPrefix: SMI_RX_INTF[i].name, 
                               interface: SMI_RX_INTF[i].signals});

     if(SMI_RX_INTF[i].params.dpPresent) {
        CONCERTO_MUX_INTF.push({
                         modulePrefix: SMI_RX_INTF[i].name, 
                         localPrefix: SMI_RX_INTF[i].name, 
                         interface: SMI_RX_INTF[i].dpSignals
                         });
     }


       };
    for (var i=0; i<CONC_TX_INTF.length; i++) 
      {CONCERTO_MUX_INTF.push({
                               modulePrefix: CONC_TX_INTF[i].name, 
                               localPrefix: CONC_TX_INTF[i].name, 
                               interface: CONC_TX_INTF[i].signals});
//console.log("CONC_tx: ", CONC_TX_INTF[i].signals);

       };
    for (var i=0; i<CONC_RX_INTF.length; i++) 
      {CONCERTO_MUX_INTF.push({
                               modulePrefix: CONC_RX_INTF[i].name, 
                               localPrefix: CONC_RX_INTF[i].name, 
                               interface: CONC_RX_INTF[i].signals});
       };

\jsend

 \=obj.lib.instance ({
                instanceName: 'concerto_mux',
                moduleName: 'concerto_mux',
                params : {
                          wFUnitId: wFUnitId,
                          wFPortId: wFPortId, 
                          smiTxPortInterfaces : SMI_TX_INTF,
                          smiRxPortInterfaces : SMI_RX_INTF,
                          concertoTxInterfaces : CONC_TX_INTF,
                          concertoRxInterfaces : CONC_RX_INTF
                          },
                verilogParams : {},
                ports : concertoMuxFaultPorts,
                interfaces : CONCERTO_MUX_INTF})=\


\jsbegin
//=============================================================================
// DII Sys evt coh concerto block
//=============================================================================
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysReqSender) {
	 var sys_evt_coh_concerto_params = { 

            wChipletId              : wChipletId,
            wLinkId                 : wLinkId,
            wFUnitId                : wFUnitId,
            wFPortId                : wFPortId,
            wNUnitId                : wNUnitId,
            concParams              : obj.lib.getParam('concParams'),
            cmType                  : cmType,
            sysReqTxInterface       : SYS_REQ_TX_INTF,
            sysRspRxInterface       : SYS_RSP_RX_INTF,

            useSysEvtSender         : 1,
            useSysEvtReceiver       : 0,
            useSysCoh               : 0,
            useSysCohSender         : 0,
            nEventAgentsForSender   : nDves,
            nSnoopAgents            : 0,
            wSnoopEnables           : 0,
            wProtocolTimeout        : wProtocolTimeout,
            wEventTimeout           : wEventTimeout
        };
	 var instance_ports_for_sys_evt_coh_concerto = { 
            clk                                    : clkInterfaceJson.name+'clk',
            reset_n                                : clkInterfaceJson.name+'reset_n',
            my_f_unit_id                           : 'r_my_f_unit_id',
            busy                                   : 'sys_evt_coh_busy',
            csr_sys_evt_sender_enable              : 'csr_sys_evt_sender_enable',
            csr_sys_evt_protocol_timeout_value     : 'csr_protocol_timeout_value',
            csr_event_timeout_value                : 'csr_event_timeout_value',
            csr_sys_evt_sender_err_vld             : 'csr_sys_evt_sender_err_vld',
            csr_sys_evt_sender_err_f_unit_id       : 'csr_sys_evt_sender_err_f_unit_id',
            csr_sys_evt_sender_err_protocol_sys    : 'csr_sys_evt_sender_err_protocol_sys',
            csr_sys_evt_sender_err_protocol_timeout: 'csr_sys_evt_sender_err_protocol_timeout',
            csr_sys_evt_sender_err_event_timeout   : 'csr_sys_evt_sender_err_event_timeout',
            event_in_req                           : reqAckEventInterface.name+"req",
            event_in_ack                           : reqAckEventInterface.name+"ack",
            event_in_targets                       : 'event_in_targets'
        };

        if (wChipletId > 0) {
            instance_ports_for_sys_evt_coh_concerto['my_chiplet_id'] = 'my_chiplet_id';
        }

	for (var i = 0; i < nDves; i++) {
      // dve always present
      /* istanbul ignore else env ncore_3p6,ncore_3p7 */
	  if ( obj.lib.getParam('haveDveInterface') ) {
	    instance_ports_for_sys_evt_coh_concerto['event'+i+'_f_unit_id'] = 'dve_f_unit_id';
	  }
	} \jsend

	\=obj.lib.instance({
            instanceName: 'u_sys_evt_coh_concerto',
            moduleName: 'sys_evt_coh_concerto',
            params: sys_evt_coh_concerto_params,
            ports: instance_ports_for_sys_evt_coh_concerto,
            interfaces: [
                {modulePrefix: 'sys_req_tx_', localPrefix: 'sys_req_tx_', interface: SYS_REQ_TX_INTF},
                {modulePrefix: 'sys_rsp_rx_', localPrefix: 'sys_rsp_rx_', interface: SYS_RSP_RX_INTF},
            ]
        })=\  \jsbegin

} else { \jsend
	assign csr_sys_evt_sender_err_vld 		 = 1'b0;
	assign csr_sys_evt_sender_err_f_unit_id 	 = \=wFUnitId=\'b0;
	assign csr_sys_evt_sender_err_protocol_sys 	 = 1'b0;
	assign csr_sys_evt_sender_err_protocol_timeout 	 = 1'b0;
	assign csr_sys_evt_sender_err_event_timeout 	 = 1'b0; 
	assign \=reqAckEventInterface.name=\ack		= 1'b0; \jsbegin 
} \jsend 

  assign csr_event_timeout_value  = {\=wEventTimeout=\{1'b1}};  // Because there is no external event interface

\jsbegin

//=============================================================================
// DII PMON Instance
//=============================================================================
if(!nPerfCounters) {
  var pmonEventTable            = [];
 
} else {
const smiTxStallEvents		= SMI_TX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_TX_INTF array
const smiRxStallEvents		= SMI_RX_INTF.map( m.genSmiStallEvent ); // Returns an array with { expr, width } objects one for each interface in SMI_RX_INTF array

var pmonEventTable                    = [
        { width: 1, value: "1'b0"},
        { width: 1, value: smiTxStallEvents[0].expr},
        { width: 1, value: smiTxStallEvents[1].expr},
        { width: 1, value: smiTxStallEvents[2].expr},
        { width: 1, value: "1'b0"}, //4
        { width: 1, value: smiRxStallEvents[0].expr},
        { width: 1, value: smiRxStallEvents[1].expr},
        { width: 1, value: smiRxStallEvents[2].expr},
        { width: 1, value: "1'b0"}, //8
        { width: 1, value: "(axi_mst_aw_valid & ~axi_mst_aw_ready)"}, // AW Stall
        { width: 1, value: "(axi_mst_w_valid & ~axi_mst_w_ready)"}, // W Stall
        { width: 1, value: "(axi_mst_b_valid & ~axi_mst_b_ready)"}, // B Stall
        { width: 1, value: "(axi_mst_ar_valid & ~axi_mst_ar_ready)"}, // AR Stall
        { width: 1, value: "(axi_mst_r_valid & ~axi_mst_r_ready)"}, // RStall
        { width: 1, value: "1'b0"},
        { width: 1, value: "1'b0"},
        { width: 1, value: "1'b0"}, //16
        { width: 1, value: "pmon_dtwreq_BW"},
        { width: 1, value: "pmon_dtrreq_BW"},
        { width: 1, value: "1'b0"},
        { width: 8, value: "pmon_wtt_count" }, // WTT Entries
        { width: 8, value: "pmon_rtt_count"},
        { width: wTotalSmiPortsNum, value: "pm_trace_messages_captured"}, // Captured SMI Packets
        { width: wTotalSmiPortsNum, value: "pm_trace_messages_dropped"}, // Dropped SMI Packets
        { width: 1, value: "pmon_address_collision"}, // Address Collision
        { width: 4, value: "4'b0"},
        { width: 1, value: "1'b0"}, 
        { width: 1, value: "1'b0"}, 
        { width: 1, value: "1'b0"},
        { width: 1, value: "1'b0"},
        { width: 1, value: "pmon_div_by_sixteen"} // Divide by 16 free running Counter
];  \jsend

\jsbegin
var wArAuxLocal; 
if (aruser_width != 0) {
  wArAuxLocal = wAux;
} else {
  wArAuxLocal = 0;
}

var wAwAuxLocal; 
if (awuser_width != 0) {
  wAwAuxLocal = wAux;
} else {
  wAwAuxLocal = 0;
}

var filterAttributesMap = [
  { eventIndex: 17, name:"dtwreq_BW_" , signals: { "funit_id": wFUnitId, "user": wAwAuxLocal } },
  { eventIndex: 18, name: "dtrreq_BW_" , signals: { "funit_id": wFUnitId, "user": wArAuxLocal } }
]; 

var pmonInterfaces	= {
	clkInterface: clkInterfaceJson,
	csrInterface: pmonCsrIfGenerator.interfaceGeneric("slave", "DII"),	// Returns a new-style InterfaceGeneric instance
	evtInterfaces: genPmonEvtInterfaces( pmonEventTable ),
	masterTriggerInterface: /* istanbul ignore next env ncore_3p4,ncore_3p6,ncore_3p7 */ masterTriggerNewStyleInterface || { _SKIP_: true },
	filterAttrInterfaces: m.genFilterAttrInterfaces(filterAttributesMap),
	latencyInterfaces: [
           m.oldStyleToNewStyleGenericInterface("slave", { name: "read_latency_", signals: {alloc: obj.lib.getParam('cmpInfo','nRttCtrlEntries'), dealloc:obj.lib.getParam('cmpInfo','nRttCtrlEntries')} }),
           m.oldStyleToNewStyleGenericInterface("slave", { name: "wr_latency_", signals: {alloc: obj.lib.getParam('cmpInfo', 'nWttCtrlEntries'), dealloc: obj.lib.getParam('cmpInfo', 'nWttCtrlEntries')} })
		] 
 
};


pmonInterfaces.evtInterfaces.forEach( evtInterface => { \jsend
\=declareNewStyleInterface( evtInterface )=\ \jsbegin
}); 

pmonInterfaces.latencyInterfaces.forEach(latencyInterface => { \jsend
\=declareNewStyleInterface(latencyInterface)=\ \jsbegin
});


pmonInterfaces.filterAttrInterfaces.forEach(filterAttrIntrfc => { \jsend
\=declareNewStyleInterface( filterAttrIntrfc )=\  \jsbegin
}); 

} \jsend

wire [7:0] pmon_wtt_count_in;

wire wtt_allocated_entry = (|wtt_allocate_new_entry);
wire wtt_deallocated_entry = (|wtt_retire_entry);

assign pmon_wtt_count_in = (wtt_allocated_entry & wtt_deallocated_entry) ? pmon_wtt_count     :
                           (wtt_allocated_entry)                         ? pmon_wtt_count + 8'd1 :
			   (wtt_deallocated_entry)                       ? pmon_wtt_count - 8'd1 : pmon_wtt_count;

\=obj.lib.dffre(8, 'pmon_wtt_count', 'pmon_wtt_count_in', "8'b0", "1'b1", "to_clk_gate_clk", "to_clk_gate_reset_n")=\

wire [7:0] pmon_rtt_count_in;

wire rtt_allocated_entry =  (|rtt_allocate_new_entry);

wire rtt_deallocated_entry     = (|rtt_retire_entry);
wire rtt_deallocated_entry_cmo = (|rtt_retire_entry_cmo);

assign pmon_rtt_count_in = (rtt_allocated_entry &  (rtt_deallocated_entry ^ rtt_deallocated_entry_cmo))  ? pmon_rtt_count     :
                           (rtt_allocated_entry & ~(rtt_deallocated_entry | rtt_deallocated_entry_cmo))  ? pmon_rtt_count + 8'd1 :
			   (rtt_allocated_entry &  (rtt_deallocated_entry & rtt_deallocated_entry_cmo))  ? pmon_rtt_count - 8'd1 :			   			   
			   (rtt_deallocated_entry ^ rtt_deallocated_entry_cmo)                           ? pmon_rtt_count - 8'd1 :
			   (rtt_deallocated_entry & rtt_deallocated_entry_cmo)                           ? pmon_rtt_count - 8'd2 :			   
			   pmon_rtt_count;

\=obj.lib.dffre(8, 'pmon_rtt_count', 'pmon_rtt_count_in', "8'b0", "1'b1", "to_clk_gate_clk", "to_clk_gate_reset_n")=\

assign pmon_dtwreq_BW = dtw_req_valid & dtw_req_ready; 
assign pmon_dtrreq_BW = dtr_req_valid & dtr_req_ready; 
\jsbegin
const clkInterfaceOld = {
      name : "to_clk_gate_",
      signals : {
      	      clk: 1,
	      reset_n: 1
      }
};

const clk16Interface = {
      name : "to_clk_gate_st_",
      signals: {
      	       clk: 1,
	       reset_n: 1
      }
};
\jsend

\=m.bundleFunctions.wiresFromInterface(clk16Interface.name, clk16Interface.signals, [], u.bundle)=\

assign pmon_div_by_sixteen = \=clk16Interface.name=\clk;

\=u.instance({
    instanceName: 'clk_divider' ,
    moduleName: 'clk_divider',
    params: {
	clkDivisors: [16],
	clkInterface :clkInterfaceOld,	
	clkOutInterfaces: [clk16Interface]
    },
    interfaces :[clkInterfaceOld, clk16Interface].map(getModuleLocalPrefixAndInterface),
    portsDelimiter: '\n    '
})=\


\jsbegin

for (let i=0; i< pmonEventTable.length; i++) { \jsend
	assign \=pmonInterfaces.evtInterfaces[i].name=\val		= \=pmonEventTable[i].value=\; \jsbegin
} 

// Assign filter-attribute interfaces
if (nPerfCounters) { \jsend
assign \=pmonInterfaces.filterAttrInterfaces[0].name=\funit_id 		    = dtw_req_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\]; \jsbegin
if (awuser_width != 0){ \jsend 
assign \=pmonInterfaces.filterAttrInterfaces[0].name=\user 		    = pmon_dtw_req_user_bits; \jsbegin
} \jsend

assign \=pmonInterfaces.filterAttrInterfaces[1].name=\funit_id 		    = dtr_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\]; \jsbegin

if (aruser_width != 0 ) { \jsend
assign \=pmonInterfaces.filterAttrInterfaces[1].name=\user 		    = pmon_dtr_req_user_bits; \jsbegin
} \jsend

//Assign latency interfaces
assign \=pmonInterfaces.latencyInterfaces[0].name=\alloc                     = rtt_new_wr_entry;
assign \=pmonInterfaces.latencyInterfaces[0].name=\dealloc                   = rtt_retire_entry;

assign \=pmonInterfaces.latencyInterfaces[1].name=\alloc                     = wtt_new_wr_entry;
assign \=pmonInterfaces.latencyInterfaces[1].name=\dealloc                   = wtt_retire_entry;


\=u.nInstance({
    instanceName : 'u_ncr_pmon',
    moduleName : 'ncr_pmon',
    params: {
       		nPerfCounters,
		interfaces: pmonInterfaces,
		bwEvtMapping: m.generateBwEvtMapping(filterAttributesMap),
		nLatencyCounters : 16

    },
    interfaceObj: {
		interfaces: pmonInterfaces,
		prefixes: pmonInterfaces 
    }
})=\ \jsbegin
} \jsend

\jsbegin
//=============================================================================
// DII CSR Instance
//=============================================================================

//-----------------------------------------------------------------------------
// CSR Control Interfaces

var rx_csr_interfaces = [];
var csr_interfaces = [];
var dii_num = 0

csr_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : 'to_clk_gate_' ,
            interface     :  clkInterfaceNoTest
} ;

   dii_num++

csr_interfaces[dii_num] = {
            modulePrefix  : apbInterfaceName,
            localPrefix   : apbInterfaceName,
            interface     : apbInterface 
};

   dii_num++

csr_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : 'dii_' ,
            interface     : internalFaultInterface
};

   dii_num++

csr_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : csrAddrTransInterface
};

   dii_num++

csr_interfaces[dii_num] = {
            modulePrefix  : 'dii_',
            localPrefix   : 'csr_trace_' ,
            interface     : traceCsrIfGenerator.signalBundle("slave")};

   dii_num++

csr_interfaces[dii_num] = {
            modulePrefix  : 'dii_',
            localPrefix   : 'DII' ,
            interface     : pmonCsrIfGenerator.signalBundle("slave")
};

// No reg protection for this release
/* istanbul ignore if env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if(regProtectionStyle != null) {
  /* istanbul ignore if env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
  if(regProtectionStyle.protection != "none") {
    csr_interfaces[dii_num] = {
            modulePrefix  : regProtectionInterfaceName,
            localPrefix   : regProtectionInterfaceName,
            interface     : regProtectionInterface
   };
  }
}

for (var i=0; i<CONC_RX_INTF.length; i++) {
      var keys = Object.keys(CONC_RX_INTF[i].signals).filter(key => (key != "initiator_id") & (key != "target_id") & (key != "addr") & (key != "valid") & (key != "ready"));
      csr_interfaces.push({
                               modulePrefix: CONC_RX_INTF[i].name, 
                               localPrefix: CONC_RX_INTF[i].name,
                               interface: CONC_RX_INTF[i].signals, exclude: keys
			  });
      csr_interfaces.push({
                               modulePrefix: CONC_RX_INTF[i].name,
                               localPrefix: CONC_RX_INTF[i].name,
                               interface: { 'UCE' : 1 }
                          });

}
			       
\jsend

//-----------------------------------------------------------------------------
// CSR  Control Instance

wire target_mismatch;
assign dii_target_mismatch_UCE = target_mismatch; \jsbegin
if (nExclusiveEntries == 0) { \jsend
  assign dii_cmux_sys_rsp_rx_CE = 1'h0;
  wire sys_rsp_rx_UCE = 1'h0; \jsbegin
} \jsend

\jsbegin
var instance_ports_for_dii_csr = {
                csr_force_arid_low                  : 'csr_force_arid_low',
                csr_force_awid_low                  : 'csr_force_awid_low',
                csr_force_ro_vz_hi                  : 'csr_force_ro_vz_hi',
                csr_force_eo_vz_hi                  : 'csr_force_eo_vz_hi',
                csr_exclude_ro_write_from_wo        : 'csr_exclude_ro_write_from_wo',
                csr_exclude_initiator_from_ordering : 'csr_exclude_initiator_from_ordering',
	        my_f_unit_id         : 'r_my_f_unit_id',
		my_n_unit_id         : 'my_n_unit_id',
		my_csr_rpn           : 'my_csr_rpn',
		my_csr_nrri          : 'my_csr_nrri',
		c                    : 'c',
		uc                   : 'uc',
		skid_cerr            : 'skid_cerr',
		skid_ucerr           : 'skid_ucerr',
		skid_cerr_entry      : 'skid_cerr_entry',
		skid_ucerr_entry     : 'skid_ucerr_entry',
		dii_en_debug_bist    : 'dii_en_debug_bist',
		target_mismatch      : 'target_mismatch',
		bresp_addr           : 'bresp_addr',
		bresp_valid          : 'bresp_valid',
		bresp_ns             : 'bresp_ns',		
		bresp                : 'bresp',
		rresp_addr           : 'rresp_addr',
		rresp_ns             : 'rresp_ns',		
		rresp_valid          : 'rresp_valid',
		rresp                : 'rresp',
		rb_valid             : 'read_resp_valid',
		rb_ready             : 'read_resp_fifo_ready',
		cerr_threshold       : 'cerr_threshold',
		cmd_req_fifo_empty   : 'cmd_req_fifo_empty',
		wtt_busy             : 'wtt_busy',
		rtt_busy             : 'rtt_busy',
		cmux_busy            : 'cmux_busy',
		str_busy             : 'str_busy',
		dtr_busy             : 'dtr_busy',
		csr_sys_evt_sender_err_vld              : 'csr_sys_evt_sender_err_vld',
		csr_sys_evt_sender_err_f_unit_id        : 'csr_sys_evt_sender_err_f_unit_id',
		csr_sys_evt_sender_err_protocol_sys     : 'csr_sys_evt_sender_err_protocol_sys',
		csr_sys_evt_sender_err_protocol_timeout : 'csr_sys_evt_sender_err_protocol_timeout',
		csr_sys_evt_sender_err_event_timeout    : 'csr_sys_evt_sender_err_event_timeout',
		csr_sys_evt_sender_enable		: 'csr_sys_evt_sender_enable',
		csr_protocol_timeout_value		: 'csr_protocol_timeout_value'
        };
    if (wChipletId > 0) {
        instance_ports_for_dii_csr['my_chiplet_id'] = 'my_chiplet_id';
    }
\jsend

\=u.instance({
            instanceName: 'dii_csr' ,
            moduleName: 'dii_csr',
            params: {
	        skidBufferSRAM                  : CMDOverflowBufInSRAM,
		wSkidEntry                      : wSkidEntry,
                nSkidBufSize                    : nSkidBufSize,
                nSkidBufArb                     : nSkidBufArb,
	        csr                             : CSR,
		wChipletId                      : wChipletId,
		wLinkId                         : wLinkId,
		wFUnitId                        : wFUnitId,
		wNUnitId                        : wNUnitId,
		wFPortId                        : wFPortId,
		wRpn                            : wRpn,
		wNrri                           : wNrri,
		wAddr                           : wAddr,
		nPerfCounters                   : nPerfCounters,
		traceRegInterface               : traceCsrIfGenerator.signalBundle("slave"),
		pmonRegInterface                : pmonCsrIfGenerator.signalBundle("slave"),
		useExternalMemory               : useExternalMemory,
		useResiliency                   : useResiliency,
	        engVerId                        : engVerId,
	        implVerId                       : implVerId,
		fnErrDetectCorrect              : fnErrDetectCorrect,
		ResilienceInfo                  : ResilienceInfo,
		CONC_RX_INTF                    : CONC_RX_INTF,
		useAddrTranslation              : useAddrTranslation,
	        nAddrTransRegisters             : nAddrTransRegisters,
	        csrAddrTransInterface           : csrAddrTransInterface,
	        clkInterface                    : clkInterfaceNoTest,
	        apbInterface                    : apbInterface,
	        apbInterfaceName                : apbInterfaceName,		
		internalFaultInterface          : internalFaultInterface,
		regProtectionInterface          : regProtectionInterface,
		regProtectionInterfaceName      : regProtectionInterfaceName,
		regProtectionStyle              : regProtectionStyle,
		wEventTimeout			: wEventTimeout,
		wProtocolTimeout		: wProtocolTimeout	
            },
            verilogParams: {},
            ports: instance_ports_for_dii_csr,
            interfaces : csr_interfaces,
            portsDelimiter: '\n    '
        })=\
// DII Pipe Control Instance
//=============================================================================

//-----------------------------------------------------------------------------
// CSR Interfaces

\jsbegin
var pipe_control_interfaces = [];
var dii_num = 0

pipe_control_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     :  clkInterfaceNoTest
} ;

   dii_num++

pipe_control_interfaces[dii_num] = {
            modulePrefix  : 'tt_',
            localPrefix   : 'tt_' ,
            interface     :  TT1 
};

   dii_num++

pipe_control_interfaces[dii_num] = {
	    modulePrefix  : reqAckEventInterface.name,
	    localPrefix   : reqAckEventInterface.name,
	    interface     : reqAckEventInterface.signals 
};
\jsend

//-----------------------------------------------------------------------------
// Pipe Control Instance
\jsbegin
var diiPipeControlPorts = {
		cmd_req_fifo_valid       : 'cmd_req_fifo_valid ',
                cmd_req_fifo_data        : 'cmd_req_fifo_data',
                cmd_req_fifo_empty       : 'cmd_req_fifo_empty',
                cmd_resp_fifo_ready      : 'cmd_resp_fifo_ready',
                str_req_rd_fifo_in_ready : 'str_req_rd_fifo_in_ready',
                rtt_empty                : 'rtt_empty',
                wtt_empty                : 'wtt_empty',
                rtt_full                 : 'rtt_full',
                wtt_full                 : 'wtt_full',
                out_cmd_req_fifo_ready   : 'out_cmd_req_fifo_ready',
                rtt_allocate_new_entry   : 'rtt_allocate_new_entry',
                wtt_allocate_new_entry   : 'wtt_allocate_new_entry',
		wtt_addr_ewa_match       : 'wtt_addr_ewa_match'
} 

/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if (useSysReqSender) {
	diiPipeControlPorts['evt_buffer_busy'] = 'evt_buffer_busy';
} \jsend

\=u.instance({
            instanceName: 'pipe_control' ,
            moduleName: 'dii_pipe_control',
            params: {
                configuration      : configuration,
                nExclusiveEntries : nExclusiveEntries,
		wCacheLineOffset   : wCacheLineOffset,
	        cmType             : cmType,
                wMsgId             : wMsgId,
                wInitiatorId       : wInitiatorId,
                wAddr              : wAddr,
                wAux               : wAux,
                wUser              : aruser_width,
                hasAux             : hasAux,
                hasUser            : hasUser,
                hasNs              : hasNs,
	        wIntfSize          : wIntfSize,
                wMpf1              : wMpf1,
                wMpf2              : wMpf2,
                wTOF               : wTOF,
		wPri               : wPriority,
                wQl                : wQl,
                wCmType            : wCmType,
                wSize              : wSize,
                wQos               : wQos,
                axi_id_width       : axi_id_width,
		axi_id_num_rd      : axi_id_num_rd,
		axi_id_num_wr      : axi_id_num_wr,
		axi_data_width     : data_width,
                cmd_attr_width     : cmd_attr_width,
		fnNativeInterface  : fnNativeInterface,
                TT1                : TT1,
		wChipletId         : wChipletId,
		wFUnitId           : wFUnitId,
                wFPortId           : wFPortId,
		useSysReqSender    : useSysReqSender,
		reqAckEventInterface : reqAckEventInterface
            } ,
            verilogParams: {},
            ports: diiPipeControlPorts, 
            interfaces : pipe_control_interfaces,
            portsDelimiter: '\n    '
        })=\
\jsbegin

//=============================================================================
// DII CMDReq FIFO Instance
//=============================================================================

//-----------------------------------------------------------------------------
// CMDReq Interfaces

var cmd_req_interfaces = [];
var dii_num = 0

cmd_req_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     :  clkInterfaceNoTest
} ;

   dii_num++

cmd_req_interfaces[dii_num] = {
            modulePrefix  : 'cmd_req_slv_',
            localPrefix   : 'cmd_req_' ,
            interface     :   CMDReqInterface 
};
   dii_num++;
cmd_req_interfaces[dii_num] = {
            modulePrefix  : 'cmd_rsp_mst_',
            localPrefix   : 'cmd_rsp_' ,
            interface     :  NCCMDRspInterface
};

   dii_num++

if(memGen.skidMem[0].MemType == "SYNOPSYS") {
  cmd_req_interfaces[dii_num] = {
            modulePrefix  : 'skid0_',
            localPrefix   : 'skid0_' ,
            interface     :  skidInterfaceBundle
	    };

   dii_num++
   
   cmd_req_interfaces[dii_num] = {
            modulePrefix  : 'skid1_',
            localPrefix   : 'skid1_' ,
            interface     :  skidInterfaceBundle
	    };

   dii_num++   
}


\jsend
//-----------------------------------------------------------------------------
// CMDReq Instance

\jsbegin
var instance_ports_for_cmd_req = {
                    csr_force_ro_vz_hi       : 'csr_force_ro_vz_hi',
                    csr_force_eo_vz_hi       : 'csr_force_eo_vz_hi',
                    addr_match_on_wtt        : 'addr_match_on_wtt',
                    addr_match_on_rtt        : 'addr_match_on_rtt',
		    skid_cerr                : 'skid_cerr',
		    skid_ucerr               : 'skid_ucerr',
		    skid_cerr_entry          : 'skid_cerr_entry',
		    skid_ucerr_entry         : 'skid_ucerr_entry',		    
	            cmd_req_UCE              : 'cmd_req_UCE',
	            cmd_req_fifo_valid       : 'cmd_req_fifo_valid ',
                    cmd_req_fifo_data        : 'cmd_req_fifo_data', 
                    out_cmd_req_fifo_ready   : 'out_cmd_req_fifo_ready',
                    cmd_resp_fifo_ready      : 'cmd_resp_fifo_ready',
                    str_req_rd_fifo_in_ready : 'str_req_rd_fifo_in_ready',
                    cmd_req_fifo_empty       : 'cmd_req_fifo_empty',
		    wtt_addr_ewa_match       : 'wtt_addr_ewa_match',
		    rtt_cmo_match            : 'rtt_cmo_match',
		    rtt_full                 : 'rtt_full',
                    wtt_eo_full              : 'wtt_eo_full',
                    str_req_fifo_ready_rd    : 'str_req_fifo_ready_rd',
                    str_req_fifo_valid_rd    : 'str_req_fifo_valid_rd',
                    str_req_fifo_data_rd     : 'str_req_fifo_data_rd',
                    str_req_fifo_last_rd     : 'str_req_fifo_last_rd',
                    my_f_unit_id             : 'r_my_f_unit_id'
                   };
    if (wChipletId > 0) {
        instance_ports_for_cmd_req['my_chiplet_id'] = 'my_chiplet_id';
    }
\jsend

\=u.instance({
            instanceName: 'cmd_req' ,
            moduleName: 'dii_cmd_req',
            params: {
                wChipletId         : wChipletId,
                wLinkId            : wLinkId,
                CMDOverflowBufInSRAM : CMDOverflowBufInSRAM,
                fnErrDetectCorrect : fnErrDetectCorrect,
	        memGen              : memGen,
		skidInterfaceBundle : skidInterfaceBundle,
	        nExclusiveEntries  : nExclusiveEntries,
                nSkidBufSize       : nSkidBufSize,
                nSkidBufArb        : nSkidBufArb,
	        wCacheLineOffset   : wCacheLineOffset,
	    	cmType             : cmType,
   		wMsgId             : wMsgId,
    		wInitiatorId       : wInitiatorId,
    		wAddr              : wAddr,
    		wHProt             : wHProt,
    		wTtier             : wTtier,
    		wSteering          : wSteering,
    		wPriority          : wPriority,
    		wQl                : wQl,
		wQos               : wQos,
                nCmdReq            : nCmdReq,
                cmd_attr_width     : cmd_attr_width,
                str_req_width      : str_req_width,
                tt_id_width        : tt_id_width,
                unit_id_width      : unit_id_width,
                port_id_width      : port_id_width_ctl,
                CMDReqInterface    : CMDReqInterface,
                NCCMDRspInterface  : NCCMDRspInterface,
		fnNativeInterface  : fnNativeInterface,
	        wFUnitId           : wFUnitId,
                wFPortId           : wFPortId,
                clkInterface       : clkInterfaceNoTest
            } ,
            verilogParams: {},
            ports: instance_ports_for_cmd_req,
            interfaces : cmd_req_interfaces,
            portsDelimiter: '\n    '
        })=\

\jsbegin
 
//=============================================================================
// DII DTR Req/Rsp Instance
//=============================================================================

//-----------------------------------------------------------------------------
// DTR Req/Rsp Interfaces

var dtr_req_interfaces = [];
var dii_num = 0

dtr_req_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     :  clkInterfaceNoTest
} ;

   dii_num++

dtr_req_interfaces[dii_num] = {
            modulePrefix  : 'dtr_req_mst_',
            localPrefix   : 'dtr_req_' ,
            interface     :  DTRReqInterface 
};

   dii_num++

dtr_req_interfaces[dii_num] = {
            modulePrefix  : 'dtr_rsp_slv_',
            localPrefix   : 'dtr_rsp_' ,
            interface     :  DTRRspInterface  
};

   dii_num++

for(var i=0; i < nRttEntries; i++) {
    dtr_req_interfaces[dii_num] = {
             modulePrefix  : 'rtt_entry'+i+'_',
             localPrefix   : 'rtt_entry'+i+'_',
             interface     :  TTentryDTR 
                        } ;
    dii_num++
}

//-----------------------------------------------------------------------------
// DTR Req/Rsp Instance
var diiDtrReqPorts = {
		dtr_rsp_UCE               : 'dtr_rsp_UCE',
                read_resp_valid           : 'read_resp_valid',
                read_resp_data            : 'read_resp_data',
                read_resp_ready           : 'read_resp_ready',
		rresp_addr                : 'rresp_addr',
		rresp_ns                  : 'rresp_ns',		    
		rresp_valid               : 'rresp_valid',
		rresp                     : 'rresp',
		read_resp_data_uc         : 'read_resp_data_uc',
                rtt_retire_entry          : 'rtt_retire_entry',
                rd_axi_id_retire          : 'rd_axi_id_retire',
                rd_axi_id_comp            : 'rd_axi_id_comp',
		dtr_req_has_credits       : '1\'b1',
                my_f_unit_id              : 'r_my_f_unit_id',
                axi_id_match              : 'axi_id_match_rd',
		dtr_busy                  : 'dtr_busy'
}; 

if (wChipletId > 0) {
  diiDtrReqPorts['my_chiplet_id'] = 'my_chiplet_id';
}

if (aruser_width != 0) {
  diiDtrReqPorts['pmon_dtr_req_user_bits'] = 'pmon_dtr_req_user_bits';
}
\jsend

\=u.instance({
            instanceName: 'dtr_req' ,
            moduleName: 'dii_dtr_req',
            params: {
                wChipletId         : wChipletId,
                wLinkId            : wLinkId,
                nExclusiveEntries  : nExclusiveEntries,
	        ruser_width        : ruser_width,
                wTOF               : wTOF,
	    	cmType             : cmType,
                nRttEntries        : nRttEntries,
                nDtrId             : nDtrId,
                wData              : wData,
                wRresp             : rresp_width,
                axi_id_width       : axi_id_width,
                read_resp_width    : read_resp_width,
                wMsgId             : wMsgId,
                wInitiatorId       : wInitiatorId,
                unit_id_width      : unit_id_width,
                port_id_width      : port_id_width_data,
		wSize              : wSize,
		wIntfSize          : wIntfSize,
                wAddr              : wAddr,
                wHProt             : wHProt,
                wTtier             : wTtier,
                wSteering          : wSteering,
                wPriority          : wPriority,
                wQl                : wQl,
		wQos               : wQos,
                wArUser            : aruser_width,
                wCmType            : wCmType,
		assertOn           : assertOn,
                DTRReqInterface    : DTRReqInterface,
                DTRRspInterface    : DTRRspInterface,
		wMpf1              : wMpf1,
		wFUnitId           : wFUnitId,
                wFPortId           : wFPortId, 
		aruser_width	   : aruser_width,
		wAux		   : wAux
            } ,
            verilogParams: {},
            ports: diiDtrReqPorts,
            interfaces : dtr_req_interfaces,
            portsDelimiter: '\n    '
        })=\

//=============================================================================
// DII RTT Control Instance
//=============================================================================

//-----------------------------------------------------------------------------
// RTT Control Interfaces

\jsbegin
var rtt_ctl_interfaces = [];
var dii_num = 0

rtt_ctl_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     :  clkInterfaceNoTest
} ;

   dii_num++
\jsend

//-----------------------------------------------------------------------------
// RTT Control Instance

\=u.instance({
            instanceName: 'rtt_control' ,
            moduleName: 'dii_rtt_control',
            params: { nRttEntries        : nRttEntries,
                      nWttEntries        : nWttEntries,
                      arid_width         : arid_width,
                      axi_id_width       : axi_id_width,
		      axi_id_num         : axi_id_num_rd,
                      wAddr              : wAddr,
	              nExclusiveEntries : nExclusiveEntries,		      		      
                      wCacheLineOffset   : wCacheLineOffset,
		      wLargestEndpoint   : wLargestEndpoint,		      
		      wMpf2              : wMpf2,
                      wChipletId         : wChipletId,
                      wFUnitId           : wFUnitId,
                      wData              : wData,
		      addressIdMap       : addressIdMap
 } ,
            verilogParams: {},
            ports: {
                    csr_force_arid_low         : 'csr_force_arid_low',
	            no_more_rd_axi_id          : 'no_more_rd_axi_id',
	            rd_axi_id_retire           : 'rd_axi_id_retire',
                    use_new_axi_id             : 'use_new_axi_id',
                    rd_axi_id_comp             : 'rd_axi_id_comp',
		    rd_ro_depnd_set            : 'rd_ro_depnd_set',
                    rd_eo_depnd_set            : 'rd_eo_depnd_set',
		    tt_addr                    : 'tt_addr',		    		    		    
		    tt_or                      : 'tt_ordering',		    		    
		    tt_lock                    : 'tt_lock',
		    tt_mpf2                    : 'tt_mpf2',
		    tt_cmo                     : 'tt_cmo',
                    tt_init_id                 : 'tt_init_id',
		    str_req_fifo_valid_cmo     : 'str_req_fifo_valid_cmo',
	            str_req_fifo_axi_id_cmo    : 'str_req_fifo_axi_id_cmo',	     
                    str_req_fifo_ready_cmo     : 'str_req_fifo_ready_cmo',
                    rtt_allocate_new_entry     : 'rtt_allocate_new_entry',
                    rtt_valid_entries          : 'rtt_valid_entries',
                    use_new_axi_id             : 'use_new_axi_id',
                    rtt_new_axi_id             : 'rtt_new_axi_id',
                    rtt_axi_id                 : 'rd_axi_id_in',
                    rtt_new_wr_entry           : 'rtt_new_wr_entry',
                    all_axi_ids_in_use         : 'all_axi_ids_in_use'
        }, 
           interfaces : rtt_ctl_interfaces,
            portsDelimiter: '\n    '
        })=\

\jsbegin

//=============================================================================
// DII RTT Instance
//=============================================================================

//-----------------------------------------------------------------------------
// RTT Interfaces

var rtt_interfaces = [];

rtt_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : 'ott_' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

rtt_interfaces[dii_num] = {
            modulePrefix  : 'tt_', 
            localPrefix   : 'tt_' ,
            interface     :  TT1, exclude: ['ewa']
};

   dii_num++

rtt_interfaces[dii_num] = {
            modulePrefix  : 'rd_',
            localPrefix   : 'rd_' ,
            interface     :  TT2, exclude: ['allocate_new_entry', 'ro_match_rd', 'ro_match_wr', 'eo_match_rd', 'eo_match_wr', 'new_axi_id']
};

   dii_num++

for(var i=0; i < nRttEntries; i++) {
    rtt_interfaces[dii_num] = {
             modulePrefix  : 'rtt_entry'+i+'_',
             localPrefix   : 'rtt_entry'+i+'_',
             interface     :  TTentry1, exclude : ['resp_pending','dbad','dtw_tid','dtw_ql','dtw_priority','data_pending']
                        } ;
    dii_num++
}

for(var i=0; i < nRttEntries; i++) {
    rtt_interfaces[dii_num] = {
             modulePrefix  : 'rtt_entry'+i+'_',
             localPrefix   : 'rtt_entry'+i+'_',
             interface     :  TTentry2, exclude: ['resp_pending','dbad','dtw_tid','dtw_ql','dtw_priority','clear','wo_depnd_id', 'wo_depnd', 'youngest_wo', 'wr_enable','ewa','ewa_sent']
                        } ;
    dii_num++
}
\jsend

//-----------------------------------------------------------------------------
// RTT Instance

\=u.instance({
            instanceName: 'rtt' ,
            moduleName: 'dii_rtt',
            params: { 
            wMsgId            : wMsgId,
            wAddr             : wAddr,
            axi_id_width      : axi_id_width,
            read_req_width    : read_req_width, 
            wInitiatorId      : wInitiatorId,
            nRttEntries       : nRttEntries,
            nWttEntries       : nWttEntries,
	    wIntfSize         : wIntfSize,
            wMpf1             : wMpf1,
            wMpf2             : wMpf2,
            wTOF              : wTOF,
	    wPri              : wPriority,
	    wQl               : wQl,
	    wQos              : wQos,
            arprot_width      : arprot_width,
            arcache_width     : arcache_width, 
            aruser_width      : aruser_width,
	    str_req_width     : str_req_width,
	    fnNativeInterface : fnNativeInterface,
	    hasUser           : hasUser,	    
            TT1               : TT1,
            TT2               : TT2,
            TTentry1          : TTentry1,
            TTentry2          : TTentry2,
	    wChipletId        : wChipletId,
	    wLinkId           : wLinkId,
	    wFUnitId          : wFUnitId,
            wFPortId          : wFPortId
 } ,
            verilogParams: {},
            ports: {
	     rtt_entry_id               : 'rtt_entry_id',			    
             rd_axi_id_in               : 'rd_axi_id_in',
	     
             read_req_fifo_ready        : 'read_req_fifo_ready',
             read_req_valid             : 'read_req_valid',
             read_req_data              : 'read_req_data',
	     rtt_has_muxarb_valid_entry : 'rtt_has_muxarb_valid_entry',
             rtt_valid_entries          : 'rtt_valid_entries',
             rtt_muxarb_grant           : 'rtt_muxarb_grant',
             rtt_grant_given            : 'rtt_grant_given',
             rtt_grant_given_in         : 'rtt_grant_given_in',
             rtt_empty                  : 'rtt_empty',
             rtt_full                   : 'rtt_full',
	     rtt_cmo_blocked            : 'rtt_cmo_blocked',
	     rtt_read_alloc_id          : 'rtt_read_alloc_id',
             rtt_allocate_new_entry     : 'rtt_allocate_new_entry',
             wtt_allocate_new_entry     : 'wtt_allocate_new_entry',
             rtt_retire_entry           : 'rtt_retire_entry',
             rtt_ro_match_rd            : 'rtt_ro_match_rd',
             rtt_eo_match_rd            : 'rtt_eo_match_rd',
             rtt_ro_match_wr            : 'rtt_ro_match_wr',
             rtt_eo_match_wr            : 'rtt_eo_match_wr',
             wtt_ro_match_rd            : 'wtt_ro_match_rd',
             wtt_eo_match_rd            : 'wtt_eo_match_rd',
	     str_req_fifo_valid_cmo     : 'str_req_fifo_valid_cmo',
	     str_req_fifo_data_cmo      : 'str_req_fifo_data_cmo',
	     str_req_fifo_axi_id_cmo    : 'str_req_fifo_axi_id_cmo',	     
             str_req_fifo_last_cmo      : 'str_req_fifo_last_cmo',
             str_req_fifo_ready_cmo     : 'str_req_fifo_ready_cmo',
	     rtt_retire_entry_cmo       : 'rtt_retire_entry_cmo',
             rtt_new_axi_id             : 'rtt_new_axi_id',
             rtt_axi_id                 : 'rtt_axi_id',
             ro_match_rtt_id            : 'ro_match_rtt_id',
             eo_match_rtt_id            : 'eo_match_rtt_id',
             rd_axi_depnd_id_entry      : 'rd_axi_depnd_id_entry',
             rd_axi_depnd_set           : 'rd_axi_depnd_set',
             rtt_new_wr_entry           : 'rtt_new_wr_entry',
             all_axi_ids_in_use         : 'all_axi_ids_in_use',
	     addr_match_rtt             : 'addr_match_rtt',
	     init_id_match_rtt          : 'init_id_match_rtt',
             axi_id_match_rd            : 'axi_id_match_rd'
  },
            interfaces : rtt_interfaces, 
            portsDelimiter: '\n    '
        })=\
\jsbegin

//=============================================================================
// DII STR Req/Rsp Instance
//=============================================================================

//-----------------------------------------------------------------------------
// STR Req/Rsp Interfaces

var str_req_interfaces = [];
var dii_num = 0

str_req_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

str_req_interfaces[dii_num] = {
            modulePrefix  : 'str_req_mst_',
            localPrefix   : 'str_req_' ,
            interface     :  STRReqInterface 
};

   dii_num++

str_req_interfaces[dii_num] = {
            modulePrefix  : 'str_rsp_slv_',
            localPrefix   : 'str_rsp_' ,
            interface     :  STRRspInterface 
};

   dii_num++


//-----------------------------------------------------------------------------
// STR Req/Rsp Ports

var  instance_ports_for_str_req = {
                    str_rsp_UCE               : 'str_rsp_UCE',
                    str_req_fifo_ready_wr     : 'str_req_fifo_ready_wr',
                    str_req_fifo_valid_wr     : 'str_req_fifo_valid_wr',
                    str_req_fifo_data_wr      : 'str_req_fifo_data_wr',
                    str_req_fifo_last_wr      : 'str_req_fifo_last_wr',
                    str_req_fifo_ready_rd     : 'str_req_fifo_ready_rd',
                    str_req_fifo_valid_rd     : 'str_req_fifo_valid_rd',
                    str_req_fifo_data_rd      : 'str_req_fifo_data_rd',
                    str_req_fifo_last_rd      : 'str_req_fifo_last_rd',
		    my_f_unit_id              : 'r_my_f_unit_id',
		    str_req_has_credits       : '1\'b1',
		    release_rbid_credit       : 'release_rbid_credit',
		    str_busy                  : 'str_busy',
                    str_req_fifo_valid_cmo    : 'str_req_fifo_valid_cmo',
		    str_req_fifo_data_cmo     : 'str_req_fifo_data_cmo',
                    str_req_fifo_last_cmo     : 'str_req_fifo_last_cmo',
                    str_req_fifo_ready_cmo    : 'str_req_fifo_ready_cmo'
};
    if (wChipletId > 0) {
        instance_ports_for_str_req['my_chiplet_id'] = 'my_chiplet_id';
    }
\jsend

//-----------------------------------------------------------------------------
// STR Req/Rsp Instance

\=u.instance({
            instanceName: 'str_req' ,
            moduleName: 'dii_str_req',
            params: {
                wChipletId          : wChipletId,
                wLinkId             : wLinkId,
	        wData               : wData,
	    	cmType              : cmType,
                nWttEntries         : nWttEntries,
                nRttEntries         : nRttEntries,
		nWriteRBIDs         : nWriteRBIDs,
		nNcCmdInFlightToDii : nNcCmdInFlightToDii,
                wMsgId              : wMsgId,
                wInitiatorId        : wInitiatorId,
                unit_id_width       : unit_id_width,
                port_id_width       : port_id_width_ctl,
                wHProt              : wHProt,
                wTtier              : wTtier,
                wSteering           : wSteering,
                wPriority           : wPriority,
                wQl                 : wQl,
		wQos                : wQos,
                wCmType             : wCmType,
                wCmStatus           : wCmStatus,
                str_req_width       : str_req_width,
                tt_id_width         : tt_id_width,
		fnNativeInterface   : fnNativeInterface,
                STRReqInterface     : STRReqInterface,
                STRRspInterface     : STRRspInterface,
		wFUnitId            : wFUnitId,
                wFPortId            : wFPortId
            } ,
            verilogParams  : {},
            ports          : instance_ports_for_str_req,
            interfaces     : str_req_interfaces,
            portsDelimiter : '\n    '
        })=\


\jsbegin

//=============================================================================
// DII DTW Req/Rsp Instance
//=============================================================================

//-----------------------------------------------------------------------------
// DTW Req/Rsp Interfaces

var dtw_req_interfaces = [];
var dii_num = 0

dtw_req_interfaces[dii_num] = {
            modulePrefix   : '',
            localPrefix    : 'dtw_' ,
            interface      : clkInterfaceNoTest
} ;

   dii_num++


dtw_req_interfaces[dii_num] = {
            modulePrefix   : 'dtw_req_slv_',
            localPrefix    : 'dtw_req_' ,
            interface      :  DTWReqInterface 
};
//console.log(DTWReqInterface);
   dii_num++

dtw_req_interfaces[dii_num] = {
            modulePrefix   : 'dtw_rsp_mst_',
            localPrefix    : 'dtw_rsp_' ,
            interface      :  DTWRspInterface 
};

   dii_num++

dtw_req_interfaces[dii_num] = {
            modulePrefix   : 'axi_mst_',
            localPrefix    : 'axi_mst_shim_' ,
            interface      : AXI_Interface, exclude: ['r_', 'b_', 'aw_', 'ar_'] 
};

   dii_num++
 
for(var i=0; i < nWttEntries; i++) {
    dtw_req_interfaces[dii_num] = {
             modulePrefix  : 'wtt_entry'+i+'_',
             localPrefix   : 'wtt_entry'+i+'_',
             interface     :  TTentryDTW 
                        } ;
    dii_num++
}


//-----------------------------------------------------------------------------
// DTW Req/Rsp Instance
var diiDtwReqPorts = 		{
		    dtw_req_UCE              : 'dtw_req_UCE',
	            bresp_addr               : 'bresp_addr',
	            bresp_ns                 : 'bresp_ns',		    
	            bresp_valid              : 'bresp_valid',
	            bresp                    : 'bresp',		    
                    write_resp_valid         : 'write_resp_valid',
                    write_resp_data          : 'write_resp_data',
                    write_req_fifo_out_valid : 'write_req_fifo_out_valid',
                    out_write_req_ready      : 'out_write_req_ready',
                    write_req_rb_id          : 'write_req_rb_id',
                    write_req_ex_pass        : 'write_req_ex_pass',		    
                    wtt_retire_entry         : 'wtt_retire_entry',
                    wr_axi_id_retire         : 'wr_axi_id_retire',
                    wr_axi_id_comp           : 'wr_axi_id_comp',
		    wtt_ewa_sent_set         : 'wtt_ewa_sent_set',
                    write_resp_ready         : 'write_resp_ready',
                    my_f_unit_id             : 'r_my_f_unit_id',
		    dtw_data_done            : 'dtw_data_done',
                    init_cond                : 'init_cond',
                    axi_id_match             : 'axi_id_match_wr',
		    release_rbid_credit      : 'release_rbid_credit'
};

if (wChipletId > 0) {
  diiDtwReqPorts['my_chiplet_id'] = 'my_chiplet_id';
}

if (awuser_width != 0) {
  diiDtwReqPorts['pmon_dtw_req_user_bits'] = 'pmon_dtw_req_user_bits';
}
\jsend
 
\=u.instance({
            instanceName: 'dtw_req' ,
            moduleName: 'dii_dtw_req',
            params: {
                wChipletId         : wChipletId,
                wLinkId            : wLinkId,
	        nExclusiveEntries  : nExclusiveEntries,
	        wTOF                : wTOF,
	        cmType              : cmType,
		nWriteBufferEntries : nWriteBufferEntries,
                wData               : wData,
		wAddr               : wAddr,
                nWttEntries         : nWttEntries,
                axi_id_width        : axi_id_width,
                wtt_id_width        : wtt_id_width,
                wMsgId              : wMsgId,
                wInitiatorId        : wInitiatorId,
                unit_id_width       : unit_id_width,
                port_id_width       : port_id_width_data,
		wMpf1               : wMpf1,
                wHProt              : wHProt,
                wTtier              : wTtier,
                wSteering           : wSteering,
                wPriority           : wPriority,
                wQl                 : wQl,
		wQos                : wQos,
                wRL                 : wRL,
                be_width            : be_width,
                wCmType             : wCmType,
                write_resp_width    : write_resp_width,
                DTWReqInterface     : DTWReqInterface,
                DTWRspInterface     : DTWRspInterface,
                AXI_Interface       : AXI_Interface,
                wIntfSize           : wIntfSize,
		wFUnitId            : wFUnitId,
                wFPortId            : wFPortId,
		awuser_width	    : awuser_width,
		wAux		    : wAux

            } ,
            verilogParams: {},
            ports: diiDtwReqPorts,
            interfaces : dtw_req_interfaces,
            portsDelimiter: '\n    '
        })=\

//=============================================================================
// DII WTT Control Instance
//=============================================================================

//-----------------------------------------------------------------------------
// WTT Control Interfaces

\jsbegin
var wtt_ctl_interfaces = [];
var dii_num = 0

wtt_ctl_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++
\jsend

//-----------------------------------------------------------------------------
// WTT Control Instance

\=u.instance({
            instanceName: 'wtt_control' ,
            moduleName: 'dii_wtt_control',
            params: { nRttEntries        : nRttEntries ,
                      nWttEntries        : nWttEntries,
                      awid_width         : awid_width,
                      axi_id_width       : axi_id_width,
		      axi_id_num         : axi_id_num_wr,
                      wAddr              : wAddr,
	              nExclusiveEntries : nExclusiveEntries,		      
                      wCacheLineOffset   : wCacheLineOffset,
		      wLargestEndpoint   : wLargestEndpoint,		      
		      wMpf2              : wMpf2,
                      wChipletId         : wChipletId,
                      wFUnitId           : wFUnitId,
                      wData              : wData,
		      addressIdMap       : addressIdMap

 } ,
            verilogParams: {},
            ports: {
                    csr_force_awid_low  : 'csr_force_awid_low',
                    no_more_wr_axi_id   : 'no_more_wr_axi_id',	    
                    wtt_allocate_new_entry : 'wtt_allocate_new_entry',
                    wtt_valid_entries   : 'wtt_valid_entries',
                    wr_axi_id_retire    : 'wr_axi_id_retire',
                    use_new_axi_id      : 'use_new_axi_id',
                    wtt_axi_id          : 'wr_axi_id_in',
		    tt_addr             : 'tt_addr',		    		    
		    tt_or               : 'tt_ordering',		    
		    tt_lock             : 'tt_lock',
		    tt_mpf2             : 'tt_mpf2',
		    tt_init_id          : 'tt_init_id',
		    wr_ro_depnd_set     : 'wr_ro_depnd_set',
                    wr_eo_depnd_set     : 'wr_eo_depnd_set',
                    wr_wo_depnd_set     : 'wr_wo_depnd_set',
                    wr_axi_id_comp      : 'wr_axi_id_comp',
                    wtt_new_axi_id      : 'wtt_new_axi_id',
                    wtt_new_wr_entry    : 'wtt_new_wr_entry'
                   },
           interfaces : wtt_ctl_interfaces,
            portsDelimiter: '\n    '
        })=\
\jsbegin

//=============================================================================
// DII WTT Instance
//=============================================================================

//-----------------------------------------------------------------------------
// WTT Interfaces

var wtt_interfaces = [];

wtt_interfaces[dii_num] = {
            modulePrefix : '',
            localPrefix  : 'ott_' ,
            interface    : clkInterfaceNoTest
} ;

   dii_num++

wtt_interfaces[dii_num] = {
            modulePrefix : 'tt_',
            localPrefix  : 'tt_' ,
            interface    : TT1
};

   dii_num++

wtt_interfaces[dii_num] = {
            modulePrefix : 'wr_',
            localPrefix  : 'wr_' ,
            interface    : TT2, exclude: ['allocate_new_entry', 'ro_match_rd', 'ro_match_wr', 'eo_match_rd', 'eo_match_wr', 'new_axi_id']
};

   dii_num++

for(var i=0; i < nWttEntries; i++) {
    wtt_interfaces[dii_num] = {
             modulePrefix : 'wtt_entry'+i+'_',
             localPrefix  : 'wtt_entry'+i+'_',
             interface    :  TTentry1, exclude: ['cmo','resp_pending']
                        } ;
    dii_num++
}

for(var i=0; i < nWttEntries; i++) {
    wtt_interfaces[dii_num] = {
             modulePrefix : 'wtt_entry'+i+'_',
             localPrefix  : 'wtt_entry'+i+'_',
             interface    :  TTentry2, exclude: ['resp_pending','clear','wr_enable','cmo']
                        } ;
    dii_num++
}


wtt_interfaces[dii_num]   = {
            modulePrefix   : 'dtw_req_slv_',
            localPrefix    : 'dtw_req_' ,
            interface      :  DTWReqInterface , exclude: ['ready','initiator_id','rl','tm','primary','mpf1','mpf2','data','be','dwid']
};


\jsend

//-----------------------------------------------------------------------------
// WTT Instance

\jsbegin
var instance_ports_for_wtt = {
             wtt_eo_full             : 'wtt_eo_full',
	     wtt_entry_id            : 'wtt_entry_id',			    
             wr_axi_id_in            : 'wr_axi_id_in',	    
	     dtw_req_slv_ready       : 'dtw_req_ready',
             write_req_fifo_ready    : 'write_req_fifo_ready',
             write_req_valid         : 'write_req_valid',
             write_req_data          : 'write_req_data',
             wtt_valid_entries       : 'wtt_valid_entries',
             wtt_muxarb_grant        : 'wtt_muxarb_grant',
             wtt_grant_given         : 'wtt_grant_given',
             wtt_grant_given_in      : 'wtt_grant_given_in',
             wtt_empty               : 'wtt_empty',
             wtt_full                : 'wtt_full',
             str_req_fifo_data_wr    : 'str_req_fifo_data_wr',
             str_req_fifo_valid_wr   : 'str_req_fifo_valid_wr',
             str_req_fifo_ready_wr   : 'str_req_fifo_ready_wr',
             str_req_fifo_last_wr    : 'str_req_fifo_last_wr',
             wtt_allocate_new_entry  : 'wtt_allocate_new_entry',
             rtt_allocate_new_entry  : 'rtt_allocate_new_entry',
             wtt_retire_entry        : 'wtt_retire_entry',
             wtt_ro_match_rd         : 'wtt_ro_match_rd',
             wtt_ro_match_wr         : 'wtt_ro_match_wr',
             wtt_eo_match_rd         : 'wtt_eo_match_rd',
             wtt_eo_match_wr         : 'wtt_eo_match_wr',
             wtt_wo_match_wr         : 'wtt_wo_match_wr' ,
             wtt_new_axi_id          : 'wtt_new_axi_id',
	     wtt_addr_ewa_match_id   : 'wtt_addr_ewa_match_id',
	     rtt_cmo_blocked         : 'rtt_cmo_blocked',
	     rtt_read_alloc_id       : 'rtt_read_alloc_id',
             ro_match_wtt_id         : 'ro_match_wtt_id',
             eo_match_wtt_id         : 'eo_match_wtt_id',
             wo_match_wtt_id         : 'wo_match_wtt_id',
             wr_wo_depnd_id_in       : 'wr_wo_depnd_id_in',
             wr_wo_depnd_clear       : 'wr_wo_depnd_clear',
             wr_wo_depnd_set         : 'wr_wo_depnd_set',
             wr_axi_depnd_id_entry   : 'wr_axi_depnd_id_entry',
             wr_axi_depnd_set        : 'wr_axi_depnd_set',
             wtt_new_wr_entry        : 'wtt_new_wr_entry',
	     wtt_ewa_sent_set        : 'wtt_ewa_sent_set',
             wtt_axi_id              : 'wtt_axi_id',
             wtt_entry_id            : 'wtt_entry_id',	     
             init_cond               : 'init_cond',
	     addr_match_wtt          : 'addr_match_wtt',
             init_id_match_wtt       : 'init_id_match_wtt',
             axi_id_match_wr         : 'axi_id_match_wr',
             my_f_unit_id            : 'r_my_f_unit_id'
  };
  if (wChipletId > 0) {
      instance_ports_for_wtt['my_chiplet_id'] = 'my_chiplet_id';
  }
\jsend

\=u.instance({
            instanceName: 'wtt' ,
            moduleName: 'dii_wtt',
            params: {
	    wData           : wData,
            wMsgId          : wMsgId,
            wAddr           : wAddr,
	    hasUser         : hasUser,	    
            axi_id_width    : axi_id_width,
            str_req_width   : str_req_width,
            tt_id_width     : tt_id_width,
            write_req_width : write_req_width,
            wInitiatorId    : wInitiatorId,
            nWttEntries     : nWttEntries,
            nRttEntries     : nRttEntries,
	    wIntfSize       : wIntfSize,
            wMpf1           : wMpf1,
            wMpf2           : wMpf2,
            wTOF            : wTOF,
	    wPri            : wPriority,
	    wQl             : wQl,
	    wQos            : wQos,
            arprot_width    : arprot_width,
            arcache_width   : arcache_width, 
            aruser_width    : aruser_width, 
            DTWReqInterface : DTWReqInterface,
            TT1             : TT1,
            TT2             : TT2,
            TTentry1        : TTentry1,
            TTentry2        : TTentry2,
	    wChipletId      : wChipletId,
	    wLinkId         : wLinkId,
	    wFUnitId        : wFUnitId,
            wFPortId        : wFPortId
 } ,
            verilogParams: {},
            ports: instance_ports_for_wtt,
            interfaces : wtt_interfaces,
            portsDelimiter: '\n    '
        })=\

//=============================================================================
// DII Depend Checker Instance
//=============================================================================

//-----------------------------------------------------------------------------
// WTTDepnd Checker Params

\jsbegin
var depnd_interfaces = [];
var dii_num = 0

        var depnd_checker_Params = {
	        axi_id_comp_width : axi_id_comp_width,	
                nRttEntries       : nRttEntries,
                nWttEntries       : nWttEntries,
                wAddr             : wAddr,
                wArid             : arid_width,
                wAwid             : awid_width,
                wCacheLineOffset  : u.getParam('wCacheLineOffset'),
                tt_id_width       : tt_id_width,
		wLargestEndpoint  : wLargestEndpoint,
                TTentryCtl        : TTentryCtl,
                assertOn          : assertOn,
                wInitiatorId      : wInitiatorId,
		clkInterface      : clkInterfaceNoTest,
		wMpf2             : wMpf2,
		wFUnitId          : wFUnitId,
		wChipletId        : wChipletId,
                nExclusiveEntries : nExclusiveEntries
        };

//-----------------------------------------------------------------------------
// WTTDepnd Checker Ports

        var  instance_ports_for_depnd_checker = {
                csr_exclude_ro_write_from_wo        : 'csr_exclude_ro_write_from_wo',
                csr_exclude_initiator_from_ordering : 'csr_exclude_initiator_from_ordering',
	        pmon_address_collision : 'pmon_address_collision',
                req_addr               : 'tt_addr',
                req_prot               : 'tt_prot',		
                req_order              : 'tt_ordering',
                init_id                : 'tt_init_id',
                rtt_allocate_new_entry : 'rtt_allocate_new_entry',
                wtt_allocate_new_entry : 'wtt_allocate_new_entry',
		rtt_new_axi_id         : 'rtt_new_axi_id',
		wtt_new_axi_id         : 'wtt_new_axi_id',
		rtt_next_axi_id        : 'rtt_axi_id',
		wtt_next_axi_id        : 'wtt_axi_id',
		wtt_next_entry_id      : 'wtt_entry_id',
		rtt_next_entry_id      : 'rtt_entry_id',				
                rtt_retire_entry       : 'rtt_retire_entry',
		rtt_retire_entry_cmo   : 'rtt_retire_entry_cmo',
                wtt_retire_entry       : 'wtt_retire_entry',
                rtt_muxarb_grant       : 'rtt_muxarb_grant',
                wtt_muxarb_grant       : 'wtt_muxarb_grant',
                rtt_grant_given        : 'rtt_grant_given',
                wtt_grant_given        : 'wtt_grant_given', 
                rtt_grant_given_in     : 'rtt_grant_given_in',
                wtt_grant_given_in     : 'wtt_grant_given_in',
		tt_cmo                 : 'tt_cmo',
		tt_mpf2                : 'tt_mpf2',
		tt_lock                : 'tt_lock',
		rtt_cmo_match          : 'rtt_cmo_match',
                rtt_ro_match_rd        : 'rtt_ro_match_rd',
                rtt_ro_match_wr        : 'rtt_ro_match_wr',
                rtt_eo_match_rd        : 'rtt_eo_match_rd',
                rtt_eo_match_wr        : 'rtt_eo_match_wr',
                wtt_ro_match_rd        : 'wtt_ro_match_rd',
                wtt_ro_match_wr        : 'wtt_ro_match_wr',
                wtt_eo_match_rd        : 'wtt_eo_match_rd',
                wtt_eo_match_wr        : 'wtt_eo_match_wr',
                wtt_wo_match_wr        : 'wtt_wo_match_wr',
                rd_ro_depnd_set        : 'rd_ro_depnd_set',
                rd_eo_depnd_set        : 'rd_eo_depnd_set',
                rd_axi_depnd_set       : 'rd_axi_depnd_set',
                rd_sleep_set           : 'rd_sleep_set',
                wr_ro_depnd_set        : 'wr_ro_depnd_set',
                wr_eo_depnd_set        : 'wr_eo_depnd_set',
                wr_wo_depnd_set        : 'wr_wo_depnd_set',
                wr_axi_depnd_set       : 'wr_axi_depnd_set',
                wr_sleep_set           : 'wr_sleep_set',
                rd_ro_depnd_clear      : 'rd_ro_depnd_clear',
                rd_eo_depnd_clear      : 'rd_eo_depnd_clear',
                rd_axi_depnd_clear     : 'rd_axi_depnd_clear',
                rd_sleep_clear         : 'rd_sleep_clear',
                wr_ro_depnd_clear      : 'wr_ro_depnd_clear',
                wr_eo_depnd_clear      : 'wr_eo_depnd_clear',
                wr_wo_depnd_clear      : 'wr_wo_depnd_clear',
                wr_axi_depnd_clear     : 'wr_axi_depnd_clear',
                wr_sleep_clear         : 'wr_sleep_clear',
                rd_ro_depnd_id         : 'rd_ro_depnd_id_in',
                rd_eo_depnd_id         : 'rd_eo_depnd_id_in',
                rd_axi_depnd_id        : 'rd_axi_depnd_id_in',
                wr_ro_depnd_id         : 'wr_ro_depnd_id_in',
                wr_eo_depnd_id         : 'wr_eo_depnd_id_in',
                wr_wo_depnd_id         : 'wr_wo_depnd_id_in',
                wr_axi_depnd_id        : 'wr_axi_depnd_id_in',
                wr_axi_id              : 'wr_axi_id_in',
                rd_axi_id              : 'rd_axi_id_in',				
                ro_match_rtt_id        : 'ro_match_rtt_id',
                eo_match_rtt_id        : 'eo_match_rtt_id',
                ro_match_wtt_id        : 'ro_match_wtt_id',
                eo_match_wtt_id        : 'eo_match_wtt_id',
                wo_match_wtt_id        : 'wo_match_wtt_id',
		addr_match_wtt         : 'addr_match_wtt',
		addr_match_rtt         : 'addr_match_rtt',
                init_id_match_wtt      : 'init_id_match_wtt',
		init_id_match_rtt      : 'init_id_match_rtt',
                rd_axi_depnd_id_entry  : 'rd_axi_depnd_id_entry',
                wr_axi_depnd_id_entry  : 'wr_axi_depnd_id_entry',
		wtt_addr_ewa_match_id  : 'wtt_addr_ewa_match_id',
		wtt_addr_ewa_match     : 'wtt_addr_ewa_match',
                wr_axi_depnd_set       : 'wr_axi_depnd_set',
                addr_match_on_wtt      : 'addr_match_on_wtt',
                addr_match_on_rtt      : 'addr_match_on_rtt'
        };

//-----------------------------------------------------------------------------
// WTTDepnd Checker Interfaces

    depnd_interfaces[dii_num] = {
             modulePrefix : '',
             localPrefix  : '',
             interface    : clkInterfaceNoTest
	     };
	     
    dii_num++

for(var i=0; i < nRttEntries; i++) {
    depnd_interfaces[dii_num] = {
             modulePrefix : 'rtt_entry'+i+'_',
             localPrefix  : 'rtt_entry'+i+'_',
             interface    : TTentryCtl, exclude: ['oldest','ewa','wr_enable', 'clear', 'resp_pending', 'wo_depnd_id', 'wo_depnd', 'youngest_wo', 'ex_pass']} ;
    dii_num++
}

for(var i=0; i < nWttEntries; i++) {
    depnd_interfaces[dii_num] = {
             modulePrefix : 'wtt_entry'+i+'_',
             localPrefix  : 'wtt_entry'+i+'_',
             interface    : TTentryCtl, exclude: ['resp_pending','cmo','oldest','wr_enable', 'clear']} ;
    dii_num++
}
 \jsend

//-----------------------------------------------------------------------------
// WTTDepnd Checker Instance

  \=u.instance({
        instanceName    : 'dii_depnd_checker',
        moduleName      : 'dii_depnd_checker',
        params          : depnd_checker_Params,
        verilogParams   : {},
        ports           : instance_ports_for_depnd_checker,
        interfaces      : depnd_interfaces,
        portsDelimiter  : '\n    '

  })=\

//=============================================================================
// DII Read Buffer (If memory is implimented in flops)
//=============================================================================
\jsbegin
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if(useExternalMemory != 1){
\jsend

\=m.bundleFunctions.wiresFromInterface('mem_read_buffer_', memoryInterface,   [], obj.lib.bundle)=\
\=m.bundleFunctions.assignByBundle('mem__' + readDataMemInterface.rtlPrefixString ,'mem_read_buffer_', memoryInterface, [], u.bundle)=\

\jsbegin
var instance_ports_for_ram = {};

for (var signal in memoryInterface) {
    instance_ports_for_ram[signal]  = 'mem__' + readDataMemInterface.rtlPrefixString + signal;
}
\jsend

\js instance_ports_for_ram.clk = 'clk';

\=obj.lib.instance({
        instanceName: 'u_readDataMem',
        moduleName: 'em_mem_external',
        params: {
                        sverilog        : 0,
                        memEccBlocks    : readDataMemInterface.eccBlocks,
                        rtlPrefixString : readDataMemInterface.rtlPrefixString,
                        modulePrefix    : '',
                        memoryType      : memoryType,
                        nSignals        : readDataMemStructure.signals.length,
                        signals         : readDataMemStructure.signals,
                        useHandshake    : 0,
                        no_mem_init     : 0,
                        ports           : portType,
                        bitEnable       : 0,
                        numberOfEnables : 0,
                        width           : readDataMemStructure.width,
                        depth           : readDataMemStructure.depth 
                    },
         verilogParams  : {},
         ports          : instance_ports_for_ram,
         portsDelimiter : '\n'
})=\
\js }

//=============================================================================
// DII AXI Placeholder
//=============================================================================
\jsbegin
var placeholder_ports = [];

var placeholderProtectionInterface = {"name" : "", "signals":{}};

if (enableNativeIntfProtection & !placeInterfaceSkip) {
\jsend
\=m.bundleFunctions.explodeSyn(placeInterfaceName, placeInterfaceDef, 'wire', obj.lib.bundle)=\
\jsbegin
placeholderProtectionInterface['signals'] = m.bundleFunctions.synToBundle(placeInterfaceDef,"both");
}

if (useResiliency) {
 placeholder_ports.interface_fault = 'dii_placeholder_UCE';
 placeholder_ports.cerr_fault      = 'dii_placeholder_CE';
} else {
\jsend
 assign dii_placeholder_UCE = 1'h0;
 assign dii_placeholder_CE  = 1'h0;
 \jsbegin
}

var placeholder_interfaces = [];
dii_num = 0;

placeholder_interfaces[dii_num] = {
             modulePrefix : '',
             localPrefix  : 'to_clk_gate_',
             interface    : clkInterfaceNoTest
	     };

    dii_num++

if ( enableNativeIntfProtection ) {
  placeholder_interfaces[dii_num] = {
             modulePrefix : '',
             localPrefix  : placeInterfaceName,
             interface    : m.bundleFunctions.synToBundle(placeInterfaceDef,"both")
	     };

    dii_num++
}

placeholder_interfaces[dii_num] = {
             modulePrefix : 'in_',
             localPrefix  : 'axi_mst_placeholder_',
             interface    : AXI_Interface
	     };

    dii_num++

placeholder_interfaces[dii_num] = {
             modulePrefix : 'out_',
             localPrefix  : 'axi_mst_',
             interface    : AXI_Interface
	     };
	     
    dii_num++
\jsend

\=obj.lib.instance({
        instanceName: 'u_axiPlaceholder',
	moduleName: placeInterfaceName + 'placeholder',
        tachlName: 'protection_placeholder',
        params: {
                        nativeInterface                : AXI_Interface,
			clkInterface                   : clkInterfaceNoTest,
                        placeHolderDirection           : "master",
                        useResiliency                  : useResiliency,
                        protectionEnable               : enableNativeIntfProtection,
			nativeIntfProtectionInterface  : placeholderProtectionInterface
                    },
         verilogParams  : {},
	 interfaces     : placeholder_interfaces,
         ports          : placeholder_ports,
         portsDelimiter : '\n'
})=\

//=============================================================================
// DII Read Buffer ECC 
//=============================================================================
\jsbegin
// Read buffer is never in memories. Always tie off these signals.
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if(true) {
\jsend
\=m.bundleFunctions.wiresFromInterface('mem_read_buffer_cor_', memoryInterface, [], u.bundle)=\
\=m.bundleFunctions.assignByBundle('mem_read_buffer_','mem_read_buffer_cor_', memoryInterface, [], u.bundle)=\

// Use these to send Skid Mem Errors Up
assign dii_read_buffer_UCE = skid_ucerr;
assign dii_read_buffer_CE  = skid_cerr;

assign mem_data_c = 1'h0;
assign mem_data_uc = 1'h0;

wire [\=(read_resp_width-1)=\:0]          delayed_corrected_data  = 'h0;
\jsbegin
} else /* istanbul ignore next env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */ {

var errParam = {
        mem_width          : read_resp_width,
        fnErrDetectCorrect : fnErrDetectCorrect
};

if (fnErrDetectCorrect === "SECDED64BITS" ||
        fnErrDetectCorrect === "SECDED128BITS") {
            errParam.blockWidths = readBufferBlockWidths;
}

var wErrorAndParityBits = memFunctions.getErrorEncodingWidth(errParam.fnErrDetectCorrect, read_resp_width);

//====================================================
// Wire Setup
\jsend
wire [\=wErrorAndParityBits+read_resp_width=\-1:0] mem_read_buffer_enc_int_data_in;

\js memoryInterface['int_data_in']   =   read_resp_width;
\js memoryInterface['int_data_out']  =  -read_resp_width;

\=m.bundleFunctions.wiresFromInterface('mem_read_buffer_cor_', memoryInterface, [], u.bundle)=\
\=m.bundleFunctions.assignByBundle('mem_read_buffer_','mem_read_buffer_cor_', memoryInterface, ['int_data_in','int_data_out'], u.bundle)=\

//====================================================
// ECC Encode

\=u.instance({
            instanceName : 'dii_mem_encode' ,
            moduleName   : 'em_mem_encode',
            params: errParam,
            verilogParams: {},
            ports:  {
	                   data_in                : 'mem_read_buffer_cor_int_data_in['+read_resp_width+'-1:0]',
                           data_out_with_edc      : 'mem_read_buffer_enc_int_data_in',
	            },
            portsDelimiter  : '\n    '
        })=\

\js if((wErrorAndParityBits + read_resp_width)  == memory_width ) {
assign mem_read_buffer_int_data_in = mem_read_buffer_enc_int_data_in;
\js } else {
assign mem_read_buffer_int_data_in  = {{\=memory_width-(wErrorAndParityBits+read_resp_width)=\{1'b0}},mem_read_buffer_enc_int_data_in};
\js }

//====================================================
// ECC Decode/Correction/Reporting

\jsbegin
//=============================================================================
// ECC check
// ECC decode
// Note that ECC check outputs feeds into ECC decode inputs.
//
//   this.instance ({ name: 'check'  , moduleName : ERR_CHECK,  params: errParam });
//   this.instance ({ name: 'decode' , moduleName : ERR_DECODE, params: errParam });
//=============================================================================

var numInst;

if (readDataMemInterface.eccBlocks) {
    numInst = readDataMemInterface.eccBlocks.length;
} else {
    if (fnErrDetectCorrect === "SECDED64BITS") {
          numInst = Math.ceil(u.getParam('width') / 64);
    } else if (fnErrDetectCorrect === "SECDED128BITS") {
          numInst = Math.ceil(u.getParam('width') / 128);
    }
}

var data_plus_correction = wErrorAndParityBits + read_resp_width;

\jsend
wire [\=(wErrorAndParityBits-1)=\:0]    check__err_index;
wire [\=(wErrorAndParityBits-1)=\:0]    r_check__err_index;
wire [\=(read_resp_width-1)=\:0]          delayed_corrected_data;
wire [\=(data_plus_correction-1)=\:0]     delayed_data;
wire r_check__err_c;
wire check__err_c;
wire check__err_d;
\jsbegin

var instance_ports_for_check = {
    data_in_with_edc : 'mem_read_buffer_int_data_out['+ wErrorAndParityBits + '+' + read_resp_width +'-1:0]',
    err_d            : 'mem_data_uc'
};

\jsend
// Store Data
\=u.dffre(  data_plus_correction
          , 'delayed_data'
	  , 'mem_read_buffer_int_data_out['+ data_plus_correction + '-1:0]'
	  , data_plus_correction+'\'b0'
	  , "1'b1"
	  , 'clk'
	  , 'reset_n')=\

// Store Error Information
\=u.dffre(  1
          , 'r_mem_data_c'
	  , 'mem_data_c'
	  , "1'b0"
	  , "1'b1"
	  , 'clk'
	  , 'reset_n')=\
	  
\=u.dffre(  wErrorAndParityBits
          , 'r_check__err_index'
	  , 'check__err_index'
	  , '{'+wErrorAndParityBits+'{1\'b0}}'
	  , "1'b1"
	  , 'clk'
	  , 'reset_n')=\

\jsbegin

var instance_ports_for_decode = {
    data_in_with_edc : 'delayed_data',
    data_out         : 'delayed_corrected_data'
};

if ( fnErrDetectCorrect === 'SECDED') {
    instance_ports_for_check['err_c']     = 'mem_data_c';
    instance_ports_for_check['err_index'] = 'check__err_index';
} else {
\jsend
    assign mem_data_c = 'h0;
\jsbegin
}

if (fnErrDetectCorrect === 'SECDED') {
    instance_ports_for_decode['err_c']     = 'r_mem_data_c';
    instance_ports_for_decode['err_index'] = 'r_check__err_index';
} 

\jsend


\=u.instance({
        instanceName: 'check',
        moduleName: 'em_mem_check',
        params : errParam,
        verilogParams: {},
        ports: instance_ports_for_check,
        portsDelimiter: '\n    '
})=\

\=u.instance({
        instanceName: 'decode',
        moduleName: 'em_mem_decode',
        params : errParam,
        verilogParams: {},
        ports: instance_ports_for_decode,
        portsDelimiter: '\n    '
})=\

assign mem_read_buffer_cor_int_data_out[\=read_resp_width=\-1:0] = mem_read_buffer_int_data_out[\=data_plus_correction=\-1:\=wErrorAndParityBits=\];

assign dii_read_buffer_CE  = read_resp_data_c & read_resp_valid  & read_resp_ready;
assign dii_read_buffer_UCE = read_resp_data_uc & read_resp_valid  & read_resp_ready;
\jsbegin
}
\jsend

//=============================================================================
// DII AXI Interface Instance
//=============================================================================

//-----------------------------------------------------------------------------
// AXI Interface Interfaces

\jsbegin
var axi_intf_interfaces = [];
var dii_num = 0

axi_intf_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

axi_intf_interfaces[dii_num] = {
            modulePrefix  : 'mem_read_buffer_',
            localPrefix   : 'mem_read_buffer_cor_' ,
            interface     : memoryInterface
} ;

   dii_num++

axi_intf_interfaces[dii_num] = {
            modulePrefix  : 'axi_mst_',
            localPrefix   : 'axi_mst_shim_' ,
            interface     :  AXI_Interface, exclude: ['w_'] 
};

   dii_num++

axi_intf_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : csrAddrTransInterface
};

   dii_num++
\jsend

//-----------------------------------------------------------------------------
// AXI Interface Instance

\=u.instance({
            instanceName : 'axi_intf' ,
            moduleName   : 'dii_axi_intf',
            params: {
	       memory_width           : memory_width,
               be_width               : be_width,
	       wData                  : wData,
               wAddr                  : wAddr,
               wtt_id_width           : wtt_id_width,
               wCacheLineOffset       : u.getParam('wCacheLineOffset'),
               axi_id_width           : axi_id_width,
               wQos                   : wQos,
               read_req_width         : read_req_width,
               read_resp_width        : read_resp_width,
               write_req_width        : write_req_width,
	       useAddrTranslation     : useAddrTranslation,
	       nAddrTransRegisters    : nAddrTransRegisters,
	       csrAddrTransInterface  : csrAddrTransInterface,
               nExclusiveEntries      : nExclusiveEntries,
	       wTOF                   : wTOF,
               wMpf1                  : wMpf1,
               wData                  : wData,
	       ordering_width         : wOrder,
               AXI_Interface          : AXI_Interface,
	       doublePortReadBuffer   : doublePortReadBuffer,
	       memDepth               : memDepth,
	       memoryInterface        : memoryInterface
            } ,
            verilogParams: {},
            ports: {
               read_req_valid                : 'read_req_valid',
               read_req_data                 : 'read_req_data',
               read_resp_ready               : 'read_resp_ready',
               read_resp_fifo_in_valid       : 'read_resp_fifo_in_valid',
               rtt_has_muxarb_valid_entry    : 'rtt_has_muxarb_valid_entry',
               write_req_valid               : 'write_req_valid',
               write_req_data                : 'write_req_data', 
               write_resp_ready              : 'write_resp_ready', 
               read_req_fifo_ready           : 'read_req_fifo_ready',
               write_req_fifo_ready          : 'write_req_fifo_ready',
               use_new_axi_id                : 'use_new_axi_id',
               read_resp_valid               : 'read_resp_valid',
               read_resp_fifo_ready          : 'read_resp_fifo_ready',
               read_resp_data                : 'read_resp_data',
               read_resp_data_uc             : 'read_resp_data_uc',
               read_resp_data_c              : 'read_resp_data_c',
	       mem_data_uc                   : 'mem_data_uc',
	       mem_data_c                    : 'mem_data_c',
	       corr_data                     : 'delayed_corrected_data',
               write_resp_data               : 'write_resp_data',
               write_resp_valid              : 'write_resp_valid',
               write_req_fifo_out_valid      : 'write_req_fifo_out_valid',
               out_write_req_ready           : 'out_write_req_ready',
               write_req_rb_id               : 'write_req_rb_id',
               write_req_ex_pass             : 'write_req_ex_pass',	       
	       dtw_data_done                 : 'dtw_data_done'
},
            interfaces      : axi_intf_interfaces,
            portsDelimiter  : '\n    '
        })=\


//=============================================================================
// DII AXI Interface Instance
//=============================================================================

//-----------------------------------------------------------------------------
// AXI Interface Interfaces

\jsbegin
var shim_interfaces = [];
var dii_num = 0

shim_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

shim_interfaces[dii_num] = {
            modulePrefix  : 'out_',
            localPrefix   : 'axi_mst_pipe_' ,
            interface     : AXI_Interface
} ;

   dii_num++

shim_interfaces[dii_num] = {
            modulePrefix  : 'in_',
            localPrefix   : 'axi_mst_shim_' ,
            interface     :  AXI_Interface_smiWidth
};

   dii_num++
\jsend

//-----------------------------------------------------------------------------
// AXI Interface Instance

\=u.instance({
            instanceName : 'dii_axi_shim' ,
            moduleName   : 'axi_shim',
            params: {
	       inWidth              : wData,
	       outWidth             : Math.abs(AXI_Interface['r_'].data),
	       maxOutstanding       : 8,
	       clkInterface         : {"name":"","signals":{"clk":1,"reset_n":1}},
	       outInterface         : AXI_Interface,
	       inInterface          : AXI_Interface_smiWidth
            } ,
            verilogParams: {},
            interfaces      : shim_interfaces,
            portsDelimiter  : '\n    '
        })=\


//=============================================================================
// DII AXI Pipe Instance
//=============================================================================

//-----------------------------------------------------------------------------
// AXI Pipe Interfaces

\jsbegin
var pipe_aw_interfaces = [];
var dii_num = 0

pipe_aw_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

pipe_aw_interfaces[dii_num] = {
            modulePrefix  : 'pop_',
            localPrefix   : 'axi_mst_placeholder_aw_' ,
            interface     : AXI_Interface['aw_']
} ;

   dii_num++

pipe_aw_interfaces[dii_num] = {
            modulePrefix  : 'push_',
            localPrefix   : 'axi_mst_pipe_aw_' ,
            interface     :  AXI_Interface['aw_']
};

   dii_num++

var pipe_ar_interfaces = [];
var dii_num = 0

pipe_ar_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

pipe_ar_interfaces[dii_num] = {
            modulePrefix  : 'pop_',
            localPrefix   : 'axi_mst_placeholder_ar_' ,
            interface     : AXI_Interface['ar_']
} ;

   dii_num++

pipe_ar_interfaces[dii_num] = {
            modulePrefix  : 'push_',
            localPrefix   : 'axi_mst_pipe_ar_' ,
            interface     :  AXI_Interface['ar_']
};

   dii_num++

var pipe_w_interfaces = [];
var dii_num = 0

pipe_w_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

pipe_w_interfaces[dii_num] = {
            modulePrefix  : 'pop_',
            localPrefix   : 'axi_mst_placeholder_w_' ,
            interface     : AXI_Interface['w_']
} ;

   dii_num++

pipe_w_interfaces[dii_num] = {
            modulePrefix  : 'push_',
            localPrefix   : 'axi_mst_pipe_w_' ,
            interface     :  AXI_Interface['w_']
};

   dii_num++

var pipe_b_interfaces = [];
var dii_num = 0

pipe_b_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

pipe_b_interfaces[dii_num] = {
            modulePrefix  : 'push_',
            localPrefix   : 'axi_mst_placeholder_b_' ,
            interface     : AXI_Interface['b_']
} ;

   dii_num++

pipe_b_interfaces[dii_num] = {
            modulePrefix  : 'pop_',
            localPrefix   : 'axi_mst_pipe_b_' ,
            interface     :  AXI_Interface['b_']
};

   dii_num++

var pipe_r_interfaces = [];
var dii_num = 0

pipe_r_interfaces[dii_num] = {
            modulePrefix  : '',
            localPrefix   : '' ,
            interface     : clkInterfaceNoTest
} ;

   dii_num++

pipe_r_interfaces[dii_num] = {
            modulePrefix  : 'push_',
            localPrefix   : 'axi_mst_placeholder_r_' ,
            interface     : AXI_Interface['r_']
} ;

   dii_num++

pipe_r_interfaces[dii_num] = {
            modulePrefix  : 'pop_',
            localPrefix   : 'axi_mst_pipe_r_' ,
            interface     :  AXI_Interface['r_']
};

   dii_num++
\jsend

//-----------------------------------------------------------------------------
// AXI Pipe Instance

\jsbegin
var axi_pipe_aw_width = Math.abs(bundleFunctions.getBundleWidth(AXI_Interface['aw_'], ['valid', 'ready'], u.bundle));
var axi_pipe_ar_width = Math.abs(bundleFunctions.getBundleWidth(AXI_Interface['ar_'], ['valid', 'ready'], u.bundle));
var axi_pipe_r_width = Math.abs(bundleFunctions.getBundleWidth(AXI_Interface['r_'], ['valid', 'ready'], u.bundle));
var axi_pipe_b_width = Math.abs(bundleFunctions.getBundleWidth(AXI_Interface['b_'], ['valid', 'ready'], u.bundle));
var axi_pipe_w_width = Math.abs(bundleFunctions.getBundleWidth(AXI_Interface['w_'], ['valid', 'ready'], u.bundle));

// Always have the native layer pipe
/* istanbul ignore else env ncore_3p2,ncore_3p0,ncore_3p4,ncore_3p6,ncore_3p7 */
if(nativeInterfacePipe) {
  var axi_pipe_depth  = 2;
  var axi_pipe_bypass = 0;
} else {
  var axi_pipe_depth  = 0;
  var axi_pipe_bypass = 1;
}
\jsend

\=u.instance({
            instanceName : 'dii_axi_aw_pipe' ,
            moduleName   : 'fifo_bundle',
            params: {
	       width       : axi_pipe_aw_width,
	       depth       : axi_pipe_depth,
	       zerodepth   : (axi_pipe_depth == 0),
	       bypass_mode : axi_pipe_bypass,
	       interface   : AXI_Interface['aw_']
            } ,
            verilogParams: {},
            interfaces      : pipe_aw_interfaces,
            portsDelimiter  : '\n    '
        })=\

\=u.instance({
            instanceName : 'dii_axi_ar_pipe' ,
            moduleName   : 'fifo_bundle',
            params: {
	       width       : axi_pipe_ar_width,
	       depth       : axi_pipe_depth,
	       zerodepth   : (axi_pipe_depth == 0),
	       bypass_mode : axi_pipe_bypass,
	       interface   : AXI_Interface['ar_']	       
            } ,
            verilogParams: {},
            interfaces      : pipe_ar_interfaces,
            portsDelimiter  : '\n    '
        })=\

\=u.instance({
            instanceName : 'dii_axi_w_pipe' ,
            moduleName   : 'fifo_bundle',
            params: {
	       width       : axi_pipe_w_width,
	       depth       : axi_pipe_depth,
	       zerodepth   : (axi_pipe_depth == 0),
	       bypass_mode : axi_pipe_bypass,
	       interface   : AXI_Interface['w_']	       
            } ,
            verilogParams: {},
            interfaces      : pipe_w_interfaces,
            portsDelimiter  : '\n    '
        })=\

\=u.instance({
            instanceName : 'dii_axi_b_pipe' ,
            moduleName   : 'fifo_bundle',
            params: {
	       width       : axi_pipe_b_width,
	       depth       : axi_pipe_depth,
	       zerodepth   : (axi_pipe_depth == 0),
	       bypass_mode : axi_pipe_bypass,	
	       interface   : AXI_Interface_invDir['b_']       
            } ,
            verilogParams: {},
            interfaces      : pipe_b_interfaces,
            portsDelimiter  : '\n    '
        })=\
	
\=u.instance({
            instanceName : 'dii_axi_r_pipe' ,
            moduleName   : 'fifo_bundle',
            params: {
	       width       : axi_pipe_r_width,
	       depth       : axi_pipe_depth,
	       zerodepth   : (axi_pipe_depth == 0),
	       bypass_mode : axi_pipe_bypass,
	       interface   : AXI_Interface_invDir['r_']	       
            } ,
            verilogParams: {},
            interfaces      : pipe_r_interfaces,
            portsDelimiter  : '\n    '
        })=\
\jsbegin
//=============================================================================
// Asserts
//=============================================================================
if ( assertOn ) { \jsend
    `ifdef OVL_ASSERT_ON
    // coverage off
    // synthesis off
    // synopsys translate_off
    //
    // When debug/bist enable is de-asserted, never assert debug/trace enable from CSR
    assert_implication #(0,0,"ASSERT_ERROR: Safe Mode enable not guarding debug enables!",0,0) assert_safe_mode_guard_check (
        .clk(clk),
        .reset_n(reset_n),
        .antecedent_expr(~dii_en_debug_bist),
        .consequent_expr(~(csr_trace_CCTRLR_ndn0Tx_out | csr_trace_CCTRLR_ndn0Rx_out | csr_trace_CCTRLR_ndn1Tx_out | csr_trace_CCTRLR_ndn1Rx_out | csr_trace_CCTRLR_ndn2Tx_out | csr_trace_CCTRLR_ndn2Rx_out | csr_trace_CCTRLR_dn0Tx_out | csr_trace_CCTRLR_dn0Rx_out))
    );

    // synopsys translate_on
    // synthesis on
    // coverage on
    `endif
\jsbegin
} \jsend
	
endmodule
