\jsbegin
//============================================================================
// Copyright (C) 2019 Arteris, Inc.
// All rights reserved.
//============================================================================
//
// NAME: DMI Rd/Wr Data Reorder Buffer
//
// AUTHOR : Tso-Wei Chang
//
// DESCRIPTION:
//
//============================================================================

//============================================================================     
// Variables
//============================================================================
   
let u = obj.lib;
let m = obj.userLib;

//============================================================================
// Parameters
//============================================================================
let dataInfoInterface   = u.getParam('dataInfoInterface');
let clkInterface        = u.getParam('clkInterface');
let bundleFunctions     = m.bundleFunctions;
let wDataInfoBundle     = bundleFunctions.getBundleWidth(dataInfoInterface, [], u.bundle);
let width               = u.getParam('width');
let nBeats              = u.getParam('nBeats');
let wBeats              = Math.log2(nBeats);
let nDWsPerBeat         = width/64;
let nDWs                = nDWsPerBeat * nBeats;
let wDwid               = u.getParam('wDwid');
let wIntfSize           = u.getParam('wIntfSize');
let wTransSize          = u.getParam('wTransSize');
let wrData              = m.ParamDefaultGet(u, 'wrData', 'int', 0);
let wDataUser           = m.ParamDefaultGet(u, 'wUser', 'int', 0);
let bypassable          = m.ParamDefaultGet(u, 'bypassable', 'int', 0);
let nRbs                = m.ParamDefaultGet(u, 'nRbs', 'int', 16);
let coherent            = m.ParamDefaultGet(u, 'coherent', 'int', 0);
let wInitiatorId        = (dataInfoInterface.rb_initiator_id != undefined) ? dataInfoInterface.rb_initiator_id : 0;
let wQos                = (dataInfoInterface.qos != undefined) ? dataInfoInterface.qos : 0;
let wTm                 = (dataInfoInterface.tm != undefined) ? dataInfoInterface.tm :  /* istanbul ignore next env ncore_3p2,ncore_3p4 ,ncore_3p6,ncore_3p7*/ 0;

//============================================================================
// Ports
//============================================================================
// input
u.port('input', 'intf_size', wIntfSize);
u.port('input', 'data_beat_in', width);
if(wrData) {
u.port('input', 'data_beat_in_be', width/8);
} else {
u.port('input', 'data_beat_in_err_type', 2);
}
u.port('input', 'critical_dw', wDwid);
/* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4 ,ncore_3p6,ncore_3p7*/
if (wDataUser != 0) {
u.port('input', 'data_beat_in_user', wDataUser);
}
u.port('input', 'data_beat_in_valid', 1);
u.port('input', 'data_beat_in_last', 1);
u.port('input', 'data_beat_in_dbad', nDWsPerBeat);

// first double word DWID. assumption: inside single beat it will not wrap, dwid always increments
u.port('input', 'data_beat_in_dwid', wDwid*nDWsPerBeat);
u.port('input', 'data_beat_out_ready', 1);
u.port('input', 'trans_size', wTransSize);

// output
u.port('output', 'data_beat_out', width);
if(wrData) {
u.port('output', 'data_beat_out_be', width/8);
u.port('output', 'rb_id_retire', nRbs);
u.port('output', 'rb_id_retire_valid', 1);
if (coherent) {
u.port('output', 'rb_id_retire_initiator_id', wInitiatorId);
u.port('output', 'rb_id_retire_RBGen', 1);
 /* istanbul ignore else env ncore_3p2, ncore_3p4 ,ncore_3p6,ncore_3p7*/
    if ( wTm != 0 ) {
u.port('output', 'rb_id_retire_tm', wTm);
    }
    if ( wQos != 0 ) {
u.port('output', 'rb_id_retire_qos', wQos);
    }
}
} else {
u.port('output', 'data_beat_out_err_type', 2);
}
/* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
if (wDataUser != 0) {
u.port('output', 'data_beat_out_user', wDataUser);
}
u.port('output', 'data_beat_out_dbad', nDWsPerBeat);
u.port('output', 'data_beat_out_valid', 1);
u.port('output', 'data_beat_out_last',  1);
// output DWID array because data arrangement has been changed
u.port('output', 'data_beat_out_dwid', wDwid*nDWsPerBeat);
u.port('output', 'data_beat_in_ready', 1);
u.port('output', 'empty' , 1);
//============================================================================
// Interfaces
//============================================================================
// return info contains information such as vz, r_msg_id, target_id & cm_type
u.interface('alloc_',  'slave',   dataInfoInterface);
u.interface('lookup_', 'master',  dataInfoInterface);

u.interface('',        'slave',    clkInterface);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);
//============================================================================
// Wires
//============================================================================
    wire [\=wDwid-1=\:0]        intf_size_mask;
    wire [\=wDwid-1=\:0]        trans_size_mask;
    wire [\=wDwid-1=\:0]        trans_size_dw;
    wire [\=wDwid-1=\:0]        trans_size_aligned_cdw;
    wire [\=wDwid-1=\:0]        trans_size_aligned_first_dwid;
    wire [\=wDwid=\:0]          rd_ptr_wrap_boundary_d;
    wire [\=wDwid=\:0]          rd_ptr_wrap_boundary_q;
    wire [\=wDwid-1=\:0]        trans_size_aligned_dwid_d;
    wire [\=wDwid-1=\:0]        trans_size_aligned_dwid_q;
    wire                        bypass;
    wire [\=width-1=\:0]        return_rob_beat;
    wire [\=width/8-1=\:0]      return_rob_beat_be;
    wire [1:0]                  return_rob_beat_err_type;
    wire [\=nDWsPerBeat-1=\:0]  return_rob_beat_dbad;
    wire [\=wDwid-1=\:0]        rd_ptr_next;
    wire [\=wDwid-1=\:0]        rd_ptr_init;
    wire                        return_rob_beat_valid;
    wire                        rob_ready;
    wire                        wr_last_beat;
    wire                        rd_last_beat;
    wire                        rd_ptr_en;
\jsbegin
/* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4 ,ncore_3p6,ncore_3p7*/
    if(wDataUser !=0) {
\jsend
    wire [\=wDataUser-1=\:0]    return_rob_beat_user;
\js }

    wire [\=wDwid*nDWsPerBeat-1=\:0] return_rob_beat_dwid;


\js for(var i = 0; i < nDWs; i++) {
    wire [63:0]             rob_dw_\=i=\;
    wire [7:0]              rob_dw_be_\=i=\;
    wire [1:0]              rob_dw_err_type_\=i=\;
    wire                    rob_dw_dbad_\=i=\;
    wire                    rob_dw_valid_\=i=\;
    wire                    rob_dw_valid_d_\=i=\;
\jsbegin
/* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if(wDataUser !=0) {
\jsend
    wire [\=wDataUser/nDWsPerBeat-1=\:0] rob_dw_user_\=i=\;
\js }

\js }

\js if(wrData) {
\js     for(var i = 0; i < nDWs; i++) {
    wire                    rob_dw_valid_en_\=i=\;
    wire                    rob_dw_valid_set_\=i=\;
    wire                    rob_dw_valid_clr_\=i=\;
    wire                    wr_rob_dw_\=i=\;
    wire                    rob_dw_be_en_\=i=\;
    wire                    wr_hit_dw_\=i=\;
    wire [63:0]             wr_rob_dw_in_\=i=\;
    wire [7:0]              wr_rob_dw_be_in_\=i=\;
    wire                    wr_rob_dw_dbad_in_\=i=\;
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wDataUser !=0) {
\jsend
    wire [\=wDataUser/nDWsPerBeat-1=\:0] wr_rob_dw_user_in_\=i=\;
\js }

\js     }
\js } else {
\js     for(var i = 0; i < nBeats; i++) {
    wire                        rob_beat_valid_en_\=i=\;
    wire                        rob_beat_valid_\=i=\;
    wire [\=nDWsPerBeat-1=\:0]  rob_beat_dbad_\=i=\;
    wire                        rob_beat_valid_set_\=i=\;
    wire                        rob_beat_valid_clr_\=i=\;
    wire [1:0]                  rob_beat_err_type_in_\=i=\;
    wire                        rob_beat_err_type_set_\=i=\;
    wire                        rob_beat_err_type_clr_\=i=\;
    wire                        rob_beat_err_type_en_\=i=\;

    wire [\=width-1=\: 0]       rob_beat_\=i=\;
    wire [\=width/8-1=\: 0]     rob_beat_be_\=i=\;
    wire [1:0]                  rob_beat_err_type_\=i=\;
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if(wDataUser !=0) {
\jsend
    wire [\=wDataUser-1=\:0]    rob_beat_user_\=i=\;
\js }
    wire                        wr_rob_beat_\=i=\;
\js     }
\js }


\js for(var i =0; i < nDWsPerBeat; i++) {
    wire [63:0]             rd_data_\=i=\;
    wire [7:0]              rd_data_be_\=i=\;
    wire [1:0]              rd_data_err_type_\=i=\;
    wire                    rd_data_dbad_\=i=\;
    wire [\=wDwid-1=\:0]    rd_dwid_\=i=\;
    wire                    rd_data_valid_\=i=\;
    wire [\=wDwid-1=\:0]    rd_ptr_\=i=\;
    wire [\=wDwid=\:0]      rd_ptr_inc_\=i=\;
    wire [\=wDwid=\:0]      rd_ptr_offset_\=i=\;

\js     if(wrData) {
    wire [63:0]             data_dw_in_\=i=\;
    wire [7:0]              data_dw_in_be_\=i=\;
\js     }

    wire                    data_dw_in_dbad_\=i=\;
\jsbegin
         /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4 ,ncore_3p6,ncore_3p7*/
         if(wDataUser !=0) {
\jsend
    wire [\=wDataUser/nDWsPerBeat-1=\:0] rd_data_user_\=i=\;
\js     }


\jsbegin
         /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4 ,ncore_3p6,ncore_3p7*/
         if(wDataUser != 0) {
\jsend
    wire [\=wDataUser/nDWsPerBeat-1=\:0]              data_dw_in_user_\=i=\;
\js     }

\js }

    wire                        wr_beat_en;
    wire                        rd_beat_en;
    wire [\=wBeats-1=\:0]       beat_count_d;
    wire [\=wBeats-1=\:0]       beat_count_q;
    wire                        beat_count_en;
    wire                        data_first_d;
    wire                        data_first_q;
    wire                        data_first_en;
    wire                        last_beat_written_d;
    wire                        last_beat_written_q;
    wire                        last_beat_written_en;

    wire                        last_beat_read_d;
    wire                        last_beat_read_q;
    wire                        last_beat_read_en;
    wire [\=nDWsPerBeat-1=\:0]  wr_mask;

\js if(wrData == 0) {
    wire [\=width/8-1=\:0]  data_beat_in_be = {\=width/8=\{1'b1}};
\js } else {
    wire [1:0]              data_beat_in_err_type = 2'b0; 
\js }


//============================================================================
// Reorder Buffer Entries
//============================================================================
\js if (wrData) {

wire [\=wDwid-1=\:0] trans_size_in_dw;
assign trans_size_in_dw = ( trans_size < 3 ) ? \=wDwid=\'d1 : \=wDwid=\'d1 << ( trans_size - 3 );

assign wr_mask = (trans_size >= \=Math.log2(width/8)=\) ? {\=nDWsPerBeat=\{1'b1}} : {\=nDWsPerBeat=\{1'b1}} >> (\=nDWsPerBeat=\ - (trans_size_aligned_cdw - trans_size_aligned_first_dwid + trans_size_in_dw));

assign trans_size_aligned_first_dwid = data_beat_in_dwid[\=wDwid-1=\:0] & ({\=wDwid=\{1'b1}} << ((trans_size < 3) ? 0 : (trans_size - 3)));

\jsbegin
// or use bytes
// assign wr_mask = (trans_size >= \=Math.log2(width/8)=\) ? {\=nDWsPerBeat=\{1'b1}} : {\=nDWsPerBeat=\{1'b1}} >> (\=nDWsPerBeat=\ - ((((critical_dw - data_beat_in_dwid[\=wDwid-1=\:0]) << 3) + trans_size) >> 3));
\jsend
assign trans_size_aligned_cdw = critical_dw & ({\=wDwid=\{1'b1}} << ((trans_size < 3) ? 0 : (trans_size - 3)));


\js for(var j = 0; j < nDWsPerBeat; j++) {
    assign data_dw_in_\=j=\ = data_beat_in[\=(j+1)*64-1=\:\=j*64=\];
    assign data_dw_in_be_\=j=\ = data_beat_in_be[\=(j+1)*8-1=\:\=j*8=\];
    assign data_dw_in_dbad_\=j=\ = data_beat_in_dbad[\=j=\];
\jsbegin
        /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wDataUser !=0 ) {
\jsend
    assign data_dw_in_user_\=j=\ = data_beat_in_user[\=(j+1)*(wDataUser/nDWsPerBeat)-1=\:\=j*(wDataUser/nDWsPerBeat)=\];
\js     }
\js }

\js for(var i = 0; i < nDWs; i++) {
\js //flop wr enable, per DW
    assign wr_rob_dw_\=i=\ = wr_hit_dw_\=i=\ & wr_beat_en & ~bypass;
    assign wr_hit_dw_\=i=\ = 
\js     for(var j = 0; j < nDWsPerBeat ; j++) {
            (data_beat_in_dwid[\=(j+1)*wDwid-1=\:\=j*wDwid=\] == \=wDwid=\'d\=i=\ & (|data_beat_in_be[\=(j+1)*8-1=\:\=j*8=\]) & wr_mask[\=j=\])
\js         if(j != nDWsPerBeat-1){
            |
\js         } else {
            ;
\js         }
\js     }
    assign wr_rob_dw_in_\=i=\ = rd_last_beat? 64'd0 :
\js     for(var j = 0; j < nDWsPerBeat ; j++) {
            (data_beat_in_dwid[\=(j+1)*wDwid-1=\:\=j*wDwid=\] == \=wDwid=\'d\=i=\)? data_dw_in_\=j=\ :
\js         if(j == nDWsPerBeat-1){
            'b0;
\js         }
\js     }

    assign wr_rob_dw_be_in_\=i=\ = rd_last_beat? 8'd0 : 
\js     for(var j = 0; j < nDWsPerBeat ; j++) {
            (data_beat_in_dwid[\=(j+1)*wDwid-1=\:\=j*wDwid=\] == \=wDwid=\'d\=i=\)? data_dw_in_be_\=j=\ :
\js         if(j == nDWsPerBeat-1){
            8'd0;
\js         }
\js     }


    assign wr_rob_dw_dbad_in_\=i=\ = rd_last_beat? 1'd0 : 
\js     for(var j = 0; j < nDWsPerBeat ; j++) {
            (data_beat_in_dwid[\=(j+1)*wDwid-1=\:\=j*wDwid=\] == \=wDwid=\'d\=i=\)? data_dw_in_dbad_\=j=\ :
\js         if(j == nDWsPerBeat-1){
            1'b0;
\js         }
\js     }
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wDataUser !=0) {
\jsend
    assign wr_rob_dw_user_in_\=i=\ = rd_last_beat? \=wDataUser/nDWsPerBeat=\'d0 : 
\js     for(var j = 0; j < nDWsPerBeat ; j++) {
            (data_beat_in_dwid[\=(j+1)*wDwid-1=\:\=j*wDwid=\] == \=wDwid=\'d\=i=\)? data_dw_in_user_\=j=\ :
\js         if(j == nDWsPerBeat-1){
            \=wDataUser/nDWsPerBeat=\'d0;
\js         }
\js     }
\js }
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wDataUser != 0) {
\jsend
    \=u.dffre(wDataUser/nDWsPerBeat,     'rob_dw_user_'+i, 'wr_rob_dw_user_in_'+i,    wDataUser+"'b0",       'wr_rob_dw_'+i,         'clk', 'reset_n')=\
\js }


\js // clear be when things are read out.
    \=u.dffre(64,    'rob_dw_'+i,           'wr_rob_dw_in_'+i,           "64'd0",      'rob_dw_be_en_'+i,      'clk', 'reset_n')=\
    \=u.dffre(8,     'rob_dw_be_'+i,        'wr_rob_dw_be_in_'+i,        "8'd0",       'rob_dw_be_en_'+i,      'clk', 'reset_n')=\
    \=u.dffre(1,     'rob_dw_dbad_'+i,      'wr_rob_dw_dbad_in_'+i,      "1'b0",       'rob_dw_be_en_'+i,      'clk', 'reset_n')=\
    \=u.dffre(1,     'rob_dw_valid_'+i,     'rob_dw_valid_d_'+i,         "1'b0",       'rob_dw_valid_en_'+i,   'clk', 'reset_n')=\
    assign rob_dw_err_type_\=i=\  = 2'b0;
    assign rob_dw_valid_set_\=i=\ = (wr_rob_dw_\=i=\ | wr_last_beat) & ~last_beat_read_q;
    assign rob_dw_valid_clr_\=i=\ = rd_last_beat;
    assign rob_dw_valid_en_\=i=\  = rob_dw_valid_set_\=i=\ | rob_dw_valid_clr_\=i=\;

\js // clear over set, after the last beat is read the entry is cleared.
    assign rob_dw_valid_d_\=i=\   = rob_dw_valid_set_\=i=\ & ~rob_dw_valid_clr_\=i=\;

    assign rob_dw_be_en_\=i=\     = (wr_rob_dw_\=i=\ & ~last_beat_read_q) | rd_last_beat;
\js }

\js } else {


\js for(var i = 0; i < nBeats; i++) {
    wire [\=nDWsPerBeat-1=\ : 0] rob_beat_dbad_\=i=\_in ;
    wire rob_beat_dbad_en_\=i=\;
    assign rob_beat_dbad_\=i=\_in = rd_last_beat ?  \=nDWsPerBeat=\'d0 : data_beat_in_dbad ;
    assign rob_beat_dbad_en_\=i=\ = rd_last_beat | wr_rob_beat_\=i=\;
    \=u.dffre(width,        'rob_beat_'+i,          'data_beat_in',           width+"'d0",        'wr_rob_beat_'+i,         'clk', 'reset_n')=\
    \=u.dffre(width/8,      'rob_beat_be_'+i,       'data_beat_in_be',        width/8+"'d0",      'wr_rob_beat_'+i,         'clk', 'reset_n')=\
    \=u.dffre(nDWsPerBeat,  'rob_beat_dbad_'+i,     'rob_beat_dbad_'+i+"_in",      nDWsPerBeat+"'b0",  'rob_beat_dbad_en_'+i,         'clk', 'reset_n')=\
    \=u.dffre(1,            'rob_beat_valid_'+i,    'rob_beat_valid_set_'+i,  "1'b0",             'rob_beat_valid_en_'+i,   'clk', 'reset_n')=\
    \=u.dffre(2,            'rob_beat_err_type_'+i, 'rob_beat_err_type_in_'+i,"2'd0",             'rob_beat_err_type_en_'+i,'clk', 'reset_n')=\


\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wDataUser != 0) {
\jsend
    \=u.dffre(wDataUser,    'rob_beat_user_'+i,   'data_beat_in_user',      wDataUser+"'b0",    'wr_rob_beat_'+i,       'clk', 'reset_n')=\
\js }
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if(nDWsPerBeat == 1) {
\jsend
    assign wr_rob_beat_\=i=\ = (data_beat_in_dwid[\=wDwid-1=\: 0] == \=wDwid=\'d\=i=\) & wr_beat_en & ~bypass;
    assign rob_dw_\=i=\ = rob_beat_\=i=\;
    assign rob_dw_be_\=i=\ = rob_beat_be_\=i=\;
    assign rob_dw_err_type_\=i=\ = rob_beat_err_type_\=i=\;
    assign rob_dw_valid_\=i=\ = rob_beat_valid_\=i=\;
    assign rob_dw_dbad_\=i=\ = rob_beat_dbad_\=i=\;
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wDataUser != 0) {
\jsend
    assign rob_dw_user_\=i=\ = rob_beat_user_\=i=\;
    \js }

\js } 
\js if(nDWsPerBeat == 2) { 
    assign wr_rob_beat_\=i=\ = (data_beat_in_dwid[\=wDwid-1=\: 1] == \=wDwid-1=\'d\=i=\) & wr_beat_en & ~bypass;
    assign {rob_dw_\=(2*i+1)=\, rob_dw_\=2*i=\} = rob_beat_\=i=\;
    assign {rob_dw_be_\=(2*i+1)=\, rob_dw_be_\=2*i=\} = rob_beat_be_\=i=\;
    assign {rob_dw_err_type_\=(2*i+1)=\, rob_dw_err_type_\=2*i=\} = {2{rob_beat_err_type_\=i=\}};
    assign {rob_dw_valid_\=(2*i+1)=\, rob_dw_valid_\=2*i=\}= {2{rob_beat_valid_\=i=\}};
    assign {rob_dw_dbad_\=(2*i+1)=\, rob_dw_dbad_\=2*i=\}= rob_beat_dbad_\=i=\;
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if (wDataUser != 0) {
\jsend
    assign {rob_dw_user_\=(2*i+1)=\, rob_dtw_user_\=2*i=\} = rob_beat_user_\=i=\;
    \js }

\js } 
\jsbegin
    /* istanbul ignore if env ncore_3p0 */
    if(nDWsPerBeat == 4) {
\jsend
    assign wr_rob_beat_\=i=\ = (data_beat_in_dwid[\=wDwid-1=\: 2] == \=wDwid-2=\'d\=i=\) & wr_beat_en & ~bypass;
    assign {rob_dw_\=(4*i+3)=\, rob_dw_\=(4*i+2)=\, rob_dw_\=(4*i+1)=\, rob_dw_\=4*i=\} = rob_beat_\=i=\;
    assign {rob_dw_be_\=(4*i+3)=\, rob_dw_be_\=(4*i+2)=\, rob_dw_be_\=(4*i+1)=\, rob_dw_be_\=4*i=\} = rob_beat_be_\=i=\;
    assign {rob_dw_err_type_\=(4*i+3)=\, rob_dw_err_type_\=(4*i+2)=\, rob_dw_err_type_\=(4*i+1)=\, rob_dw_err_type_\=4*i=\} = {4{rob_beat_err_type_\=i=\}};    
    assign {rob_dw_valid_\=(4*i+3)=\, rob_dw_valid_\=(4*i+2)=\, rob_dw_valid_\=(4*i+1)=\, rob_dw_valid_\=4*i=\}= {4{rob_beat_valid_\=i=\}};
    assign {rob_dw_dbad_\=(4*i+3)=\, rob_dw_dbad_\=(4*i+2)=\, rob_dw_dbad_\=(4*i+1)=\, rob_dw_dbad_\=4*i=\}= rob_beat_dbad_\=i=\;
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4 ,ncore_3p6,ncore_3p7*/
    if (wDataUser != 0) {
\jsend
    assign {rob_dw_user_\=(4*i+3)=\, rob_dw_user_\=(4*i+2)=\, rob_dw_user_\=(4*i+1)=\, rob_dw_user_\=4*i=\}= rob_beat_user_\=i=\;
    \js }
\js }
    assign rob_beat_valid_set_\=i=\ = wr_rob_beat_\=i=\ | wr_last_beat & ~bypass;
    assign rob_beat_valid_clr_\=i=\ = rd_last_beat ;
    assign rob_beat_err_type_set_\=i=\ = wr_rob_beat_\=i=\;
    assign rob_beat_err_type_clr_\=i=\ = rd_last_beat;
    assign rob_beat_err_type_en_\=i=\ = rob_beat_err_type_set_\=i=\ | rob_beat_err_type_clr_\=i=\;
    assign rob_beat_err_type_in_\=i=\ = rd_last_beat ? 2'd0 : data_beat_in_err_type;

\js //    assign rob_beat_valid_d_\=i=\ = rob_beat_valid_set_\=i=\ & ~rob_beat_valid_clr_\=i=\;
    assign rob_beat_valid_en_\=i=\ = rob_beat_valid_set_\=i=\ | rob_beat_valid_clr_\=i=\;
\js }
\js }
    assign data_beat_in_ready = bypass ? data_beat_out_ready : rob_ready;

    wire wr_first_beat;

    assign wr_last_beat = wr_beat_en & data_beat_in_last;
    assign rd_last_beat = rd_beat_en & data_beat_out_last;
    assign wr_first_beat= wr_beat_en & data_first_q;

    \=u.dffre(1, 'last_beat_written_q', 'last_beat_written_d',  "1'b0", 'last_beat_written_en', 'clk', 'reset_n')=\
    \=u.dffre(1, 'last_beat_read_q',    'last_beat_read_d',     "1'b0", 'last_beat_read_en',    'clk', 'reset_n')=\

    // read/write same data won't happen in the same cycle
    assign last_beat_written_d  = wr_last_beat & ~(rd_last_beat | last_beat_read_q);
    assign last_beat_written_en = wr_last_beat | rd_last_beat;

    assign last_beat_read_d     = rd_last_beat & ~(wr_last_beat | last_beat_written_q);
    assign last_beat_read_en    = rd_last_beat | wr_last_beat;

    // data first counter
    \=obj.lib.dffre(1, 'data_first_q', 'data_first_d', "1'b1", 'data_first_en', 'clk', 'reset_n')=\

    assign data_first_d  = wr_last_beat;
    assign data_first_en = wr_beat_en;

    assign rob_ready = ~last_beat_written_q;

//============================================================================
// ROB Pointers Management
//============================================================================
\js // This is for cross beat
\js if ( wrData ) {
    assign rd_ptr_next = (wr_beat_en & data_first_q)? rd_ptr_init 
                                                    : ( ( {1'b0,rd_ptr_0} +  \=wDwid+1=\'d\=nDWsPerBeat=\ ) == rd_ptr_wrap_boundary_q)? trans_size_aligned_dwid_q 
                                                                                                                : (rd_ptr_0 + \=wDwid=\'d\=nDWsPerBeat=\);
\js } else {
    assign rd_ptr_next = (wr_beat_en & data_first_q)? rd_ptr_init 
                                                    : ( ( {1'b0,rd_ptr_\=nDWsPerBeat-1=\} + \=wDwid+1=\'d1) == rd_ptr_wrap_boundary_q)? trans_size_aligned_dwid_q 
                                                                                                                           : (rd_ptr_\=nDWsPerBeat-1=\ + 1'd1) ;
\js }
\js // won't happen the same cycle
    assign rd_ptr_en = (wr_beat_en & data_first_q) | rd_beat_en; 

    \=u.dffre(wDwid, 'rd_ptr_0', 'rd_ptr_next', wDwid+"'b0", 'rd_ptr_en', 'clk', 'reset_n')=\

\js for(var i = 1; i < nDWsPerBeat; i++) {
    assign rd_ptr_inc_\=i=\ = rd_ptr_0 + \=wDwid+1=\'d\=i=\;

\js     if (wrData) {
    assign rd_ptr_\=i=\ = rd_ptr_0 + \=wDwid=\'d\=i=\;
\js     } else {
    assign rd_ptr_\=i=\ = (rd_ptr_inc_\=i=\ == rd_ptr_wrap_boundary_q) ? trans_size_aligned_dwid_q : 
                                                                         (rd_ptr_inc_\=i=\ > rd_ptr_wrap_boundary_q) ? (rd_ptr_offset_\=i=\[\=wDwid-1=\:0] + trans_size_aligned_dwid_q) :
                                                                                                                        rd_ptr_inc_\=i=\[\=wDwid-1=\:0];
    assign rd_ptr_offset_\=i=\ = rd_ptr_inc_\=i=\ - rd_ptr_wrap_boundary_q;
\js     }
\js }

    assign trans_size_dw = (\=wDwid=\'b1 << (trans_size - \=wTransSize=\'d3));
    assign intf_size_mask = ~((\=wDwid=\'b1 << intf_size) - 1'b1); 
    assign trans_size_mask = ~(trans_size_dw - 1'b1);
    // interface size aligned address
    assign rd_ptr_init = critical_dw & intf_size_mask;
    assign rd_ptr_wrap_boundary_d = {1'b0, trans_size_aligned_dwid_d} + {1'b0, trans_size_dw};

    assign trans_size_aligned_dwid_d = critical_dw & trans_size_mask;

    \=u.dffre(wDwid+1,  'rd_ptr_wrap_boundary_q',   'rd_ptr_wrap_boundary_d',   (wDwid+1)+"'b0",    'wr_first_beat', 'clk', 'reset_n')=\
    \=u.dffre(wDwid,    'trans_size_aligned_dwid_q','trans_size_aligned_dwid_d', wDwid+"'b0",       'wr_first_beat', 'clk', 'reset_n')=\

\jsbegin
//============================================================================
// Beat Countdown
//============================================================================
\jsend

\js // handle special case when trans_size is narrower then intfSize
\js // if so, size should be intfSize. otherwise size remains.

    wire [\=wBeats-1=\:0]       beats_init;
    wire [\=wTransSize-1=\:0]   adj_size;
    wire [\=wTransSize-1=\:0]   intf_size_in_bytes;

    assign intf_size_in_bytes = intf_size+ \=wTransSize=\'b11;
    assign adj_size = (trans_size >= intf_size_in_bytes)? trans_size : intf_size_in_bytes;
    assign beats_init = (adj_size > \=Math.log2(width/8)=\)? (\=wBeats=\'b1 << (adj_size - \=Math.log2(width/8)=\)) - 1'b1 : \=wBeats=\'b0;
    assign wr_beat_en = data_beat_in_valid & data_beat_in_ready;
    assign rd_beat_en = data_beat_out_valid & data_beat_out_ready;
    assign beat_count_d = (wr_beat_en & data_first_q)? beats_init : rd_beat_en? beat_count_q - 1'b1 : beat_count_q;
    assign beat_count_en = (wr_beat_en & data_first_q) | rd_beat_en;

    \=u.dffre(wBeats, 'beat_count_q', 'beat_count_d', wBeats+"'d0", 'beat_count_en', 'clk', 'reset_n')=\
\js // fix this if timing has issue. can suppress valid for a cycle until last beat is written.
    assign data_beat_out_last = bypass ? data_beat_in_last : (beat_count_q == \=wBeats=\'b0);


//============================================================================
// Ouput Data Mux
//============================================================================

    \js// TODO: review bypass case, Coherent may not be bypassed since AIUs is rotating snoopped data. 
    \js// 1. Same intf_size
    \js// 2. DW address align to both intf_size
    \js// 3. If transaction address aligns to DMI width and transaction size?
    \js// intf_size information is in CMD for non-coherent wr
    assign empty = ~rob_dw_valid_0
\js for (var i = 1; i < nDWs; i++) {
                  &~rob_dw_valid_\=i=\
\js }
                  ;
\jsbegin
    /* istanbul ignore else env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if(!bypassable) {
\jsend
    assign bypass = 1'b0;
\js } else {
    assign bypass = empty & (intf_size == \=wIntfSize=\'d\=Math.log2(width/64)=\);
\js }
    assign data_beat_out = data_beat_in     & {\=width=\{ bypass}}|
                           return_rob_beat  & {\=width=\{~bypass}};
\js if(wrData) {
    assign data_beat_out_be = bypass ? data_beat_in_be : return_rob_beat_be;
\js } else {
    assign data_beat_out_err_type = bypass ? data_beat_in_err_type : return_rob_beat_err_type;
\js }
\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if(wDataUser != 0) {
\jsend
    assign data_beat_out_user = bypass ? data_beat_in_user : return_rob_beat_user;
\js } 
    assign data_beat_out_dbad = bypass ? data_beat_in_dbad :return_rob_beat_dbad;
    assign data_beat_out_valid = bypass ? data_beat_in_valid : return_rob_beat_valid;
    assign data_beat_out_dwid = bypass ? data_beat_in_dwid : return_rob_beat_dwid;



    assign return_rob_beat = {
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_data_\=i=\
\js     if(i != 0) {
            ,
\js     }
\js }
                             };

\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if(wDataUser != 0) {
\jsend
    assign return_rob_beat_user = {
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_data_user_\=i=\
\js     if(i != 0) {
            ,
\js     }
\js }
                             };
\js }

    assign return_rob_beat_be = {
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_data_be_\=i=\
\js     if(i != 0) {
            ,
\js     }
\js }
                             };

    assign return_rob_beat_err_type = 
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_data_err_type_\=i=\
\js     if(i != 0) {
            |
\js     }
\js }
                             ;

    assign return_rob_beat_dwid = {
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_dwid_\=i=\
\js     if(i != 0) {
            ,
\js     }
\js }
                             };

    assign return_rob_beat_valid = {
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_data_valid_\=i=\
\js     if(i != 0) {
        &
\js     }
\js }
                               };

    assign return_rob_beat_dbad = {
\js for(var i = nDWsPerBeat - 1; i >= 0; i--) {
        rd_data_dbad_\=i=\
\js     if(i != 0) {
            ,
\js     }
\js }
                               };

\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_data_\=i=\ = rob_dw_0 & {64{(rd_ptr_\=i=\ == \=wDwid=\'d0)}}
\js     for(var j = 1; j < nDWs; j++) {
                          |rob_dw_\=j=\ & {64{(rd_ptr_\=i=\ == \=wDwid=\'d\=j=\)}}
\js     }
                       ;
\js }

\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_data_be_\=i=\ = rob_dw_be_0 & {8{(rd_ptr_\=i=\ == \=wDwid=\'d0)}}
\js     for(var j = 1; j < nDWs; j++) {
                             |rob_dw_be_\=j=\ & {8{(rd_ptr_\=i=\ == \=wDwid=\'d\=j=\)}}
\js     }
                       ;
\js }

\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_data_err_type_\=i=\ = rob_dw_err_type_0 & {2{(rd_ptr_\=i=\ == \=wDwid=\'d0)}}
\js     for(var j = 1; j < nDWs; j++) {
                             |rob_dw_err_type_\=j=\ & {2{(rd_ptr_\=i=\ == \=wDwid=\'d\=j=\)}}
\js     }
                       ;
\js }


\jsbegin
    /* istanbul ignore if env ncore_3p0, ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */
    if ( wDataUser != 0 ) {
\jsend
\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_data_user_\=i=\ = rob_dw_user_0 & {\=wDataUser/nDWsPerBeat=\{(rd_ptr_\=i=\ == \=wDwid=\'d0)}}
\js     for(var j = 1; j < nDWs; j++) {
                             |rob_dw_user_\=j=\ & {\=wDataUser/nDWsPerBeat=\{(rd_ptr_\=i=\ == \=wDwid=\'d\=j=\)}}
\js     }
                       ;
\js }
\js }


\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_dwid_\=i=\ = rd_ptr_\=i=\;
\js }

\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_data_valid_\=i=\ = rob_dw_valid_0 & (rd_ptr_\=i=\ == \=wDwid=\'d0)
\js     for(var j = 1; j < nDWs; j++) {
                                |rob_dw_valid_\=j=\ & (rd_ptr_\=i=\ == \=wDwid=\'d\=j=\)
\js     }
                       ;
\js }


\js for(var i = 0; i < nDWsPerBeat; i++) {
    assign rd_data_dbad_\=i=\ = rob_dw_dbad_0 & (rd_ptr_\=i=\ == \=wDwid=\'d0)
\js     for(var j = 1; j < nDWs; j++) {
                                 |rob_dw_dbad_\=j=\ & (rd_ptr_\=i=\ == \=wDwid=\'d\=j=\)
\js     }
                       ;
\js }

    wire [\=wDataInfoBundle-1=\:0] data_info_d;
    wire [\=wDataInfoBundle-1=\:0] data_info_q;

    assign \=bundleFunctions.packetizeBundle('lookup_', dataInfoInterface, [], u.bundle)=\ = bypass ? data_info_d : data_info_q;
    assign data_info_d = \=bundleFunctions.packetizeBundle('alloc_', dataInfoInterface, [], u.bundle)=\;
    \=u.dffre(wDataInfoBundle, 'data_info_q', 'data_info_d', wDataInfoBundle+"'d0", 'wr_first_beat', 'clk', 'reset_n')=\

\js if (wrData) {
\js // RBID
    wire                rb_done;

\js if ( coherent ) {
    assign rb_id_retire_RBGen = lookup_RBGen;
    assign rb_done = ~lookup_mw | lookup_primary;
    assign rb_id_retire_initiator_id = lookup_rb_initiator_id;
\jsbegin   /* istanbul ignore else env ncore_3p2, ncore_3p4,ncore_3p6,ncore_3p7 */   if ( wTm != 0 ) { \jsend
    assign rb_id_retire_tm = lookup_tm;
\js     }
\js     if ( wQos != 0 ) {
    assign rb_id_retire_qos = lookup_qos;
\js     }
\js } else {
    assign rb_done = 1'b1;

\js }
    assign rb_id_retire = (\=nRbs=\'b1 << lookup_rb_id);
    assign rb_id_retire_valid = (( last_beat_written_q | wr_last_beat ) & rd_last_beat | 
                                 ( last_beat_read_q    | rd_last_beat ) & wr_last_beat ) & rb_done;
\js }
endmodule


