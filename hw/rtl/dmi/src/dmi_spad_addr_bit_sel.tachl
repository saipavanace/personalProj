\jsbegin
var u = obj.lib;

var InterleaveInfo = u.getParam("InterleaveInfo");
var wAddr = u.getParam("wAddr");


function return_address (Primary_bits,wAddr){
    Primary_bits.sort(function(i1,i2) { return i1-i2});
    var res="Addr_in["+(Primary_bits[0]-1)+":0] } ; programation_error_int =1'b0 ;"

    for(let i=1; i<Primary_bits.length;i++){
        //this is tested in teh random config, no added value to cover this for code coverage.
        /* istanbul ignore if env ncore_3p7*/
        if (Primary_bits[i] != Primary_bits[i-1]+1){
            res="Addr_in["+(Primary_bits[i]-1)+" : " + (Primary_bits[i-1]+1)+" ]," + res
        }
    }
        //this is tested in the random config, no added value to cover this for code coverage.
        /* istanbul ignore if env ncore_3p7*/
    if (Primary_bits[Primary_bits.length-1] == (wAddr-1) ){
        return "Addr_out_int =  { "+Primary_bits.length +"'d0 ," + res
    } else {
        return "Addr_out_int =  { "+Primary_bits.length +"'d0 , "+"Addr_in["+(wAddr-1)+":"+ (Primary_bits[Primary_bits.length-1]+1)+"] ," + res
    }
}


//Return 1,2,4,8,16 depending on the interleaving function thtat the dmi is using (no interleaving, 2-way, 4-way, 8-way, 16-way)
u.port("input","interleaving_function_type",5);
//returns 0 or 1 depending on which interleaving fucntion is being used.
u.port("input","interleaving_function_id",3);

u.port("input","Addr_in",wAddr);
u.port("output","Addr_out",wAddr);

//Some tachl waiver for some of the interleaving scheme because our default set of config does not have more than 4 DMI. Config9 covers the fucntionality in a random fashion and code is 
//identical so safe to waive in 

\jsend
module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);


reg [\=wAddr-1=\ : 0 ] Addr_out_int;
reg programation_error_int;

always@ (*) begin
case({interleaving_function_type,interleaving_function_id})
    {5'd1,3'd0}  : begin Addr_out_int= Addr_in; programation_error_int =1'b0 ; end
    {5'd1,3'd1}  : begin Addr_out_int= Addr_in; programation_error_int =1'b0 ; end
    {5'd2,3'd0}  : begin \=InterleaveInfo.dmi2WIFV[0] == undefined ? /* istanbul ignore next env ncore_3p2,ncore_3p4 ,ncore_3p6, ncore_3p7*/ "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : return_address(InterleaveInfo.dmi2WIFV[0]["PrimaryBits"], wAddr) =\ end
    {5'd2,3'd1}  : begin \=InterleaveInfo.dmi2WIFV[1] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : return_address(InterleaveInfo.dmi2WIFV[1]["PrimaryBits"], wAddr) =\ end
    {5'd4,3'd0}  : begin \=InterleaveInfo.dmi4WIFV[0] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : return_address(InterleaveInfo.dmi4WIFV[0]["PrimaryBits"], wAddr) =\ end
    {5'd4,3'd1}  : begin \=InterleaveInfo.dmi4WIFV[1] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : return_address(InterleaveInfo.dmi4WIFV[1]["PrimaryBits"], wAddr) =\ end
    {5'd8,3'd0}  : begin \=InterleaveInfo.dmi8WIFV[0] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : /* istanbul ignore next env ncore_3p2,ncore_3p4 ,ncore_3p6, ncore_3p7*/return_address(InterleaveInfo.dmi8WIFV[0]["PrimaryBits"], wAddr) =\ end
    {5'd8,3'd1}  : begin \=InterleaveInfo.dmi8WIFV[1] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : /* istanbul ignore next env ncore_3p2,ncore_3p4 ,ncore_3p6, ncore_3p7*/return_address(InterleaveInfo.dmi8WIFV[1]["PrimaryBits"], wAddr) =\ end
    {5'd16,3'd0} : begin \=InterleaveInfo.dmi16WIFV[0] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : /* istanbul ignore next env ncore_3p2,ncore_3p4 ,ncore_3p6, ncore_3p7*/return_address(InterleaveInfo.dmi16WIFV[0]["PrimaryBits"],wAddr) =\ end
    {5'd16,3'd1} : begin \=InterleaveInfo.dmi16WIFV[1] == undefined ? "Addr_out_int= Addr_in ; programation_error_int =1'b1;" : /* istanbul ignore next env ncore_3p2,ncore_3p4 ,ncore_3p6, ncore_3p7*/return_address(InterleaveInfo.dmi16WIFV[1]["PrimaryBits"],wAddr) =\ end
    default :      begin Addr_out_int= Addr_in; programation_error_int =1'b1 ; end
endcase
end


assign Addr_out =Addr_out_int;

endmodule


