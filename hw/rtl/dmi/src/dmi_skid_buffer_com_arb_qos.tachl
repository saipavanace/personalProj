
\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
// DMI skid buffer contains an input fifo, a pri age arbiter and an output fifo. 
//
// Filename: dmi_skid_buffer.tachl
// Parameters : reqInterface, clkInterface, wStarvThreshold, bufferSize ({Skidfifo :, SkidBuffer :}), useOutputFifo,
//              useSmallArea, priAgeBypass, useQos, priorityThreshold
//=============================================================================

var u = obj.lib;
var m = obj.userLib;
var bundleFunctions = obj.userLib.bundleFunctions;


let p=u.getParam();

//clock and reset
u.interface("","slave", p.clkInterface, )

//input interface
u.interface("req_in_", "slave",p.reqInterface);


//output interface
u.interface("req_out_","master",p.reqInterface);
if(p.useQos){

    u.port("input","starv_en",              1);
    u.port("input","starv_threshold",       p.wStarvThreshold);
    u.port("input","qos_disable",           1);
    u.port("output","starv_overflow_event", 1);
    u.port("output", "starv_mode",          1);
    u.port("output","full",                 1);   

}


u.port("output","empty",1);


\jsend

module \=u.getModuleName()=\ (\=u.getPorts()=\);




\=bundleFunctions.wiresFromInterface('req_input_fifo_out_',        p.reqInterface,    [], obj.lib.bundle)=\
\=bundleFunctions.wiresFromInterface('req_skid_out_',        p.reqInterface,    [], obj.lib.bundle)=\


\jsbegin
//==============================================================================
// CMD Skid Buffer
//==============================================================================

 var cmdSkidBufferInputFifoInterfaces = [];
 cmdSkidBufferInputFifoInterfaces.push({modulePrefix: '',         localPrefix: '',            interface: p.clkInterface,  exclude: []               });
 cmdSkidBufferInputFifoInterfaces.push({modulePrefix: 'push_',  localPrefix: 'req_in_',    interface: p.reqInterface,     exclude: []              });
 cmdSkidBufferInputFifoInterfaces.push({modulePrefix: 'pop_',  localPrefix: 'req_input_fifo_out_',    interface: p.reqInterface,     exclude: []              });
 var cmdSkidBufferInputFifoParams = {
     width           : bundleFunctions.getBundleWidth(p.reqInterface, ['valid', 'ready'], obj.lib.bundle),
     depth           : p.useQos? (p.bufferSize.Skidfifo  <= 0 ? 1 : p.bufferSize.Skidfifo) : p.bufferSize.Skidfifo+p.bufferSize.SkidBuffer  ,
     zerodepth       : ( p.useQos) ?  (p.bufferSize.Skidfifo <= 0 ? 1: 0) : 0 ,
     bypass_mode     : 1,
     interface       : p.reqInterface
 }
 \jsend
 
 \=obj.lib.instance({
     instanceName    : 'skid_input_fifo',
     moduleName      : 'fifo_bundle',
     params          : cmdSkidBufferInputFifoParams,
     verilogParams   : {},
     ports           : {},
     interfaces      : cmdSkidBufferInputFifoInterfaces,
 })=\
 
 \jsbegin

if (p.useQos){
 var cmdSkidBufferInterfaces = [];
 cmdSkidBufferInterfaces.push({modulePrefix: '',          localPrefix: '',                        interface: p.clkInterface,    exclude: []                 });
 cmdSkidBufferInterfaces.push({modulePrefix: 'req_in_',   localPrefix: 'req_input_fifo_out_',                interface: p.reqInterface, exclude: []   });
 cmdSkidBufferInterfaces.push({modulePrefix: 'req_out_',  localPrefix: 'req_skid_out_',    interface: p.reqInterface,exclude : []});
 
 var cmdSkidBufferParams = {
     assertOn            : p.assertOn,
     depth               : p.bufferSize.SkidBuffer,
     bypass              : p.priAgeBypass,
     wStarvThreshold     : p.useQos*p.wStarvThreshold,
     reqInterface        : p.reqInterface,
     clkInterface        : p.clkInterface,
 };
 
 var cmdSkidBufferPorts = {
     empty                  : 'empty',
     starv_en               :'starv_en',
     starv_threshold        : 'starv_threshold',
     qos_disable            :'qos_disable',
     starv_overflow_event   :'starv_overflow_event',
     starv_mode             :'starv_mode',
     full                   :"full"
 };

 \jsend
 
 \=obj.lib.instance({
     instanceName        : 'qos_buffer',
     moduleName          : 'qos_skid_buffer',
     params              : cmdSkidBufferParams,
     verilogParams       : {},
     ports               : cmdSkidBufferPorts,
     interfaces          : cmdSkidBufferInterfaces
 })=\
 
 
 
 \jsbegin
} else {
\jsend

\=bundleFunctions.assignByBundle('req_skid_out_', 'req_input_fifo_out_',  p.reqInterface, [], obj.lib.bundle)=\

assign empty = ~req_skid_out_valid;
\jsbegin
}
 var cmdSkidBufferFifoInterfaces = [];
 cmdSkidBufferFifoInterfaces.push({modulePrefix: '',         localPrefix: '',            interface: p.clkInterface,  exclude: []               });
 cmdSkidBufferFifoInterfaces.push({modulePrefix: 'push_',  localPrefix: 'req_skid_out_',    interface: p.reqInterface, exclude : [] });
 cmdSkidBufferFifoInterfaces.push({modulePrefix: 'pop_',  localPrefix: 'req_out_',    interface: p.reqInterface, exclude: [] });

 var cmdSkidBufferFifoParams = {
     width           : bundleFunctions.getBundleWidth(p.reqInterface, [], obj.lib.bundle),
     depth           : 2,
     zerodepth       : p.useOutputFifo==0,
     bypass_mode     : 0,
     interface       : p.reqInterface
 }
 \jsend
 
 \=obj.lib.instance({
     instanceName    : 'skid_output_fifo',
     moduleName      : 'fifo_bundle',
     params          : cmdSkidBufferFifoParams,
     verilogParams   : {},
     ports           : {},
     interfaces      : cmdSkidBufferFifoInterfaces,
 })=\

 endmodule
