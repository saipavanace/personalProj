\jsbegin
//=============================================================================
// Copyright(C) 2022 Arteris, Inc.
// All rights reserved
//=============================================================================
//dmi_counter
//Parameters :
//- Reverse
//- Threshold
//- Max_value (if Revers is 1)
//- Width
//Implements a counter. Increment by one when incr port is asserted, decrement by one when decr port is asserted. 
//Several output are available depending on a parameter :
//- Reverse  1 : Takes an extra paramteter called Max_value which is the reset value of the counter.
//- Full  1 : Adds an full output and a Max_value input. overflow asserts when the coutner reaches 0 if reverse or Max_value if not reverse
//- Threshold  1 : If Reverse =0 : output threshold_reached is instanciated as well as an input called threshold_in. threshold_reached asserts when the value of the coutner is greater than the threshold in.
//                  If Reverse = 1 : output threshold_reached is instanciated as well as an input called threshold_in. threshold_reached asserts when the value of the coutner is less than the threshold in.
//- Count 1 : Creates an output with the current value of the counter
//=============================================================================
var utilFunctions   = obj.userLib.lib_utils;
var u = obj.lib;
var p = u.getParam();
u.port('input',   'increment',    1);
u.port('input',   'decrement',    1);

if (p.Reverse | p.max_value){
    u.port('input',   'max_value',    p.Width);
}

if(p.Threshold){
    u.port('input',     'threshold_in',    p.Width);
    u.port('output',    'threshold_reached', 1)
}

if(p.Count){
    u.port('output', 'count', p.Width);
}

if (p.Full){
    u.port('output', 'full',1);
}

u.interface('',             'slave',    p.clkInterface);


\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

wire [\=p.Width=\ : 0] d_count;
wire [\=p.Width=\ : 0] Reset_value;
wire [\=p.Width=\ : 0] q_count;
wire q_full;
wire d_full;

assign d_count = q_full ? q_count + {{\=p.Width=\{1'b0}},increment} - {{\=p.Width=\{1'b0}},decrement} : q_count;

\jsbegin  
if (p.Reverse | p.max_value) {
\jsend
    assign Reset_value = {1'b0,max_value};
\jsbegin
} 

else {
\jsend
    assign Reset_value = \=p.Width+1=\'d0;
\jsbegin
}
\jsend

\=u.dffre(p.Width+1, 'q_count','d_count', 'Reset_value',    'increment|decrement' , 'clk', 'reset_n')=\

\jsbegin
if (p.Reverse){
\jsend
    assign d_full = d_count == \=p.Width+1=\'d0;
\jsbegin
} 
else {
\jsend
    d_full = d_count == {1'b0,{\=p.Width=\{1'b1}}};
\jsbegin
 }
\jsend

\=u.dffre(1,"q_full","d_full","1'b0",'clk','reset_n')=\


\jsbegin
if (p.Threshold & p.Reverse){
\jsend
    assign threshold_reached = count < threshold_in;
\jsbegin
} else if (p.Threshold & !p.Reverse) {
\jsend
    assign threshold_reached = count > threshold_in;
\jsbegin
}
\jsend


\jsbegin
if (p.Full){
\jsend
assign full = d_full;
\jsbegin
}
\jsend



endmodule