//=============================================================================
// Copyright (C) 2018 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// Dmi address translation Unit
// Author: Tso-Wei Chang
// 
//=========================================================================

var u = obj.lib;
var bundleFunctions = obj.userLib.bundleFunctions;
var wAddr = obj.lib.getParam('wAddr');
var useAddrTranslation = obj.lib.getParam('useAddrTranslation');
var nAddrTransRegisters = useAddrTranslation? obj.lib.getParam('nAddrTransRegisters') : 0;
var addrTransInterface = obj.lib.getParam('addrTransInterface');
var csrAddrTransInterface = obj.lib.getParam('csrAddrTransInterface');

var wNUnitId = obj.lib.getParam('wNUnitId');
var InterleaveInfo = obj.lib.getParam("InterleaveInfo");
var dmi3WIFV = InterleaveInfo.dmi3WIFV;
\jsend

\jsbegin
//=============================================================================
// Ports
//=============================================================================
obj.lib.interface('', 'slave', addrTransInterface);
obj.lib.interface('', 'slave', csrAddrTransInterface);

obj.lib.port('input',  'Unit_Id',         wNUnitId); //NUnitId of this DMI
obj.lib.port('input',  'AMIGR_AMIGS',     4);
obj.lib.port('input',  'AMIGR_Valid',     1);
obj.lib.port('input',  'AMIFR_A16WIFId',  3);
obj.lib.port('input',  'AMIFR_A12WIFId',  3);
obj.lib.port('input',  'AMIFR_A8WIFId',   3);
obj.lib.port('input',  'AMIFR_A6WIFId',   3);
obj.lib.port('input',  'AMIFR_A4WIFId',   3);
obj.lib.port('input',  'AMIFR_A3WIFId',   3);
obj.lib.port('input',  'AMIFR_A2WIFId',   3);

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\jsbegin
//=============================================================================
// Wires
//=============================================================================
\jsend

wire [51:0] read_trans_addr_div_in;
wire [51:0] read_trans_addr_div_out;
wire [51:0] write_trans_addr_div_in;
wire [51:0] write_trans_addr_div_out;

\jsbegin

var instance_ports_for_rd_addr_trans = {};
var instance_ports_for_wr_addr_trans = {};

if (useAddrTranslation) {
    for (var i=0; i < nAddrTransRegisters; i++) {
instance_ports_for_rd_addr_trans['csr_ATER_'+i+'_Valid'] = 'csr_ATER_'+i+'_Valid';
instance_ports_for_wr_addr_trans['csr_ATER_'+i+'_Valid'] = 'csr_ATER_'+i+'_Valid';
instance_ports_for_rd_addr_trans['csr_ATER_'+i+'_Mask']  = 'csr_ATER_'+i+'_Mask';
instance_ports_for_wr_addr_trans['csr_ATER_'+i+'_Mask']  = 'csr_ATER_'+i+'_Mask';
instance_ports_for_rd_addr_trans['csr_RFAR_'+i+'_FromAddr'] = 'csr_RFAR_'+i+'_FromAddr';
instance_ports_for_wr_addr_trans['csr_RFAR_'+i+'_FromAddr'] = 'csr_RFAR_'+i+'_FromAddr';
instance_ports_for_rd_addr_trans['csr_RTAR_'+i+'_ToAddr'] = 'csr_RTAR_'+i+'_ToAddr';
instance_ports_for_wr_addr_trans['csr_RTAR_'+i+'_ToAddr'] = 'csr_RTAR_'+i+'_ToAddr';
    }
}
instance_ports_for_rd_addr_trans['addr_in'] = 'read_trans_addr_div_out['+(wAddr-1)+':0]';
instance_ports_for_wr_addr_trans['addr_in'] = 'write_trans_addr_div_out['+(wAddr-1)+':0]';
instance_ports_for_rd_addr_trans['addr_out'] = 'read_trans_addr_t';
instance_ports_for_wr_addr_trans['addr_out'] = 'write_trans_addr_t';

\jsend

    \=obj.lib.instance( {
        instanceName: 'u_rd_addr_trans',
        moduleName: 'ncore3_addr_translation',
        params: {
            wAddr               : wAddr,
            useAddrTranslation  : useAddrTranslation,
            nAddrTransRegisters : nAddrTransRegisters
        },
        ports: instance_ports_for_rd_addr_trans
    })=\

    \=obj.lib.instance( {
        instanceName: 'u_wr_addr_trans',
        moduleName: 'ncore3_addr_translation',
        params: {
            wAddr               : wAddr,
            useAddrTranslation  : useAddrTranslation,
            nAddrTransRegisters : nAddrTransRegisters
        },
        ports: instance_ports_for_wr_addr_trans
    })=\







\js if (wAddr < 52) {
assign read_trans_addr_div_in = {\=52-wAddr=\'d0, read_trans_addr[\=wAddr-1=\:0]};
\js } else {
assign read_trans_addr_div_in = read_trans_addr[51:0];
\js }

    \=obj.lib.instance( {
        instanceName: 'u_read_addr_div',
        moduleName: 'ncore3_addr_div_ifn',
        params: {
            wNUnitId       : wNUnitId,
            InterleaveInfo : InterleaveInfo
        },
        ports: {
            my_n_unit_id   : 'Unit_Id',
            AMIGR_AMIGS    : 'AMIGR_AMIGS',
            AMIGR_Valid    : 'AMIGR_Valid',
            AMIFR_A16WIFId : 'AMIFR_A16WIFId',
            AMIFR_A12WIFId : 'AMIFR_A12WIFId',
            AMIFR_A8WIFId  : 'AMIFR_A8WIFId',
            AMIFR_A6WIFId  : 'AMIFR_A6WIFId',
            AMIFR_A4WIFId  : 'AMIFR_A4WIFId',
            AMIFR_A3WIFId  : 'AMIFR_A3WIFId',
            AMIFR_A2WIFId  : 'AMIFR_A2WIFId',
            address        : 'read_trans_addr_div_in',
            address_out    : 'read_trans_addr_div_out'
       }
    })=\


\js if (wAddr < 52) {
assign write_trans_addr_div_in = {\=52-wAddr=\'d0, write_trans_addr[\=wAddr-1=\:0]};
\js } else {
assign write_trans_addr_div_in = write_trans_addr[51:0];
\js }

    \=obj.lib.instance( {
        instanceName: 'u_write_addr_div',
        moduleName: 'ncore3_addr_div_ifn',
        params: {
            wNUnitId       : wNUnitId,
            InterleaveInfo : InterleaveInfo
        },
        ports: {
            my_n_unit_id   : 'Unit_Id',
            AMIGR_AMIGS    : 'AMIGR_AMIGS',
            AMIGR_Valid    : 'AMIGR_Valid',
            AMIFR_A16WIFId : 'AMIFR_A16WIFId',
            AMIFR_A12WIFId : 'AMIFR_A12WIFId',
            AMIFR_A8WIFId  : 'AMIFR_A8WIFId',
            AMIFR_A6WIFId  : 'AMIFR_A6WIFId',
            AMIFR_A4WIFId  : 'AMIFR_A4WIFId',
            AMIFR_A3WIFId  : 'AMIFR_A3WIFId',
            AMIFR_A2WIFId  : 'AMIFR_A2WIFId',
            address        : 'write_trans_addr_div_in',
            address_out    : 'write_trans_addr_div_out'
       }
    })=\

endmodule
