\jsbegin
//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
// This module implements RX DAT channel data rotation for STT.
//=============================================================================
\jsend

\jsbegin
var u = obj.lib;
var bundleFunctions = obj.userLib.bundleFunctions;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

var assertOn           = u.getParam('assertOn');
var chi_cmd            = u.getParam('chi_cmd');
var dat_flit_interface = u.getParam('DatInterface');
var poison_width       = u.getParam('DatInterface').Poison;

var dat_flit_width_with_poison   = bundleFunctions.getBundleWidth(dat_flit_interface ,[],                     obj.lib.bundle);
var dat_flit_width               = bundleFunctions.getBundleWidth(dat_flit_interface ,['Poison'],             obj.lib.bundle);
var dat_flit_width_minus_data    = bundleFunctions.getBundleWidth(dat_flit_interface ,['Poison','Data'],      obj.lib.bundle);
var dat_flit_width_minus_data_be = bundleFunctions.getBundleWidth(dat_flit_interface ,['Poison','Data','BE'], obj.lib.bundle);

var intf_size_width  = u.getParam('intf_size_width');
var dtw_dwid_width   = u.getParam('dtw_dwid_width');
var wData            = u.getParam('wData');
var wBE              = u.getParam('wDatFlit_BE');
var enPoison         = u.getParam('enPoison');

var intf_size        = Math.max(log2ceil(wData/64), 1);
var num_dw           = (wData/64);
var nBeatsPerCacheLine = (64 * 8) / wData; //CHI-AIU only supports wData=128, 256.

var dtw_buf_data_width = dat_flit_width_with_poison + 1 + intf_size_width + 1;

//=============================================================================
// Ports
//=============================================================================
u.port('input',  'clk',     1);
u.port('input',  'reset_n', 1);

u.port('input',  'chi_rx_dat_flit_org', dat_flit_width_with_poison);
u.port('input',  'chi_rx_dat_flitv_org', 1);
u.port('input',  'chi_rx_dat_valid', 1);
u.port('output', 'chi_rx_dat_flitv_backpressure', 1);

u.port('input',  'RXDATFLIT_target_intf_size', intf_size_width);
u.port('input',  'RXDATFLIT_snp_addr_bit3', 1);
u.port('input',  'RXDATFLIT_delay_dtw_valid', 1);

u.port('output', 'stt_chi_rx_dat_flitv_d1',1);

obj.lib.interface('RXDATFLIT_', 'master', dat_flit_interface, ['Data','BE','TraceTag','DataID','CCID','RespErr','Homenode_ID','TgtID','QoS']);

u.port('output', 'dtw_data_valid', 1);
u.port('input',  'dtw_req_mst_ready', 1);

u.port('output', 'rx_data_valid', 1);
u.port('input',  'data_ready', 1);

u.port('output', 'RXDAT_LAST', 1);
u.port('output', 'RXDAT_DWID', dtw_dwid_width);

obj.lib.interface('RXDAT_', 'master', dat_flit_interface, []);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

//=============================================================================
// Wires
//=============================================================================

wire dff_enable = 1'b1;

wire chi_rx_dat_flitv_d1;

wire [\=dat_flit_width_with_poison-1=\:0] chi_rx_dat_flit_full_d1;
wire [\=dat_flit_width-1=\:0] chi_rx_dat_flit_d1 = chi_rx_dat_flit_full_d1[\=dat_flit_width-1=\:0];
wire [\=dat_flit_width_minus_data_be-1=\:0] chi_rx_dat_flit_d1_minus_data_be;

wire [\=dtw_buf_data_width-1=\:0] RXDATFLIT_out;
wire [\=dtw_buf_data_width-1=\:0] RXDATFLIT_out1;
wire [\=dtw_buf_data_width-1=\:0] drb_RXDATFLIT_out1;
wire [\=dtw_buf_data_width-1=\:0] drb_RXDATFLIT_out1_hold;

\=bundleFunctions.wiresFromInterface( 'chi_rx_dat_flit_org_' , dat_flit_interface, [], obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface( 'RXDATFLIT_' , dat_flit_interface, ['Poison', 'TxnID', 'FwdState', 'Resp', 'DBID', 'OpCode', 'SrcID', 'DataSource', 'CBusy', 'TagOp', 'Tag', 'TU'], obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface( 'drb_attr_in_' , dat_flit_interface, ['Poison', 'Data', 'BE'], obj.lib.bundle )=\
\=bundleFunctions.wiresFromInterface( 'drb_attr_out_' , dat_flit_interface, ['Poison', 'Data', 'BE'], obj.lib.bundle )=\

wire [\=intf_size_width-1=\:0] RXDAT_target_intf_size;
wire RXDAT_snp_addr_bit3;

//=============================================================================
// Unpacking CHI flit to bit fields
//=============================================================================

// reversing interfaces as CHI spec puts flit with LSB first
\jsbegin
var reversed_dat_intf = Object.keys(dat_flit_interface).reverse().reduce(function (acc,val){ acc[val] = dat_flit_interface[val]; return acc ; },{});
\jsend

assign \=bundleFunctions.packetizeBundle('chi_rx_dat_flit_org_', reversed_dat_intf, [], obj.lib.bundle)=\ = chi_rx_dat_flit_org;

assign {RXDAT_LAST, RXDAT_snp_addr_bit3, RXDAT_target_intf_size, RXDAT_DataID, \=bundleFunctions.packetizeBundle('RXDAT_', reversed_dat_intf, ['DataID'], obj.lib.bundle)=\} = RXDATFLIT_out;

assign \=bundleFunctions.packetizeBundle('RXDATFLIT_', reversed_dat_intf, [], obj.lib.bundle)=\ = chi_rx_dat_flit_full_d1;

assign chi_rx_dat_flit_d1_minus_data_be = chi_rx_dat_flit_d1[\=dat_flit_width_minus_data_be-1=\:0];

assign \=bundleFunctions.packetizeBundle('drb_attr_in_', reversed_dat_intf, ['Poison', 'Data', 'BE'], obj.lib.bundle)=\ = chi_rx_dat_flit_d1_minus_data_be;

//=============================================================================
// Pipe input flit to generate
//    chi_rx_dat_flitv_d1
//    chi_rx_dat_flit_full_d1
//=============================================================================

\=u.dffre(1, 'chi_rx_dat_flitv_d1', 'chi_rx_dat_flitv_org', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

\=u.dffre(dat_flit_width_with_poison, 'chi_rx_dat_flit_full_d1', 'chi_rx_dat_flit_org', dat_flit_width_with_poison+"'b0", 'chi_rx_dat_flitv_org', 'clk', 'reset_n')=\

\js if (enPoison == true) {

wire [\=poison_width-1=\:0] dat_flit_poison_d1;

assign dat_flit_poison_d1 = chi_rx_dat_flit_full_d1[\=dat_flit_width_with_poison=\-1:\=dat_flit_width=\];

\js }

\jsbegin
//=============================================================================
// rx_data_valid
// dtw_data_valid
// chi_rx_dat_flitv_backpressure
//=============================================================================
\jsend

wire drb_data_beat_out_replay_progress;
wire holding_fifo_pop_ready = drb_data_beat_out_replay_progress ? dtw_req_mst_ready : data_ready;
wire holding_fifo_pop_valid;
wire drb_backpressure;
 
assign rx_data_valid  = holding_fifo_pop_valid & ~drb_data_beat_out_replay_progress;
assign dtw_data_valid = holding_fifo_pop_valid &  drb_data_beat_out_replay_progress;

assign RXDATFLIT_out = RXDATFLIT_out1;

assign chi_rx_dat_flitv_backpressure = chi_rx_dat_valid & (chi_rx_dat_flit_org_OpCode != \=dat_flit_interface.OpCode=\'b0) & (chi_rx_dat_flit_org_TxnID[\=dat_flit_interface.TxnID-1=\] == 1'b1) & drb_backpressure;

assign stt_chi_rx_dat_flitv_d1 = chi_rx_dat_flitv_d1 & (RXDATFLIT_OpCode != \=dat_flit_interface.OpCode=\'b0) & (RXDATFLIT_TxnID[\=dat_flit_interface.TxnID-1=\] == 1'b1);

//=============================================================================
// RXDAT_DWID
//=============================================================================

wire RXDAT_OpCode_SnpRespDataPtl = (RXDAT_OpCode == \=dat_flit_interface.OpCode=\\=chi_cmd.SnpRespDataPtl=\);

wire target_aiu_256  = (RXDAT_target_intf_size == 2'b10);
wire target_aiu_128  = (RXDAT_target_intf_size == 2'b01); 
wire target_aiu_64   = (RXDAT_target_intf_size == 2'b00);

\js if (wData == 128) {

wire [5:0] data_id_128;
wire [5:0] data_id_128_target_128;
wire [5:0] data_id_128_target_256;
wire [5:0] data_id_128_target_64;

\=obj.lib.instance({
    instanceName : 'u_chi_drb_data_id_out',
    moduleName   : 'chi_drb_data_id',
    params       : {
        wData : wData
    },
    ports        : {
        data_id            : "RXDAT_DataID",
        ccid               : "RXDAT_CCID",
        addr_bit3          : "RXDAT_snp_addr_bit3",
        data_id_target_256 : "data_id_128_target_256",
        data_id_target_128 : "data_id_128_target_128",
        data_id_target_64  : "data_id_128_target_64"
    }
})=\

assign data_id_128 = target_aiu_128 ? data_id_128_target_128 : 
                     target_aiu_256 ? data_id_128_target_256 :
                                      data_id_128_target_64;

assign RXDAT_DWID = data_id_128;

\js }

\js if (wData == 256) {

wire [11:0] data_id_256;
wire [11:0] data_id_256_target_256;
wire [11:0] data_id_256_target_128;
wire [11:0] data_id_256_target_64;

\=obj.lib.instance({
    instanceName : 'u_chi_drb_data_id_out',
    moduleName   : 'chi_drb_data_id',
    params       : {
        wData : wData
    },
    ports        : {
        data_id            : "RXDAT_DataID",
        ccid               : "RXDAT_CCID",
        addr_bit3          : "RXDAT_snp_addr_bit3",
        data_id_target_256 : "data_id_256_target_256",
        data_id_target_128 : "data_id_256_target_128",
        data_id_target_64  : "data_id_256_target_64"
    }
})=\

assign data_id_256 = target_aiu_256 ? data_id_256_target_256 :
                     target_aiu_128 ? data_id_256_target_128 :
                                      data_id_256_target_64; 

assign RXDAT_DWID = data_id_256;

\js }






\jsbegin
let nBeats              = nBeatsPerCacheLine;
let wDwid               = 3;
let wAttr               = dat_flit_width_minus_data_be + (enPoison == true ? poison_width : 0) + intf_size_width + 1;
let wIntfSize           = intf_size_width;
let wTransSize          = 3;
let depth               = 3;

let wBeats              = Math.log2(nBeats);
let nDWsPerBeat         = wData/64;
let nDWs                = nDWsPerBeat * nBeats;
let wDepth              = Math.log2(depth);

var wOccCntDrb          = log2ceil(depth+1);

\jsend

wire [\=wOccCntDrb-1=\:0] drb_occupancy_cnt;

wire [\=wTransSize-1=\:0] drb_trans_size;
wire [\=wIntfSize-1=\:0]  drb_intf_size;
wire [\=wDwid-1=\:0] drb_critical_dw;

wire [\=wData-1=\:0] drb_data_beat_in;
wire [\=(wData/8)-1=\:0] drb_data_beat_in_be;
wire [\=(wDwid*nDWsPerBeat)-1=\:0] drb_data_beat_in_dwid;
wire [1:0] drb_data_beat_in_data_id;
wire [\=wAttr-1=\:0] drb_data_beat_in_attr;
wire drb_data_beat_in_replay;
wire drb_data_beat_in_last;
wire drb_data_beat_in_first;
wire drb_data_beat_in_valid;
wire drb_data_beat_in_ready;

wire [\=wData-1=\:0] drb_data_beat_out;
wire [\=(wData/8)-1=\:0] drb_data_beat_out_be;
wire [\=(wDwid*nDWsPerBeat)-1=\:0] drb_data_beat_out_dwid;
wire [1:0] drb_data_beat_out_data_id;
wire [\=wAttr-1=\:0] drb_data_beat_out_attr;
wire drb_data_beat_out_replay_flag;
//wire drb_data_beat_out_replay_progress;
wire drb_data_beat_out_last;
wire drb_data_beat_out_valid;
wire drb_data_beat_out_ready;

\js if (enPoison == true) {
wire [\=poison_width-1=\:0] drb_attr_out_Poison;
\js }
wire [\=wIntfSize-1=\:0] drb_attr_out_target_intf_size;
wire drb_attr_out_snp_addr_bit3;


assign holding_fifo_pop_valid  = drb_data_beat_out_valid;

assign drb_data_beat_out_ready = holding_fifo_pop_ready;

\=u.dffre(dtw_buf_data_width, 'drb_RXDATFLIT_out1_hold', 'drb_RXDATFLIT_out1', dtw_buf_data_width+"'b0", "drb_data_beat_out_valid", 'clk', 'reset_n')=\

assign RXDATFLIT_out1 = drb_data_beat_out_valid ? drb_RXDATFLIT_out1 : drb_RXDATFLIT_out1_hold;


\jsbegin

var drbParams = { 
    width               : wData,
    nBeats              : nBeats,
    wDwid               : wDwid,
    wAttr               : wAttr,
    wIntfSize           : wIntfSize,
    wTransSize          : wTransSize,
    depth               : depth
};

var drbPorts = {  
    clk                 : 'clk',
    reset_n             : 'reset_n',
    occupancy_cnt       : 'drb_occupancy_cnt',

    critical_dw         : 'drb_critical_dw',
    intf_size           : 'drb_intf_size',
    trans_size          : 'drb_trans_size',

    data_beat_in        : 'drb_data_beat_in',
    data_beat_in_be     : 'drb_data_beat_in_be',
    data_beat_in_dwid   : 'drb_data_beat_in_dwid',
    data_beat_in_data_id : 'drb_data_beat_in_data_id',
    data_beat_in_attr   : 'drb_data_beat_in_attr',
    data_beat_in_replay : 'drb_data_beat_in_replay',
    data_beat_in_last   : 'drb_data_beat_in_last',
    data_beat_in_valid  : 'drb_data_beat_in_valid',
    data_beat_in_ready  : 'drb_data_beat_in_ready',
 
    data_beat_out                 : 'drb_data_beat_out',
    data_beat_out_be              : 'drb_data_beat_out_be',
    data_beat_out_dwid            : 'drb_data_beat_out_dwid',
    data_beat_out_data_id         : 'drb_data_beat_out_data_id',
    data_beat_out_attr            : 'drb_data_beat_out_attr',
    data_beat_out_replay_flag     : 'drb_data_beat_out_replay_flag',
    data_beat_out_replay_progress : 'drb_data_beat_out_replay_progress',
    data_beat_out_last            : 'drb_data_beat_out_last',
    data_beat_out_valid           : 'drb_data_beat_out_valid',
    data_beat_out_ready           : 'drb_data_beat_out_ready'
};

var drbInterfaces = [];

\jsend

\=obj.lib.instance({
    instanceName :'u_chi_drb',
    moduleName   :'chi_drb',
    params       : drbParams,
    ports        : drbPorts,
    interfaces   : drbInterfaces
})=\

assign drb_backpressure = (drb_occupancy_cnt >= \=wOccCntDrb=\'d2);

assign drb_trans_size = 3'b110;

assign drb_intf_size  = RXDATFLIT_target_intf_size;

assign drb_data_beat_in_valid = stt_chi_rx_dat_flitv_d1;
assign drb_data_beat_in       = RXDATFLIT_Data;
assign drb_data_beat_in_be    = RXDATFLIT_BE;
assign drb_data_beat_in_data_id = RXDATFLIT_DataID;

assign drb_data_beat_in_replay = RXDATFLIT_delay_dtw_valid;

assign drb_data_beat_in_attr  = {
            RXDATFLIT_snp_addr_bit3,
            RXDATFLIT_target_intf_size,
    \js if (enPoison == true) {
            dat_flit_poison_d1,
    \js }
            chi_rx_dat_flit_d1_minus_data_be
                                };

assign {
            drb_attr_out_snp_addr_bit3,
            drb_attr_out_target_intf_size,
    \js if (enPoison == true) {
            drb_attr_out_Poison,
    \js }
    \=bundleFunctions.packetizeBundle('drb_attr_out_', reversed_dat_intf, ['Poison','Data','BE'], obj.lib.bundle)=\
       } = drb_data_beat_out_attr;

assign drb_RXDATFLIT_out1 = {drb_data_beat_out_last, drb_attr_out_snp_addr_bit3, drb_attr_out_target_intf_size, drb_data_beat_out_data_id,
    \js if (enPoison == true) {
                             drb_attr_out_Poison,
    \js }
                             drb_data_beat_out,
                             drb_data_beat_out_be,
                             \=bundleFunctions.packetizeBundle('drb_attr_out_', reversed_dat_intf, ['Poison','Data','BE','DataID'], obj.lib.bundle)=\
                            };


wire [7:0] drb_num_trans_bytes;
wire [7:0] drb_num_trans_beats_int;
wire [2:0] drb_num_trans_beats;
assign drb_num_trans_bytes = 8'b1 << drb_trans_size;
assign drb_num_trans_beats_int = drb_num_trans_bytes / 8'd\=wBE=\;
assign drb_num_trans_beats = (drb_num_trans_beats_int[2:0] != 3'b0) ? (drb_num_trans_beats_int[2:0] - 3'b1) : 3'b0;

wire [2:0] drb_data_beat_in_count;
assign drb_data_beat_in_last  = (drb_data_beat_in_count == drb_num_trans_beats) & drb_data_beat_in_valid ? 1'b1 : 1'b0;
assign drb_data_beat_in_first = (drb_data_beat_in_count == 3'b0)                & drb_data_beat_in_valid ? 1'b1 : 1'b0; 

wire drb_new_data_beat_in;
wire drb_q_first_data_beat_in_rcvd;
wire drb_q_last_data_beat_in_done;
wire [2:0] drb_q_data_beat_in_count;

assign drb_data_beat_in_count = drb_new_data_beat_in ? 3'b0 : drb_q_data_beat_in_count + 3'b1;
\=u.dffre(3, 'drb_q_data_beat_in_count', 'drb_data_beat_in_count', "3'b0", 'drb_data_beat_in_valid', 'clk', 'reset_n')=\

assign drb_new_data_beat_in = (drb_data_beat_in_valid & drb_q_last_data_beat_in_done) | ~drb_q_first_data_beat_in_rcvd;

wire drb_first_data_beat_in_rcvd_set = drb_data_beat_in_valid & ~drb_q_first_data_beat_in_rcvd;
wire drb_first_data_beat_in_rcvd = drb_first_data_beat_in_rcvd_set | drb_q_first_data_beat_in_rcvd;
\=u.dffre(1, 'drb_q_first_data_beat_in_rcvd', 'drb_first_data_beat_in_rcvd', "1'b0", 'drb_first_data_beat_in_rcvd_set', 'clk', 'reset_n')=\

wire drb_last_data_beat_in_done_set = drb_data_beat_in_last;
wire drb_last_data_beat_in_done = drb_last_data_beat_in_done_set | (drb_q_last_data_beat_in_done & ~drb_data_beat_in_valid);
\=u.dffre(1, 'drb_q_last_data_beat_in_done', 'drb_last_data_beat_in_done', "1'b0", 'drb_data_beat_in_valid', 'clk', 'reset_n')=\


wire RXDATFLIT_OpCode_SnpRespDataPtl = (RXDATFLIT_OpCode == \=dat_flit_interface.OpCode=\\=chi_cmd.SnpRespDataPtl=\);

wire drb_target_aiu_256  = (drb_intf_size == 2'b10);
wire drb_target_aiu_128  = (drb_intf_size == 2'b01);
wire drb_target_aiu_64  =  (drb_intf_size == 2'b00);

\js if(wData == 128) {

wire [5:0] drb_data_id_128;
wire [5:0] drb_data_id_128_target_128;
wire [5:0] drb_data_id_128_target_256;
wire [5:0] drb_data_id_128_target_64;
wire [2:0] drb_rptr_128;
wire [2:0] drb_rptr_128_target_128;
wire [2:0] drb_rptr_128_target_256;
wire [2:0] drb_rptr_128_target_64;

\=obj.lib.instance({
    instanceName : 'u_chi_drb_data_id',
    moduleName   : 'chi_drb_data_id',
    params       : {
        wData : wData
    },
    ports        : {
        data_id            : "RXDATFLIT_DataID",
        ccid               : "RXDATFLIT_CCID",
        addr_bit3          : "RXDATFLIT_snp_addr_bit3",
        data_id_target_256 : "drb_data_id_128_target_256",
        data_id_target_128 : "drb_data_id_128_target_128",
        data_id_target_64  : "drb_data_id_128_target_64"
    }
})=\

\=obj.lib.instance({
    instanceName : 'u_chi_drb_rptr',
    moduleName   : 'chi_drb_rptr',
    params       : {
        wData : wData
    },
    ports        : {
        ccid               : "RXDATFLIT_CCID",
        addr_bit3          : "RXDATFLIT_snp_addr_bit3",
        rptr_target_256    : "drb_rptr_128_target_256",
        rptr_target_128    : "drb_rptr_128_target_128",
        rptr_target_64     : "drb_rptr_128_target_64"
    }
})=\

assign drb_data_id_128 = drb_target_aiu_128 ? drb_data_id_128_target_128 :
                         drb_target_aiu_256 ? drb_data_id_128_target_256 :
                                              drb_data_id_128_target_64;

assign drb_rptr_128  = drb_target_aiu_128 ? drb_rptr_128_target_128 :
                       drb_target_aiu_256 ? drb_rptr_128_target_256 :
                                            drb_rptr_128_target_64;

assign drb_data_beat_in_dwid = drb_data_id_128;

assign drb_critical_dw = drb_rptr_128;

    \js if (assertOn) {
`ifdef OVL_ASSERT_ON
// synthesis_off
// pragma synthesis_off
// coverage off

    property p_drb_critical_dw;
        @(posedge clk) disable iff (~reset_n)
            ((drb_intf_size == \=intf_size=\) & drb_data_beat_in_first |-> ({RXDATFLIT_CCID, 1'b0} == drb_rptr_128));
    endproperty

    assert_drb_critical_dw: assert property (p_drb_critical_dw)
        else begin $error("CHI Reorder Buffer drb_critical_dw mismatch for same intf_size !"); #100 $finish; end

// coverage on
// pragma synthesis_on
// synthesis_on
`endif

    \js }

\js }

\js if(wData == 256) {

wire [11:0] drb_data_id_256;
wire [11:0] drb_data_id_256_target_256;
wire [11:0] drb_data_id_256_target_128;
wire [11:0] drb_data_id_256_target_64;
wire [2:0] drb_rptr_256;
wire [2:0] drb_rptr_256_target_128;
wire [2:0] drb_rptr_256_target_256;
wire [2:0] drb_rptr_256_target_64;

\=obj.lib.instance({
    instanceName : 'u_chi_drb_data_id',
    moduleName   : 'chi_drb_data_id',
    params       : {
        wData : wData
    },
    ports        : {
        data_id            : "RXDATFLIT_DataID",
        ccid               : "RXDATFLIT_CCID",
        addr_bit3          : "RXDATFLIT_snp_addr_bit3",
        data_id_target_256 : "drb_data_id_256_target_256",
        data_id_target_128 : "drb_data_id_256_target_128",
        data_id_target_64  : "drb_data_id_256_target_64"
    }
})=\

\=obj.lib.instance({
    instanceName : 'u_chi_drb_rptr',
    moduleName   : 'chi_drb_rptr',
    params       : {
        wData : wData
    },
    ports        : {
        ccid               : "RXDATFLIT_CCID",
        addr_bit3          : "RXDATFLIT_snp_addr_bit3",
        rptr_target_256    : "drb_rptr_256_target_256",
        rptr_target_128    : "drb_rptr_256_target_128",
        rptr_target_64     : "drb_rptr_256_target_64"
    }
})=\

assign drb_data_id_256 = drb_target_aiu_256 ? drb_data_id_256_target_256 :
                         drb_target_aiu_128 ? drb_data_id_256_target_128 :
                                              drb_data_id_256_target_64;

assign drb_rptr_256  = drb_target_aiu_256 ? drb_rptr_256_target_256  :
                       drb_target_aiu_128 ? drb_rptr_256_target_128  :
                                            drb_rptr_256_target_64;

assign drb_data_beat_in_dwid = drb_data_id_256;

assign drb_critical_dw = drb_rptr_256;

    \jsbegin
    /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
    if (assertOn) {
    \jsend
`ifdef OVL_ASSERT_ON
// synthesis_off
// pragma synthesis_off
// coverage off

    property p_drb_critical_dw;
        @(posedge clk) disable iff (~reset_n)
            ((drb_intf_size == \=intf_size=\) & drb_data_beat_in_first |-> (drb_data_id_256[2:0] == drb_rptr_256));
    endproperty

    assert_drb_critical_dw: assert property (p_drb_critical_dw)
        else begin $error("CHI Reorder Buffer drb_critical_dw mismatch for same intf_size !"); #100 $finish; end

// coverage on
// pragma synthesis_on
// synthesis_on
`endif

    \js }

\js }

endmodule
