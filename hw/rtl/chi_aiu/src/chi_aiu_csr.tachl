// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// This module defines chi aiu csr registers
//
//=============================================================================
\jsend

\jsbegin
var u                          = obj.lib;
var m                          = obj.userLib;
var bundleFunctions            = obj.userLib.bundleFunctions;

var useSysEvtCoh = obj.lib.getParam('useSysEvtCoh');

var wFUnitId                   = u.getParam('wFUnitId');
var wNUnitId                   = u.getParam('wNUnitId');
var wRpn                       = u.getParam('wRpn');
var wNrri                      = u.getParam('wNrri');

var engVerId                   = obj.lib.getParam('engVerId');
var implVerId                  = obj.lib.getParam('implVerId');

var traceRegInterface          = obj.lib.getParam('traceRegInterface');
var ccrCsrInputInterface       = obj.lib.getParam('ccrCsrInputInterface');
var rccrCsrInputInterface      = obj.lib.getParam('rccrCsrInputInterface');
var homedveCsrInputInterface   = obj.lib.getParam('homedveCsrInputInterface');
var pmonCsrInputInterface	   = obj.lib.getParam('pmonCsrInputInterface');

var CSR                        = obj.lib.getParam('csr');
var nregions                   = obj.lib.getParam('nregions');
var useResiliency              = obj.lib.getParam('useResiliency');
var clkInterface               = obj.lib.getParam('clkInterface');
var apbInterface               = obj.lib.getParam('apbInterface');
var apbInterfaceName           = obj.lib.getParam('apbInterfaceName');
var regProtInterface            = u.getParam('regProtInterface');
var regProtInterfaceName        = u.getParam('regProtInterfaceName');
var regProtStyle                = u.getParam('regProtStyle');
//var csrFaultInterface           = u.getParam('csrFaultInterface');
var useQos                      = u.getParam('useQos');
var wStarvThreshold = m.ParamDefaultGet(u, 'wStarvThreshold', 'int', 16);

var wEventTimeout               = u.getParam('wEventTimeout');
var wProtocolTimeout            = u.getParam('wProtocolTimeout');
var nPerfCounters				= u.getParam('nPerfCounters');

var sysMsgRegisters             = {
  "SEPTOCR" : CSR.spaceBlock[0].registers.find( x => x.name === "CAIU"+"SEPTOCR" ),
  "SCPTOCR" : CSR.spaceBlock[0].registers.find( x => x.name === "CAIU"+"SCPTOCR" ),
  "EHTOCR" : CSR.spaceBlock[0].registers.find( x => x.name === "CAIU"+"EHTOCR" )
};


//=============================================================================
// Clk, ID, and IRQ Interfaces
//=============================================================================

// Clock Interface
obj.lib.interface('', 'slave', clkInterface);

// Id Signals
u.port('input', 'my_f_unit_id', wFUnitId);
u.port('input', 'my_n_unit_id', wNUnitId)
u.port('input', 'my_csr_rpn'  , wRpn);
u.port('input', 'my_csr_nrri' , wNrri);

// Interrupt Signals
u.port('output','c'           , 1);
u.port('output','uc'          , 1);

u.port('input','chiaiu_en_debug_bist' , 1);
// Interrupt Signals
u.port('output','cerr_threshold'     , 32);

// Trace Registers
obj.lib.interface('caiu_', 'master', traceRegInterface);
obj.lib.interface(pmonCsrInputInterface.name, 'master', pmonCsrInputInterface.signals);
obj.lib.interface(ccrCsrInputInterface.name, 'master', ccrCsrInputInterface.signals);
obj.lib.interface(rccrCsrInputInterface.name, 'master', rccrCsrInputInterface.signals);
obj.lib.interface(homedveCsrInputInterface.name, 'master', homedveCsrInputInterface.signals);

// Signals used to indicate activity.
u.port('input', 'ott_busy' , 1);
u.port('input', 'stt_busy' , 1);

u.port('input', 'w_starve', 2);

//Error signalling
u.port('input', 'wrong_target_id_err' , 1);
obj.lib.port('input',  'decode_error',   1);
obj.lib.port('input',  'sw_prog_error',   1);
obj.lib.port('input',  'transport_uce',   1);
obj.lib.port('input',  'transport_ce',   1);
obj.lib.port('input',  'chi_snp_resp_error',   1);
obj.lib.port('input',  'timeout_error',   1);
obj.lib.port('input',  'chi_intf_chk_UCE',   1);
obj.lib.port('input',  'caiu_corr_err_type',  4);
obj.lib.port('input',  'caiu_corr_err_info',  16);
obj.lib.port('input',  'caiu_uncorr_err_type',  4);
obj.lib.port('input',  'caiu_uncorr_err_info',  20);
obj.lib.port('input',  'caiu_uncorr_err_entry', 20);
obj.lib.port('input',  'caiu_uncorr_err_way',   6);
obj.lib.port('input',  'caiu_uncorr_err_word',  6);
obj.lib.port('input',  'caiu_uncorr_err_erraddr', 52);

u.port('output', 'csr_timeout_threshold', 31);
u.port('output', 'csr_timeout_ref_en', 1);

if ( useQos ) {
u.port('output', 'csr_starv_count_threshold', wStarvThreshold);
}

/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {

u.port('output', 'csr_sys_evt_receiver_enable', 1);
u.port('input',  'csr_sys_evt_receiver_err_vld', 1);
u.port('input',  'csr_sys_evt_receiver_err_event_timeout', 1);
u.port('input',  'csr_sys_evt_receiver_err_f_unit_id', wFUnitId);

u.port('output', 'csr_sys_coh_sender_activate', 1);
u.port('input',  'csr_sys_coh_sender_connecting', 1);
u.port('input',  'csr_sys_coh_sender_attached', 1);
u.port('input',  'csr_sys_coh_sender_syscoerr_set', 1);
u.port('input',  'csr_sys_coh_sender_syscoerr_clr', 1);
u.port('input',  'csr_sys_coh_sender_err_detected', 1);
u.port('input',  'csr_sys_coh_sender_err_f_unit_id', wFUnitId);
u.port('input',  'csr_sys_coh_sender_err_protocol_sys', 1);
u.port('input',  'csr_sys_coh_sender_err_protocol_timeout', 1);

u.port('output', 'csr_sys_coh_protocol_timeout_value', wProtocolTimeout);

}
u.port('output', 'csr_sys_evt_sender_enable', 1);
u.port('input',  'csr_sys_evt_sender_err_vld', 1);
u.port('input',  'csr_sys_evt_sender_err_f_unit_id', wFUnitId);
u.port('input',  'csr_sys_evt_sender_err_protocol_sys', 1);
u.port('input',  'csr_sys_evt_sender_err_protocol_timeout', 1);
u.port('input',  'csr_sys_evt_sender_err_event_timeout', 1);

/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if(sysMsgRegisters.EHTOCR) {
  u.port('output', 'csr_event_timeout_value', wEventTimeout);
}
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if(sysMsgRegisters.SEPTOCR) {
  u.port('output', 'csr_sys_evt_protocol_timeout_value', wProtocolTimeout);
}

u.port('output', 'csr_one_dvm_sync', 1);

//=============================================================================
// Interfaces
//=============================================================================

obj.lib.interface(apbInterfaceName, 'slave', apbInterface);
//obj.lib.interface('',               'master', csrFaultInterface);

//
// generate csrHwPorts
//
var chi_aiu_CSR      = new m.CreateCSRObj(CSR);
var regs             = chi_aiu_CSR.spaceBlock[0].registers;
var csrHwPorts       = chi_aiu_CSR.getHWPorts();
var regFldsIn        = chi_aiu_CSR.getRegFldsIn();
var regFldsOut       = chi_aiu_CSR.getRegFldsOut();

var rfSwWdata = {};
regs.forEach( function (r) {
    r.fields.forEach( function (f) {
    var rf        = r.name+"_"+f.name+"_"+"sw_wdata";
    
    if ( rf.includes("Rsv") ) {
    }else {
          rfSwWdata[rf] = f.bitWidth;
    }
    
    });
});
var rfSwWr = regs.map( r => r.name+"_sw_wr");
var rfSwRd = regs.map( r => r.name+"_sw_rd");

Object.keys(rfSwWdata).forEach(rf => { csrHwPorts[rf] = rf; });

rfSwWr.forEach(r => { csrHwPorts[r] = r; });
rfSwRd.forEach(r => { csrHwPorts[r] = r; });

// Create outputs ports for all these registers except for ones in excludes
function findMatchReg( regNameList, name ) {
  for(var i=0; i<regNameList.length; i++) {
    if( name.startsWith("CAIU"+regNameList[i]+"_") )
      return true;
  }
  return false;
}

var excludeRegNames = [
  "CCTRLR", 
  "UEDR", 
  "UEIR", 
  "UESR", 
  "UESAR", 
  "CECR", 
  "CESR", 
  "CESAR", 
  "TOCR", 
  "SCPTOCR", 
  "SEPTOCR",
  "EHTOCR"
];
var wiresForExcludedFields  = {};

for (var rf in regFldsOut) {
  if( findMatchReg(excludeRegNames, rf) ) {
    wiresForExcludedFields[rf] = regFldsOut[rf];

  } else {
    u.port('output', rf , regFldsOut[rf]);

  }
} \jsend


module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

\=bundleFunctions.wiresFromInterface("", wiresForExcludedFields, [], obj.lib.bundle)=\

\jsbegin
//=============================================================================
// Widths
//=============================================================================

var instance_ports_for_chi_aiu_csr_gen = {};
var CAIUCECR_ErrThreshold_width;
var CAIUUESR0_ErrType_width;
var CAIUUESR0_ErrInfo_width;
var CAIUCESR0_ErrType_width;
var CAIUCESR0_ErrInfo_width;
var CAIUCELR0_ErrEntry_width;
var CAIUCELR0_ErrWay_width;
var CAIUCELR0_ErrWord_width;
var CAIUCELR1_ErrAddr_width;
var CAIUUELR0_ErrEntry_width;
var CAIUUELR0_ErrWay_width;
var CAIUUELR0_ErrWord_width;
var CAIUUELR1_ErrAddr_width;
var CAIUCRTR_ResThreshold_width;
var CAIUUESR0_ErrCount_width;
var CAIUCESR0_ErrCount_width;
var CAIUNRSAR_NRSAR_access;
    
    for(var reg=0; reg < CSR.spaceBlock[0].registers.length; reg++)
        { var reg_name = CSR.spaceBlock[0].registers[reg].name ;
          for(var field=0; field < CSR.spaceBlock[0].registers[reg].fields.length ; field++) {
               var entry =CSR.spaceBlock[0].registers[reg].fields[field];
                    if(reg_name == "CAIUCRTR" && entry.name == "ResThreshold") {
                         CAIUCRTR_ResThreshold_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
	             if(reg_name == "CAIUCECR" && entry.name == "ErrThreshold") {
                         CAIUCECR_ErrThreshold_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCESR" && entry.name == "ErrType") {
                     CAIUCESR0_ErrType_width = entry.bitWidth;
                     }
                     if(reg_name == "CAIUUESR" && entry.name == "ErrType") {
                         CAIUUESR0_ErrType_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCESR" && entry.name == "ErrInfo") {
                         CAIUCESR0_ErrInfo_width = entry.bitWidth;
                     }
                     if(reg_name == "CAIUUESR" && entry.name == "ErrInfo") {
                         CAIUUESR0_ErrInfo_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCELR0" && entry.name == "ErrEntry") {
                         CAIUCELR0_ErrEntry_width = entry.bitWidth;
                     }
                     /* istanbul ignore if env ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUUELR0" && entry.name == "ErrEntry") {
                         CAIUUELR0_ErrEntry_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCELR0" && entry.name == "ErrWay") {
                         CAIUCELR0_ErrWay_width = entry.bitWidth;
                     }
                     /* istanbul ignore if env ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUUELR0" && entry.name == "ErrWay") {
                         CAIUUELR0_ErrWay_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCELR0" && entry.name == "ErrWord") {
                         CAIUCELR0_ErrWord_width = entry.bitWidth;
                     }
                     /* istanbul ignore if env ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUUELR0" && entry.name == "ErrWord") {
                         CAIUUELR0_ErrWord_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCELR1" && entry.name == "ErrAddr") {
                         CAIUCELR1_ErrAddr_width = entry.bitWidth;
                     }
                     if(reg_name == "CAIUUELR1" && entry.name == "ErrAddr") {
                         CAIUUELR1_ErrAddr_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUCESR" && entry.name == "ErrCount") {
                         CAIUCESR0_ErrCount_width = entry.bitWidth;
                     }
    /* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
                     if(reg_name == "CAIUNRSAR" && entry.name == "NRSAR") {
                         CAIUNRSAR_NRSAR_access = entry.access;
                     }
                  }
        }

/* istanbul ignore next env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */ var uncorrectable_count_width = (CAIUCECR_ErrThreshold_width > CAIUCESR0_ErrCount_width) ? CAIUCECR_ErrThreshold_width : CAIUCESR0_ErrCount_width;

\jsend

//=============================================================================
// Wires
//=============================================================================

\js Object.keys(rfSwWdata).forEach(rf => {
wire [\=rfSwWdata[rf]-1=\:0] \=rf=\;
\js });
\js rfSwWr.forEach(r => {
wire \=r=\;
\js });
\js rfSwRd.forEach(r => {
wire \=r=\;
\js });

\jsbegin
for (var rf in regFldsIn) {
  if (!rf.includes("CNTCR") && !rf.includes("CNTVR") && !rf.includes("CNTSR") && !rf.startsWith('CAIUCCR') && !rf.startsWith('CAIURCCR')){ \jsend
    wire [\=regFldsIn[rf]-1=\:0] \=rf=\; \jsbegin
  }
} \jsend

// Tie off Reserved
\js for (var rf in regFldsIn) {
\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if ( rf.includes("Rsv") ) {
\jsend
assign \=rf=\ = 'h0;
\js   }
\js }

//=============================================================================
// Logic
//=============================================================================

wire  dff_enable = 1'b1;

//=============================================================================
// Register Functionality
//=============================================================================
//----------------------------------------------------------------------------
// Assign Trace Registers
\=bundleFunctions.assignByBundle('caiu_' , 'CAIU', traceRegInterface, ['CCTRLR_ndn0Tx_out','CCTRLR_ndn0Rx_out','CCTRLR_ndn1Tx_out','CCTRLR_ndn1Rx_out','CCTRLR_ndn2Tx_out','CCTRLR_ndn2Rx_out','CCTRLR_dn0Tx_out','CCTRLR_dn0Rx_out'], u.bundle)=\
assign caiu_CCTRLR_ndn0Tx_out = CAIUCCTRLR_ndn0Tx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_ndn0Rx_out = CAIUCCTRLR_ndn0Rx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_ndn1Tx_out = CAIUCCTRLR_ndn1Tx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_ndn1Rx_out = CAIUCCTRLR_ndn1Rx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_ndn2Tx_out = CAIUCCTRLR_ndn2Tx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_ndn2Rx_out = CAIUCCTRLR_ndn2Rx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_dn0Tx_out = CAIUCCTRLR_dn0Tx_out && chiaiu_en_debug_bist;
assign caiu_CCTRLR_dn0Rx_out = CAIUCCTRLR_dn0Rx_out && chiaiu_en_debug_bist;

//assign sys_evt_sender_enable
assign csr_sys_evt_sender_enable = ~CAIUTCR_EventDisable_out;


//-----------------------------------------------------------------------------
// Active Signal

assign CAIUTAR_TransActv_in =
                          ott_busy                | // No Valid OTT Entries
                          stt_busy                ; // No Valid STT Entries

assign CAIUTAR_TransActv_wr = 1'b1;

//-----------------------------------------------------------------------------
// ID and other Static Registers

\jsbegin
/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if( wFUnitId == 16) {
\jsend
assign CAIUFUIDR_FUnitId_in = my_f_unit_id;
\js } else {
assign CAIUFUIDR_FUnitId_in = {\=16-wFUnitId=\'b0,my_f_unit_id};
\js }

assign CAIUIDR_RPN_in        = my_csr_rpn;
assign CAIUIDR_NRRI_in       = my_csr_nrri;
   \jsbegin
   /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
   if (wNUnitId < 12) {
   \jsend
assign CAIUIDR_NUnitId_in  = {\=12-wNUnitId=\'d0, my_n_unit_id};
    \js } else {
assign CAIUIDR_NUnitId_in  = my_n_unit_id;
    \js }
assign CAIUIDR_Valid_in      = 1'b0;
assign CAIUUEVIR_EngVerId_in = 'h0; //32'd\=engVerId=\;
assign CAIUINFOR_ImplVer_in  = 16'h0; //8'd\=implVerId=\;
assign CAIUINFOR_UT_in       = 4'b0; 
assign CAIUINFOR_UST_in      = 3'b0; //0x2
assign CAIUINFOR_Valid_in    = 1'b0; //0x1;

wire CAIUIDR_RPN_wr        = 1'b1;
wire CAIUFUIDR_FUnitId_wr  = 1'b1;
wire CAIUIDR_NRRI_wr       = 1'b1; 
wire CAIUIDR_NUnitId_wr    = 1'b1;
wire CAIUIDR_Valid_wr      = 1'b1; 
wire CAIUUEVIR_EngVerId_wr = 1'b1; 
wire CAIUINFOR_ImplVer_wr  = 1'b1; 
wire CAIUINFOR_UT_wr       = 1'b1; 
wire CAIUINFOR_Valid_wr    = 1'b1;

\jsbegin
// NRSAR register valid bit reset value
if(CAIUNRSAR_NRSAR_access === "RO") { \jsend
assign CAIUNRSAR_NRSAR_in  = 1'b0; \jsbegin
} 

//=============================================================================
// Correctable Error Registers
//=============================================================================
\jsend
wire cesr_sw_clr             = CAIUCESR_sw_wr & CAIUCESR_ErrVld_sw_wdata;
wire caiu_corr_err_vld_qual  = transport_ce & CAIUCECR_ErrDetEn_out;
wire cesr_new_err_wr         = caiu_corr_err_vld_qual & ~CAIUCESR_ErrVld_out;
wire cesr_inc_err_wr         = caiu_corr_err_vld_qual & ~CAIUCESR_ErrCountOverflow_out;
wire cesr_cesar_sw_wr        = CAIUCESAR_sw_wr | cesr_sw_clr;

assign CAIUCESR_ErrVld_in    = CAIUCESAR_sw_wr                                 ? CAIUCESAR_ErrVld_sw_wdata :
                               cesr_sw_clr                                     ? 1'b0 :
                               caiu_corr_err_vld_qual                          ? (CAIUCESR_ErrCount_out >= CAIUCECR_ErrThreshold_out) :
                               1'b0;

assign CAIUCESR_ErrType_in   = CAIUCESAR_sw_wr        ? CAIUCESAR_ErrType_sw_wdata :
                               cesr_sw_clr            ? 4'h0 :
                               caiu_corr_err_vld_qual ? caiu_corr_err_type :
                               4'h0;

assign CAIUCESR_ErrInfo_in   = CAIUCESAR_sw_wr        ? CAIUCESAR_ErrInfo_sw_wdata :
                               cesr_sw_clr            ? 16'h0 :
                               caiu_corr_err_vld_qual ? caiu_corr_err_info :
                               16'h0;

assign CAIUCESR_ErrCount_in  = CAIUCESAR_sw_wr        ? CAIUCESAR_ErrCount_sw_wdata :
                               cesr_sw_clr            ? 8'h0 :
			                   (~& CAIUCESR_ErrCount_out & ~(CAIUCESR_ErrCount_out == CAIUCECR_ErrThreshold_out)) ? CAIUCESR_ErrCount_out + 1'b1 :
                               CAIUCESR_ErrCount_out;

assign CAIUCESR_ErrCountOverflow_in   = CAIUCESAR_sw_wr ? CAIUCESAR_ErrCountOverflow_sw_wdata :
                                        cesr_sw_clr  ? 1'h0 :
                                        CAIUCESR_ErrVld_out & caiu_corr_err_vld_qual;

assign CAIUCESR_ErrVld_wr            = cesr_cesar_sw_wr | cesr_new_err_wr;
assign CAIUCESR_ErrType_wr           = cesr_cesar_sw_wr | cesr_new_err_wr;
assign CAIUCESR_ErrInfo_wr           = cesr_cesar_sw_wr | cesr_new_err_wr;
assign CAIUCESR_ErrCount_wr          = cesr_cesar_sw_wr | cesr_inc_err_wr;
assign CAIUCESR_ErrCountOverflow_wr  = cesr_cesar_sw_wr | cesr_inc_err_wr;

\jsbegin
//=============================================================================
// Uncorrectable Error Registers
//=============================================================================
\jsend

assign csr_timeout_threshold        = CAIUTOCR_TimeOutThreshold_out;
assign csr_timeout_ref_en           = CAIUTOCR_TimeOutRefEn_out;

\js if ( useQos ) {
assign csr_starv_count_threshold    = CAIUQOSCR_EventThreshold_out;
\js }

assign CAIUQOSSR_EventStatus_wr = (| w_starve);
assign CAIUQOSSR_EventStatus_in = w_starve[1];
assign CAIUQOSSR_EventStatusCountOverflow_wr = w_starve[1] &
                                           (& CAIUQOSSR_EventStatusCount_out);
assign CAIUQOSSR_EventStatusCountOverflow_in = 1'b1;
assign CAIUQOSSR_EventStatusCount_wr = w_starve[1];
assign CAIUQOSSR_EventStatusCount_in = CAIUQOSSR_EventStatusCount_out + 1'b1;

wire caiu_uncorr_err_vld_qual = (decode_error & CAIUUEDR_DecErrDetEn_out) | 
                                (transport_uce & CAIUUEDR_TransErrDetEn_out) | 
                                (chi_snp_resp_error & CAIUUEDR_ProtErrDetEn_out) |
                                (timeout_error & CAIUUEDR_TimeoutErrDetEn_out) | 
                                (sw_prog_error & CAIUUEDR_SoftwareProgConfigErrDetEn_out) | 
                                (chi_intf_chk_UCE & CAIUUEDR_IntfCheckErrDetEn_out) | 
                                (csr_sys_evt_receiver_err_vld & CAIUUEDR_TimeoutErrDetEn_out) | 
                                (csr_sys_coh_sender_err_protocol_sys & csr_sys_coh_sender_err_detected & CAIUUEDR_ProtErrDetEn_out) |
                                (csr_sys_coh_sender_err_protocol_timeout & csr_sys_coh_sender_err_detected & CAIUUEDR_TimeoutErrDetEn_out) | 
                                (csr_sys_evt_sender_err_vld & (csr_sys_evt_sender_err_protocol_timeout | csr_sys_evt_sender_err_event_timeout) & CAIUUEDR_TimeoutErrDetEn_out);

assign CAIUUESR_ErrVld_in = CAIUUESAR_sw_wr                                 ? CAIUUESAR_ErrVld_sw_wdata :
                            (CAIUUESR_sw_wr & CAIUUESR_ErrVld_out)          ? (~CAIUUESR_ErrVld_sw_wdata & CAIUUESR_ErrVld_out) :
                            (caiu_uncorr_err_vld_qual ) ? 1'b1 :
                                                                              CAIUUESR_ErrVld_out;

assign CAIUUESR_ErrType_in = CAIUUESAR_sw_wr                                                        ? CAIUUESAR_ErrType_sw_wdata :
                             (caiu_uncorr_err_vld_qual & ~CAIUUESR_ErrVld_out) ? caiu_uncorr_err_type :
                                                                                                      CAIUUESR_ErrType_out;

assign CAIUUESR_ErrInfo_in = CAIUUESAR_sw_wr                                                        ? CAIUUESAR_ErrInfo_sw_wdata :
                             (caiu_uncorr_err_vld_qual & ~CAIUUESR_ErrVld_out) ? caiu_uncorr_err_info :
                                                                                                      CAIUUESR_ErrInfo_out;

assign CAIUUESR_ErrVld_wr   = CAIUUESAR_sw_wr |
                              CAIUUESR_sw_wr |
                              (caiu_uncorr_err_vld_qual );

assign CAIUUESR_ErrType_wr  = CAIUUESAR_sw_wr |
                              (caiu_uncorr_err_vld_qual & ~CAIUUESR_ErrVld_out);

assign CAIUUESR_ErrInfo_wr  = CAIUUESAR_sw_wr |
                              (caiu_uncorr_err_vld_qual & ~CAIUUESR_ErrVld_out);

assign CAIUUELR0_ErrAddr_in   = caiu_uncorr_err_erraddr[31:0];
assign CAIUUELR0_ErrAddr_wr   =(caiu_uncorr_err_vld_qual & ~CAIUUESR_ErrVld_out);
assign CAIUUELR1_ErrAddr_in   = caiu_uncorr_err_erraddr[51:32];
assign CAIUUELR1_ErrAddr_wr   =(caiu_uncorr_err_vld_qual & ~CAIUUESR_ErrVld_out);

        \js if (useResiliency) {
            \jsbegin
            /* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
            if (CAIUCRTR_ResThreshold_width < 32) {
            \jsend
assign cerr_threshold[31:\=CAIUCRTR_ResThreshold_width=\] = \=32-CAIUCRTR_ResThreshold_width=\'h0;
            \js }
assign cerr_threshold[\=CAIUCRTR_ResThreshold_width-1=\:0] = CAIUCRTR_ResThreshold_out[\=CAIUCRTR_ResThreshold_width-1=\:0];
        \js } else {
assign cerr_threshold[31:0] = 32'h0;
        \js }

\jsbegin
//=============================================================================
// System Event and Coherency registers
//=============================================================================
\jsend

\jsbegin
/* istanbul ignore else env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if (useSysEvtCoh) {
\jsend

assign csr_sys_evt_receiver_enable = ~CAIUTCR_EventDisable_out;
assign csr_sys_coh_sender_activate = CAIUTCR_SysCoAttach_out;

wire csr_sys_coh_sender_connecting_q;
wire csr_sys_coh_sender_attached_q;

\=obj.lib.dffre(1, 'csr_sys_coh_sender_connecting_q', 'csr_sys_coh_sender_connecting', "1'b0", 'dff_enable', 'clk', 'reset_n')=\
\=obj.lib.dffre(1, 'csr_sys_coh_sender_attached_q',   'csr_sys_coh_sender_attached',   "1'b0", 'dff_enable', 'clk', 'reset_n')=\

assign csr_sys_coh_protocol_timeout_value  = {|{CAIUSCPTOCR_TimeOutThreshold_out}} ? ({|{CAIUSCPTOCR_TimeOutThreshold_out[30:8]}} ? {\=wProtocolTimeout=\{1'b1}} : {CAIUSCPTOCR_TimeOutThreshold_out[7:0], {12{1'b0}}}) : {\=wProtocolTimeout=\{1'b0}};

assign CAIUTAR_SysCoConnecting_in = csr_sys_coh_sender_connecting;
assign CAIUTAR_SysCoConnecting_wr = csr_sys_coh_sender_connecting ^ csr_sys_coh_sender_connecting_q;
assign CAIUTAR_SysCoAttached_in   = csr_sys_coh_sender_attached;
assign CAIUTAR_SysCoAttached_wr   = csr_sys_coh_sender_attached ^ csr_sys_coh_sender_attached_q;
assign CAIUTAR_SysCoError_in      = csr_sys_coh_sender_syscoerr_set & ~csr_sys_coh_sender_syscoerr_clr;
assign CAIUTAR_SysCoError_wr      = csr_sys_coh_sender_syscoerr_set | csr_sys_coh_sender_syscoerr_clr;

\js } else {

assign CAIUTAR_SysCoConnecting_in = 1'b0;
assign CAIUTAR_SysCoConnecting_wr = 1'b0;
assign CAIUTAR_SysCoAttached_in   = 1'b0;
assign CAIUTAR_SysCoAttached_wr   = 1'b0;
assign CAIUTAR_SysCoError_in      = 1'b0;
assign CAIUTAR_SysCoError_wr      = 1'b0;

\js }

\jsbegin
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if( sysMsgRegisters.EHTOCR ) { \jsend
assign csr_event_timeout_value     = {|{CAIUEHTOCR_TimeOutThreshold_out}} ? ({|{CAIUEHTOCR_TimeOutThreshold_out[30:8]}} ? {\=wProtocolTimeout=\{1'b1}} : {CAIUEHTOCR_TimeOutThreshold_out[7:0], {12{1'b0}}}) : {\=wProtocolTimeout=\{1'b0}}; \jsbegin
}
/* istanbul ignore else env ncore_3p6, ncore_3p7 */
if( sysMsgRegisters.SEPTOCR ) { \jsend
assign csr_sys_evt_protocol_timeout_value  = {|{CAIUSEPTOCR_TimeOutThreshold_out}} ? ({|{CAIUSEPTOCR_TimeOutThreshold_out[30:8]}} ? {\=wProtocolTimeout=\{1'b1}} : {CAIUSEPTOCR_TimeOutThreshold_out[7:0], {12{1'b0}}}) : {\=wProtocolTimeout=\{1'b0}}; \jsbegin
} \jsend


\jsbegin
//=============================================================================
// Interrupts IRQ
//=============================================================================
\jsend

wire irq_uc_sig;
wire irq_uc_q;
wire irq_c_sig;
wire irq_c_q; \jsbegin
/* istanbul ignore else env ncore_3p7 */
if(nPerfCounters) { \jsend
wire [\=nPerfCounters-1=\:0] corr_pmon_ovf_int; \jsbegin
} \jsend

wire uncorr_dec_err_int			= CAIUUEIR_DecErrIntEn_out     & CAIUUESR_ErrVld_out & (CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'h7 );
wire uncorr_prot_err_int		= CAIUUEIR_ProtErrIntEn_out    & CAIUUESR_ErrVld_out & (CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'h2 | CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'h3 | CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'h4 | ((CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'hb) & (CAIUUESR_ErrInfo_out[0] == 1'b1)));
wire uncorr_trans_err_int		= CAIUUEIR_TransErrIntEn_out   & CAIUUESR_ErrVld_out & (CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'h8);
wire uncorr_timeout_err_int		= CAIUUEIR_TimeOutErrIntEn_out & CAIUUESR_ErrVld_out & (CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'h9 | CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'ha | ((CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'hb) & (CAIUUESR_ErrInfo_out[0] == 1'b0)));
wire uncorr_intf_check_err_int  = CAIUUEIR_IntfCheckErrIntEn_out & CAIUUESR_ErrVld_out & (CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'hd);
wire uncorr_sw_prog_err_int		= CAIUUEIR_SoftwareProgConfigErrIntEn_out   & CAIUUESR_ErrVld_out & (CAIUUESR_ErrType_out == \=CAIUUESR0_ErrType_width=\'hc);

\jsbegin
for(let i=0; i<nPerfCounters; i++) { \jsend
assign corr_pmon_ovf_int[\=i=\]	= CAIUCNTCR\=i=\_InterruptEn_out & CAIUCNTCR\=i=\_OverFlowStatus_out; \jsbegin
} \jsend

assign irq_uc_sig = uncorr_dec_err_int   | 
                    uncorr_prot_err_int  |
                    uncorr_trans_err_int |
                    uncorr_timeout_err_int |
                    uncorr_intf_check_err_int |
                    uncorr_sw_prog_err_int; 


wire corr_trans_err_int = CAIUCESR_ErrVld_out & (CAIUCESR_ErrType_out == \=CAIUCESR0_ErrType_width=\'h8);
\jsbegin
/* istanbul ignore else env ncore_3p7 */
if(nPerfCounters) { \jsend
assign irq_c_sig			= |corr_pmon_ovf_int | corr_trans_err_int; \jsbegin

} else { \jsend
assign irq_c_sig			= corr_trans_err_int; \jsbegin

} \jsend

\=obj.lib.dffre(1, 'irq_uc_q', 'irq_uc_sig', "1'b0", 'dff_enable', 'clk', 'reset_n')=\
\=obj.lib.dffre(1, 'irq_c_q', 'irq_c_sig', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

assign c = irq_c_q;
assign uc = irq_uc_q;

\jsbegin
//=============================================================================
// CHI AIU CSR Instance
//=============================================================================

//-----------------------------------------------------------------------------
// CSR Control Interfaces

var reg_interfaces = [];

reg_interfaces.push({
        modulePrefix: 'a_',
        localPrefix: '',
        interface: clkInterface
});

reg_interfaces.push({
        modulePrefix: apbInterfaceName,
        localPrefix: apbInterfaceName,
        interface: apbInterface
});

/* istanbul ignore if env ncore_3p2, ncore_3p4, ncore_3p6, ncore_3p7 */
if(regProtStyle != null) {
    if(regProtStyle.protection != "none") {
        APB_CSR_INTF.push({
            modulePrefix: regProtInterfaceName,
            localPrefix: regProtInterfaceName,
            interface: regProtInterface
        });
    }
}

\jsend

\=u.instance({
            instanceName: 'chi_aiu_csr_gen' ,
            moduleName: 'apb_csr',
            params: {
                clkInterface          : {"name" : 'a_'              ,         "signals" : clkInterface},
                cfgInterface          : {"name" : apbInterfaceName,           "signals" : apbInterface},
                protectionStyle       : regProtStyle,
                protectionInterface   : {"name": regProtInterfaceName, "signals": regProtInterface},
                flopAPB               : "yes",
                enSwReadPorts         : 1,
                csr                   : CSR
            } ,
            verilogParams: {},
            ports: csrHwPorts,
            interfaces : reg_interfaces,
            portsDelimiter: '\n    '
        })=\

\jsbegin
//=============================================================================
// NRS Base Address Registers
//=============================================================================
\jsend

assign NRSBAR_NRSBA_wr = NRSBLR_sw_rd & NRSBLR_BALoaded_out;
assign NRSBAR_NRSBA_in = NRSBHR_NRSBA_out;

assign NRSBLR_BALoaded_wr = NRSBHR_sw_wr | NRSBLR_sw_rd;
assign NRSBLR_BALoaded_in = NRSBHR_sw_wr;

assign NRSBLR_NRSDIIId_in = 10'h0; //Value set in CSR CPR: nDiis - 1

assign NRSBHR_NRSBA_in    = 'h0; 

\jsbegin
//=============================================================================
// Engineering Debug Register
//=============================================================================
\jsend

assign csr_one_dvm_sync = CAIUEDR0_OneDvmSync_out;

endmodule
