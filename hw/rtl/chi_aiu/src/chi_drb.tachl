\jsbegin
//============================================================================
// Copyright (C) 2019 Arteris, Inc.
// All rights reserved.
//============================================================================
// DWID write buffer comprising multiple write entries, each entry per cacheline comprising multiple DWs.
//
// Author: Boon Chuan
// Filename: chi_drb.tachl
//============================================================================

//============================================================================     
// Variables
//============================================================================
   
let u = obj.lib;
let m = obj.userLib;
let bundleFunctions = m.bundleFunctions;

var log2ceil = function(n) { return Math.ceil(Math.log2(n)); };

//============================================================================
// Parameters
//============================================================================
let width               = u.getParam('width');
let nBeats              = u.getParam('nBeats');
let wDwid               = u.getParam('wDwid');
let wAttr               = u.getParam('wAttr');
let wIntfSize           = u.getParam('wIntfSize');
let wTransSize          = u.getParam('wTransSize');
let depth               = m.ParamDefaultGet(u, 'depth',     'int', 2);

let wBeats              = Math.log2(nBeats);
let nDWsPerBeat         = width/64;
let nDWs                = nDWsPerBeat * nBeats;
let wDepth              = log2ceil(depth);
var wOccCnt             = log2ceil(depth+1);

//============================================================================
// Ports
//============================================================================
u.port('input',  'clk', 1);
u.port('input',  'reset_n', 1);
u.port('output', 'occupancy_cnt', wOccCnt);

u.port('input',  'trans_size', wTransSize);
u.port('input',  'intf_size', wIntfSize);
u.port('input',  'critical_dw', wDwid);

u.port('input',  'data_beat_in', width);
u.port('input',  'data_beat_in_be', width/8);
u.port('input',  'data_beat_in_dwid', wDwid*nDWsPerBeat);
u.port('input',  'data_beat_in_data_id', 2);
u.port('input',  'data_beat_in_attr', wAttr);
u.port('input',  'data_beat_in_replay', 1);
u.port('input',  'data_beat_in_valid', 1);
u.port('input',  'data_beat_in_last', 1);
u.port('output', 'data_beat_in_ready', 1);

u.port('output', 'data_beat_out', width);
u.port('output', 'data_beat_out_be', width/8);
u.port('output', 'data_beat_out_dwid', wDwid*nDWsPerBeat);
u.port('output', 'data_beat_out_data_id', 2);
u.port('output', 'data_beat_out_attr', wAttr);
u.port('output', 'data_beat_out_replay_flag', 1);
u.port('output', 'data_beat_out_replay_progress', 1);
u.port('output', 'data_beat_out_valid', 1);
u.port('output', 'data_beat_out_last',  1);
u.port('input',  'data_beat_out_ready', 1);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);
\jsbegin
//============================================================================
// Wires
//============================================================================
\jsend

wire [\=wDepth=\:0]             wr_ptr;
wire [\=wDepth=\:0]             rd_ptr;
wire [\=wDepth=\:0]             wr_ptr_next;
wire [\=wDepth=\:0]             rd_ptr_next;
wire                            wr_ptr_en;
wire                            rd_ptr_en;
wire                            full;
wire                            empty;

\js for ( var i = 0; i < depth; i++ ) {

wire drb_entry_in_valid\=i=\;
wire drb_entry_in_ready\=i=\;
wire drb_entry_out_valid\=i=\;
wire drb_entry_out_ready\=i=\;
wire drb_entry_out_last\=i=\;
wire drb_entry_out_replay_flag\=i=\;
wire drb_entry_out_replay_progress\=i=\;
wire drb_entry_empty\=i=\;
wire [\=width/8-1=\:0]              drb_entry_out_be\=i=\;
wire [\=wDwid*nDWsPerBeat-1=\:0]    drb_entry_out_dwid\=i=\;
wire [1:0]                          drb_entry_out_data_id\=i=\;
wire [\=width-1=\:0]                drb_entry_out_data\=i=\;
wire [\=wAttr-1=\:0]                drb_entry_out_attr\=i=\;

\js }

\jsbegin
//================================================================================
// Data Rotation Buffer Entry Instantiation
//================================================================================
\jsend

\jsbegin

var drbEntryParams = { 
    width               : width,
    nBeats              : nBeats,
    wDwid               : wDwid,
    wAttr               : wAttr,
    wIntfSize           : wIntfSize,
    wTransSize          : wTransSize
};


for ( var i = 0; i < depth; i++ ) {

var drbEntryPorts = {  
    clk                 : 'clk',
    reset_n             : 'reset_n',
    critical_dw         : 'critical_dw',
    intf_size           : 'intf_size',
    trans_size          : 'trans_size',
    empty               : 'drb_entry_empty'+i,

    data_beat_in        : 'data_beat_in',
    data_beat_in_be     : 'data_beat_in_be',
    data_beat_in_valid  : 'drb_entry_in_valid'+i,
    data_beat_in_ready  : 'drb_entry_in_ready'+i,
    data_beat_in_last   : 'data_beat_in_last',
    data_beat_in_replay : 'data_beat_in_replay',
    data_beat_in_dwid   : 'data_beat_in_dwid',
    data_beat_in_data_id: 'data_beat_in_data_id',
    data_beat_in_attr   : 'data_beat_in_attr',
 
    data_beat_out_ready : 'drb_entry_out_ready'+i,
    data_beat_out       : 'drb_entry_out_data'+i,
    data_beat_out_be    : 'drb_entry_out_be'+i,
    data_beat_out_valid : 'drb_entry_out_valid'+i,
    data_beat_out_last  : 'drb_entry_out_last'+i,
    data_beat_out_replay_flag     : 'drb_entry_out_replay_flag'+i,
    data_beat_out_replay_progress : 'drb_entry_out_replay_progress'+i,
    data_beat_out_dwid  : 'drb_entry_out_dwid'+i,
    data_beat_out_data_id: 'drb_entry_out_data_id'+i,
    data_beat_out_attr  : 'drb_entry_out_attr'+i
};

var drbEntryInterfaces = [];

\jsend

\=obj.lib.instance({
    instanceName:'drb_entry'+i,
    moduleName  :'chi_drb_entry',
    params      : drbEntryParams,
    ports       : drbEntryPorts,
    interfaces  : drbEntryInterfaces,
})=\

\js }


\jsbegin
//================================================================================
// Pointer Management
//================================================================================
\jsend

assign wr_ptr_en = data_beat_in_valid & data_beat_in_ready & data_beat_in_last;
assign rd_ptr_en = data_beat_out_valid & data_beat_out_ready & data_beat_out_last & ~data_beat_out_replay_flag;

assign wr_ptr_next = (wr_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=depth-1=\) ? { ~wr_ptr[\=wDepth=\], \=wDepth=\'b0 } : wr_ptr + \=wDepth+1=\'b1;
assign rd_ptr_next = (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=depth-1=\) ? { ~rd_ptr[\=wDepth=\], \=wDepth=\'b0 } : rd_ptr + \=wDepth+1=\'b1;

assign full = (wr_ptr[\=wDepth=\] != rd_ptr[\=wDepth=\]) && (wr_ptr[\=wDepth-1=\:0] == rd_ptr[\=wDepth-1=\:0]);

assign empty = drb_entry_empty0 & drb_entry_empty1;

\=obj.lib.dffre(wDepth+1, 'wr_ptr', 'wr_ptr_next', (wDepth+1)+"'b0", 'wr_ptr_en', 'clk', 'reset_n')=\
\=obj.lib.dffre(wDepth+1, 'rd_ptr', 'rd_ptr_next', (wDepth+1)+"'b0", 'rd_ptr_en', 'clk', 'reset_n')=\


\jsbegin
//================================================================================
// Input Demux
//================================================================================
\jsend
\js for ( var i = 0 ; i < depth ; i++ ) {
assign drb_entry_in_valid\=i=\ = (wr_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\) & data_beat_in_valid ;
\js }


\jsbegin
//================================================================================
// Output Ready Demux
//================================================================================
\jsend

\js for ( var i = 0 ; i < depth ; i++ ) {
assign drb_entry_out_ready\=i=\ = (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\) & data_beat_out_ready;
\js }

\jsbegin
//================================================================================
// Output Mux 
//================================================================================
\jsend

assign data_beat_in_ready = ~full;
assign data_beat_out_valid = 
                             (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0) & drb_entry_out_valid0
\js for ( var i = 1 ; i < depth ; i++ ) {
                           | (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\) & drb_entry_out_valid\=i=\ 
\js }
                           ;

assign data_beat_out = 
                       {\=width=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0)}} & drb_entry_out_data0
\js for ( var i = 1 ; i < depth ; i++ ) {
                     | {\=width=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\)}} & drb_entry_out_data\=i=\ 
\js }
                     ;

assign data_beat_out_be = 
                          {\=width/8=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0)}} & drb_entry_out_be0
\js for ( var i = 1 ; i < depth ; i++ ) {
                        | {\=width/8=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\)}} & drb_entry_out_be\=i=\ 
\js }
                        ;

assign data_beat_out_dwid = 
                            {\=wDwid*nDWsPerBeat=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0)}} & drb_entry_out_dwid0
\js for ( var i = 1 ; i < depth ; i++ ) {
                          | {\=wDwid*nDWsPerBeat=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\)}} & drb_entry_out_dwid\=i=\ 
\js }
                          ;

assign data_beat_out_data_id = 
                            {2{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0)}} & drb_entry_out_data_id0
\js for ( var i = 1 ; i < depth ; i++ ) {
                          | {2{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\)}} & drb_entry_out_data_id\=i=\ 
\js }
                          ;

assign data_beat_out_attr = 
                       {\=wAttr=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0)}} & drb_entry_out_attr0
\js for ( var i = 1 ; i < depth ; i++ ) {
                     | {\=wAttr=\{(rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\)}} & drb_entry_out_attr\=i=\ 
\js }
                     ;

assign data_beat_out_last = 
                            (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0) & drb_entry_out_last0
\js for ( var i = 1 ; i < depth ; i++ ) {
                          | (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\) & drb_entry_out_last\=i=\ 
\js }
                          ;

assign data_beat_out_replay_flag = 
                            (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0) & drb_entry_out_replay_flag0
\js for ( var i = 1 ; i < depth ; i++ ) {
                          | (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\) & drb_entry_out_replay_flag\=i=\ 
\js }
                          ;

assign data_beat_out_replay_progress = 
                            (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d0) & drb_entry_out_replay_progress0
\js for ( var i = 1 ; i < depth ; i++ ) {
                          | (rd_ptr[\=wDepth-1=\:0] == \=wDepth=\'d\=i=\) & drb_entry_out_replay_progress\=i=\ 
\js }
                          ;

\jsbegin
//================================================================================
// Occupancy counter
//================================================================================
\jsend

wire do_write = wr_ptr_en;
wire do_read  = rd_ptr_en;

wire occupancy_cnt_en;
wire [\=wOccCnt-1=\:0] occupancy_cnt_in;
wire [\=wOccCnt-1=\:0] occupancy;

    \=u.dffre(  wOccCnt
             , 'occupancy'
             , 'occupancy_cnt_in'
             , '{'+wOccCnt+'{1\'b0}}'
             , 'occupancy_cnt_en'
             , 'clk'
             , 'reset_n')=\

assign occupancy_cnt_en = (do_write ^ do_read);
assign occupancy_cnt_in = ({\=wOccCnt=\{do_write}} & (occupancy + \=wOccCnt=\'b1))
                        | ({\=wOccCnt=\{do_read}}  & (occupancy - \=wOccCnt=\'b1));

assign occupancy_cnt = occupancy;

endmodule
