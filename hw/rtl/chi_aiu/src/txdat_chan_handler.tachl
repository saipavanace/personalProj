\jsbegin
//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
// CHI TX DAT channel handler
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;
var bundleFunctions = obj.userLib.bundleFunctions;

//=============================================================================
// Parameters
//=============================================================================

var chiInterface       = u.getParam('chiInterface');
var dat_flit_interface = u.getParam('DatInterface');

var dat_flit_width     = bundleFunctions.getBundleWidth(dat_flit_interface , [], obj.lib.bundle);

//=============================================================================
// Ports
//=============================================================================

u.port('input',  'clk',          1);
u.port('input',  'reset_n',      1);

u.port('input',  'sync_reset_n',   1);
u.port('input',  'tx_state_deact', 1);
u.port('input',  'tx_state_run',   1);
u.port('output', 'all_credits_returned', 1);

u.port('input',  'valid',        1);
u.port('output', 'ready',        1);
u.port('input',  'chk_err', 1);

obj.lib.interface('',            'slave', dat_flit_interface);
obj.lib.interface('chi_tx_dat_', 'slave', chiInterface.tx_dat_);

\jsend

module \=u.getModuleName()=\  #(parameter WIDTH = 1)  (\=u.getPorts('\n    ')=\); 

wire dff_enable = 1'b1;
wire cred_return_ready;
wire txlink_dat_cred_return;
wire chi_tx_dat_flitv_a;
 
//=============================================================================
// Link Credit Counter
//=============================================================================

wire [4:0] current_credit_count;
wire [4:0] credit_counter_in = current_credit_count + {4'b0,chi_tx_dat_lcrdv} - {4'b0, chi_tx_dat_flitv_a} ;

wire credit_counter_en = chi_tx_dat_lcrdv | chi_tx_dat_flitv_a;

\=u.dffre(5, 'current_credit_count', 'credit_counter_in', "5'b0", 'credit_counter_en', 'clk', 'reset_n')=\

//=============================================================================
// Flit Valid
//=============================================================================

\=u.dffre(1, 'chi_tx_dat_flitv', 'chi_tx_dat_flitv_a', "1'b0", 'dff_enable', 'clk', 'reset_n')=\

assign chi_tx_dat_flitv_a = ((valid & ready) | (txlink_dat_cred_return & cred_return_ready)) & sync_reset_n;

assign ready = tx_state_run ? (current_credit_count != 5'b0) : 1'b0;

assign cred_return_ready = tx_state_run ? 1'b0 : (current_credit_count != 5'b0);

//=============================================================================
// Flit Pending
//=============================================================================

assign chi_tx_dat_flit_pend = chi_tx_dat_flitv_a;

//=============================================================================
// Packing CHI bit fields to Flit
//=============================================================================

\jsbegin
var reversed_dat_intf = Object.keys(dat_flit_interface).reverse().reduce(function (acc,val){ acc[val] = dat_flit_interface[val]; return acc ; },{});
\jsend

wire [\=dat_flit_width=\-1:0] chi_tx_dat_flit_a;

assign chi_tx_dat_flit_a = tx_state_run ? \=bundleFunctions.packetizeBundle('', reversed_dat_intf, [], obj.lib.bundle)=\ : 'b0;

\=u.dffre(dat_flit_width, 'chi_tx_dat_flit', 'chi_tx_dat_flit_a', dat_flit_width+"'b0", 'dff_enable', 'clk', 'reset_n')=\

//=============================================================================
// all_credits_returned
//=============================================================================

assign all_credits_returned = tx_state_deact & (current_credit_count == 5'd0);

//=============================================================================
// txlink_dat_cred_return
//=============================================================================

assign txlink_dat_cred_return = tx_state_deact & cred_return_ready;

endmodule

