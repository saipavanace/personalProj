\jsbegin
//=============================================================================
// Copyright(C) 2025 Arteris, Inc.
// All rights reserved
//=============================================================================
// DVE Concerto MUX Manager
// Author: Boon Chuan
// Filename: dve_cmux_man.tachl
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

var assertOn           = obj.lib.getParam('assertOn');

var CMDReqInterface    = obj.lib.getParam('CMDReqInterface');
var DTWReqInterface    = obj.lib.getParam('DTWReqInterface');
var STRRespInterface   = obj.lib.getParam('STRRespInterface');
var NCCMDRespInterface = obj.lib.getParam('NCCMDRespInterface');
var STRReqInterface    = obj.lib.getParam('STRReqInterface');
var DTWRespInterface   = obj.lib.getParam('DTWRespInterface');
var CMPRespInterface   = obj.lib.getParam('CMPRespInterface');
var SNPReqInterface    = obj.lib.getParam('SNPReqInterface');
var SNPRespInterface   = obj.lib.getParam('SNPRespInterface');
var concParams         = obj.lib.getParam('concParams');
var cmType             = obj.lib.getParam('cmType');

var memErrType         = obj.lib.getParam('memErrType');
var memErrWidth        = obj.lib.getParam('memErrWidth');
var nMainTraceBufSize  = obj.lib.getParam('nMainTraceBufSize');
var nTraceBanks        = obj.lib.getParam('nTraceBanks');
var wMainTraceBufSize  = Math.max(1, log2ceil(nMainTraceBufSize));
var wTraceBanks        = Math.max(1, log2ceil(nTraceBanks));
var wTraceMe           = obj.lib.getParam('wTraceMe');

var nChiplets          = obj.lib.getParam('nChiplets');
var wChipletId         = obj.lib.getParam('wChipletId');
var wLinkId            = obj.lib.getParam('wLinkId');
var wFUnitId           = obj.lib.getParam('wFUnitId');
var wFPortId           = obj.lib.getParam('wFPortId');
var wGlobalFUnitId     = wChipletId + wFUnitId;
var wInitiatorId       = obj.lib.getParam('wInitiatorId');
var wTargetId          = obj.lib.getParam('wTargetId');
var wMessageId         = obj.lib.getParam('wMessageId');
var wCmdReqAux         = obj.lib.getParam('wCmdReqAux');
var wSnpReqAux         = obj.lib.getParam('wSnpReqAux');
var wSnpReqMpf1        = obj.lib.getParam('wSnpReqMpf1');
var wSnpReqMpf2        = obj.lib.getParam('wSnpReqMpf2');
var wSnpReqMpf3        = obj.lib.getParam('wSnpReqMpf3');
var wHdrPriority       = obj.lib.getParam('wHdrPriority');
var wNcCmdRspMProt     = obj.lib.getParam('wNcCmdRspMProt');
var wStrReqMProt       = obj.lib.getParam('wStrReqMProt');
var wDtwRspMProt       = obj.lib.getParam('wDtwRspMProt');
var wCmpRspMProt       = obj.lib.getParam('wCmpRspMProt');
var wRBufferId         = obj.lib.getParam('wRBufferId');

var wDvmReqAddr        = obj.lib.getParam('wDvmReqAddr');    // AMBA 5 CHI DVM requires 44,45,46..52
var wDvmReqData        = obj.lib.getParam('wDvmReqData');    // Always 64 as DVM data payload is always lower 64 bits.
var wDvmReqAttr        = obj.lib.getParam('wDvmReqAttr');
var wDvmReqAiuId       = obj.lib.getParam('wDvmReqAiuId');
var wDvmReqMsgId       = obj.lib.getParam('wDvmReqMsgId');
var wDvmReqQos         = obj.lib.getParam('wDvmReqQos');
var wDvmReqPriority    = obj.lib.getParam('wDvmReqPriority');
var nDvmSnpCredits     = obj.lib.getParam('nDvmSnpCredits');
var nSkidEntries       = obj.lib.getParam('nSkidEntries');
var nSttEntries        = obj.lib.getParam('nSttEntries');
var wSttEntries        = Math.max(1, log2ceil(nSttEntries));
var nDveAgents         = obj.lib.getParam('nDveAgents');
var wSttId             = obj.lib.getParam('wSttId');

var nGlobalDVEs        = obj.lib.getParam('nGlobalDVEs');
var nTargets           = nDveAgents + (wChipletId > 0 ? nGlobalDVEs : 0);

var nDvmSnpCreditsAll  = nDvmSnpCredits >> 1; // nDvmSnpCredits must be an even number; a pair of snoop messages consume 2 credits
var wSkidEntries       = Math.max(1, log2ceil(nSkidEntries));
var wDvmSnpCntr        = Math.max(1, log2ceil(nTargets + 1));
var wDvmSnpCreditsCntr = Math.max(1, log2ceil(nDvmSnpCreditsAll + 1));

var wStrReqFifo        = wDvmReqMsgId + wDvmReqAiuId + wDvmReqPriority;
var wDtwRspFifo        = wDvmReqMsgId + wDvmReqAiuId + wDvmReqPriority;
var wCmpIssueFifo      = wSttId;
\jsend

\jsbegin
//=============================================================================
// Ports
//=============================================================================
\jsend

\jsbegin

obj.lib.port('input',  'clk',      1);
obj.lib.port('input',  'reset_n',  1);
obj.lib.port('output', 'busy',     1);

obj.lib.port('input',  'MyId',      wInitiatorId);
obj.lib.port('input',  'MyFUnitId', wFUnitId);

if (wChipletId > 0) {
obj.lib.port('input',  'my_chiplet_id', wChipletId);
}

obj.lib.port('output', 'cmd_req_target_id_mismatch', 1);
obj.lib.port('output', 'dtw_req_target_id_mismatch', 1);
obj.lib.port('output', 'str_rsp_target_id_mismatch', 1);

obj.lib.port('input',  'cmd_req_uce',  1);
obj.lib.port('input',  'dtw_req_uce',  1);
obj.lib.port('input',  'str_rsp_uce',  1);

obj.userLib.defineSlavePortsFromInterface('cmd_req_', CMDReqInterface, obj.lib.port);
obj.userLib.defineSlavePortsFromInterface('dtw_req_', DTWReqInterface, obj.lib.port);
obj.userLib.defineSlavePortsFromInterface('str_rsp_', STRRespInterface, obj.lib.port);

obj.userLib.defineMasterPortsFromInterface('cmd_rsp_', NCCMDRespInterface, obj.lib.port);
obj.userLib.defineMasterPortsFromInterface('str_req_', STRReqInterface, obj.lib.port);
obj.userLib.defineMasterPortsFromInterface('dtw_rsp_', DTWRespInterface, obj.lib.port);
obj.userLib.defineMasterPortsFromInterface('cmp_rsp_', CMPRespInterface, obj.lib.port);

if (wChipletId > 0) {

obj.lib.port('output', 'snp_req_rx_target_id_mismatch', 1);
obj.lib.port('input',  'snp_req_rx_uce', 1);

obj.userLib.defineSlavePortsFromInterface('snp_req_rx_', SNPReqInterface, obj.lib.port);

obj.userLib.defineMasterPortsFromInterface('snp_rsp_tx_', SNPRespInterface, obj.lib.port);

}


// DVM CMDreq OUT
obj.lib.port('output', 'dvm_cmdreq_valid',  1);
obj.lib.port('input',  'dvm_cmdreq_ready',  1);
obj.lib.port('output', 'dvm_cmdreq_cmstatus', 8);
obj.lib.port('output', 'dvm_cmdreq_addr',   wDvmReqAddr);
obj.lib.port('output', 'dvm_cmdreq_attr',   wDvmReqAttr);
obj.lib.port('output', 'dvm_cmdreq_aiuid',  wDvmReqAiuId);
obj.lib.port('output', 'dvm_cmdreq_msgid',  wDvmReqMsgId);
    if (wDvmReqQos > 0) {
obj.lib.port('output', 'dvm_cmdreq_qos',    wDvmReqQos);
    }
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dvm_cmdreq_priority', wDvmReqPriority);
    }

// DVM CMDrsp IN
obj.lib.port('input',  'dvm_cmdrsp_valid',  1);
obj.lib.port('output', 'dvm_cmdrsp_ready',  1);
obj.lib.port('input',  'dvm_cmdrsp_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_cmdrsp_msgid',  wDvmReqMsgId); //this is the RMessageId
obj.lib.port('input',  'dvm_cmdrsp_sttid',  wSttId);
obj.lib.port('input',  'dvm_cmdrsp_cmstatus', 8);
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_cmdrsp_priority', wDvmReqPriority);
    }
    if (wTraceMe > 0) {
obj.lib.port('input',  'dvm_cmdrsp_tm', wTraceMe);
    }

// DVM STRreq IN
obj.lib.port('input',  'dvm_strreq_valid',  1);
obj.lib.port('output', 'dvm_strreq_ready',  1);
obj.lib.port('input',  'dvm_strreq_rbid',   wSkidEntries);
obj.lib.port('input',  'dvm_strreq_sttid',  wSttId);
obj.lib.port('input',  'dvm_strreq_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_strreq_msgid',  wDvmReqMsgId); //this is the RMessageId
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_strreq_priority', wDvmReqPriority);
    }
    if (wTraceMe > 0) {
obj.lib.port('input',  'dvm_strreq_tm', wTraceMe);
    }

// DVM DTWreq OUT
obj.lib.port('output', 'dvm_dtwreq_valid',  1);
obj.lib.port('input',  'dvm_dtwreq_ready',  1);
obj.lib.port('output', 'dvm_dtwreq_last',   1);
obj.lib.port('output', 'dvm_dtwreq_cmstatus', 8);
obj.lib.port('output', 'dvm_dtwreq_data',   wDvmReqData);
obj.lib.port('output', 'dvm_dtwreq_dbad',   1);
obj.lib.port('output', 'dvm_dtwreq_rbid',   wSkidEntries);
obj.lib.port('output', 'dvm_dtwreq_aiuid',  wDvmReqAiuId);
obj.lib.port('output', 'dvm_dtwreq_msgid',  wDvmReqMsgId);
    if (wDvmReqPriority > 0) {
obj.lib.port('output', 'dvm_dtwreq_priority', wDvmReqPriority);
    }
    if (wTraceMe > 0) {
obj.lib.port('output', 'dvm_dtwreq_tm', wTraceMe);
    }

// DVM DTWrsp IN
obj.lib.port('input',  'dvm_dtwrsp_valid',  1);
obj.lib.port('output', 'dvm_dtwrsp_ready',  1);
obj.lib.port('input',  'dvm_dtwrsp_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_dtwrsp_msgid',  wDvmReqMsgId);
obj.lib.port('input',  'dvm_dtwrsp_cmstatus', 8);
obj.lib.port('input',  'dvm_dtwrsp_dbad',   1);
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_dtwrsp_priority', wDvmReqPriority);
    }
    if (wTraceMe > 0) {
obj.lib.port('input',  'dvm_dtwrsp_tm', wTraceMe);
    }

// DVM CMPrsp IN
obj.lib.port('input',  'dvm_cmp_valid',  1);
obj.lib.port('output', 'dvm_cmp_ready',  1);
obj.lib.port('input',  'dvm_cmp_sttid',  wSttId);
obj.lib.port('input',  'dvm_cmp_aiuid',  wDvmReqAiuId);
obj.lib.port('input',  'dvm_cmp_msgid',  wDvmReqMsgId);
obj.lib.port('input',  'dvm_cmp_cmstatus', 8);
    if (wDvmReqPriority > 0) {
obj.lib.port('input',  'dvm_cmp_priority', wDvmReqPriority);
    }
    if (wTraceMe > 0) {
obj.lib.port('input',  'dvm_cmp_tm', wTraceMe);
    }

// DVM STRrsp OUT
obj.lib.port('output', 'dvm_strrsp_valid',   1);
obj.lib.port('input',  'dvm_strrsp_ready',   1);
obj.lib.port('output', 'dvm_strrsp_sttid',   wSttId);

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\jsbegin
//=============================================================================
// Deinterleaver for remote SNPreq messages. Instantiated when wChipletId > 0
//=============================================================================
\jsend

\js if (wChipletId > 0) {

wire deintlv__busy;

wire deintlv__in_dvm_snpreq_valid;
wire deintlv__in_dvm_snpreq_ready;
wire [\=wChipletId-1=\:0] deintlv__in_dvm_snpreq_chipletid;
wire [\=wFUnitId-1=\:0] deintlv__in_dvm_snpreq_funitid;
wire [7:0] deintlv__in_dvm_snpreq_cmstatus;
wire [\=wSttId-1=\:0] deintlv__in_dvm_snpreq_sttid;
wire [\=wDvmReqAddr-1=\:0] deintlv__in_dvm_snpreq_addr;
wire [7:0] deintlv__in_dvm_snpreq_mpf1;
wire [\=wDvmReqAiuId-1=\:0] deintlv__in_dvm_snpreq_mpf2;
wire [7:0] deintlv__in_dvm_snpreq_mpf3;
wire [\=wDvmReqAttr-1=\:0] deintlv__in_dvm_snpreq_attr;
wire [\=wDvmReqAiuId-1=\:0] deintlv__in_dvm_snpreq_aiuid;
    \js if (wDvmReqQos > 0) {
wire [\=wDvmReqQos-1=\:0] deintlv__in_dvm_snpreq_qos;
    \js }
    \js if (wDvmReqPriority > 0) {
wire [\=wDvmReqPriority-1=\:0] deintlv__in_dvm_snpreq_priority;
    \js }

wire deintlv__out_dvm_snpreq_valid;
wire deintlv__out_dvm_snpreq_ready;
wire [\=wChipletId-1=\:0] deintlv__out_dvm_snpreq_chipletid;
wire [7:0] deintlv__out_dvm_snpreq_cmstatus;
wire [\=wSttId-1=\:0] deintlv__out_dvm_snpreq_sttid;
wire [\=wDvmReqAddr-1=\:0] deintlv__out_dvm_snpreq_addr;
wire [7:0] deintlv__out_dvm_snpreq_mpf1;
wire [\=wDvmReqAiuId-1=\:0] deintlv__out_dvm_snpreq_mpf2;
wire [7:0] deintlv__out_dvm_snpreq_mpf3;
wire [\=wDvmReqAttr-1=\:0] deintlv__out_dvm_snpreq_attr;
wire [\=wDvmReqAiuId-1=\:0] deintlv__out_dvm_snpreq_aiuid;
    \js if (wDvmReqQos > 0) {
wire [\=wDvmReqQos-1=\:0] deintlv__out_dvm_snpreq_qos;
    \js }
    \js if (wDvmReqPriority > 0) {
wire [\=wDvmReqPriority-1=\:0] deintlv__out_dvm_snpreq_priority;
    \js }

wire snp_req_rx_cm_status_transport_err;
//wire snp_req_rx_target_id_mismatch;
wire snp_req_rx_valid_qual;


    \jsbegin
        var deintlvParams = {
            assertOn           : assertOn,
            nChiplets          : nChiplets,
            wChipletId         : wChipletId,
            wDvmReqAddr        : wDvmReqAddr,
            wDvmReqAttr        : wDvmReqAttr,
            wDvmReqAiuId       : wDvmReqAiuId,
            wDvmReqMsgId       : wDvmReqMsgId,
            wDvmReqQos         : wDvmReqQos,
            wDvmReqPriority    : wDvmReqPriority,
            nSkidEntries       : nSkidEntries,
            nSttEntries        : nSttEntries,
            wSttId             : wSttId
        };
        var instance_ports_for_deintlv = {
            clk                             : 'clk',
            reset_n                         : 'reset_n',
            busy                            : 'deintlv__busy',
            in_dvm_snpreq_valid             : 'deintlv__in_dvm_snpreq_valid',
            in_dvm_snpreq_ready             : 'deintlv__in_dvm_snpreq_ready',
            in_dvm_snpreq_chipletid         : 'deintlv__in_dvm_snpreq_chipletid',
            in_dvm_snpreq_cmstatus          : 'deintlv__in_dvm_snpreq_cmstatus',
            in_dvm_snpreq_sttid             : 'deintlv__in_dvm_snpreq_sttid',
            in_dvm_snpreq_addr              : 'deintlv__in_dvm_snpreq_addr',
            in_dvm_snpreq_mpf1              : 'deintlv__in_dvm_snpreq_mpf1',
            in_dvm_snpreq_mpf2              : 'deintlv__in_dvm_snpreq_mpf2',
            in_dvm_snpreq_mpf3              : 'deintlv__in_dvm_snpreq_mpf3',
            in_dvm_snpreq_attr              : 'deintlv__in_dvm_snpreq_attr',
            in_dvm_snpreq_aiuid             : 'deintlv__in_dvm_snpreq_aiuid',
            out_dvm_snpreq_valid            : 'deintlv__out_dvm_snpreq_valid',
            out_dvm_snpreq_ready            : 'deintlv__out_dvm_snpreq_ready',
            out_dvm_snpreq_chipletid        : 'deintlv__out_dvm_snpreq_chipletid',
            out_dvm_snpreq_cmstatus         : 'deintlv__out_dvm_snpreq_cmstatus',
            out_dvm_snpreq_sttid            : 'deintlv__out_dvm_snpreq_sttid',
            out_dvm_snpreq_addr             : 'deintlv__out_dvm_snpreq_addr',
            out_dvm_snpreq_mpf1             : 'deintlv__out_dvm_snpreq_mpf1',
            out_dvm_snpreq_mpf2             : 'deintlv__out_dvm_snpreq_mpf2',
            out_dvm_snpreq_mpf3             : 'deintlv__out_dvm_snpreq_mpf3',
            out_dvm_snpreq_attr             : 'deintlv__out_dvm_snpreq_attr',
            out_dvm_snpreq_aiuid            : 'deintlv__out_dvm_snpreq_aiuid'
        };
        if ( wDvmReqQos != 0 ) {
            instance_ports_for_deintlv['in_dvm_snpreq_qos']  = 'deintlv__in_dvm_snpreq_qos';
            instance_ports_for_deintlv['out_dvm_snpreq_qos'] = 'deintlv__out_dvm_snpreq_qos';
        }
        if ( wDvmReqPriority != 0 ) {
            instance_ports_for_deintlv['in_dvm_snpreq_priority'] = 'deintlv__in_dvm_snpreq_priority';
            instance_ports_for_deintlv['out_dvm_snpreq_priority'] = 'deintlv__out_dvm_snpreq_priority';
        }
    \jsend
        \=obj.lib.instance({
            instanceName: 'u_deintlv',
            moduleName: 'dve_deintlv_snp',
            params: deintlvParams,
            verilogParams: {},
            ports: instance_ports_for_deintlv,
            portsDelimiter: '\n    '
        })=\

assign snp_req_rx_cm_status_transport_err = (snp_req_rx_cm_status[7:6] == 2'b11);

assign snp_req_rx_target_id_mismatch = (snp_req_rx_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\] != MyFUnitId);

assign snp_req_rx_valid_qual = snp_req_rx_valid & ~snp_req_rx_target_id_mismatch & ~snp_req_rx_cm_status_transport_err & ~snp_req_rx_uce;


assign deintlv__in_dvm_snpreq_valid = snp_req_rx_valid_qual;

assign snp_req_rx_ready = deintlv__in_dvm_snpreq_ready & ~snp_req_rx_target_id_mismatch & ~snp_req_rx_cm_status_transport_err & ~snp_req_rx_uce;

assign deintlv__in_dvm_snpreq_chipletid = snp_req_rx_initiator_id[\=wChipletId+wLinkId+wFUnitId+wFPortId-1=\:\=wLinkId+wFUnitId+wFPortId=\];
assign deintlv__in_dvm_snpreq_funitid   = snp_req_rx_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];

assign deintlv__in_dvm_snpreq_cmstatus = snp_req_rx_cm_status;
assign deintlv__in_dvm_snpreq_sttid = snp_req_rx_message_id[\=wSttId-1=\:0];
assign deintlv__in_dvm_snpreq_addr = snp_req_rx_addr;
assign deintlv__in_dvm_snpreq_mpf1 = snp_req_rx_mpf1[7:0];
assign deintlv__in_dvm_snpreq_mpf2 = snp_req_rx_mpf2[\=wDvmReqAiuId-1=\:0];
assign deintlv__in_dvm_snpreq_mpf3 = snp_req_rx_mpf3[7:0];
assign deintlv__in_dvm_snpreq_attr = {
    \jsbegin
        //snpreq aux field removed in ncore3.4
        /* istanbul ignore if env ncore_3p0, ncore_3p4,ncore_3p6,ncore_3p7 */
        if ((wCmdReqAux > 0) && (wSnpReqAux > 0)) {
    \jsend
        snp_req_rx_aux,
    \js }
        snp_req_rx_tof,
        snp_req_rx_tm,
        snp_req_rx_rl,
        snp_req_rx_pr,
        snp_req_rx_ns,
        snp_req_rx_ca,
        snp_req_rx_ac,
        snp_req_rx_vz
    };

assign deintlv__in_dvm_snpreq_aiuid = { deintlv__in_dvm_snpreq_chipletid, deintlv__in_dvm_snpreq_funitid };

    \js if (wDvmReqQos > 0) {
assign deintlv__in_dvm_snpreq_qos = snp_req_rx_qos;
    \js }
    \js if (wDvmReqPriority > 0) {
assign deintlv__in_dvm_snpreq_priority = snp_req_rx_priority;
    \js }

\js } // if (wChipletId > 0)

\jsbegin
//=============================================================================
// Remote SNPreq messages Processor. Instantiated when wChipletId > 0
//=============================================================================
\jsend

\js if (wChipletId > 0) {

wire remotman__busy;

    \js if ( wDvmReqQos != 0 ) {
wire [\=wDvmReqQos-1=\:0] remotman__dvm_cmdreq_qos;
wire [\=wDvmReqQos-1=\:0] remotman__dvm_snpreq_qos;
    \js }

    \js if ( wDvmReqPriority != 0 ) {
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_cmdreq_priority;
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_cmdrsp_priority;
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_strreq_priority;
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_dtwreq_priority;
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_dtwrsp_priority;
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_snpreq_priority;
wire [\=wDvmReqPriority-1=\:0] remotman__dvm_cmp_priority;
    \js }

wire remotman__dvm_cmdreq_valid;
wire remotman__dvm_cmdreq_ready;
wire [7:0] remotman__dvm_cmdreq_cmstatus;
wire [\=wDvmReqAddr-1=\:0] remotman__dvm_cmdreq_addr;
wire [\=wDvmReqAttr-1=\:0] remotman__dvm_cmdreq_attr;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_cmdreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] remotman__dvm_cmdreq_msgid;

wire remotman__dvm_cmdrsp_valid;
wire remotman__dvm_cmdrsp_ready;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_cmdrsp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] remotman__dvm_cmdrsp_msgid;
wire [\=wSttId-1=\:0] remotman__dvm_cmdrsp_sttid;
wire [7:0] remotman__dvm_cmdrsp_cmstatus;
    \js if (wTraceMe > 0) {
wire remotman__dvm_cmdrsp_tm;
    \js }

wire remotman__dvm_strreq_valid;
wire remotman__dvm_strreq_ready;
wire [\=wSkidEntries-1=\:0] remotman__dvm_strreq_rbid;
wire [\=wSttId-1=\:0] remotman__dvm_strreq_sttid;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_strreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] remotman__dvm_strreq_msgid;
    \js if (wTraceMe > 0) {
wire remotman__dvm_strreq_tm;
    \js }

wire remotman__dvm_dtwreq_valid;
wire remotman__dvm_dtwreq_ready;
wire remotman__dvm_dtwreq_last;
wire [7:0] remotman__dvm_dtwreq_cmstatus;
wire [\=wDvmReqData-1=\:0] remotman__dvm_dtwreq_data;
wire remotman__dvm_dtwreq_dbad;
wire [\=wSkidEntries-1=\:0] remotman__dvm_dtwreq_rbid;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_dtwreq_aiuid;
wire [\=wDvmReqMsgId-1=\:0] remotman__dvm_dtwreq_msgid;
    \js if (wTraceMe>0) {
wire remotman__dvm_dtwreq_tm;
    \js }

wire remotman__dvm_dtwrsp_valid;
wire remotman__dvm_dtwrsp_ready;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_dtwrsp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] remotman__dvm_dtwrsp_msgid;
wire [7:0] remotman__dvm_dtwrsp_cmstatus;
    \js if (wTraceMe>0) {
wire remotman__dvm_dtwrsp_tm;
    \js }
wire remotman__dvm_dtwrsp_dbad;

wire remotman__dvm_snpreq_valid;
wire remotman__dvm_snpreq_ready;
wire [7:0] remotman__dvm_snpreq_cmstatus;
wire [\=wSttId-1=\:0] remotman__dvm_snpreq_sttid;
wire [\=wDvmReqAddr-1=\:0] remotman__dvm_snpreq_addr;
wire [7:0] remotman__dvm_snpreq_mpf1;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_snpreq_mpf2;
wire [7:0] remotman__dvm_snpreq_mpf3;
wire [\=wDvmReqAttr-1=\:0] remotman__dvm_snpreq_attr;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_snpreq_aiuid;

wire remotman__dvm_snprsp_valid;
wire remotman__dvm_snprsp_ready;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_snprsp_aiuid;
wire [\=wSttId-1=\:0] remotman__dvm_snprsp_sttid;
wire [7:0] remotman__dvm_snprsp_cmstatus;

wire remotman__dvm_cmp_valid;
wire remotman__dvm_cmp_ready;
wire [\=wSttId-1=\:0] remotman__dvm_cmp_sttid;
wire [\=wDvmReqAiuId-1=\:0] remotman__dvm_cmp_aiuid;
wire [\=wDvmReqMsgId-1=\:0] remotman__dvm_cmp_msgid;
wire [7:0] remotman__dvm_cmp_cmstatus;
    \js if (wTraceMe > 0) {
wire remotman__dvm_cmp_tm;
    \js }
wire remotman__dvm_strrsp_valid;
wire remotman__dvm_strrsp_ready;
wire [\=wSttId-1=\:0] remotman__dvm_strrsp_sttid;

    \jsbegin
        var remotmanParams = {
            assertOn           : assertOn,
            wTraceMe           : wTraceMe,
            wDvmReqAddr        : wDvmReqAddr,
            wDvmReqData        : wDvmReqData,
            wDvmReqAttr        : wDvmReqAttr,
            wDvmReqAiuId       : wDvmReqAiuId,
            wDvmReqMsgId       : wDvmReqMsgId,
            wDvmReqQos         : wDvmReqQos,
            wDvmReqPriority    : wDvmReqPriority,
            nSkidEntries       : nSkidEntries,
            nSttEntries        : nSttEntries,
            wSttId             : wSttId
        };
        var instance_ports_for_remotman = {
            clk                             : 'clk',
            reset_n                         : 'reset_n',
            busy                            : 'remotman__busy',

            dvm_snpreq_valid                : 'remotman__dvm_snpreq_valid',
            dvm_snpreq_ready                : 'remotman__dvm_snpreq_ready',
            dvm_snpreq_cmstatus             : 'remotman__dvm_snpreq_cmstatus',
            dvm_snpreq_sttid                : 'remotman__dvm_snpreq_sttid',
            dvm_snpreq_addr                 : 'remotman__dvm_snpreq_addr',
            dvm_snpreq_mpf1                 : 'remotman__dvm_snpreq_mpf1',
            dvm_snpreq_mpf2                 : 'remotman__dvm_snpreq_mpf2',
            dvm_snpreq_mpf3                 : 'remotman__dvm_snpreq_mpf3',
            dvm_snpreq_attr                 : 'remotman__dvm_snpreq_attr',
            dvm_snpreq_aiuid                : 'remotman__dvm_snpreq_aiuid',
            dvm_snprsp_valid                : 'remotman__dvm_snprsp_valid',
            dvm_snprsp_ready                : 'remotman__dvm_snprsp_ready',
            dvm_snprsp_aiuid                : 'remotman__dvm_snprsp_aiuid',
            dvm_snprsp_sttid                : 'remotman__dvm_snprsp_sttid',
            dvm_snprsp_cmstatus             : 'remotman__dvm_snprsp_cmstatus',


            dvm_cmdreq_valid                : 'remotman__dvm_cmdreq_valid',
            dvm_cmdreq_ready                : 'remotman__dvm_cmdreq_ready',
            dvm_cmdreq_cmstatus             : 'remotman__dvm_cmdreq_cmstatus',
            dvm_cmdreq_addr                 : 'remotman__dvm_cmdreq_addr',
            dvm_cmdreq_attr                 : 'remotman__dvm_cmdreq_attr',
            dvm_cmdreq_aiuid                : 'remotman__dvm_cmdreq_aiuid',
            dvm_cmdreq_msgid                : 'remotman__dvm_cmdreq_msgid',
            dvm_cmdrsp_valid                : 'remotman__dvm_cmdrsp_valid',
            dvm_cmdrsp_ready                : 'remotman__dvm_cmdrsp_ready',
            dvm_cmdrsp_aiuid                : 'remotman__dvm_cmdrsp_aiuid',
            dvm_cmdrsp_msgid                : 'remotman__dvm_cmdrsp_msgid',
            dvm_cmdrsp_sttid                : 'remotman__dvm_cmdrsp_sttid',
            dvm_cmdrsp_cmstatus             : 'remotman__dvm_cmdrsp_cmstatus',
            dvm_strreq_valid                : 'remotman__dvm_strreq_valid',
            dvm_strreq_ready                : 'remotman__dvm_strreq_ready',
            dvm_strreq_rbid                 : 'remotman__dvm_strreq_rbid',
            dvm_strreq_sttid                : 'remotman__dvm_strreq_sttid',
            dvm_strreq_aiuid                : 'remotman__dvm_strreq_aiuid',
            dvm_strreq_msgid                : 'remotman__dvm_strreq_msgid',
            dvm_dtwreq_valid                : 'remotman__dvm_dtwreq_valid',
            dvm_dtwreq_ready                : 'remotman__dvm_dtwreq_ready',
            dvm_dtwreq_last                 : 'remotman__dvm_dtwreq_last',
            dvm_dtwreq_cmstatus             : 'remotman__dvm_dtwreq_cmstatus',
            dvm_dtwreq_data                 : 'remotman__dvm_dtwreq_data',
            dvm_dtwreq_dbad                 : 'remotman__dvm_dtwreq_dbad',
            dvm_dtwreq_rbid                 : 'remotman__dvm_dtwreq_rbid',
            dvm_dtwreq_aiuid                : 'remotman__dvm_dtwreq_aiuid',
            dvm_dtwreq_msgid                : 'remotman__dvm_dtwreq_msgid',
            dvm_dtwrsp_valid                : 'remotman__dvm_dtwrsp_valid',
            dvm_dtwrsp_ready                : 'remotman__dvm_dtwrsp_ready',
            dvm_dtwrsp_aiuid                : 'remotman__dvm_dtwrsp_aiuid',
            dvm_dtwrsp_msgid                : 'remotman__dvm_dtwrsp_msgid',
            dvm_dtwrsp_cmstatus             : 'remotman__dvm_dtwrsp_cmstatus',
            dvm_dtwrsp_dbad                 : 'remotman__dvm_dtwrsp_dbad',
            dvm_cmp_valid                   : 'remotman__dvm_cmp_valid',
            dvm_cmp_ready                   : 'remotman__dvm_cmp_ready',
            dvm_cmp_sttid                   : 'remotman__dvm_cmp_sttid',
            dvm_cmp_aiuid                   : 'remotman__dvm_cmp_aiuid',
            dvm_cmp_msgid                   : 'remotman__dvm_cmp_msgid',
            dvm_cmp_cmstatus                : 'remotman__dvm_cmp_cmstatus',
            dvm_strrsp_valid                : 'remotman__dvm_strrsp_valid',
            dvm_strrsp_ready                : 'remotman__dvm_strrsp_ready',
            dvm_strrsp_sttid                : 'remotman__dvm_strrsp_sttid'
        };
        if (wTraceMe > 0) {
            instance_ports_for_remotman['dvm_cmdrsp_tm']  = 'remotman__dvm_cmdrsp_tm';
            instance_ports_for_remotman['dvm_dtwreq_tm']  = 'remotman__dvm_dtwreq_tm';
            instance_ports_for_remotman['dvm_dtwrsp_tm']  = 'remotman__dvm_dtwrsp_tm';
            instance_ports_for_remotman['dvm_cmp_tm']     = 'remotman__dvm_cmp_tm';
            instance_ports_for_remotman['dvm_strreq_tm']  = 'remotman__dvm_strreq_tm';
        }
        if ( wDvmReqQos != 0 ) {
            instance_ports_for_remotman['dvm_cmdreq_qos'] = 'remotman__dvm_cmdreq_qos';
            instance_ports_for_remotman['dvm_snpreq_qos'] = 'remotman__dvm_snpreq_qos';
        }
        if ( wDvmReqPriority != 0 ) {
            instance_ports_for_remotman['dvm_cmdreq_priority'] = 'remotman__dvm_cmdreq_priority';
            instance_ports_for_remotman['dvm_cmdrsp_priority'] = 'remotman__dvm_cmdrsp_priority';
            instance_ports_for_remotman['dvm_dtwreq_priority'] = 'remotman__dvm_dtwreq_priority';
            instance_ports_for_remotman['dvm_dtwrsp_priority'] = 'remotman__dvm_dtwrsp_priority';
            instance_ports_for_remotman['dvm_strreq_priority'] = 'remotman__dvm_strreq_priority';
            instance_ports_for_remotman['dvm_snpreq_priority'] = 'remotman__dvm_snpreq_priority';
            instance_ports_for_remotman['dvm_cmp_priority']    = 'remotman__dvm_cmp_priority';
        }
    \jsend
        \=obj.lib.instance({
            instanceName: 'u_remotman',
            moduleName: 'dve_remote_man',
            params: remotmanParams,
            verilogParams: {},
            ports: instance_ports_for_remotman,
            portsDelimiter: '\n    '
        })=\


assign remotman__dvm_snpreq_valid = deintlv__out_dvm_snpreq_valid;
assign remotman__dvm_snpreq_cmstatus = deintlv__out_dvm_snpreq_cmstatus;
assign remotman__dvm_snpreq_sttid = deintlv__out_dvm_snpreq_sttid;
assign remotman__dvm_snpreq_addr = deintlv__out_dvm_snpreq_addr;
assign remotman__dvm_snpreq_mpf1 = deintlv__out_dvm_snpreq_mpf1;
assign remotman__dvm_snpreq_mpf2 = deintlv__out_dvm_snpreq_mpf2;
assign remotman__dvm_snpreq_mpf3 = deintlv__out_dvm_snpreq_mpf3;
assign remotman__dvm_snpreq_attr = deintlv__out_dvm_snpreq_attr;
assign remotman__dvm_snpreq_aiuid = deintlv__out_dvm_snpreq_aiuid;
    \js if (wDvmReqQos > 0) {
assign remotman__dvm_snpreq_qos = deintlv__out_dvm_snpreq_qos;
    \js }
    \js if (wDvmReqPriority > 0) {
assign remotman__dvm_snpreq_priority = deintlv__out_dvm_snpreq_priority;
    \js }

assign deintlv__out_dvm_snpreq_ready = remotman__dvm_snpreq_ready;


assign snp_rsp_tx_valid = remotman__dvm_snprsp_valid;
assign remotman__dvm_snprsp_ready = snp_rsp_tx_ready;

assign snp_rsp_tx_initiator_id = MyId;

assign snp_rsp_tx_target_id = {
    \js if (wChipletId > 0) {
                             remotman__dvm_snprsp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\],
                             \=wLinkId=\'d0,
    \js }
                             remotman__dvm_snprsp_aiuid[\=wFUnitId-1=\:0],
                             \=wFPortId=\'d0
                           };

assign snp_rsp_tx_message_id = \=wMessageId=\'h0;
    \js if (wMessageId > wSttId) {
assign snp_rsp_tx_r_message_id = {\=wMessageId-wSttId=\'h0, remotman__dvm_snprsp_sttid};
    \js } else {
assign snp_rsp_tx_r_message_id = remotman__dvm_snprsp_sttid;
    \js }
assign snp_rsp_tx_cm_type = \=cmType.SnpRsp=\;
assign snp_rsp_tx_cm_status = remotman__dvm_snprsp_cmstatus;

assign snp_rsp_tx_mpf1 = \=SNPRespInterface.mpf1=\'h0;

assign snp_rsp_tx_intf_size = \=SNPRespInterface.intf_size=\'h0;

    \js if (SNPRespInterface.tm > 0) {
assign snp_rsp_tx_tm = \=SNPRespInterface.tm=\'h0;
    \js }
    \js if (SNPRespInterface.h_prot > 0) {
assign snp_rsp_tx_h_prot = \=SNPRespInterface.h_prot=\'h0;
    \js }
    \js if (SNPRespInterface.m_prot > 0) {
assign snp_rsp_tx_m_prot = \=SNPRespInterface.m_prot=\'h0;
    \js }
    \js if (SNPRespInterface.ql > 0) {
assign snp_rsp_tx_ql = \=SNPRespInterface.ql=\'h0;
    \js }
    \js if (SNPRespInterface.priority > 0) {
assign snp_rsp_tx_priority = \=SNPRespInterface.priority=\'h0;
    \js }
    \js if (SNPRespInterface.steering > 0) {
assign snp_rsp_tx_steering = \=SNPRespInterface.steering=\'h0;
    \js }
    \js if (SNPRespInterface.t_tier > 0) {
assign snp_rsp_tx_t_tier = \=SNPRespInterface.t_tier=\'h0;
    \js }


\js } // if (wChipletId > 0)



\js // =========================================
\js // CMDreq receive
\js // =========================================

wire cmd_req_cm_status_transport_err;
//wire cmd_req_target_id_mismatch;
wire cmd_req_valid_qual;

assign cmd_req_cm_status_transport_err = (cmd_req_cm_status[7:6] == 2'b11);

assign cmd_req_target_id_mismatch = (cmd_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\] != MyFUnitId);

assign cmd_req_valid_qual = cmd_req_valid & ~cmd_req_target_id_mismatch & ~cmd_req_cm_status_transport_err & ~cmd_req_uce;


\js if (wChipletId > 0) {

wire [1:0] cmdreq_arb__sink_ready;
wire [1:0] cmdreq_arb__sink_valid;
wire [1:0] cmdreq_arb__sink_last;
wire [1:0] cmdreq_arb__sink_grant;
wire cmdreq_arb__source_ready;
wire cmdreq_arb__source_valid;
wire cmdreq_arb__source_last;

\jsbegin
    var cmdReqArbParams = {
        num_inputs  : 2
    };
    var instance_ports_for_cmdreq_arb = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        sink_ready          : 'cmdreq_arb__sink_ready',
        sink_valid          : 'cmdreq_arb__sink_valid',
        sink_last           : 'cmdreq_arb__sink_last',
        sink_grant          : 'cmdreq_arb__sink_grant',
        source_ready        : 'cmdreq_arb__source_ready',
        source_valid        : 'cmdreq_arb__source_valid',
        source_last         : 'cmdreq_arb__source_last'
    };
\jsend
    \=u.instance({
        instanceName: 'cmdreq_arb',
        moduleName: 'rr_arb_comb_mux',
        params : cmdReqArbParams,
        verilogParams: {},
        ports: instance_ports_for_cmdreq_arb,
        portsDelimiter: '\n    '
    })=\

assign cmdreq_arb__sink_valid[0] = cmd_req_valid_qual;
assign cmdreq_arb__sink_valid[1] = remotman__dvm_cmdreq_valid;

assign cmd_req_ready              = cmdreq_arb__sink_ready[0];
assign remotman__dvm_cmdreq_ready = cmdreq_arb__sink_ready[1];

assign cmdreq_arb__sink_last[0] = 1'b1;
assign cmdreq_arb__sink_last[1] = 1'b1;

assign dvm_cmdreq_valid = cmdreq_arb__source_valid;

assign cmdreq_arb__source_ready = dvm_cmdreq_ready;


\js } else {

assign dvm_cmdreq_valid   = cmd_req_valid_qual;

assign cmd_req_ready = dvm_cmdreq_ready;

\js }


wire [\=wFUnitId-1=\:0] cmd_req_initiator_f_unit_id = cmd_req_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];

\js if (wChipletId > 0) {
wire [\=wChipletId-1=\:0] cmd_req_initiator_chiplet_id = cmd_req_initiator_id[\=wChipletId+wLinkId+wFUnitId+wFPortId-1=\:\=wLinkId+wFUnitId+wFPortId=\];
\js }

\js if (wChipletId > 0) {

assign dvm_cmdreq_aiuid =
    ({\=wGlobalFUnitId=\{cmdreq_arb__sink_grant[0]}} & { cmd_req_initiator_chiplet_id, cmd_req_initiator_f_unit_id })
  | ({\=wGlobalFUnitId=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_aiuid);


\js } else {

assign dvm_cmdreq_aiuid = cmd_req_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];

\js }

\js if (wChipletId > 0) {

assign dvm_cmdreq_msgid =
    ({\=wMessageId=\{cmdreq_arb__sink_grant[0]}} &         cmd_req_message_id[\=wMessageId-1=\:0])
  | ({\=wMessageId=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_msgid[\=wMessageId-1=\:0]);

\js } else {

assign dvm_cmdreq_msgid = cmd_req_message_id[\=wMessageId-1=\:0];

\js }

    \js if ( wDvmReqQos != 0 ) {

\js if (wChipletId > 0) {

assign dvm_cmdreq_qos =
    ({\=wDvmReqQos=\{cmdreq_arb__sink_grant[0]}} & cmd_req_qos[\=wDvmReqQos-1=\:0])
  | ({\=wDvmReqQos=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_qos[\=wDvmReqQos-1=\:0]);

\js } else {

assign dvm_cmdreq_qos = cmd_req_qos[\=wDvmReqQos-1=\:0];

\js }

    \js }

    \js if ( wDvmReqPriority != 0 ) {

\js if (wChipletId > 0) {

assign dvm_cmdreq_priority =
    ({\=wDvmReqPriority=\{cmdreq_arb__sink_grant[0]}} &              cmd_req_priority[\=wDvmReqPriority-1=\:0])
  | ({\=wDvmReqPriority=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_priority[\=wDvmReqPriority-1=\:0]);

\js } else {

assign dvm_cmdreq_priority = cmd_req_priority[\=wDvmReqPriority-1=\:0];

\js }

    \js }


\js if (wChipletId > 0) {

assign dvm_cmdreq_cmstatus =
    ({\=8=\{cmdreq_arb__sink_grant[0]}} & cmd_req_cm_status[7:0])
  | ({\=8=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_cmstatus[7:0]);


\js } else {

assign dvm_cmdreq_cmstatus = cmd_req_cm_status[7:0];

\js }

\js if (wChipletId > 0) {

assign dvm_cmdreq_addr[\=wDvmReqAddr-1=\:0] =
    ({\=wDvmReqAddr=\{cmdreq_arb__sink_grant[0]}} & cmd_req_addr[\=wDvmReqAddr-1=\:0])
  | ({\=wDvmReqAddr=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_addr[\=wDvmReqAddr-1=\:0]);


\js } else {

assign dvm_cmdreq_addr[\=wDvmReqAddr-1=\:0] = cmd_req_addr[\=wDvmReqAddr-1=\:0];

\js }


wire [\=wDvmReqAttr-1=\:0] cmdreq_attr;

assign cmdreq_attr[0]     = cmd_req_vz;
assign cmdreq_attr[1]     = cmd_req_ac;
assign cmdreq_attr[2]     = cmd_req_ca;
assign cmdreq_attr[3]     = cmd_req_ns;
assign cmdreq_attr[4]     = cmd_req_pr;
assign cmdreq_attr[6:5]   = cmd_req_rl[1:0];
assign cmdreq_attr[7]     = cmd_req_tm;
assign cmdreq_attr[10:8]  = cmd_req_tof[2:0];
    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if ((wCmdReqAux > 0) && (wSnpReqAux > 0)) {
    \jsend
assign cmdreq_attr[\=wCmdReqAux-1+11=\:11] = cmd_req_aux[\=wCmdReqAux-1=\:0];
    \js }


\js if (wChipletId > 0) {

assign dvm_cmdreq_attr[\=wDvmReqAttr-1=\:0] =
    ({\=wDvmReqAttr=\{cmdreq_arb__sink_grant[0]}} & cmdreq_attr[\=wDvmReqAttr-1=\:0])
  | ({\=wDvmReqAttr=\{cmdreq_arb__sink_grant[1]}} & remotman__dvm_cmdreq_attr[\=wDvmReqAttr-1=\:0]);


\js } else {

assign dvm_cmdreq_attr = cmdreq_attr;

\js }


\js // =========================================
\js // STRreq transmit
\js // =========================================

\js if (wChipletId > 0) {

wire [\=wChipletId-1=\:0] dvm_strreq_chipletid = dvm_strreq_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\];

wire dvm_strreq_is_for_remote = (dvm_strreq_chipletid != my_chiplet_id) ? 1'b1 : 1'b0;

\js } else {

wire dvm_strreq_is_for_remote = 1'b0;

\js }

\js if (wChipletId > 0) {

assign remotman__dvm_strreq_valid = dvm_strreq_valid & dvm_strreq_is_for_remote;
assign remotman__dvm_strreq_rbid  = dvm_strreq_rbid;
assign remotman__dvm_strreq_sttid = dvm_strreq_sttid;
assign remotman__dvm_strreq_aiuid = dvm_strreq_aiuid;
assign remotman__dvm_strreq_msgid = dvm_strreq_msgid;
    \js if (wDvmReqPriority > 0) {
assign remotman__dvm_strreq_priority = dvm_strreq_priority;
    \js }
    \js if (wTraceMe > 0) {
assign remotman__dvm_strreq_tm = dvm_strreq_tm;
    \js }

\js }

assign str_req_valid = dvm_strreq_valid & ~dvm_strreq_is_for_remote;

assign dvm_strreq_ready = (str_req_ready              & ~dvm_strreq_is_for_remote)
    \js if (wChipletId > 0) {
                        | (remotman__dvm_strreq_ready &  dvm_strreq_is_for_remote)
    \js }
                        ;

assign str_req_target_id = {
    \js if (wChipletId > 0) {
                             dvm_strreq_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\],
                             \=wLinkId=\'d0,
    \js }
                             dvm_strreq_aiuid[\=wFUnitId-1=\:0],
                             \=wFPortId=\'d0
                           };

assign str_req_initiator_id = MyId;

assign str_req_cm_type = \=cmType.StrReq=\;

assign str_req_message_id[\=wSttId-1=\:0] = dvm_strreq_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign str_req_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0 */
        if (concParams.hdrParams.wHProt > 0) {
    \jsend
assign str_req_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign str_req_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign str_req_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign str_req_priority = dvm_strreq_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign str_req_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign str_req_r_message_id = dvm_strreq_msgid[\=wMessageId-1=\:0];

assign str_req_cm_status = 8'b0;

    \js if (wSkidEntries == 1) {
assign str_req_rb_id[\=wSkidEntries-1=\:0] = dvm_strreq_rbid;
    \js } else {
assign str_req_rb_id[\=wSkidEntries-1=\:0] = dvm_strreq_rbid[\=wSkidEntries-1=\:0];
    \js }
    \jsbegin
        /* istanbul ignore else env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wRBufferId > wSkidEntries) {
    \jsend
assign str_req_rb_id[\=wRBufferId-1=\:\=wSkidEntries=\] = \=wRBufferId-wSkidEntries=\'b0;
    \js }

assign str_req_mpf1 = \=concParams.strReqParams.wMpf1=\'b0;
assign str_req_mpf2 = \=concParams.strReqParams.wMpf2=\'b0;
assign str_req_intf_size = \=concParams.strReqParams.wIntfSize=\'b0;

    \js if (wStrReqMProt > 0) {
assign str_req_m_prot = \=wStrReqMProt=\'h0;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) {
\jsend
assign str_req_tm = dvm_strreq_tm;
    \js }

\js // =========================================
\js // CMPrsp transmit
\js // =========================================

\js if (wChipletId > 0) {

wire [\=wChipletId-1=\:0] dvm_cmp_chipletid = dvm_cmp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\];

wire dvm_cmp_is_for_remote = (dvm_cmp_chipletid != my_chiplet_id) ? 1'b1 : 1'b0;

\js } else {

wire dvm_cmp_is_for_remote = 1'b0;

\js }

\js if (wChipletId > 0) {

assign remotman__dvm_cmp_valid = dvm_cmp_valid & dvm_cmp_is_for_remote;
assign remotman__dvm_cmp_sttid = dvm_cmp_sttid;
assign remotman__dvm_cmp_aiuid = dvm_cmp_aiuid;
assign remotman__dvm_cmp_msgid = dvm_cmp_msgid;
assign remotman__dvm_cmp_cmstatus = dvm_cmp_cmstatus;
    \js if (wDvmReqPriority > 0) {
assign remotman__dvm_cmp_priority = dvm_cmp_priority;
    \js }
    \js if (wTraceMe > 0) {
assign remotman__dvm_cmp_tm = dvm_cmp_tm;
    \js }

\js }

assign cmp_rsp_valid = dvm_cmp_valid & ~dvm_cmp_is_for_remote;

assign dvm_cmp_ready = (cmp_rsp_ready           & ~dvm_cmp_is_for_remote)
    \js if (wChipletId > 0) {
                     | (remotman__dvm_cmp_ready &  dvm_cmp_is_for_remote)
    \js }
                     ;

assign cmp_rsp_target_id = {
    \js if (wChipletId > 0) {
                             dvm_cmp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\],
                             \=wLinkId=\'d0,
    \js }
                             dvm_cmp_aiuid[\=wFUnitId-1=\:0],
                             \=wFPortId=\'d0
                           };

assign cmp_rsp_initiator_id = MyId;

assign cmp_rsp_cm_type = \=cmType.CmpRsp=\;

assign cmp_rsp_message_id[\=wSttId-1=\:0] = dvm_cmp_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign cmp_rsp_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0 */
        if (concParams.hdrParams.wHProt > 0) {
    \jsend
assign cmp_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign cmp_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign cmp_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wDvmReqPriority > 0) {
assign cmp_rsp_priority = dvm_cmp_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign cmp_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign cmp_rsp_r_message_id = dvm_cmp_msgid;

assign cmp_rsp_cm_status = dvm_cmp_cmstatus[7:0];

    \js if (wCmpRspMProt > 0) {
assign cmp_rsp_m_prot = \=wCmpRspMProt=\'h0;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign cmp_rsp_tm = dvm_cmp_tm;
    \js }

\js // =========================================
\js // DTWreq receive
\js // =========================================

wire dtw_req_cm_status_transport_err;
//wire dtw_req_target_id_mismatch;
wire dtw_req_valid_qual;

assign dtw_req_cm_status_transport_err = (dtw_req_cm_status[7:6] == 2'b11);

assign dtw_req_target_id_mismatch = (dtw_req_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\] != MyFUnitId);

assign dtw_req_valid_qual = dtw_req_valid & ~dtw_req_target_id_mismatch & ~dtw_req_cm_status_transport_err & ~dtw_req_uce;

\js if (wChipletId > 0) {

wire [1:0] dtwreq_arb__sink_ready;
wire [1:0] dtwreq_arb__sink_valid;
wire [1:0] dtwreq_arb__sink_last;
wire [1:0] dtwreq_arb__sink_grant;
wire dtwreq_arb__source_ready;
wire dtwreq_arb__source_valid;
wire dtwreq_arb__source_last;

\jsbegin
    var dtwReqArbParams = {
        num_inputs  : 2
    };
    var instance_ports_for_dtwreq_arb = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        sink_ready          : 'dtwreq_arb__sink_ready',
        sink_valid          : 'dtwreq_arb__sink_valid',
        sink_last           : 'dtwreq_arb__sink_last',
        sink_grant          : 'dtwreq_arb__sink_grant',
        source_ready        : 'dtwreq_arb__source_ready',
        source_valid        : 'dtwreq_arb__source_valid',
        source_last         : 'dtwreq_arb__source_last'
    };
\jsend
    \=u.instance({
        instanceName: 'dtwreq_arb',
        moduleName: 'rr_arb_comb_mux',
        params : dtwReqArbParams,
        verilogParams: {},
        ports: instance_ports_for_dtwreq_arb,
        portsDelimiter: '\n    '
    })=\

assign dtwreq_arb__sink_valid[0] = dtw_req_valid_qual;
assign dtwreq_arb__sink_valid[1] = remotman__dvm_dtwreq_valid;

assign dtw_req_ready              = dtwreq_arb__sink_ready[0];
assign remotman__dvm_dtwreq_ready = dtwreq_arb__sink_ready[1];

assign dtwreq_arb__sink_last[0] = dtw_req_last;
assign dtwreq_arb__sink_last[1] = remotman__dvm_dtwreq_last;

assign dvm_dtwreq_valid = dtwreq_arb__source_valid;

assign dtwreq_arb__source_ready = dvm_dtwreq_ready;

\js } else {

assign dvm_dtwreq_valid = dtw_req_valid_qual;

assign dtw_req_ready = dvm_dtwreq_ready;

\js }


\js if (wChipletId > 0) {

assign dvm_dtwreq_last =
    ({1{dtwreq_arb__sink_grant[0]}} & dtw_req_last)
  | ({1{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_last);

\js } else {

assign dvm_dtwreq_last = dtw_req_last;

\js }


\js if (wChipletId > 0) {

assign dvm_dtwreq_cmstatus =
    ({8{dtwreq_arb__sink_grant[0]}} & dtw_req_cm_status[7:0])
  | ({8{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_cmstatus[7:0]);


\js } else {

assign dvm_dtwreq_cmstatus = dtw_req_cm_status[7:0];

\js }

wire [\=wFUnitId-1=\:0] dtw_req_initiator_f_unit_id = dtw_req_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];

\js if (wChipletId > 0) {
wire [\=wChipletId-1=\:0] dtw_req_initiator_chiplet_id = dtw_req_initiator_id[\=wChipletId+wLinkId+wFUnitId+wFPortId-1=\:\=wLinkId+wFUnitId+wFPortId=\];
\js }


\js if (wChipletId > 0) {

assign dvm_dtwreq_aiuid =
    ({\=wGlobalFUnitId=\{dtwreq_arb__sink_grant[0]}} & { dtw_req_initiator_chiplet_id, dtw_req_initiator_f_unit_id })
  | ({\=wGlobalFUnitId=\{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_aiuid);

\js } else {

assign dvm_dtwreq_aiuid[\=wFUnitId-1=\:0] = dtw_req_initiator_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\];

\js }

\js if (wChipletId > 0) {

assign dvm_dtwreq_msgid =
    ({\=wMessageId=\{dtwreq_arb__sink_grant[0]}} & dtw_req_message_id[\=wMessageId-1=\:0])
  | ({\=wMessageId=\{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_msgid[\=wMessageId-1=\:0]);

\js } else {

assign dvm_dtwreq_msgid = dtw_req_message_id[\=wMessageId-1=\:0];

\js }


\js //assign dvm_dtwreq_rbid = dtw_req_rb_id[\=wRBufferId-1=\:0];


\js if (wChipletId > 0) {

    \js if (wSkidEntries == 1) {
assign dvm_dtwreq_rbid =
    \js } else {
assign dvm_dtwreq_rbid[\=wSkidEntries-1=\:0] =
    \js }
    ({\=wSkidEntries=\{dtwreq_arb__sink_grant[0]}} & dtw_req_rb_id[\=wSkidEntries-1=\:0])
  | ({\=wSkidEntries=\{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_rbid[\=wSkidEntries-1=\:0]);

\js } else {

assign dvm_dtwreq_rbid[\=wSkidEntries-1=\:0] = dtw_req_rb_id[\=wSkidEntries-1=\:0];

\js }

\js // dtw_req_rl[1:0]
\js // dtw_req_tm

    \jsbegin
    // Ncore3.2 always has a trace bit
    /* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe) {
    \jsend

\js if (wChipletId > 0) {

assign dvm_dtwreq_tm =
    ({\=wTraceMe=\{dtwreq_arb__sink_grant[0]}} & dtw_req_tm)
  | ({\=wTraceMe=\{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_tm);

\js } else {

assign dvm_dtwreq_tm = dtw_req_tm;

\js }

    \js } // if (wTraceMe)


\js // dtw_req_primary
\js // dtw_req_mpf1[]
\js // dtw_req_mpf2[]


\js if (wChipletId > 0) {

assign dvm_dtwreq_data =
    ({\=wDvmReqData=\{dtwreq_arb__sink_grant[0]}} & dtw_req_data[\=wDvmReqData-1=\:0])
  | ({\=wDvmReqData=\{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_data[\=wDvmReqData-1=\:0]);

\js } else {

assign dvm_dtwreq_data = dtw_req_data[\=wDvmReqData-1=\:0];

\js }


\js // dtw_req_be[]
\js // dtw_req_dwid[2:0]


\js if (wChipletId > 0) {

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.dtwReqParams.wDBad > 1) {
    \jsend

assign dvm_dtwreq_dbad =
    ({1{dtwreq_arb__sink_grant[0]}} & dtw_req_dbad[0])
  | ({1{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_dbad[0]);

    \js } else {

assign dvm_dtwreq_dbad =
    ({1{dtwreq_arb__sink_grant[0]}} & dtw_req_dbad)
  | ({1{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_dbad);

    \js }

\js } else {

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.dtwReqParams.wDBad > 1) {
    \jsend
assign dvm_dtwreq_dbad = dtw_req_dbad[0];
    \js } else {
assign dvm_dtwreq_dbad = dtw_req_dbad;
    \js }

\js }


\js // dtw_req_user[]


\js if (wChipletId > 0) {

    \js if ( wDvmReqPriority != 0 ) {
assign dvm_dtwreq_priority =
    ({\=wDvmReqPriority=\{dtwreq_arb__sink_grant[0]}} & dtw_req_priority)
  | ({\=wDvmReqPriority=\{dtwreq_arb__sink_grant[1]}} & remotman__dvm_dtwreq_priority);
    \js }

\js } else {

    \js if ( wDvmReqPriority != 0 ) {
assign dvm_dtwreq_priority = dtw_req_priority[\=wDvmReqPriority-1=\:0];
    \js }

\js }

\js // =========================================
\js // CMDrsp transmit
\js // =========================================

\js if (wChipletId > 0) {

wire [\=wChipletId-1=\:0] dvm_cmdrsp_chipletid = dvm_cmdrsp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\];

wire dvm_cmdrsp_is_for_remote = (dvm_cmdrsp_chipletid != my_chiplet_id) ? 1'b1 : 1'b0;

\js } else {

wire dvm_cmdrsp_is_for_remote = 1'b0;

\js }

\js if (wChipletId > 0) {

assign remotman__dvm_cmdrsp_valid = dvm_cmdrsp_valid & dvm_cmdrsp_is_for_remote;
assign remotman__dvm_cmdrsp_aiuid = dvm_cmdrsp_aiuid;
assign remotman__dvm_cmdrsp_msgid = dvm_cmdrsp_msgid;
assign remotman__dvm_cmdrsp_sttid = dvm_cmdrsp_sttid;
assign remotman__dvm_cmdrsp_cmstatus = dvm_cmdrsp_cmstatus;
    \js if (wDvmReqPriority > 0) {
assign remotman__dvm_cmdrsp_priority = dvm_cmdrsp_priority;
    \js }
    \js if (wTraceMe > 0) {
assign remotman__dvm_cmdrsp_tm = dvm_cmdrsp_tm;
    \js }

\js }

assign cmd_rsp_valid = dvm_cmdrsp_valid & ~dvm_cmdrsp_is_for_remote;

assign dvm_cmdrsp_ready = (cmd_rsp_ready              & ~dvm_cmdrsp_is_for_remote)
    \js if (wChipletId > 0) {
                        | (remotman__dvm_cmdrsp_ready &  dvm_cmdrsp_is_for_remote)
    \js }
                        ;

assign cmd_rsp_target_id = {
    \js if (wChipletId > 0) {
                             dvm_cmdrsp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\],
                             \=wLinkId=\'d0,
    \js }
                             dvm_cmdrsp_aiuid[\=wFUnitId-1=\:0],
                             \=wFPortId=\'d0
                           };

assign cmd_rsp_initiator_id = MyId;

assign cmd_rsp_cm_type = \=cmType.NCCmdRsp=\;

assign cmd_rsp_message_id[\=wSttId-1=\:0] = dvm_cmdrsp_sttid[\=wSttId-1=\:0];
    \jsbegin
        // Ncore3.2 has assigns wSttId==wMessageId in top level, so this is impossible
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wMessageId > wSttId) {
    \jsend
assign cmd_rsp_message_id[\=wMessageId-1=\:\=wSttId=\] = \=wMessageId-wSttId=\'b0;
    \js }

    \js if (concParams.hdrParams.wHProt > 0) {
assign cmd_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign cmd_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign cmd_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign cmd_rsp_priority = dvm_cmdrsp_priority;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign cmd_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign cmd_rsp_r_message_id = dvm_cmdrsp_msgid;

assign cmd_rsp_cm_status = dvm_cmdrsp_cmstatus;

    \js if (wNcCmdRspMProt > 0) {
assign cmd_rsp_m_prot = \=wNcCmdRspMProt=\'h0;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign cmd_rsp_tm = dvm_cmdrsp_tm;
    \js }

\js // =========================================
\js // DTWrsp transmit
\js // =========================================

\js if (wChipletId > 0) {

wire [\=wChipletId-1=\:0] dvm_dtwrsp_chipletid = dvm_dtwrsp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\];

wire dvm_dtwrsp_is_for_remote = (dvm_dtwrsp_chipletid != my_chiplet_id) ? 1'b1 : 1'b0;

\js } else {

wire dvm_dtwrsp_is_for_remote = 1'b0;

\js }

\js if (wChipletId > 0) {

assign remotman__dvm_dtwrsp_valid = dvm_dtwrsp_valid & dvm_dtwrsp_is_for_remote;

assign remotman__dvm_dtwrsp_aiuid = dvm_dtwrsp_aiuid;
assign remotman__dvm_dtwrsp_msgid = dvm_dtwrsp_msgid;
assign remotman__dvm_dtwrsp_cmstatus = dvm_dtwrsp_cmstatus;
assign remotman__dvm_dtwrsp_dbad = dvm_dtwrsp_dbad;
    \js if (wDvmReqPriority > 0) {
assign remotman__dvm_dtwrsp_priority = dvm_dtwrsp_priority;
    \js }
    \js if (wTraceMe > 0) {
assign remotman__dvm_dtwrsp_tm = dvm_dtwrsp_tm;
    \js }

\js }

assign dtw_rsp_valid = dvm_dtwrsp_valid & ~dvm_dtwrsp_is_for_remote;

assign dvm_dtwrsp_ready = (dtw_rsp_ready              & ~dvm_dtwrsp_is_for_remote)
    \js if (wChipletId > 0) {
                        | (remotman__dvm_dtwrsp_ready &  dvm_dtwrsp_is_for_remote)
    \js }
                        ;

assign dtw_rsp_target_id = {
    \js if (wChipletId > 0) {
                             dvm_dtwrsp_aiuid[\=wChipletId+wFUnitId-1=\:\=wFUnitId=\],
                             \=wLinkId=\'d0,
    \js }
                             dvm_dtwrsp_aiuid[\=wFUnitId-1=\:0],
                             \=wFPortId=\'d0
                           };

assign dtw_rsp_initiator_id = MyId;

assign dtw_rsp_cm_type = \=cmType.DtwRsp=\;

assign dtw_rsp_message_id = \=concParams.hdrParams.wMsgId=\'b0;

    \js if (concParams.hdrParams.wHProt > 0) {
assign dtw_rsp_h_prot = \=concParams.hdrParams.wHProt=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wTTier > 0) {
    \jsend
assign dtw_rsp_t_tier = \=concParams.hdrParams.wTTier=\'b0;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wSteering > 0) {
    \jsend
assign dtw_rsp_steering = \=concParams.hdrParams.wSteering=\'b0;
    \js }

    \js if (wHdrPriority > 0) {
assign dtw_rsp_priority = dvm_dtwrsp_priority;
    \js }

\jsbegin
// Ncore3.2 always has a trace bit
/* istanbul ignore else env ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (wTraceMe > 0) { \jsend
assign dtw_rsp_tm = dvm_dtwrsp_tm;
    \js }

    \jsbegin
        /* istanbul ignore if env ncore_3p0,ncore_3p2,ncore_3p4,ncore_3p6,ncore_3p7 */
        if (concParams.hdrParams.wQl > 0) {
    \jsend
assign dtw_rsp_ql = \=concParams.hdrParams.wQl=\'b0;
    \js }

assign dtw_rsp_r_message_id = dvm_dtwrsp_msgid;

\js //BOON: 2020/05/21 Khaleel confirmed dtw_rsp_cm_status is always 0 because AIU is not doing anything with dtw_rsp_cm_status.
\js //
\js //assign dtw_rsp_cm_status = dvm_dtwrsp_cmstatus[7] ? dvm_dtwrsp_cmstatus :
\js //                           dvm_dtwrsp_dbad        ? cmstatus_protocol_data_err :
\js //                                                             8'b0;

assign dtw_rsp_cm_status = \=concParams.dtwRspParams.wCmStatus=\'b0;

assign dtw_rsp_rl = 2'b0;

    \js if (wDtwRspMProt > 0) {
assign dtw_rsp_m_prot = \=wDtwRspMProt=\'h0;
    \js }


\js // =========================================
\js // STRrsp receive
\js // =========================================

wire str_rsp_cm_status_transport_err;
//wire str_rsp_target_id_mismatch;
wire str_rsp_valid_qual;

assign str_rsp_cm_status_transport_err = (str_rsp_cm_status[7:6] == 2'b11);

assign str_rsp_target_id_mismatch = (str_rsp_target_id[\=wFUnitId+wFPortId-1=\:\=wFPortId=\] != MyFUnitId);

assign str_rsp_valid_qual = str_rsp_valid & ~str_rsp_target_id_mismatch & ~str_rsp_cm_status_transport_err & ~str_rsp_uce;

\js if (wChipletId > 0) {

wire [1:0] strrsp_arb__sink_ready;
wire [1:0] strrsp_arb__sink_valid;
wire [1:0] strrsp_arb__sink_last;
wire [1:0] strrsp_arb__sink_grant;
wire strrsp_arb__source_ready;
wire strrsp_arb__source_valid;
wire strrsp_arb__source_last;

\jsbegin
    var strRspArbParams = {
        num_inputs  : 2
    };
    var instance_ports_for_strrsp_arb = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        sink_ready          : 'strrsp_arb__sink_ready',
        sink_valid          : 'strrsp_arb__sink_valid',
        sink_last           : 'strrsp_arb__sink_last',
        sink_grant          : 'strrsp_arb__sink_grant',
        source_ready        : 'strrsp_arb__source_ready',
        source_valid        : 'strrsp_arb__source_valid',
        source_last         : 'strrsp_arb__source_last'
    };
\jsend
    \=u.instance({
        instanceName: 'strrsp_arb',
        moduleName: 'rr_arb_comb_mux',
        params : strRspArbParams,
        verilogParams: {},
        ports: instance_ports_for_strrsp_arb,
        portsDelimiter: '\n    '
    })=\

assign strrsp_arb__sink_valid[0] = str_rsp_valid_qual;
assign strrsp_arb__sink_valid[1] = remotman__dvm_strrsp_valid;

assign str_rsp_ready              = strrsp_arb__sink_ready[0];
assign remotman__dvm_strrsp_ready = strrsp_arb__sink_ready[1];

assign strrsp_arb__sink_last[0] = 1'b1;
assign strrsp_arb__sink_last[1] = 1'b1;

assign dvm_strrsp_valid = strrsp_arb__source_valid;

assign strrsp_arb__source_ready  = dvm_strrsp_ready;

\js } else {

assign dvm_strrsp_valid = str_rsp_valid_qual;

assign str_rsp_ready = dvm_strrsp_ready;

\js }

\js // str_rsp_last;

\js // str_rsp_initiator_id[]

\js // str_rsp_message_id;


\js if (wChipletId > 0) {

assign dvm_strrsp_sttid =
    ({\=wSttId=\{strrsp_arb__sink_grant[0]}} & str_rsp_r_message_id[\=wSttId-1=\:0])
  | ({\=wSttId=\{strrsp_arb__sink_grant[1]}} & remotman__dvm_strrsp_sttid);

\js } else {

assign dvm_strrsp_sttid = str_rsp_r_message_id[\=wSttId-1=\:0];

\js }


\js // str_rsp_cm_status[]




assign busy = 1'b0 
    \js if (wChipletId > 0) {
            | deintlv__busy
            | remotman__busy
    \js }
            ;

endmodule
