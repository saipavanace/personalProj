\jsbegin
//=============================================================================
// Copyright(C) 2021 Arteris, Inc.
// All rights reserved
//=============================================================================
// Sys.Event Receiver
//
// Author: Boon Chuan
//
// Descriptions:
//
// The Sys.Event Receiver has the following transaction flow:
// SysReq.Event -> assert EventOut.Req
//              -> wait for EventOut.Ack assertion
//              -> deassert EventOut.Req
//              -> wait for EventOut.Ack deassertion
//              -> issue SysRsp as response
// 
// The Sys.Event Receiver comprises:
//   an input queue (depth = one entry per messaging agent),
//   a response generator,
//   a scheduler, and
//   a finite state machine (as event generator for EventOut handshake signaling).
//
// Note that the SysReq messages can arrive faster than the EventOut handshake signaling.
// In other words, source rate can be faster than the sink rate. The scheduler can
// aggregate multiple arriving messages within a certain time period, and to ensure
// every arriving SysReq message is responded with a SysRsp message.
//
//=============================================================================
// System Event Sender
//
// Author: Boon Chuan
//
// Descriptions:
// 
// A sender implements event input handshake protocol over 2 pins: EventInReq, EventInAck.
// A sender will convert the arriving event (assertion of EventInReq) into SysReq.Event messages,
// broadcast those to all known (Active?) receivers and acknowledge the event using the above defined
// 4-phase handshake
// The sender will collect the responses from all receivers and shall report an error on timeout or
// if any response indicates an error.
//
// The Sys.Event Sender has the following transaction flow:
// EventIn.Req -> fork  
//                broadcast SysReq.Event to specified targets
//                collect SysRsp from specified targets
//                join
//             -> assert EventIn.Ack
//             -> wait for EventIn.Req deassertion
//             -> deassert EventIn.Ack
//
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

//=============================================================================
// Parameters
//=============================================================================

var wChipletId              = u.getParam('wChipletId');
var wGlobalFUnitId          = u.getParam('wGlobalFUnitId');
var wFUnitId                = u.getParam('wFUnitId');
var wMessageId              = u.getParam('wMessageId');
var wSysReqOp               = u.getParam('wSysReqOp');
var wEventTimeout           = u.getParam('wEventTimeout');
var nEventAgentsForReceiver = u.getParam('nEventAgentsForReceiver');
var useSysEvtBroadcaster    = u.getParam('useSysEvtBroadcaster');
var nGlobalDVEs             = u.getParam('nGlobalDVEs');

var nEntries           = nEventAgentsForReceiver + nGlobalDVEs;
var wEntries           = log2ceil(nEntries + 1);
var wSysReqFifo        = wGlobalFUnitId + wGlobalFUnitId + wMessageId + 8 + 1;
var wSysRspFifo        = wGlobalFUnitId + wMessageId + 8;



var nEventAgentsForSender   = u.getParam('nEventAgentsForSender');
var wProtocolTimeout        = u.getParam('wProtocolTimeout');

var nTargets = nEventAgentsForSender + nGlobalDVEs;
var wTargetCounter = log2ceil(nTargets + 1);

//=============================================================================
// Ports
//=============================================================================

// Clock interface
u.port('input',  'clk',      1);
u.port('input',  'reset_n',  1);

u.port('input',  'my_target_id', wGlobalFUnitId);

    if (wChipletId > 0) {
u.port('input',  'my_chiplet_id', wChipletId);
    }

u.port('output', 'evt_receiver_busy',  1);


u.port('input',  'global_dve_enables', nGlobalDVEs);

    for (var i=0; i < nGlobalDVEs; i++) {
u.port('input',  'global_dve'+i+'_target_id', wGlobalFUnitId);
    }


// CSR interface
u.port('input',  'csr_sys_evt_receiver_enable', 1);
u.port('input',  'csr_event_timeout_value', wEventTimeout);
u.port('output', 'csr_sys_evt_receiver_err_vld', 1);
u.port('output', 'csr_sys_evt_receiver_err_event_timeout', 1);
u.port('output', 'csr_sys_evt_receiver_err_global_f_unit_id', wGlobalFUnitId);

// Receiver SysReq interface
u.port('input',  'in_sysreq_valid', 1);
u.port('output', 'in_sysreq_ready', 1);
u.port('input',  'in_sysreq_initiator_id', wGlobalFUnitId);
u.port('input',  'in_sysreq_requestor_id', wGlobalFUnitId);
u.port('input',  'in_sysreq_message_id', wMessageId);
u.port('input',  'in_sysreq_cmstatus', 8);
u.port('input',  'in_sysreq_op', wSysReqOp); // 0=NOP 1=Attach 2=Detach 3=Event

// Receiver SysRsp interface
u.port('output', 'in_sysrsp_valid', 1);
u.port('input',  'in_sysrsp_ready', 1);
u.port('output', 'in_sysrsp_target_id', wGlobalFUnitId);
u.port('output', 'in_sysrsp_rmessage_id', wMessageId);
u.port('output', 'in_sysrsp_cmstatus', 8);



u.port('output', 'evt_sender_busy', 1);

// Event Target GlobalFUnitId interface
for (var i=0; i < nEventAgentsForSender; i++) {
u.port('input',  'event'+i+'_target_id', wGlobalFUnitId);
}

// CSR interface
u.port('input',  'csr_protocol_timeout_value', wProtocolTimeout);
u.port('input',  'csr_sys_evt_sender_enable', 1);
u.port('output', 'csr_sys_evt_sender_err_vld', 1);
u.port('output', 'csr_sys_evt_sender_err_global_f_unit_id', wGlobalFUnitId);
u.port('output', 'csr_sys_evt_sender_err_protocol_sys', 1);
u.port('output', 'csr_sys_evt_sender_err_protocol_timeout', 1);
u.port('output', 'csr_sys_evt_sender_err_event_timeout', 1);

// Output SysReq interface
u.port('output', 'out_sysreq_valid', 1);
u.port('input',  'out_sysreq_ready', 1);
u.port('output', 'out_sysreq_requestor_id', wGlobalFUnitId);
u.port('output', 'out_sysreq_target_id', wGlobalFUnitId);
u.port('output', 'out_sysreq_op', wSysReqOp); // 0=NOP 1=Attach 2=Detach 3=Event

// Input SysRsp interface
u.port('input',  'out_sysrsp_valid', 1);
u.port('output', 'out_sysrsp_ready', 1);
u.port('input',  'out_sysrsp_cmstatus', 8);
u.port('input',  'out_sysrsp_initiator_id', wGlobalFUnitId);




\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

wire dff_enable = 1'b1;

wire [2:0] IN_ST_IDLE    = 3'b000;
wire [2:0] IN_ST_SETEV   = 3'b001;
wire [2:0] IN_ST_WFA     = 3'b010;
wire [2:0] IN_ST_CLREV   = 3'b011;
wire [2:0] IN_ST_DONE    = 3'b100;

reg  [2:0] next_in_state;
wire [2:0] in_state;

wire in_state_is_IDLE;
wire in_state_is_SETEV;
wire in_state_is_WFA;
wire in_state_is_CLREV;
wire in_state_is_DONE;

wire next_in_state_is_IDLE;
wire next_in_state_is_SETEV;
wire next_in_state_is_WFA;
wire next_in_state_is_CLREV;
wire next_in_state_is_DONE;

wire event_out_req_set;
wire event_out_req_clr;
wire event_out_req_en;
wire event_out_req_in;

wire in_event_timeout;

wire [\=wEventTimeout-1=\:0] in_event_timeout_counter;
wire [\=wEventTimeout-1=\:0] in_event_timeout_counter_in;
wire in_event_timeout_counter_en;
wire in_event_timeout_counter_clr;
wire in_event_timeout_counter_incr;

wire next_in_state_is_IDLE_or_DONE;
wire in_state_was_IDLE_or_DONE;

wire in_sysreq_fifo__push_valid;
wire in_sysreq_fifo__push_ready;
wire [\=wSysReqFifo-1=\:0] in_sysreq_fifo__push_data;
wire [\=wSysReqFifo-1=\:0] in_sysreq_fifo__pop_data;
wire in_sysreq_fifo__pop_valid;
wire in_sysreq_fifo__pop_ready;

wire in_sysrsp_fifo__push_valid;
wire in_sysrsp_fifo__push_ready;
wire [\=wSysRspFifo-1=\:0] in_sysrsp_fifo__push_data;
wire [\=wSysRspFifo-1=\:0] in_sysrsp_fifo__pop_data;
wire in_sysrsp_fifo__pop_valid;
wire in_sysrsp_fifo__pop_ready;

wire [\=wGlobalFUnitId-1=\:0] requestor_id;
wire [\=wGlobalFUnitId-1=\:0] target_id;
wire [\=wMessageId-1=\:0] rmessage_id;
wire [7:0] in_cmstatus;
wire [7:0] in_cmstatus_mod;

wire in_cmstatus_arrival_err;
wire in_cmstatus_timeout;
wire in_cmstatus_busy;
wire in_cmstatus_disabled;

wire in_cmstatus_err_vld;



wire event_in_req;
wire event_in_ack;
wire [\=nEventAgentsForSender-1=\:0] event_in_targets;

wire event_out_req;
wire event_out_ack;
wire [\=wGlobalFUnitId-1=\:0] event_out_requestor_id;
    \js if (wChipletId > 0) {
wire [\=wChipletId-1=\:0] event_out_initiator_chiplet_id = event_out_requestor_id[\=wGlobalFUnitId-1=\:\=wGlobalFUnitId-wChipletId=\];
    \js }

wire [\=nEventAgentsForSender-1=\:0] one_hot_initiator_id;
wire [\=nEventAgentsForSender-1=\:0] one_hot_targets_excluded_initiator;

    \js for (var i=0; i < nEventAgentsForSender; i++) {
assign one_hot_initiator_id[\=i=\] = (event\=i=\_target_id == event_out_requestor_id) ? 1'b1 : 1'b0;
    \js }

assign one_hot_targets_excluded_initiator = ~one_hot_initiator_id;

assign event_in_req = event_out_req;
assign event_out_ack = event_in_ack;
assign event_in_targets = one_hot_targets_excluded_initiator;



\jsbegin
//=============================================================================
// Input Queue for SysReq interface
//=============================================================================
\jsend

\jsbegin
    var in_sysreqFifoParams = {
        width       : wSysReqFifo,
        depth       : nEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_in_sysreq_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'in_sysreq_fifo__push_data',
        push_valid          : 'in_sysreq_fifo__push_valid',
        push_ready          : 'in_sysreq_fifo__push_ready',
        pop_data            : 'in_sysreq_fifo__pop_data',
        pop_valid           : 'in_sysreq_fifo__pop_valid',
        pop_ready           : 'in_sysreq_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'in_sysreq_fifo',
        moduleName: 'fifo',
        params : in_sysreqFifoParams,
        verilogParams: {},
        ports: instance_ports_for_in_sysreq_fifo,
        portsDelimiter: '\n    '
    })=\

assign in_sysreq_fifo__push_valid = in_sysreq_valid;

assign in_sysreq_ready = in_sysreq_fifo__push_ready;

assign in_sysreq_fifo__push_data = { next_in_state_is_IDLE_or_DONE, in_sysreq_cmstatus, in_sysreq_message_id, in_sysreq_requestor_id, in_sysreq_initiator_id };

assign { in_state_was_IDLE_or_DONE, in_cmstatus, rmessage_id, requestor_id, target_id } = in_sysreq_fifo__pop_data;

assign event_out_requestor_id = requestor_id;

\jsbegin 
//=============================================================================
// Scheduler
//=============================================================================
\jsend

assign in_sysreq_fifo__pop_ready = in_sysrsp_fifo__push_valid & in_sysrsp_fifo__push_ready;

assign in_sysrsp_fifo__push_valid = in_state_is_DONE & in_sysreq_fifo__pop_valid;

assign in_sysrsp_fifo__push_data = { in_cmstatus_mod, rmessage_id, target_id };

\jsbegin
//=============================================================================
// Event Generator for Event interface
//=============================================================================
\jsend

always @(*)
case (in_state)
    IN_ST_IDLE  : next_in_state =
        in_sysreq_fifo__pop_valid & in_state_was_IDLE_or_DONE & csr_sys_evt_receiver_enable & ~in_cmstatus_arrival_err ? IN_ST_SETEV :
        in_sysreq_fifo__pop_valid & (~in_state_was_IDLE_or_DONE | ~csr_sys_evt_receiver_enable | in_cmstatus_arrival_err) ? IN_ST_DONE : IN_ST_IDLE;

    IN_ST_SETEV : next_in_state = IN_ST_WFA;

    IN_ST_WFA   : next_in_state = event_out_ack | in_event_timeout ? IN_ST_CLREV : IN_ST_WFA;

    IN_ST_CLREV : next_in_state = ~event_out_ack | in_event_timeout ? IN_ST_DONE : IN_ST_CLREV;

    IN_ST_DONE  : next_in_state = in_sysrsp_fifo__push_ready ? IN_ST_IDLE : IN_ST_DONE;

    default next_in_state = in_state;
endcase

\=u.dffre(3, 'in_state', 'next_in_state', "3'b0", 'dff_enable', 'clk', 'reset_n')=\

assign in_state_is_IDLE       = (in_state == IN_ST_IDLE);
assign in_state_is_SETEV      = (in_state == IN_ST_SETEV);
assign in_state_is_WFA        = (in_state == IN_ST_WFA);
assign in_state_is_CLREV      = (in_state == IN_ST_CLREV);
assign in_state_is_DONE       = (in_state == IN_ST_DONE);

assign next_in_state_is_IDLE       = (next_in_state == IN_ST_IDLE);
assign next_in_state_is_SETEV      = (next_in_state == IN_ST_SETEV);
assign next_in_state_is_WFA        = (next_in_state == IN_ST_WFA);
assign next_in_state_is_CLREV      = (next_in_state == IN_ST_CLREV);
assign next_in_state_is_DONE       = (next_in_state == IN_ST_DONE);   \jsbegin
 
if (!useSysEvtBroadcaster) { \jsend
assign next_in_state_is_IDLE_or_DONE = next_in_state_is_IDLE | next_in_state_is_DONE; \jsbegin
} else { \jsend
assign next_in_state_is_IDLE_or_DONE = 1'b1; \jsbegin
} \jsend

\jsbegin
//=============================================================================
// OUTPUT event_out_req
//=============================================================================
\jsend

\=u.dffre(1, 'event_out_req', 'event_out_req_in', "1'b0", 'event_out_req_en', 'clk', 'reset_n')=\

assign event_out_req_set = next_in_state_is_SETEV;
assign event_out_req_clr = next_in_state_is_CLREV;
assign event_out_req_en  = event_out_req_set | event_out_req_clr;
assign event_out_req_in  = event_out_req_set;

\jsbegin
//=============================================================================
// in_event_timeout
//=============================================================================
\jsend

assign in_event_timeout = {|{csr_event_timeout_value}} ? (in_event_timeout_counter == csr_event_timeout_value) : 1'b0;

\=u.dffre(wEventTimeout, 'in_event_timeout_counter', 'in_event_timeout_counter_in', wEventTimeout+"'b0", 'in_event_timeout_counter_en', 'clk', 'reset_n')=\

assign in_event_timeout_counter_clr  = in_state_is_IDLE;

assign in_event_timeout_counter_incr = (in_state_is_WFA | in_state_is_CLREV) & ~in_event_timeout;

assign in_event_timeout_counter_en = in_event_timeout_counter_clr | in_event_timeout_counter_incr;

assign in_event_timeout_counter_in = in_event_timeout_counter_clr  ? \=wEventTimeout=\'b0 :
                                  in_event_timeout_counter_incr ? in_event_timeout_counter + \=wEventTimeout=\'b1 :
                                                               in_event_timeout_counter;

\jsbegin
//=============================================================================
// Response Generator for SysRsp interface
//=============================================================================
\jsend

assign in_cmstatus_arrival_err = {|{in_cmstatus[7:6]}};
assign in_cmstatus_timeout     = in_event_timeout;
assign in_cmstatus_busy        = ~in_state_was_IDLE_or_DONE;
assign in_cmstatus_disabled    = ~csr_sys_evt_receiver_enable;

assign in_cmstatus_mod[7:6] = in_cmstatus_arrival_err ? in_cmstatus[7:6] :
                              in_cmstatus_timeout     ? 2'b01 :
                                                        2'b00 ;
assign in_cmstatus_mod[5:3] = 3'b000;
assign in_cmstatus_mod[2:0] = in_cmstatus_disabled | in_cmstatus_arrival_err | in_cmstatus_timeout ? 3'b000 : //No operation performed
                              in_cmstatus_busy                                                     ? 3'b001 : //Busy
                                                                                                     3'b011 ; //OK

\jsbegin
    var in_sysrspFifoParams = {
        width       : wSysRspFifo,
        depth       : nEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_in_sysrsp_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'in_sysrsp_fifo__push_data',
        push_valid          : 'in_sysrsp_fifo__push_valid',
        push_ready          : 'in_sysrsp_fifo__push_ready',
        pop_data            : 'in_sysrsp_fifo__pop_data',
        pop_valid           : 'in_sysrsp_fifo__pop_valid',
        pop_ready           : 'in_sysrsp_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'in_sysrsp_fifo',
        moduleName: 'fifo',
        params : in_sysrspFifoParams,
        verilogParams: {},
        ports: instance_ports_for_in_sysrsp_fifo,
        portsDelimiter: '\n    '
    })=\


assign in_sysrsp_valid = in_sysrsp_fifo__pop_valid;

assign in_sysrsp_fifo__pop_ready = in_sysrsp_ready;

assign { in_sysrsp_cmstatus, in_sysrsp_rmessage_id, in_sysrsp_target_id } = in_sysrsp_fifo__pop_data;

\jsbegin
//=============================================================================
// CSR error logging
//=============================================================================
\jsend

assign csr_sys_evt_receiver_err_vld = in_cmstatus_err_vld;

assign in_cmstatus_err_vld = in_sysrsp_fifo__push_valid & in_sysrsp_fifo__push_ready & {|{in_cmstatus_mod[7:6]}};

assign csr_sys_evt_receiver_err_global_f_unit_id = target_id;

assign csr_sys_evt_receiver_err_event_timeout = in_event_timeout;

\jsbegin
//=============================================================================
// Busy
//=============================================================================
\jsend

assign evt_receiver_busy = in_sysreq_fifo__pop_valid | in_sysrsp_fifo__pop_valid;



\jsbegin
//=============================================================================
// Sender
//=============================================================================
\jsend

wire [\=wSysReqOp-1=\:0] SYSREQ_OP_EVENT = \=wSysReqOp=\'d3;

wire [2:0] OUT_ST_IDLE    = 3'b000;
wire [2:0] OUT_ST_SEND    = 3'b001;
wire [2:0] OUT_ST_COLLECT = 3'b010;
wire [2:0] OUT_ST_PROTERR = 3'b011;
wire [2:0] OUT_ST_EVTERR  = 3'b100;
wire [2:0] OUT_ST_WAIT    = 3'b101;
wire [2:0] OUT_ST_DELAY   = 3'b110;

reg  [2:0] next_out_state;
wire [2:0] out_state;

wire out_state_is_IDLE;
wire out_state_is_SEND;
wire out_state_is_COLLECT;
wire out_state_is_PROTERR;
wire out_state_is_EVTERR;
wire out_state_is_WAIT;
wire out_state_is_DELAY;

wire next_out_state_is_IDLE;
wire next_out_state_is_SEND;
wire next_out_state_is_COLLECT;
wire next_out_state_is_PROTERR;
wire next_out_state_is_EVTERR;
wire next_out_state_is_WAIT;
wire next_out_state_is_DELAY;

wire all_responses_received;
wire out_protocol_timeout;
wire out_event_timeout;

wire event_in_ack_in;
wire event_in_ack_en;
wire event_in_ack_set;
wire event_in_ack_clr;

wire send_req_pending;
wire send_req_pending_set;
wire send_req_pending_clr;
wire send_req_pending_en;
wire send_req_pending_in;

wire [\=wTargetCounter-1=\:0] send_counter;
wire [\=wTargetCounter-1=\:0] send_counter_in;
wire send_counter_en;
wire send_counter_set;
wire send_counter_clr;

wire [\=wTargetCounter-1=\:0] receive_counter;
wire [\=wTargetCounter-1=\:0] receive_counter_in;
wire receive_counter_en;
wire receive_counter_set;
wire receive_counter_clr;

wire [\=wTargetCounter-1=\:0] receive_counter_plus1;

wire any_out_sysrsp_error;
wire any_out_sysrsp_error_in;
wire any_out_sysrsp_error_en;
wire any_out_sysrsp_error_set;
wire any_out_sysrsp_error_clr;

wire [\=wGlobalFUnitId-1=\:0] sys_rsp_error_global_f_unit_id;
wire [\=wGlobalFUnitId-1=\:0] sys_rsp_error_global_f_unit_id_in;

wire [\=wEventTimeout-1=\:0] out_event_timeout_counter;
wire [\=wEventTimeout-1=\:0] out_event_timeout_counter_in;
wire out_event_timeout_counter_en;

wire [\=wProtocolTimeout-1=\:0] out_protocol_timeout_counter;
wire [\=wProtocolTimeout-1=\:0] out_protocol_timeout_counter_in;
wire out_protocol_timeout_counter_en;

 

wire [\=nTargets-1=\:0] dest_aiu_vec;
wire [\=nTargets-1=\:0] dest_aiu_vec_sel;
wire dest_aiu_vec_is_zero;
wire dest_aiu_vec_is_last;
wire update_dest_aiu_vec;

    \js for(var i=0; i < nTargets; i++) {
wire target_bit\=i=\;
    \js }
wire [\=nTargets-1=\:0] target_bitvec;
wire [\=nTargets-1=\:0] target_bitvec_sig;
wire [\=nTargets-1=\:0] target_bitvec_en;
wire [\=nTargets-1=\:0] target_bitvec_set;
wire [\=nTargets-1=\:0] target_bitvec_clr;

wire [\=nTargets-1=\:0] src_requestor_id_vec;
wire [\=nTargets-1=\:0] src_remote_vec;
wire [\=nTargets-1=\:0] dst_remote_vec;


wire [\=nEventAgentsForSender-1=\:0] event_target_enables = {\=nEventAgentsForSender=\{1'b1}};


wire [\=nTargets-1=\:0] targetEnables;

    \js for (var i=0; i < nTargets; i++) {
wire [\=wGlobalFUnitId-1=\:0] target\=i=\_id;
    \js }

\js if (wChipletId > 0) {
    \js for (var i=0; i < nTargets; i++) {
wire [\=wChipletId-1=\:0] target\=i=\_chiplet_id = target\=i=\_id[\=wGlobalFUnitId-1=\:\=wGlobalFUnitId-wChipletId=\];
    \js }
\js }

    \js for (var i=0; i < nGlobalDVEs; i++) {

assign targetEnables[\=i=\] = (global_dve\=i=\_target_id == my_target_id) ? 1'b0 :
        \js if (nGlobalDVEs == 1) {
                              global_dve_enables;
        \js } else {
                              global_dve_enables[\=i=\];
        \js }

assign target\=i=\_id = global_dve\=i=\_target_id;

    \js }


    \js for (var i=0; i < nEventAgentsForSender; i++) {

assign targetEnables[\=i+nGlobalDVEs=\] = 1'b1;
assign target\=i+nGlobalDVEs=\_id = event\=i=\_target_id;

    \js }

\jsbegin
//=============================================================================
// Destination bit vector
//=============================================================================
\jsend

assign update_dest_aiu_vec = out_sysreq_valid & out_sysreq_ready;

assign dest_aiu_vec_is_zero = ~{|{dest_aiu_vec}};
assign dest_aiu_vec_is_last = (dest_aiu_vec_sel == dest_aiu_vec) & ~dest_aiu_vec_is_zero;

    \=u.instance({
        instanceName: 'u_dest_aiu_vec_sel',
        moduleName: 'find_first_one',
        params: { width : nTargets },
        verilogParams: { WIDTH : nTargets },
        ports: {
            invec : 'dest_aiu_vec', outvec : 'dest_aiu_vec_sel'
        }
    })=\

assign dest_aiu_vec = target_bitvec & ~src_requestor_id_vec & targetEnables & ~(src_remote_vec & dst_remote_vec);

    \js for(var i=0; i < nTargets; i++) {
\=u.dffre(1, 'target_bit'+i, 'target_bitvec_sig['+i+']', "1'b1", 'target_bitvec_en['+i+']', 'clk', 'reset_n')=\
    \js }

    \js for(var i=0; i < nTargets; i++) {
assign target_bitvec[\=i=\] = target_bit\=i=\;
    \js }

assign target_bitvec_set = {\=nTargets=\{next_out_state_is_IDLE}};

assign target_bitvec_clr = {\=nTargets=\{update_dest_aiu_vec}} & dest_aiu_vec_sel;

assign target_bitvec_en = target_bitvec_set | target_bitvec_clr;

assign target_bitvec_sig = target_bitvec_set;


    \js for(var i=0; i < nTargets; i++) {
assign src_requestor_id_vec[\=i=\] = (event_out_requestor_id == target\=i=\_id) ? 1'b1 : 1'b0;
    \js }


    \js if (wChipletId > 0) {

assign src_remote_vec = {\=nTargets=\{(event_out_initiator_chiplet_id != my_chiplet_id)}};

    \js } else {
assign src_remote_vec = {\=nTargets=\{1'b0}};
    \js }


    \js if (wChipletId > 0) {

        \js for(var i=0; i < nTargets; i++) {
assign dst_remote_vec[\=i=\] = (target\=i=\_chiplet_id != my_chiplet_id);
        \js }

    \js } else {
assign dst_remote_vec = {\=nTargets=\{1'b0}};
    \js }

\jsbegin
//=============================================================================
// State Machine
//=============================================================================
\jsend

always @(*)
case (out_state)
    OUT_ST_IDLE    : next_out_state = event_in_req ? (csr_sys_evt_sender_enable & ~dest_aiu_vec_is_zero ? OUT_ST_SEND : OUT_ST_WAIT) : OUT_ST_IDLE;

    OUT_ST_SEND    : next_out_state = dest_aiu_vec_is_last & update_dest_aiu_vec ? OUT_ST_COLLECT : OUT_ST_SEND;

    OUT_ST_COLLECT : next_out_state = all_responses_received ? (any_out_sysrsp_error ? OUT_ST_PROTERR : OUT_ST_WAIT) : 
                                                           (out_protocol_timeout  ? OUT_ST_PROTERR : OUT_ST_COLLECT);

    OUT_ST_WAIT    : next_out_state = ~event_in_req ? OUT_ST_DELAY : 
                                  out_event_timeout ? OUT_ST_EVTERR : OUT_ST_WAIT;

    OUT_ST_PROTERR : next_out_state = OUT_ST_WAIT;
    OUT_ST_EVTERR  : next_out_state = OUT_ST_DELAY;

    OUT_ST_DELAY   : next_out_state = OUT_ST_IDLE;

    default next_out_state = out_state;
endcase

\=u.dffre(3, 'out_state', 'next_out_state', "3'b0", 'dff_enable', 'clk', 'reset_n')=\

assign out_state_is_IDLE        = (out_state == OUT_ST_IDLE);
assign out_state_is_SEND        = (out_state == OUT_ST_SEND);
assign out_state_is_COLLECT     = (out_state == OUT_ST_COLLECT);
assign out_state_is_PROTERR     = (out_state == OUT_ST_PROTERR);
assign out_state_is_EVTERR      = (out_state == OUT_ST_EVTERR);
assign out_state_is_WAIT        = (out_state == OUT_ST_WAIT);
assign out_state_is_DELAY       = (out_state == OUT_ST_DELAY);

assign next_out_state_is_IDLE        = (next_out_state == OUT_ST_IDLE);
assign next_out_state_is_SEND        = (next_out_state == OUT_ST_SEND);
assign next_out_state_is_COLLECT     = (next_out_state == OUT_ST_COLLECT);
assign next_out_state_is_PROTERR     = (next_out_state == OUT_ST_PROTERR);
assign next_out_state_is_EVTERR      = (next_out_state == OUT_ST_EVTERR);
assign next_out_state_is_WAIT        = (next_out_state == OUT_ST_WAIT);
assign next_out_state_is_DELAY       = (next_out_state == OUT_ST_DELAY);

\jsbegin
//=============================================================================
// OUTPUT event_in_ack
//=============================================================================
\jsend

\=u.dffre(1, 'event_in_ack', 'event_in_ack_in', "1'b0", 'event_in_ack_en', 'clk', 'reset_n')=\

assign event_in_ack_set = next_out_state_is_WAIT;
assign event_in_ack_clr = next_out_state_is_DELAY;
assign event_in_ack_en  = event_in_ack_set | event_in_ack_clr;
assign event_in_ack_in  = event_in_ack_set;

\jsbegin
//=============================================================================
// OUTPUT out_sysreq
//=============================================================================
\jsend

assign out_sysreq_valid = out_state_is_SEND;

assign out_sysreq_requestor_id = requestor_id;

assign out_sysreq_target_id = \=wGlobalFUnitId=\'d0

    \js for (var i=0; i < nTargets; i++) {
         | ({\=wGlobalFUnitId=\{dest_aiu_vec_sel[\=i=\]}} & target\=i=\_id)
    \js }
                               ;

assign out_sysreq_op = SYSREQ_OP_EVENT;

\jsbegin
//=============================================================================
// all_responses_received
// send_req_pending
// send_counter
// receive_counter
//=============================================================================
\jsend

\=u.dffre(1, 'send_req_pending', 'send_req_pending_in', "1'b0", 'send_req_pending_en', 'clk', 'reset_n')=\

assign send_req_pending_set = out_state_is_IDLE & next_out_state_is_SEND;
assign send_req_pending_clr = out_state_is_SEND & next_out_state_is_COLLECT;
assign send_req_pending_en  = send_req_pending_set |  send_req_pending_clr;
assign send_req_pending_in  = send_req_pending_set & ~send_req_pending_clr;


\=u.dffre(wTargetCounter, 'send_counter', 'send_counter_in', wTargetCounter+"'b0", 'send_counter_en', 'clk', 'reset_n')=\

assign send_counter_set = out_state_is_SEND & out_sysreq_valid & out_sysreq_ready;
assign send_counter_clr = out_state_is_IDLE;
assign send_counter_en  = send_counter_set | send_counter_clr;

assign send_counter_in  = send_counter_clr ? \=wTargetCounter=\'d0 :
                          send_counter_set ? send_counter + \=wTargetCounter=\'d1 :
                                             send_counter;


\=u.dffre(wTargetCounter, 'receive_counter', 'receive_counter_in', wTargetCounter+"'b0", 'receive_counter_en', 'clk', 'reset_n')=\

assign receive_counter_set = (out_state_is_SEND | out_state_is_COLLECT) & out_sysrsp_valid & out_sysrsp_ready;
assign receive_counter_clr = out_state_is_IDLE;
assign receive_counter_en  = receive_counter_set | receive_counter_clr;

assign receive_counter_in  = receive_counter_clr ? \=wTargetCounter=\'d0 :
                             receive_counter_set ? receive_counter + \=wTargetCounter=\'d1 :
                                                   receive_counter;

assign receive_counter_plus1 = receive_counter + \=wTargetCounter=\'h1;


assign all_responses_received = receive_counter_set
                                    & ~send_req_pending
                                    & (receive_counter_plus1 == send_counter);

\jsbegin
//=============================================================================
// any_out_sysrsp_error
//=============================================================================
\jsend

\=u.dffre(1, 'any_out_sysrsp_error', 'any_out_sysrsp_error_in', "1'b0", 'any_out_sysrsp_error_en', 'clk', 'reset_n')=\

assign any_out_sysrsp_error_set = (out_state_is_SEND | out_state_is_COLLECT) & out_sysrsp_valid & out_sysrsp_ready & (out_sysrsp_cmstatus[7:6] == 2'b01);
assign any_out_sysrsp_error_clr = out_state_is_IDLE;
assign any_out_sysrsp_error_en  = any_out_sysrsp_error_set | any_out_sysrsp_error_clr;
assign any_out_sysrsp_error_in  = any_out_sysrsp_error_set;

\=u.dffre(wGlobalFUnitId, 'sys_rsp_error_global_f_unit_id', 'sys_rsp_error_global_f_unit_id_in', wGlobalFUnitId+"'b0", 'dff_enable', 'clk', 'reset_n')=\

assign sys_rsp_error_global_f_unit_id_in = any_out_sysrsp_error_set ? out_sysrsp_initiator_id :
                                           any_out_sysrsp_error_clr ? \=wGlobalFUnitId=\'d0 :
                                                                      sys_rsp_error_global_f_unit_id;

\jsbegin
//=============================================================================
// out_sysrsp_ready
//=============================================================================
\jsend

assign out_sysrsp_ready = 1'b1;

\jsbegin
//=============================================================================
// out_protocol_timeout
//=============================================================================
\jsend

assign out_protocol_timeout = {|{csr_protocol_timeout_value}} ? (out_protocol_timeout_counter == csr_protocol_timeout_value) : 1'b0;

\=u.dffre(wProtocolTimeout, 'out_protocol_timeout_counter', 'out_protocol_timeout_counter_in', wProtocolTimeout+"'b0", 'out_protocol_timeout_counter_en', 'clk', 'reset_n')=\

assign out_protocol_timeout_counter_en = out_state_is_IDLE | out_state_is_SEND | out_state_is_COLLECT;

assign out_protocol_timeout_counter_in =
        out_state_is_IDLE ? \=wProtocolTimeout=\'b0 :
        (out_state_is_SEND | out_state_is_COLLECT) & ~out_protocol_timeout ? out_protocol_timeout_counter + \=wProtocolTimeout=\'b1 :
                                                                             out_protocol_timeout_counter;

\jsbegin
//=============================================================================
// out_event_timeout
//=============================================================================
\jsend

assign out_event_timeout = {|{csr_event_timeout_value}} ? (out_event_timeout_counter == csr_event_timeout_value) : 1'b0;

\=u.dffre(wEventTimeout, 'out_event_timeout_counter', 'out_event_timeout_counter_in', wEventTimeout+"'b0", 'out_event_timeout_counter_en', 'clk', 'reset_n')=\

assign out_event_timeout_counter_en = out_state_is_IDLE | out_state_is_WAIT;

assign out_event_timeout_counter_in = out_state_is_IDLE ? \=wEventTimeout=\'b0 : out_state_is_WAIT & ~out_event_timeout ? out_event_timeout_counter + \=wEventTimeout=\'b1 : out_event_timeout_counter;

\jsbegin
//=============================================================================
// CSR error logging
//=============================================================================
\jsend

assign csr_sys_evt_sender_err_vld = out_state_is_PROTERR | out_state_is_EVTERR;

assign csr_sys_evt_sender_err_global_f_unit_id = sys_rsp_error_global_f_unit_id;

assign csr_sys_evt_sender_err_protocol_sys     = any_out_sysrsp_error;
assign csr_sys_evt_sender_err_protocol_timeout = out_protocol_timeout;
assign csr_sys_evt_sender_err_event_timeout    = out_event_timeout;

\jsbegin
//=============================================================================
// Busy
//=============================================================================
\jsend

assign evt_sender_busy = ~out_state_is_IDLE;

endmodule
