//=============================================================================
// Copyright (C) 2025 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
// Filename: ncore3_addr_div_ifn_tb.tachl
// Author: Boon Chuan
// Description: Ncore3 Address Division and Interleave Function Testbench
//=========================================================================

var u = obj.lib;

var wAddr            = 52;
var wNUnitId         = 5; 
var InterleaveInfo   = 
{
    "dmiIGSV": [
      { 
        "IGV": [
            {"DMIIDV": [0, 1, 2]},
            {"DMIIDV": [3, 4, 5, 6, 7, 8]},
            {"DMIIDV": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]}
        ]
      }
    ],
    "dmi2WIFV": [],
    "dmi3WIFV": [
      {
        "PrimaryBits": [6],
        "SecondaryBits": ["'h0"]
      }
    ],
    "dmi4WIFV": [],
    "dmi6WIFV": [
      {
        "PrimaryBits": [7],
        "SecondaryBits": ["'h0"]
      }
    ],
    "dmi8WIFV": [],
    "dmi12WIFV": [
      {
        "PrimaryBits": [8],
        "SecondaryBits": ["'h0"]
      }
    ],
    "dmi16WIFV": []
};

var dmi3WIFV  = InterleaveInfo.dmi3WIFV;
var dmi6WIFV  = InterleaveInfo.dmi6WIFV;
var dmi12WIFV = InterleaveInfo.dmi12WIFV;

\jsend

\jsbegin
//=============================================================================
// Ports
//=============================================================================
obj.lib.port('output', 'clk',             1, 'reg');
obj.lib.port('output', 'reset_n',         1, 'reg');
obj.lib.port('output', 'address',         wAddr, 'reg');
obj.lib.port('output', 'dmi_mod3',        2);
obj.lib.port('output', 'dmi_mod6',        3);
obj.lib.port('output', 'dmi_mod12',       4);
    for (var i=0; i < 21; i++) {
obj.lib.port('output', 'dmi'+i+'_address_div_out', 52);
    }
    for (var m=0; m < 3; m++) {
u.port('output', 'golden_sub'+m+'_div3_offset6_address', 52);
u.port('output', 'golden_sub'+m+'_div3_offset6_address_hi', 52-6);
    }
    for (var m=0; m < 6; m++) {
u.port('output', 'golden_sub'+m+'_div6_offset7_address', 52);
u.port('output', 'golden_sub'+m+'_div6_offset7_address_hi', 52-7);
    }
    for (var m=0; m < 12; m++) {
u.port('output', 'golden_sub'+m+'_div12_offset8_address', 52);
u.port('output', 'golden_sub'+m+'_div12_offset8_address_hi', 52-8);
    }

obj.lib.port('output', 'AMIGR_AMIGS',     4, 'reg');
obj.lib.port('output', 'AMIGR_Valid',     1, 'reg');
obj.lib.port('output', 'AMIFR_A16WIFId',  3, 'reg');
obj.lib.port('output', 'AMIFR_A12WIFId',  3, 'reg');
obj.lib.port('output', 'AMIFR_A8WIFId',   3, 'reg');
obj.lib.port('output', 'AMIFR_A6WIFId',   3, 'reg');
obj.lib.port('output', 'AMIFR_A4WIFId',   3, 'reg');
obj.lib.port('output', 'AMIFR_A3WIFId',   3, 'reg');
obj.lib.port('output', 'AMIFR_A2WIFId',   3, 'reg');

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

\js for (var i=0; i < 21; i++) {

wire [\=wNUnitId-1=\:0] dmi\=i=\_NUnitId = \=wNUnitId=\'d\=i=\;

    \=obj.lib.instance( {
        instanceName: 'u_dmi'+i+'_addr_div_ifn',
        moduleName: 'ncore3_addr_div_ifn',
        params: {
            wNUnitId       : wNUnitId,
            InterleaveInfo : InterleaveInfo
        },
        ports: {
            my_n_unit_id   : 'dmi'+i+'_NUnitId',
            AMIGR_AMIGS    : 'AMIGR_AMIGS',
            AMIGR_Valid    : 'AMIGR_Valid',
            AMIFR_A16WIFId : 'AMIFR_A16WIFId',
            AMIFR_A12WIFId : 'AMIFR_A12WIFId',
            AMIFR_A8WIFId  : 'AMIFR_A8WIFId',
            AMIFR_A6WIFId  : 'AMIFR_A6WIFId',
            AMIFR_A4WIFId  : 'AMIFR_A4WIFId',
            AMIFR_A3WIFId  : 'AMIFR_A3WIFId',
            AMIFR_A2WIFId  : 'AMIFR_A2WIFId',
            address        : 'address',
            address_out    : 'dmi'+i+'_address_div_out'
       }
    })=\

\js }

    \=u.instance({
        instanceName: 'u_ncore3_addr_mod3',
        moduleName: 'ncore3_addr_mod3',
        params : { wOffset : dmi3WIFV[0].PrimaryBits[0] },
        ports: {
                   address          : 'address',
                   result           : 'dmi_mod3'
               }
    })=\

    \=u.instance({
        instanceName: 'u_ncore3_addr_mod6',
        moduleName: 'ncore3_addr_mod6',
        params : { wOffset : dmi6WIFV[0].PrimaryBits[0] },
        ports: {
                   address          : 'address',
                   result           : 'dmi_mod6'
               }
    })=\

    \=u.instance({
        instanceName: 'u_ncore3_addr_mod12',
        moduleName: 'ncore3_addr_mod12',
        params : { wOffset : dmi12WIFV[0].PrimaryBits[0] },
        ports: {
                   address          : 'address',
                   result           : 'dmi_mod12'
               }
    })=\

initial begin
  clk = 1'b0;
  forever begin
      #5 clk = ~clk;
  end
end

initial begin
   reset_n = 1'b0;
   #15
   reset_n = 1'b1;
end

initial begin
   AMIGR_AMIGS    = 4'd0;
   AMIGR_Valid    = 1'b0;
   AMIFR_A16WIFId = 3'd0;
   AMIFR_A12WIFId = 3'd0;
   AMIFR_A8WIFId  = 3'd0;
   AMIFR_A6WIFId  = 3'd0;
   AMIFR_A4WIFId  = 3'd0;
   AMIFR_A3WIFId  = 3'd0;
   AMIFR_A2WIFId  = 3'd0;
end

always @ (posedge clk, negedge reset_n)
if (~reset_n) begin
    address <= 52'b1101_000110_0100_0000;
end else begin
    address <= address + 52'h40;
end

assign golden_sub0_div3_offset6_address_hi = (address[51:6] - \=52-6=\'d0) / 3;
assign golden_sub1_div3_offset6_address_hi = (address[51:6] - \=52-6=\'d1) / 3;
assign golden_sub2_div3_offset6_address_hi = (address[51:6] - \=52-6=\'d2) / 3;
assign golden_sub0_div3_offset6_address = {golden_sub0_div3_offset6_address_hi, address[\=6-1=\:0]};
assign golden_sub1_div3_offset6_address = {golden_sub1_div3_offset6_address_hi, address[\=6-1=\:0]};
assign golden_sub2_div3_offset6_address = {golden_sub2_div3_offset6_address_hi, address[\=6-1=\:0]};
assign golden_sub0_div6_offset7_address_hi = (address[51:7] - \=52-7=\'d0) / 6;
assign golden_sub1_div6_offset7_address_hi = (address[51:7] - \=52-7=\'d1) / 6;
assign golden_sub2_div6_offset7_address_hi = (address[51:7] - \=52-7=\'d2) / 6;
assign golden_sub3_div6_offset7_address_hi = (address[51:7] - \=52-7=\'d3) / 6;
assign golden_sub4_div6_offset7_address_hi = (address[51:7] - \=52-7=\'d4) / 6;
assign golden_sub5_div6_offset7_address_hi = (address[51:7] - \=52-7=\'d5) / 6;
assign golden_sub0_div6_offset7_address = {golden_sub0_div6_offset7_address_hi, address[\=7-1=\:0]};
assign golden_sub1_div6_offset7_address = {golden_sub1_div6_offset7_address_hi, address[\=7-1=\:0]};
assign golden_sub2_div6_offset7_address = {golden_sub2_div6_offset7_address_hi, address[\=7-1=\:0]};
assign golden_sub3_div6_offset7_address = {golden_sub3_div6_offset7_address_hi, address[\=7-1=\:0]};
assign golden_sub4_div6_offset7_address = {golden_sub4_div6_offset7_address_hi, address[\=7-1=\:0]};
assign golden_sub5_div6_offset7_address = {golden_sub5_div6_offset7_address_hi, address[\=7-1=\:0]};
assign golden_sub0_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d0) / 12;
assign golden_sub1_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d1) / 12;
assign golden_sub2_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d2) / 12;
assign golden_sub3_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d3) / 12;
assign golden_sub4_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d4) / 12;
assign golden_sub5_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d5) / 12;
assign golden_sub6_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d6) / 12;
assign golden_sub7_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d7) / 12;
assign golden_sub8_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d8) / 12;
assign golden_sub9_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d9) / 12;
assign golden_sub10_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d10) / 12;
assign golden_sub11_div12_offset8_address_hi = (address[51:8] - \=52-8=\'d11) / 12;
assign golden_sub0_div12_offset8_address = {golden_sub0_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub1_div12_offset8_address = {golden_sub1_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub2_div12_offset8_address = {golden_sub2_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub3_div12_offset8_address = {golden_sub3_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub4_div12_offset8_address = {golden_sub4_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub5_div12_offset8_address = {golden_sub5_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub6_div12_offset8_address = {golden_sub6_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub7_div12_offset8_address = {golden_sub7_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub8_div12_offset8_address = {golden_sub8_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub9_div12_offset8_address = {golden_sub9_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub10_div12_offset8_address = {golden_sub10_div12_offset8_address_hi, address[\=8-1=\:0]};
assign golden_sub11_div12_offset8_address = {golden_sub11_div12_offset8_address_hi, address[\=8-1=\:0]};

always @ (posedge clk, negedge reset_n)
if (~reset_n) begin
end else begin
   if (dmi_mod3 == 2'd0) begin
      if (dmi0_address_div_out != golden_sub0_div3_offset6_address) begin
        $display("ERROR! dmi0_address EXPECTED %x ACTUAL %x", golden_sub0_div3_offset6_address, dmi0_address_div_out);
        $finish;
      end
   end
   if (dmi_mod3 == 2'd1) begin
      if (dmi1_address_div_out != golden_sub1_div3_offset6_address) begin
        $display("ERROR! dmi1_address EXPECTED %x ACTUAL %x", golden_sub1_div3_offset6_address, dmi1_address_div_out);
        $finish;
      end
   end
   if (dmi_mod3 == 2'd2) begin
      if (dmi2_address_div_out != golden_sub2_div3_offset6_address) begin
        $display("ERROR! dmi2_address EXPECTED %x ACTUAL %x", golden_sub2_div3_offset6_address, dmi2_address_div_out);
        $finish;
      end
   end
   if (dmi_mod6 == 2'd0) begin
      if (dmi3_address_div_out != golden_sub0_div6_offset7_address) begin
        $display("ERROR! dmi3_address EXPECTED %x ACTUAL %x", golden_sub0_div6_offset7_address, dmi3_address_div_out);
        $finish;
      end
   end
   if (dmi_mod6 == 2'd1) begin
      if (dmi4_address_div_out != golden_sub1_div6_offset7_address) begin
        $display("ERROR! dmi4_address EXPECTED %x ACTUAL %x", golden_sub1_div6_offset7_address, dmi4_address_div_out);
        $finish;
      end
   end
   if (dmi_mod6 == 2'd2) begin
      if (dmi5_address_div_out != golden_sub2_div6_offset7_address) begin
        $display("ERROR! dmi5_address EXPECTED %x ACTUAL %x", golden_sub2_div6_offset7_address, dmi5_address_div_out);
        $finish;
      end
   end
   if (dmi_mod6 == 2'd3) begin
      if (dmi6_address_div_out != golden_sub3_div6_offset7_address) begin
        $display("ERROR! dmi6_address EXPECTED %x ACTUAL %x", golden_sub3_div6_offset7_address, dmi6_address_div_out);
        $finish;
      end
   end
   if (dmi_mod6 == 2'd4) begin
      if (dmi7_address_div_out != golden_sub4_div6_offset7_address) begin
        $display("ERROR! dmi7_address EXPECTED %x ACTUAL %x", golden_sub4_div6_offset7_address, dmi7_address_div_out);
        $finish;
      end
   end
   if (dmi_mod6 == 2'd5) begin
      if (dmi8_address_div_out != golden_sub5_div6_offset7_address) begin
        $display("ERROR! dmi8_address EXPECTED %x ACTUAL %x", golden_sub5_div6_offset7_address, dmi8_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd0) begin
      if (dmi9_address_div_out != golden_sub0_div12_offset8_address) begin
        $display("ERROR! dmi9_address EXPECTED %x ACTUAL %x", golden_sub0_div12_offset8_address, dmi9_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd1) begin
      if (dmi10_address_div_out != golden_sub1_div12_offset8_address) begin
        $display("ERROR! dmi10_address EXPECTED %x ACTUAL %x", golden_sub1_div12_offset8_address, dmi10_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd2) begin
      if (dmi11_address_div_out != golden_sub2_div12_offset8_address) begin
        $display("ERROR! dmi11_address EXPECTED %x ACTUAL %x", golden_sub2_div12_offset8_address, dmi11_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd3) begin
      if (dmi12_address_div_out != golden_sub3_div12_offset8_address) begin
        $display("ERROR! dmi12_address EXPECTED %x ACTUAL %x", golden_sub3_div12_offset8_address, dmi12_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd4) begin
      if (dmi13_address_div_out != golden_sub4_div12_offset8_address) begin
        $display("ERROR! dmi13_address EXPECTED %x ACTUAL %x", golden_sub4_div12_offset8_address, dmi13_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd5) begin
      if (dmi14_address_div_out != golden_sub5_div12_offset8_address) begin
        $display("ERROR! dmi14_address EXPECTED %x ACTUAL %x", golden_sub5_div12_offset8_address, dmi14_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd6) begin
      if (dmi15_address_div_out != golden_sub6_div12_offset8_address) begin
        $display("ERROR! dmi15_address EXPECTED %x ACTUAL %x", golden_sub6_div12_offset8_address, dmi15_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd7) begin
      if (dmi16_address_div_out != golden_sub7_div12_offset8_address) begin
        $display("ERROR! dmi16_address EXPECTED %x ACTUAL %x", golden_sub7_div12_offset8_address, dmi16_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd8) begin
      if (dmi17_address_div_out != golden_sub8_div12_offset8_address) begin
        $display("ERROR! dmi17_address EXPECTED %x ACTUAL %x", golden_sub8_div12_offset8_address, dmi17_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd9) begin
      if (dmi18_address_div_out != golden_sub9_div12_offset8_address) begin
        $display("ERROR! dmi18_address EXPECTED %x ACTUAL %x", golden_sub9_div12_offset8_address, dmi18_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd10) begin
      if (dmi19_address_div_out != golden_sub10_div12_offset8_address) begin
        $display("ERROR! dmi19_address EXPECTED %x ACTUAL %x", golden_sub10_div12_offset8_address, dmi19_address_div_out);
        $finish;
      end
   end
   if (dmi_mod12 == 2'd11) begin
      if (dmi20_address_div_out != golden_sub11_div12_offset8_address) begin
        $display("ERROR! dmi20_address EXPECTED %x ACTUAL %x", golden_sub11_div12_offset8_address, dmi20_address_div_out);
        $finish;
      end
   end
end

endmodule
