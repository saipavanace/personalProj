
//=============================================================================
// Copyright(C) 2023 Arteris, Inc.
// All rights reserved
//=============================================================================
\jsbegin
// Ncore exclusive monitor for non coherent trasnacation. Instanciated in DMI and DII
// Author: Benjamin Madon
//
// Description:
// ============


// Variables

var u = obj.lib;
var utilFunctions = obj.userLib;

//=============================================================================
// Top Level Parameters
//=============================================================================
var params = u.getParam();
\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);


bit clk;
reg reset_n;
reg valid;
reg lock_op;
reg msg_type_load;
reg msg_type_store;
reg [\=params.wAddr-1=\:0] address;
reg [\=params.wmpf2-1=\:0] mpf2;
reg [\=params.wInitiatorId-1=\:0] initiator_id;
reg [\=params.wSecurity-1=\:0] security;
logic result ;
int counter;
wire ex_pass;

int ex_q[int];


logic unit_match,addr_match;

\=u.instance({
    instanceName: 'Ncore_exclusive_monitor_dut',
    moduleName: 'ncore_exclusive_monitor',
    params: params,
    verilogParams: {},
    ports: {
    clk             :"clk",
    reset_n         :"reset_n",
    valid           :"cb.valid",
    lock_op         :"cb.lock_op",
    msg_type_load   :"cb.msg_type_load",
    msg_type_store  :"cb.msg_type_store",
    address         :"cb.address",
    mpf2            :"cb.mpf2",
    initiator_id    :"cb.initiator_id",
    security        :"cb.security",
    ex_pass         :"cb.ex_pass",
    csr_timeout_enable : "0",
    csr_timeout_error_enable : "0",
    csr_timeout_value : "0"
            }
    })=\

//
default clocking cb @(posedge clk);

   input #10 ex_pass;
   output valid,lock_op,msg_type_load,msg_type_store,address,mpf2,initiator_id,security;

endclocking

initial begin
clk=1'b0;
reset_n=1'b0;
#100 reset_n=1'b1;
end
//
    initial begin 



        init();
        //                 addr,mpf,init,security
        #100;
        //simple read write sequence
        exclusive_read(0,1,1,1);
        exclusive_write(0,1,1,1);
        //two read from same initiator followed by two writes
        exclusive_read(0,1,1,1);
        exclusive_read(64,1,1,1);

        exclusive_write(0,1,1,1);
        exclusive_write(64,1,1,1);
        idle();
        //read from different agent to same address followed by the writes
        exclusive_read(0,1,1,1);
        exclusive_read(0,2,1,1);
        exclusive_read(0,3,1,1);
        exclusive_write(0,3,1,1);
        exclusive_write(0,1,1,1);
        exclusive_write(0,2,1,1);

        //read folowed by non exclusive write to the same address

        exclusive_read(0,1,1,1);
        write(0,1,1,1);
        exclusive_write(0,1,1,1);

        //read folowed by non exclusive write to the same cacheline

        exclusive_read(0,1,1,1);
        write(48,1,2,1);
        exclusive_write(0,1,1,1);


         //simple read write sequence with write has different scurity attrobute folowed by the correct one
         exclusive_read(0,1,1,1);
         exclusive_write(0,1,1,0);
         exclusive_write(0,1,1,1);
        @cb;
        $finish();
    end

always #10 clk <= ~clk;




task init( );
    @cb;
    cb.lock_op <=1'b0;     
    cb.msg_type_load<=1'b0;
    cb.msg_type_store<=1'b0;
    cb.address<= \=params.wAddr=\'d0;
    cb.mpf2   <= \=params.wmpf2=\'d0;
    cb.initiator_id <= \=params.wInitiatorId=\'d0;
    cb.security <= \=params.wSecurity=\'d0;  
    cb.valid<=1'b0 ;                           
endtask

task idle( );
    @cb;
    cb.valid<=1'b0;                          
endtask

    task exclusive_read (    input [\=params.wAddr-1=\:0] addr,
                                 input [\=params.wmpf2-1=\:0] mpf,
                                 input [\=params.wInitiatorId-1=\:0] initiator,
                                 input [\=params.wSecurity-1=\:0] securi );

                                 @cb;
                                 cb.lock_op <=1'b1;     
                                 cb.msg_type_load<=1'b1;
                                 cb.msg_type_store<=1'b0;
                                 cb.address<= addr;
                                 cb.mpf2   <= mpf;
                                 cb.initiator_id <= initiator;
                                 cb.security <= securi;  
                                 cb.valid<=1'b1 ;                      
    endtask


    task exclusive_write (    input [\=params.wAddr-1=\:0] addr,
        input [\=params.wmpf2-1=\:0] mpf,
        input [\=params.wInitiatorId-1=\:0] initiator,
        input [\=params.wSecurity-1=\:0] securi );

        @cb;
        cb.lock_op <=1'b1;     
        cb.msg_type_load<=1'b0;
        cb.msg_type_store<=1'b1;
        cb.address<= addr;
        cb.mpf2   <= mpf;
        cb.initiator_id <= initiator;
        cb.security <= securi;   
        cb.valid<=1'b1;
    endtask


task write (    input [\=params.wAddr-1=\:0] addr,
    input [\=params.wmpf2-1=\:0] mpf,
    input [\=params.wInitiatorId-1=\:0] initiator,
    input [\=params.wSecurity-1=\:0] securi );

    @cb;
   cb.lock_op <=1'b0;     
   cb.msg_type_load<=1'b0;
   cb.msg_type_store<=1'b1;
   cb.address<= addr;
   cb.mpf2   <= mpf;
   cb.initiator_id <= initiator;
   cb.security <= securi;  
   cb.valid<=1'b1;   
endtask

task read (    input [\=params.wAddr-1=\:0] addr,
    input [\=params.wmpf2-1=\:0] mpf,
    input [\=params.wInitiatorId-1=\:0] initiator,
    input [\=params.wSecurity-1=\:0] securi );
    @cb;
    cb.lock_op <=1'b0;     
    cb.msg_type_load<=1'b1;
    cb.msg_type_store<=1'b0;
    cb.address<= addr;
    cb.mpf2   <= mpf;
    cb.initiator_id <= initiator;
    cb.security <= securi;   
    cb.valid<=1'b1;
endtask

endmodule

//cd $WORK_TOP
//config= $WORK_TOP/rtl/lib/bringup/exmon_bring_up.json
//tachl-dbg.js -t $WORK_TOP/rtl/lib/src/ncore_exclusive_monitor_tb.tachl -l $WORK_TOP/rtl/chi_aiu/src,$WORK_TOP/rtl/dii/src,$WORK_TOP/rtl/dce/src,$WORK_TOP/rtl/dmi/src,$WORK_TOP/rtl/dve/src,$WORK_TOP/rtl/ioaiu/src,$WORK_TOP/rtl/grb/src,$WORK_TOP/rtl/lib/src,$WORK_TOP/../hw-sym/rtl/apb_init/src,$WORK_TOP/../hw-sym/rtl/apb_targ/src,$WORK_TOP/../hw-sym/rtl/atui/src,$WORK_TOP/../hw-sym/rtl/atut/src,$WORK_TOP/../hw-sym/rtl/axi_init/src,$WORK_TOP/../hw-sym/rtl/axi_targ/src,$WORK_TOP/../hw-sym/rtl/clk_pwr_adapter/src,$WORK_TOP/../hw-sym/rtl/ctl_init/src,$WORK_TOP/../hw-sym/rtl/ctl_targ/src,$WORK_TOP/../hw-sym/rtl/dw_adapter/src,$WORK_TOP/../hw-sym/rtl/lib/src,$WORK_TOP/../hw-sym/rtl/pmon/src,$WORK_TOP/../hw-sym/rtl/smi_depkt/src,$WORK_TOP/../hw-sym/rtl/smi_pkt/src,$WORK_TOP/../hw-sym/rtl/rob/src,$WORK_TOP/../hw-lib/rtl/lib/src,$WORK_TOP/../hw-ccp/rtl/src -j $WORK_TOP/../hw-sym/js/interfaceMapLibs.js,$WORK_TOP/../hw-sym/js/pkt2Smi.js,$WORK_TOP/../hw-sym/js/sym_lib_utils.js,$WORK_TOP/../hw-lib/js/sym_csr_lib.js,$WORK_TOP/../hw-lib/js/lib_utils.js,$WORK_TOP/../hw-lib/js/lib.js,$WORK_TOP/../hw-lib/js/interfaceGenerators.js,$WORK_TOP/../hw-lib/js/bundleFunctions.js -o out -p $config -z $WORK_TOP/../hw-sym/cpr/interface,$WORK_TOP/../hw-lib/cpr/interface,$WORK_TOP/cpr/interface,$WORK_TOP/cpr/concMsg,$WORK_TOP/cpr/tachl,$WORK_TOP/../hw-sym/cpr/packet
//cd out
//cp $WORK_TOP/../hw-lib/verilog/dffre.v
//echo "dffre.v" >> flist.f 
//vlog -sv -f flist.f +acc