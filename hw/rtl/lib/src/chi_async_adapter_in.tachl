//=============================================================================
// Copyright (C) 2018 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
//
// An async adapter
//
// It has two modes
//  1) async = yes
//  2) async = no   // means the clocks are different frequency, but are phase aligned
//
// It uses a ready/valid protocol
// 
//=============================================================================

var u = obj.lib;
var utilFunctions = obj.userLib;
var bundleFunctions = obj.userLib.bundleFunctions;

u.paramDefault('jitterOn', 'int', 0);
u.paramDefault('async', 'boolean', false);
u.paramDefault('depth', 'int', 0);
u.paramDefault('protectionStyle', 'object', null);
u.paramDefault('interfaces', 'object', null);

var i;
var j;
var k;

var jitterOn = utilFunctions.hierGetParam('jitterOn',u.getParam);
var async = utilFunctions.hierGetParam('async',u.getParam);
if (async === 'yes') {async = true;}
if (async === 'no') {async = false;}
var depth = utilFunctions.hierGetParam('depth',u.getParam);
depth = 2*Math.ceil(depth/2);
var exposeValids = 'no';
var exposeNextValids = 'no';
var protectionStyle = utilFunctions.hierGetParam('protectionStyle',u.getParam);
if (protectionStyle === null) {protectionStyle = "";}

var interfaces = utilFunctions.hierGetParam('interfaces',u.getParam);

var clkInterface = {};
var clkInterfaceFunc     = new obj.userLib[interfaces.clkInterface.interface];
clkInterface.signals = clkInterfaceFunc.getSignalsBundle(interfaces.clkInterface.params);
clkInterface.name    = interfaces.clkInterface.name;

var inInterface = {};
var inInterfaceFunc     = new obj.userLib[interfaces.inInterface.interface];
inInterface.signals = inInterfaceFunc.getSignalsBundle(interfaces.inInterface.params);
inInterface.name    = interfaces.inInterface.name;

var asyncInterface = {};
var asyncInterfaceFunc     = new obj.userLib[interfaces.asyncInterface.interface];
asyncInterface.signals = asyncInterfaceFunc.getSignalsBundle(interfaces.asyncInterface.params);
asyncInterface.name    = interfaces.asyncInterface.name;

var protectionInterface = "";

if (protectionStyle !== "") {
  protectionInterface = {};
  var protectionInterfaceFunc     = new obj.userLib[interfaces.protectionInterface.interface];
  protectionInterface.signals = protectionInterfaceFunc.getSignalsBundle(interfaces.protectionInterface.params);
  protectionInterface.name    = interfaces.protectionInterface.name;
}

u.nInterfaces(interfaces);

var in_width = 0;
var in_signals = Object.keys(inInterface.signals);
in_signals.sort();

for (i = 0; i < in_signals.length; i++) {
  if ((in_signals[i] !== 'valid') && (inInterface.signals[in_signals[i]] > 0)) {
    in_width = in_width + inInterface.signals[in_signals[i]];
  }
}

var width     = in_width;
var ptr_width = asyncInterface.signals.write_ptr;

/* istanbul ignore if env ncore_3p0 */
if (depth < 2) {
  console.log("Error: "+u.getModuleName()+" - Depth must be 2 or greater.");
  throw "ERROR - gen_async_adpater_in.tachl";
}\jsend
module \= u.getModuleName()=\ (\=u.getPorts('\n  ')=\); \jsbegin
var names = [];
var name_collision = false;
var int_in_name = '';
name_collision = !utilFunctions.regNameIfNoHit(names,clkInterface.name);
name_collision = name_collision | !utilFunctions.regNameIfNoHit(names,inInterface.name);
name_collision = name_collision | !utilFunctions.regNameIfNoHit(names,asyncInterface.name);
if (protectionStyle !== "") {
  name_collision = name_collision | !utilFunctions.regNameIfNoHit(names,protectionInterface.name);
}
/* istanbul ignore if env ncore_3p0 */
if (name_collision) {
  console.log("Error: "+u.getModuleName()+" - The name of two or more interfaces is the same.");
  throw "ERROR - gen_async_adapter_in.tachl";
}
int_in_name = utilFunctions.getUniqName(names,'int_');\jsend

  wire \=int_in_name=\in_reset;
  wire \=int_in_name=\in_valid;
  wire \=int_in_name=\in_ready;\jsbegin
if (in_width > 1) {\jsend
  wire [\=in_width-1=\:0] \=int_in_name=\in_data;\jsbegin
} else {\jsend
  wire \=int_in_name=\in_data;\jsbegin
}\jsend
  wire [\=depth-1=\:0] \=int_in_name=\write_sel;
  wire [\=depth-1=\:0] \=int_in_name=\read_sel;
  wire [\=asyncInterface.signals.write_ptr-1=\:0] \=int_in_name=\write_ptr;
  wire [\=-asyncInterface.signals.read_ptr-1=\:0] \=int_in_name=\read_ptr;
  wire [\=asyncInterface.signals.data-1=\:0] \=int_in_name=\out_data;

  assign \=int_in_name=\in_reset = 1'b0;
  assign \=int_in_name=\in_valid = \=inInterface.name=\valid;
  assign \=inInterface.name=\ready = \=int_in_name=\in_ready;\jsbegin
var bit_count = in_width;
for (i = 0; i < in_signals.length; i++) {
  if ((in_signals[i] !== 'valid') && (inInterface.signals[in_signals[i]] > 0)) {
    if (inInterface.signals[in_signals[i]] > 1) {\jsend
  assign \=int_in_name=\in_data[\=bit_count-1=\:\=bit_count-inInterface.signals[in_signals[i]]=\] = \=inInterface.name+in_signals[i]=\;\jsbegin
    } else {
      if (in_width > 1) {\jsend
  assign \=int_in_name=\in_data[\=bit_count-1=\] = \=inInterface.name+in_signals[i]=\;\jsbegin
      } else {\jsend
  assign \=int_in_name=\in_data = \=inInterface.name+in_signals[i]=\;\jsbegin
      }
    }
      bit_count = bit_count - inInterface.signals[in_signals[i]];
    }
}\jsend
  assign \=asyncInterface.name=\data = \=int_in_name=\out_data;
  assign \=asyncInterface.name=\write_ptr = \=int_in_name=\write_ptr;
  assign \=int_in_name=\read_ptr = \=asyncInterface.name=\read_ptr;
  assign \=int_in_name=\read_sel = \=asyncInterface.name=\read_sel;
\jsbegin
var asyncFifoWtCtlInterface = utilFunctions.getAsyncFifoWtCtlInterface(depth,async,exposeValids,0,exposeNextValids);
var asyncFifoRegDpInterface = utilFunctions.getAsyncFifoRegDpInterface(width,depth);
if (protectionStyle !== "") {\jsend
  \=u.instance({
    'portsDelimiter': '\n    ',
    'instanceName': 'u_async_fifo_wt_ctl',
    'moduleName':   'async_fifo_wt_ctl',
    'params': {
             'jitterOn'     : jitterOn,
             'depth'        : depth,
             'async'        : async,
             'exposeValids' : exposeValids,
             'exposeNextValids' : exposeNextValids,
             'clkInterface' : clkInterface,
             'protectionStyle'     : protectionStyle,
             'protectionInterface' : protectionInterface},
    'verilogParams': {},
    'interfaces':
      [
        {'modulePrefix' : clkInterface.name,
         'localPrefix'  : clkInterface.name,
         'interface'    : clkInterface.signals},
        {'modulePrefix' : '',
         'localPrefix'  : int_in_name,
         'interface'    : asyncFifoWtCtlInterface},
        {'modulePrefix' : protectionInterface.name,
         'localPrefix'  : protectionInterface.name,
         'interface'    : protectionInterface.signals}],
    'ports': {}
   })=\\jsbegin
} else {\jsend
  \=u.instance({
    'portsDelimiter': '\n    ',
    'instanceName': 'u_async_fifo_wt_ctl',
    'moduleName':   'async_fifo_wt_ctl',
    'params': {
             'jitterOn'     : jitterOn,
             'depth'        : depth,
             'async'        : async,
             'exposeValids' : exposeValids,
             'exposeNextValids' : exposeNextValids,
             'clkInterface' : clkInterface},
    'verilogParams': {},
    'interfaces':
      [
        {'modulePrefix' : clkInterface.name,
         'localPrefix'  : clkInterface.name,
         'interface'    : clkInterface.signals},
        {'modulePrefix' : '',
         'localPrefix'  : int_in_name,
         'interface'    : asyncFifoWtCtlInterface}],
    'ports': {}
   })=\\jsbegin
}\jsend
  \=u.instance({
    'portsDelimiter': '\n    ',
    'instanceName': 'u_async_fifo_reg_dp',
    'moduleName':   'async_fifo_reg_dp',
    'params': {
             'width'        : width,
             'depth'        : depth,
             'clkInterface' : clkInterface},
    'verilogParams': {},
    'interfaces':
      [
        {'modulePrefix' : clkInterface.name,
         'localPrefix'  : clkInterface.name,
         'interface'    : clkInterface.signals},
        {'modulePrefix' : '',
         'localPrefix'  : int_in_name,
          'interface'   : asyncFifoRegDpInterface}],
    'ports': {}
   })=\
endmodule
