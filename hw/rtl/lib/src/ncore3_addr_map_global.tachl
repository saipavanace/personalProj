\jsbegin

var u = obj.lib;

// ============================================================================
// Parameters
// ============================================================================
 
u.paramDefault('RemoteLinkInterleavingObject', 'array', [ [[ []        ,  [[0,1],[2]],[[0,1],[2]],[[0]]  ], 
                                                           [[[0,1],[2]],[]           ,[[0]]       ,[[0,1],[2]]] ,
                                                           [[[0,1],[2]],[[0]]          ,[]         ,[[0,1],[2]]],
                                                           [ [[0]]     ,[[0,1],[2]]  ,[[0,1],[2]],[]] ],
                                                        
                                                           [[ []        ,[[0,1]]  ,[[0,1]] ,[[0,1]] ], 
                                                           [[[0,1]]    ,[]       ,[[0,1]] ,[[0,1]] ],
                                                           [[[0,1]]    ,[[0,1]]  ,[]      ,[[0,1]] ],
                                                           [[[0,1]]    ,[[0,1]]  ,[[0,1]] ,[]] ]
                                                        ]
                                                        );

u.paramDefault('nGPRA', 'int',6)
u.paramDefault("wChipletId","int",2);
u.paramDefault("wAssemblyId","int",3);
u.paramDefault("wSysAddr","int",52);
var wSizeOfIg = 4;
function LinkIdMux(RemoteLinkInterleavingObject,wAssemblyId,wChipletId,wIgId,wSet,wLinkId) {
    var mux = "case ({uId_my_assembly_id,uId_my_chiplet_id,DestinationChipletId,remote_remote_id,set}) \n"
    for (var assembly = 0; assembly < RemoteLinkInterleavingObject.length;assembly++){
         for (var chiplet =0; chiplet < RemoteLinkInterleavingObject[assembly].length;chiplet++){
            for (var destination =0 ; destination < RemoteLinkInterleavingObject[assembly][chiplet].length;destination++){
                    for (var GIUIG = 0 ; GIUIG< RemoteLinkInterleavingObject[assembly][chiplet][destination].length;GIUIG++){
                        for (var set =0; set <RemoteLinkInterleavingObject[assembly][chiplet][destination][GIUIG].length;set++ ){
                            mux+= "\t{"+wAssemblyId+"'d"+assembly+","+wChipletId+"'d"+chiplet+","+wChipletId+"'d"+destination+","+wIgId+"'d"+GIUIG+","+wSet+"'d"+set+"} : linkId =  "+wLinkId+"'d"+RemoteLinkInterleavingObject[assembly][chiplet][destination][GIUIG][set]+";\n";
                        }
                    }
            }
        }
    }
    mux+= "\tdefault : linkId = "+wLinkId+"'d0; \n endcase"
    return mux;
}


function Igsize(RemoteLinkInterleavingObject,wAssemblyId,wChipletId,wIgId,gpra,wSizeOfIg) {
    var mux = "case ({uId_my_assembly_id,uId_my_chiplet_id,GPRAR"+gpra+"_HomeUnitId,GPRAR"+gpra+"_RemoteId})  \n"
    for (var assembly = 0; assembly < RemoteLinkInterleavingObject.length;assembly++){
         for (var chiplet =0; chiplet < RemoteLinkInterleavingObject[assembly].length;chiplet++){
            for (var destination =0 ; destination < RemoteLinkInterleavingObject[assembly][chiplet].length;destination++){
                    for (var GIUIG = 0 ; GIUIG< RemoteLinkInterleavingObject[assembly][chiplet][destination].length;GIUIG++){
                         mux+= "\t{"+wAssemblyId+"'d"+assembly+","+wChipletId+"'d"+chiplet+","+wChipletId+"'d"+destination+","+wIgId+"'d"+GIUIG+"} : gpra"+gpra+"_size_of_ig =  " +wSizeOfIg+"'d"+RemoteLinkInterleavingObject[assembly][chiplet][destination][GIUIG].length +";\n"; 
                    }
            }
        }
    }
    mux+= "\tdefault : gpra"+gpra+"_size_of_ig =  "+wSizeOfIg+"'d0; \n endcase"
    return mux;
}



var p = u.getParam();
var utilFunctions = obj.userLib;

// ============================================================================
// Ports
// ============================================================================

u.port("input","uId_my_chiplet_id",p.wChipletId);
u.port("input","uId_my_assembly_id",p.wAssemblyId);
u.port('input',  'address_valid',   1);
u.port('input',  'address',         p.wSysAddr);
for (var i = 0; i < p.nGPRA; i++) {
    u.port('input',  'GPRAR'+i+'_Valid',      1);
    u.port('input',  'GPRAR'+i+'_HUT',        2);
    u.port('input',  'GPRAR'+i+'_Size',       6);
    u.port('input',  'GPRAR'+i+'_HomeUnitId', 5);
    u.port('input',  'GPRAR'+i+'_RemoteId', 5);
    u.port('input',  'GPRAR'+i+'_Interleaving', 1);
        if (p.usePcieOrder) {
    u.port('input',  'GPRAR'+i+'_Order_Policy', 2);
    u.port('input',  'GPRAR'+i+'_Order_WriteID', 1);
    u.port('input',  'GPRAR'+i+'_Order_ReadID', 1);
    u.port('input',  'GPRAR'+i+'_Order_Hazard', 1);
        }
        if (p.useNc) {
    u.port('input',  'GPRAR'+i+'_NC', 1);
        }
        if (p.useNsx) {
    u.port('input',  'GPRAR'+i+'_NSX', 2);
        }
    //u.port('input',  'GPRAR'+i+'_DIGId',      3);
    u.port('input',  'GPRBAR'+i+'_AddrLo',    32);
    u.port('input',  'GPRBAR'+i+'_AddrHi',    8);
    }

    u.port('input',  'GIUAMIGR_AMIGS',     4);
    u.port('input',  'GIUAMIGR_Valid',     1);
    u.port('input',  'GIUAMIFR_A16WIFId',  3);
    u.port('input',  'GIUAMIFR_A8WIFId',   3);
    u.port('input',  'GIUAMIFR_A4WIFId',   3);
    u.port('input',  'GIUAMIFR_A3WIFId',   3);
    u.port('input',  'GIUAMIFR_A2WIFId',   3);


    u.port('output', 'remote_valid',     1);
    u.port('output', 'remote_dii',     1);
    u.port('output', 'remote_chipletId',     2);
    u.port('output', 'remote_linkId',     2);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

wire [\=p.wChipletId-1 =\ : 0]  DestinationChipletId;
wire remote_interleaving;
wire remote_remote_id;
wire [1: 0] remote_LinkId;
wire [\=wSizeOfIg-1=\:0] gpra_size_of_ig;
reg [1:0] linkId;
wire set;


\js for (var i=0; i < p.nGPRA; i++) {
    reg [\=wSizeOfIg-1=\:0] gpra\=i=\_size_of_ig;
    wire [\=p.wSysAddr-1=\:0] gpra\=i=\_compare_address_lo;
    wire [\=p.wSysAddr-1=\:0] gpra\=i=\_compare_address_hi;
    wire gpra\=i=\_region_hit;
    \=u.instance({
        instanceName: 'u_gpra'+i+'_compare_address',
        moduleName: 'ncore3_addr_map_compare',
        params: {},
        verilogParams: {},
        ports: {
            Valid           : 'GPRAR'+i+'_Valid',
            HUT             : 'GPRAR'+i+'_Interleaving',
            SizeOfIG        : 'gpra'+i+'_size_of_ig',
            Size            : 'GPRAR'+i+'_Size',
            BAR_AddrLo      : 'GPRBAR'+i+'_AddrLo',
            BAR_AddrHi      : 'GPRBAR'+i+'_AddrHi',
            address         : 'address',
            region_hit      : 'gpra'+i+'_region_hit',
            compare_addr_lo : 'gpra'+i+'_compare_address_lo',
            compare_addr_hi : 'gpra'+i+'_compare_address_hi'
        }
    })=\

always@(*) begin
\=Igsize(p.RemoteLinkInterleavingObject,p.wAssemblyId,p.wChipletId,2,i,wSizeOfIg)=\
end

\js }
assign remote_LinkId = linkId & remote_interleaving | ~remote_interleaving & remote_remote_id;




assign remote_valid =   GPRAR0_HUT[0] & gpra0_region_hit
                            \jsbegin    
                                for (var gprar =1;gprar < p.nGPRA ; gprar++){
                            \jsend
                            | GPRAR\=gprar=\_HUT[0] & gpra\=gprar=\_region_hit
                            \jsbegin
                            }
                            \jsend
                            ;

assign remote_dii =   GPRAR0_HUT[1] & gpra0_region_hit
                            \jsbegin    
                                for (var gprar =1;gprar < p.nGPRA ; gprar++){
                            \jsend
                            | GPRAR\=gprar=\_HUT[1] & gpra\=gprar=\_region_hit
                            \jsbegin
                            }
                            \jsend
                            ;

assign remote_interleaving =   GPRAR0_Interleaving & gpra0_region_hit
                            \jsbegin    
                                for (var gprar =1;gprar < p.nGPRA ; gprar++){
                            \jsend
                            | GPRAR\=gprar=\_Interleaving & gpra\=gprar=\_region_hit
                            \jsbegin
                            }
                            \jsend
                            ;

assign remote_chipletId =   GPRAR0_HomeUnitId & {\=p.wChipletId=\{gpra0_region_hit}}
                            \jsbegin    
                                for (var gprar =1;gprar < p.nGPRA ; gprar++){
                            \jsend
                            | GPRAR\=gprar=\_HomeUnitId & {\=p.wChipletId=\{gpra\=gprar=\_region_hit}}
                        \jsbegin
                        }
                        \jsend
                            ;

assign remote_remote_id =   GPRAR0_RemoteId & {\=wSizeOfIg=\{gpra0_region_hit}}
                                \jsbegin    
                                    for (var gprar =1;gprar < p.nGPRA ; gprar++){
                                \jsend
                                | GPRAR\=gprar=\_RemoteId & {\=wSizeOfIg=\{gpra\=gprar=\_region_hit}}
                            \jsbegin
                            }
                            \jsend
                                ;


assign gpra_size_of_ig = gpra0_size_of_ig & {\=wSizeOfIg=\{gpra0_region_hit}}
                            \jsbegin    
                                for (var gpra =1;gpra < p.nGPRA ; gpra++){
                            \jsend
                            | gpra\=gpra=\_size_of_ig & {\=wSizeOfIg=\{gpra\=gpra=\_region_hit}}
                            \jsbegin
                            }
                            \jsend
                            ;


always@(*) begin
\=LinkIdMux(p.RemoteLinkInterleavingObject,p.wAssemblyId,p.wChipletId,2,2,2,2)=\
end
wire f2_giu_id_offset_sel ;
wire f3_giu_id_offset_sel ;
wire f4_giu_id_offset_sel ;
wire f8_giu_id_offset_sel ;
wire f16_giu_id_offset_sel ;

wire [4:0] f2_giu_id_offset;
wire [4:0] f3_giu_id_offset;
wire [4:0] f4_giu_id_offset;
wire [4:0] f8_giu_id_offset;
wire [4:0] f16_giu_id_offset;

\=u.instance({
    instanceName: 'u_ncore3_addr_map_ifn',
    moduleName: 'ncore3_addr_map_ifn',
    params : {
                 wSysAddr           : p.wSysAddr,
                 unit2WIFV          : p["giu2WIFV"],
                 unit3WIFV          : p["giu3WIFV"],
                 unit4WIFV          : p["giu4WIFV"],
                 unit8WIFV          : p["giu8WIFV"],
                 unit16WIFV         : p["giu16WIFV"],
             },
    verilogParams: {},
    ports: {
               address             : 'address',
               AMIFR_A16WIFId      : 'GIUAMIFR_A16WIFId',
               AMIFR_A8WIFId       : 'GIUAMIFR_A8WIFId',
               AMIFR_A4WIFId       : 'GIUAMIFR_A4WIFId',
               AMIFR_A3WIFId       : 'GIUAMIFR_A3WIFId',
               AMIFR_A2WIFId       : 'GIUAMIFR_A2WIFId',
               f2_unit_id_offset   : 'f2_giu_id_offset',
               f3_unit_id_offset   : 'f3_giu_id_offset',
               f4_unit_id_offset   : 'f4_giu_id_offset',
               f8_unit_id_offset   : 'f8_giu_id_offset',
               f16_unit_id_offset  : 'f16_giu_id_offset',
           },
    portsDelimiter: '\n    '
})=\




assign f2_giu_id_offset_sel = (gpra_size_of_ig == 4'b0001);
assign f3_giu_id_offset_sel = (gpra_size_of_ig == 4'b0010);
assign f4_giu_id_offset_sel = (gpra_size_of_ig == 4'b0011);
assign f8_giu_id_offset_sel = (gpra_size_of_ig == 4'b0111);
assign f16_giu_id_offset_sel= (gpra_size_of_ig == 4'b1111);

assign set =                ( f2_giu_id_offset & {5{f2_giu_id_offset_sel}} )
                          | ( f3_giu_id_offset & {5{f3_giu_id_offset_sel}} )
                          | ( f4_giu_id_offset & {5{f4_giu_id_offset_sel}} )
                          | ( f8_giu_id_offset & {5{f8_giu_id_offset_sel}} )
                          | ( f16_giu_id_offset & {5{f16_giu_id_offset_sel}} )
                          ;

endmodule