//============================================================================
// Copyright (C) 2019 Arteris, Inc.
// All rights reserved.
//=============================================================================
\jsbegin
//=============================================================================

var u = obj.lib;
var utilFunctions = obj.userLib;
var bundleFunctions = obj.userLib.bundleFunctions;
var newToOldStyleInterface	= utilFunctions.newToOldStyleInterface.bind( null, obj.userLib );

// Function that returns wire declarations of an old-style interface (with properties 'name' and 'signals')
function declareWiresOldStyleInterface ( oldStyleInterface ) {
	return bundleFunctions.wiresFromInterface(oldStyleInterface.name, oldStyleInterface.signals, [], obj.lib.bundle);
}


// Function that returns wire declarations of a new-style interface
function declareWiresNewStyleInterface ( newStyleInterface ) {
	const oldStyleInterface		= newToOldStyleInterface( newStyleInterface );
	const flatOldInterface		= utilFunctions.flattenInterface ( oldStyleInterface );
	return declareWiresOldStyleInterface( flatOldInterface );
}


u.paramDefault('jitterOn', 'int', 0);
u.paramDefault('async', 'boolean', true);
u.paramDefault('syncDepth', 'int', 2);
u.paramDefault('nCHIReqInFlight', 'int', 15);

u.paramDefault('protectionStyle', 'object', null);
u.paramDefault('interfaces', 'object', null);

var jitterOn = utilFunctions.hierGetParam('jitterOn',u.getParam);
var async = utilFunctions.hierGetParam('async',u.getParam);
var syncDepth = utilFunctions.hierGetParam('syncDepth',u.getParam);
var exposeValids = 'no';
var protectionStyle = utilFunctions.hierGetParam('protectionStyle',u.getParam);
var interfaces = utilFunctions.hierGetParam('interfaces',u.getParam);
var inParams = Object.assign({'wRdy': 1, 'wlcrdv': 0, 'wVld' : 1}, interfaces.inInterface.params);
var inParams_lcrdv = Object.assign({'wRdy': 1,'wlcrdv': 1, 'wVld' : 1}, interfaces.inInterface.params);
var nCHIReqInFlight = utilFunctions.hierGetParam('nCHIReqInFlight', u.getParam);
var reqcredits =  nCHIReqInFlight + 1;
var wReqflit   =  interfaces.inInterface.params.wReqflit;
var wRspflit   =  interfaces.inInterface.params.wRspflit;
var wDatflit   =  interfaces.inInterface.params.wDatflit;
var wSnpflit   =  interfaces.inInterface.params.wSnpflit;


// Copy common interface objects

let inClkInterface = Object.assign({}, interfaces.inClkInterface);
let outClkInterface = Object.assign({}, interfaces.outClkInterface);
let inProtectionInterface = Object.assign({}, interfaces.inProtectionInterface);
let outProtectionInterface = Object.assign({}, interfaces.outProtectionInterface);

//============================================//
// create reqFlit in and out interface for flitv, flit and pend
//============================================//

let reqFlitInterface = {};
reqFlitInterface.inClkInterface = inClkInterface;
reqFlitInterface.outClkInterface = outClkInterface;
reqFlitInterface.inProtectionInterface = inProtectionInterface;
reqFlitInterface.outProtectionInterface = outProtectionInterface;

reqFlitInterface.inInterface = {
  name: interfaces.inInterface.name + 'rx_req_',
  interface: 'REQ', 
  params: inParams,
  direction: interfaces.inInterface.direction
};
reqFlitInterface.outInterface = {
  name: interfaces.outInterface.name + 'rx_req_',
  interface: 'REQ',
  params: inParams,
  direction: interfaces.outInterface.direction
};

let reqFlitInterface_int = {};
reqFlitInterface_int.inClkInterface = inClkInterface;
reqFlitInterface_int.outClkInterface = outClkInterface;
reqFlitInterface_int.inProtectionInterface = inProtectionInterface;
reqFlitInterface_int.outProtectionInterface = outProtectionInterface;

reqFlitInterface_int.inInterface = {
  name: interfaces.inInterface.name + 'rx_req_',
  interface: 'REQ',
  params: inParams,
  direction: interfaces.inInterface.direction
};
reqFlitInterface_int.outInterface = {
  name: 'int_' + interfaces.outInterface.name + 'rx_req_',
  interface: 'REQ',
  params: inParams,
  direction: interfaces.outInterface.direction
};

let reqFlitInterface_lcrdv = {};
reqFlitInterface_lcrdv.inClkInterface = outClkInterface;
reqFlitInterface_lcrdv.outClkInterface = inClkInterface;
reqFlitInterface_lcrdv.inProtectionInterface = inProtectionInterface;
reqFlitInterface_lcrdv.outProtectionInterface = outProtectionInterface;

reqFlitInterface_lcrdv.inInterface = {
  name: interfaces.outInterface.name + 'rx_req_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave' 
};
reqFlitInterface_lcrdv.outInterface = {
  name: interfaces.inInterface.name + 'rx_req_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master' 
};

let reqFlitInterface_lcrdv_int = {};
reqFlitInterface_lcrdv_int.inClkInterface = outClkInterface;
reqFlitInterface_lcrdv_int.outClkInterface = inClkInterface;
reqFlitInterface_lcrdv_int.inProtectionInterface = inProtectionInterface;
reqFlitInterface_lcrdv_int.outProtectionInterface = outProtectionInterface;

reqFlitInterface_lcrdv_int.inInterface = {
  name: interfaces.outInterface.name + 'rx_req_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave'
};
reqFlitInterface_lcrdv_int.outInterface = {
  name: 'int_' + interfaces.inInterface.name + 'rx_req_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};

//============================================//
// create rxrspFlit in and out interface
//============================================//

let rxrspFlitInterface = {};
rxrspFlitInterface.inClkInterface = inClkInterface;
rxrspFlitInterface.outClkInterface = outClkInterface;
rxrspFlitInterface.inProtectionInterface = inProtectionInterface;
rxrspFlitInterface.outProtectionInterface = outProtectionInterface;

rxrspFlitInterface.inInterface = {
  name: interfaces.inInterface.name + 'rx_rsp_',
  interface: 'RXRSP',
  params: inParams,
  direction: interfaces.inInterface.direction
};

rxrspFlitInterface.outInterface = {
  name: interfaces.outInterface.name + 'rx_rsp_',
  interface: 'RXRSP',
  params: inParams,
  direction: interfaces.outInterface.direction
};

let rxrspFlitInterface_int = {};
rxrspFlitInterface_int.inClkInterface = inClkInterface;
rxrspFlitInterface_int.outClkInterface = outClkInterface;
rxrspFlitInterface_int.inProtectionInterface = inProtectionInterface;
rxrspFlitInterface_int.outProtectionInterface = outProtectionInterface;

rxrspFlitInterface_int.inInterface = {
  name: interfaces.inInterface.name + 'rx_rsp_',
  interface: 'RXRSP',
  params: inParams,
  direction: interfaces.inInterface.direction
};

rxrspFlitInterface_int.outInterface = {
  name: 'int_' + interfaces.outInterface.name + 'rx_rsp_',
  interface: 'RXRSP',
  params: inParams,
  direction: interfaces.outInterface.direction
};

let rxrspFlitInterface_lcrdv = {};
rxrspFlitInterface_lcrdv.inClkInterface = outClkInterface;
rxrspFlitInterface_lcrdv.outClkInterface = inClkInterface;
rxrspFlitInterface_lcrdv.inProtectionInterface = inProtectionInterface;
rxrspFlitInterface_lcrdv.outProtectionInterface = outProtectionInterface;

rxrspFlitInterface_lcrdv.inInterface = {
  name: interfaces.outInterface.name + 'rx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave' 
};

rxrspFlitInterface_lcrdv.outInterface = {
  name: interfaces.inInterface.name + 'rx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};

let rxrspFlitInterface_lcrdv_int = {};
rxrspFlitInterface_lcrdv_int.inClkInterface = outClkInterface;
rxrspFlitInterface_lcrdv_int.outClkInterface = inClkInterface;
rxrspFlitInterface_lcrdv_int.inProtectionInterface = inProtectionInterface;
rxrspFlitInterface_lcrdv_int.outProtectionInterface = outProtectionInterface;

rxrspFlitInterface_lcrdv_int.inInterface = {
  name: interfaces.outInterface.name + 'rx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave'
};

rxrspFlitInterface_lcrdv_int.outInterface = {
  name: 'int_' +  interfaces.inInterface.name + 'rx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};

//============================================//
// create rxdatFlit in and out interface
//============================================//

let rxdatFlitInterface = {};
rxdatFlitInterface.inClkInterface = inClkInterface;
rxdatFlitInterface.outClkInterface = outClkInterface;
rxdatFlitInterface.inProtectionInterface = inProtectionInterface;
rxdatFlitInterface.outProtectionInterface = outProtectionInterface;
rxdatFlitInterface.inInterface = {
  name: interfaces.inInterface.name + 'rx_dat_',
  interface: 'RXDAT',
  params: inParams,
  direction: interfaces.inInterface.direction
};
rxdatFlitInterface.outInterface = {
  name: interfaces.outInterface.name + 'rx_dat_',
  interface: 'RXDAT',
  params: inParams,
  direction: interfaces.outInterface.direction
};

let rxdatFlitInterface_int = {};
rxdatFlitInterface_int.inClkInterface = inClkInterface;
rxdatFlitInterface_int.outClkInterface = outClkInterface;
rxdatFlitInterface_int.inProtectionInterface = inProtectionInterface;
rxdatFlitInterface_int.outProtectionInterface = outProtectionInterface;

rxdatFlitInterface_int.inInterface = {
  name: interfaces.inInterface.name + 'rx_dat_',
  interface: 'RXDAT',
  params: inParams,
  direction: interfaces.inInterface.direction
};
rxdatFlitInterface_int.outInterface = {
  name: 'int_' + interfaces.outInterface.name + 'rx_dat_',
  interface: 'RXDAT',
  params: inParams,
  direction: interfaces.outInterface.direction
};

let rxdatFlitInterface_lcrdv = {};
rxdatFlitInterface_lcrdv.inClkInterface = outClkInterface;
rxdatFlitInterface_lcrdv.outClkInterface = inClkInterface;
rxdatFlitInterface_lcrdv.inProtectionInterface = inProtectionInterface;
rxdatFlitInterface_lcrdv.outProtectionInterface = outProtectionInterface;

rxdatFlitInterface_lcrdv.inInterface = {
  name: interfaces.outInterface.name + 'rx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave' 
};

rxdatFlitInterface_lcrdv.outInterface = {
  name: interfaces.inInterface.name + 'rx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master' 
};

let rxdatFlitInterface_lcrdv_int = {};
rxdatFlitInterface_lcrdv_int.inClkInterface = outClkInterface;
rxdatFlitInterface_lcrdv_int.outClkInterface = inClkInterface;
rxdatFlitInterface_lcrdv_int.inProtectionInterface = inProtectionInterface;
rxdatFlitInterface_lcrdv_int.outProtectionInterface = outProtectionInterface;

rxdatFlitInterface_lcrdv_int.inInterface = {
  name: interfaces.outInterface.name + 'rx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave'
};

rxdatFlitInterface_lcrdv_int.outInterface = {
  name: 'int_' + interfaces.inInterface.name + 'rx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};

//============================================//
// create txsnpFlit in and out interface
//============================================//

let txsnpFlitInterface = {};
txsnpFlitInterface.inClkInterface = outClkInterface;
txsnpFlitInterface.outClkInterface = inClkInterface;
txsnpFlitInterface.inProtectionInterface = inProtectionInterface;
txsnpFlitInterface.outProtectionInterface = outProtectionInterface;
txsnpFlitInterface.inInterface = {
  name: interfaces.outInterface.name + 'tx_snp_',
  interface: 'SNP',
  params: inParams,
  direction: 'slave' 
};
txsnpFlitInterface.outInterface = {
  name: interfaces.inInterface.name + 'tx_snp_',
  interface: 'SNP',
  params: inParams,
  direction: 'master' 
};

let txsnpFlitInterface_int = {};
txsnpFlitInterface_int.inClkInterface = outClkInterface;
txsnpFlitInterface_int.outClkInterface = inClkInterface;
txsnpFlitInterface_int.inProtectionInterface = inProtectionInterface;
txsnpFlitInterface_int.outProtectionInterface = outProtectionInterface;
txsnpFlitInterface_int.inInterface = {
  name: interfaces.outInterface.name + 'tx_snp_',
  interface: 'SNP',
  params: inParams,
  direction: 'slave'
};
txsnpFlitInterface_int.outInterface = {
  name: 'int_' + interfaces.inInterface.name + 'tx_snp_',
  interface: 'SNP',
  params: inParams,
  direction: 'master'
};

let txsnpFlitInterface_lcrdv = {};
txsnpFlitInterface_lcrdv.inClkInterface = inClkInterface;
txsnpFlitInterface_lcrdv.outClkInterface = outClkInterface;
txsnpFlitInterface_lcrdv.inProtectionInterface = inProtectionInterface;
txsnpFlitInterface_lcrdv.outProtectionInterface = outProtectionInterface;

txsnpFlitInterface_lcrdv.inInterface = {
  name: interfaces.inInterface.name + 'tx_snp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave' 
};

txsnpFlitInterface_lcrdv.outInterface = {
  name: interfaces.outInterface.name + 'tx_snp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master' 
};

let txsnpFlitInterface_lcrdv_int = {};
txsnpFlitInterface_lcrdv_int.inClkInterface = inClkInterface;
txsnpFlitInterface_lcrdv_int.outClkInterface = outClkInterface;
txsnpFlitInterface_lcrdv_int.inProtectionInterface = inProtectionInterface;
txsnpFlitInterface_lcrdv_int.outProtectionInterface = outProtectionInterface;

txsnpFlitInterface_lcrdv_int.inInterface = {
  name: interfaces.inInterface.name + 'tx_snp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave'
};

txsnpFlitInterface_lcrdv_int.outInterface = {
  name: 'int_' + interfaces.outInterface.name + 'tx_snp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};


//============================================//
// create txrspFlit in and out interface
//============================================//

let txrspFlitInterface = {};
txrspFlitInterface.inClkInterface = outClkInterface;
txrspFlitInterface.outClkInterface = inClkInterface;
txrspFlitInterface.inProtectionInterface = inProtectionInterface;
txrspFlitInterface.outProtectionInterface = outProtectionInterface;
txrspFlitInterface.inInterface = {
  name: interfaces.outInterface.name + 'tx_rsp_',
  interface: 'TXRSP',
  params: inParams,
  direction: 'slave' 
};
txrspFlitInterface.outInterface = {
  name: interfaces.inInterface.name + 'tx_rsp_',
  interface: 'TXRSP',
  params: inParams,
  direction: 'master' 
};

let txrspFlitInterface_int = {};
txrspFlitInterface_int.inClkInterface = outClkInterface;
txrspFlitInterface_int.outClkInterface = inClkInterface;
txrspFlitInterface_int.inProtectionInterface = inProtectionInterface;
txrspFlitInterface_int.outProtectionInterface = outProtectionInterface;
txrspFlitInterface_int.inInterface = {
  name: interfaces.outInterface.name + 'tx_rsp_',
  interface: 'TXRSP',
  params: inParams,
  direction: 'slave'
};
txrspFlitInterface_int.outInterface = {
  name: 'int_' + interfaces.inInterface.name + 'tx_rsp_',
  interface: 'TXRSP',
  params: inParams,
  direction: 'master'
};

let txrspFlitInterface_lcrdv = {};
txrspFlitInterface_lcrdv.inClkInterface = inClkInterface;
txrspFlitInterface_lcrdv.outClkInterface = outClkInterface;
txrspFlitInterface_lcrdv.inProtectionInterface = inProtectionInterface;
txrspFlitInterface_lcrdv.outProtectionInterface = outProtectionInterface;

txrspFlitInterface_lcrdv.inInterface = {
  name: interfaces.inInterface.name + 'tx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave' 
};

txrspFlitInterface_lcrdv.outInterface = {
  name: interfaces.outInterface.name + 'tx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master' 
};

let txrspFlitInterface_lcrdv_int = {};
txrspFlitInterface_lcrdv_int.inClkInterface = inClkInterface;
txrspFlitInterface_lcrdv_int.outClkInterface = outClkInterface;
txrspFlitInterface_lcrdv_int.inProtectionInterface = inProtectionInterface;
txrspFlitInterface_lcrdv_int.outProtectionInterface = outProtectionInterface;

txrspFlitInterface_lcrdv_int.inInterface = {
  name: interfaces.inInterface.name + 'tx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave'
};

txrspFlitInterface_lcrdv_int.outInterface = {
  name: 'int_' +  interfaces.outInterface.name + 'tx_rsp_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};

//============================================//
// create txdatFlit in and out interface
//============================================//

let txdatFlitInterface = {};
txdatFlitInterface.inClkInterface = outClkInterface;
txdatFlitInterface.outClkInterface = inClkInterface;
txdatFlitInterface.inProtectionInterface = inProtectionInterface;
txdatFlitInterface.outProtectionInterface = outProtectionInterface;
txdatFlitInterface.inInterface = {
  name: interfaces.outInterface.name + 'tx_dat_',
  interface: 'TXDAT',
  params: inParams,
  direction: 'slave' 
};
txdatFlitInterface.outInterface = {
  name: interfaces.inInterface.name + 'tx_dat_',
  interface: 'TXDAT',
  params: inParams,
  direction: 'master' 
};

let txdatFlitInterface_int = {};
txdatFlitInterface_int.inClkInterface = outClkInterface;
txdatFlitInterface_int.outClkInterface = inClkInterface;
txdatFlitInterface_int.inProtectionInterface = inProtectionInterface;
txdatFlitInterface_int.outProtectionInterface = outProtectionInterface;

txdatFlitInterface_int.inInterface = {
  name: interfaces.outInterface.name + 'tx_dat_',
  interface: 'TXDAT',
  params: inParams,
  direction: 'slave'
};
txdatFlitInterface_int.outInterface = {
  name: 'int_' + interfaces.inInterface.name + 'tx_dat_',
  interface: 'TXDAT',
  params: inParams,
  direction: 'master'
};

let txdatFlitInterface_lcrdv = {};
txdatFlitInterface_lcrdv.inClkInterface = inClkInterface;
txdatFlitInterface_lcrdv.outClkInterface = outClkInterface;
txdatFlitInterface_lcrdv.inProtectionInterface = inProtectionInterface;
txdatFlitInterface_lcrdv.outProtectionInterface = outProtectionInterface;

txdatFlitInterface_lcrdv.inInterface = {
  name: interfaces.inInterface.name + 'tx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave' 
};

txdatFlitInterface_lcrdv.outInterface = {
  name: interfaces.outInterface.name + 'tx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master' 
};

let txdatFlitInterface_lcrdv_int = {};
txdatFlitInterface_lcrdv_int.inClkInterface = inClkInterface;
txdatFlitInterface_lcrdv_int.outClkInterface = outClkInterface;
txdatFlitInterface_lcrdv_int.inProtectionInterface = inProtectionInterface;
txdatFlitInterface_lcrdv_int.outProtectionInterface = outProtectionInterface;

txdatFlitInterface_lcrdv_int.inInterface = {
  name: interfaces.inInterface.name + 'tx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'slave'
};

txdatFlitInterface_lcrdv_int.outInterface = {
  name: 'int_' + interfaces.outInterface.name + 'tx_dat_lc',
  interface: 'LCRDV',
  params: inParams_lcrdv,
  direction: 'master'
};

inInterfaceFunc     = new obj.userLib[txdatFlitInterface.inInterface.interface];
outInterfaceFunc     = new obj.userLib[txdatFlitInterface.outInterface.interface];
// Creating bundle for txdat flit temporary for now
var txdatflitBundle = inInterfaceFunc.getSignalsBundle(txdatFlitInterface.inInterface.params);

inInterfaceFunc     = new obj.userLib[txdatFlitInterface_lcrdv.inInterface.interface];
outInterfaceFunc     = new obj.userLib[txdatFlitInterface_lcrdv.outInterface.interface];
// Creating bundle for txdat flit temporary for now
var txdatflitlcrdvBundle = inInterfaceFunc.getSignalsBundle(txdatFlitInterface_lcrdv.inInterface.params);

//============================================//
// create txlinkFlit in and out interface
//============================================//

//TODO: Instance not created as instance expects a width 2 or greater

let txlinkFlitInterface = {};
txlinkFlitInterface.inClkInterface = inClkInterface;
txlinkFlitInterface.outClkInterface = outClkInterface;
txlinkFlitInterface.inProtectionInterface = inProtectionInterface;
txlinkFlitInterface.outProtectionInterface = outProtectionInterface;
txlinkFlitInterface.inInterface = {
  name: interfaces.inInterface.name + 'tx_link_',
  interface: 'TXLNK',
  params: interfaces.outInterface.params,
  direction: interfaces.outInterface.direction
};
txlinkFlitInterface.outInterface = {
  name: interfaces.outInterface.name + 'tx_link_',
  interface: 'TXLNK',
  params: interfaces.inInterface.params,
  direction: interfaces.inInterface.direction
};

inInterfaceFunc     = new obj.userLib[txlinkFlitInterface.inInterface.interface];
outInterfaceFunc     = new obj.userLib[txlinkFlitInterface.outInterface.interface];
// Creating bundle for txlink flit temporary for now
var txlinkflitBundle = inInterfaceFunc.getSignalsBundle(txlinkFlitInterface.inInterface.params);

var txlinkFlitInterface_int = {};
txlinkFlitInterface_int.inClkInterface = outClkInterface;
txlinkFlitInterface_int.outClkInterface = inClkInterface;
txlinkFlitInterface_int.inProtectionInterface = inProtectionInterface;
txlinkFlitInterface_int.outProtectionInterface = outProtectionInterface;

txlinkFlitInterface_int.inInterface = {
  name: interfaces.outInterface.name + 'tx_link_',
  interface: 'InterfaceGenReqAck',
  params: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? {wAck: 1, wReqData: 1, wAckData: 1} : {wAck: 1, wReqData: 0, wAckData: 0},
  direction: 'slave'
};

txlinkFlitInterface_int.outInterface = {
  name: interfaces.inInterface.name + 'tx_link_',
  interface: 'InterfaceGenReqAck',
  params: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? {wAck: 1, wReqData: 1, wAckData: 1} : {wAck: 1, wReqData: 0, wAckData: 0},
  direction: 'master'
};


//============================================//
// create rxlinkFlit in and out interface
//============================================//

//TODO: Instance not created as instance expects a width 2 or greater

let rxlinkFlitInterface = {};
rxlinkFlitInterface.inClkInterface = inClkInterface;
rxlinkFlitInterface.outClkInterface = outClkInterface;
rxlinkFlitInterface.inProtectionInterface = inProtectionInterface;
rxlinkFlitInterface.outProtectionInterface = outProtectionInterface;
rxlinkFlitInterface.inInterface = {
  name: interfaces.inInterface.name + 'rx_link_',
  interface: 'RXLNK',
  params: interfaces.inInterface.params,
  direction: interfaces.inInterface.direction
};
rxlinkFlitInterface.outInterface = {
  name: interfaces.outInterface.name + 'rx_link_',
  interface: 'RXLNK',
  params: interfaces.outInterface.params,
  direction: interfaces.outInterface.direction
};

inInterfaceFunc     = new obj.userLib[rxlinkFlitInterface.inInterface.interface];
outInterfaceFunc     = new obj.userLib[rxlinkFlitInterface.outInterface.interface];
// Creating bundle for rxlink flit temporary for now
var rxlinkflitBundle = inInterfaceFunc.getSignalsBundle(rxlinkFlitInterface.inInterface.params);

var rxlinkFlitInterface_int = {};
rxlinkFlitInterface_int.inClkInterface = inClkInterface;
rxlinkFlitInterface_int.outClkInterface = outClkInterface;
rxlinkFlitInterface_int.inProtectionInterface = inProtectionInterface;
rxlinkFlitInterface_int.outProtectionInterface = outProtectionInterface;

rxlinkFlitInterface_int.inInterface = {
  name: interfaces.inInterface.name + 'rx_link_',
  interface: 'InterfaceGenReqAck',
  params: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? {wAck: 1, wReqData: 1, wAckData: 1} : {wAck: 1, wReqData: 0, wAckData: 0},
  direction: 'slave'
};

rxlinkFlitInterface_int.outInterface = {
  name: 'int_' +  interfaces.outInterface.name + 'rx_link_',
  interface: 'InterfaceGenReqAck',
  params: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? {wAck: 1, wReqData: 1, wAckData: 1} : {wAck: 1, wReqData: 0, wAckData: 0},
  direction: 'master'
};

//============================================//
// create tx_s_active in and out interface
//============================================//

let txSActiveInterface = {};
txSActiveInterface.inClkInterface = inClkInterface;
txSActiveInterface.outClkInterface = outClkInterface;
txSActiveInterface.inProtectionInterface = inProtectionInterface;
txSActiveInterface.outProtectionInterface = outProtectionInterface;
txSActiveInterface.inInterface = {
  name: interfaces.inInterface.name + 'tx_',
  interface: 'TXSACTIVE',
  params: interfaces.outInterface.params,
  direction: interfaces.outInterface.direction
};
txSActiveInterface.outInterface = {
  name: interfaces.outInterface.name + 'tx_',
  interface: 'TXSACTIVE',
  params: interfaces.inInterface.params,
  direction: interfaces.inInterface.direction
};

inInterfaceFunc     = new obj.userLib[txSActiveInterface.inInterface.interface];
outInterfaceFunc    = new obj.userLib[txSActiveInterface.outInterface.interface];

var txSActiveBundle = inInterfaceFunc.getSignalsBundle(txSActiveInterface.inInterface.params);

var txSActiveInterface_int = {};
txSActiveInterface_int.inClkInterface = outClkInterface;
txSActiveInterface_int.outClkInterface = inClkInterface;
txSActiveInterface_int.inProtectionInterface = inProtectionInterface;
txSActiveInterface_int.outProtectionInterface = outProtectionInterface;

txSActiveInterface_int.inInterface = {
  name: interfaces.outInterface.name + 'tx_',
  interface: 'InterfaceGenReqAck',
  params: {wAck: 0, wReqData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0, wAckData:0},
  direction: 'slave'
};

txSActiveInterface_int.outInterface = {
  name: interfaces.inInterface.name + 'tx_',
  interface: 'InterfaceGenReqAck',
  params: {wAck: 0, wReqData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0, wAckData:0},
  direction: 'master'
};

//============================================//
// create rx_s_active in and out interface
//============================================//

let rxSActiveInterface = {};
rxSActiveInterface.inClkInterface = inClkInterface;
rxSActiveInterface.outClkInterface = outClkInterface;
rxSActiveInterface.inProtectionInterface = inProtectionInterface;
rxSActiveInterface.outProtectionInterface = outProtectionInterface;
rxSActiveInterface.inInterface = {
  name: interfaces.inInterface.name + 'rx_',
  interface: 'RXSACTIVE',
  params: interfaces.inInterface.params,
  direction: interfaces.inInterface.direction
};
rxSActiveInterface.outInterface = {
  name: interfaces.outInterface.name + 'rx_',
  interface: 'RXSACTIVE',
  params: interfaces.outInterface.params,
  direction: interfaces.outInterface.direction
};

inInterfaceFunc     = new obj.userLib[rxSActiveInterface.inInterface.interface];
outInterfaceFunc    = new obj.userLib[rxSActiveInterface.outInterface.interface];

var rxSActiveBundle = inInterfaceFunc.getSignalsBundle(rxSActiveInterface.inInterface.params);

var rxSActiveInterface_int = {};
rxSActiveInterface_int.inClkInterface = inClkInterface;
rxSActiveInterface_int.outClkInterface = outClkInterface;
rxSActiveInterface_int.inProtectionInterface = inProtectionInterface;
rxSActiveInterface_int.outProtectionInterface = outProtectionInterface;

rxSActiveInterface_int.inInterface = {
  name: interfaces.inInterface.name + 'rx_',
  interface: 'InterfaceGenReqAck',
  params: {wAck: 0, wReqData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0, wAckData:0},
  direction: 'slave'
};

rxSActiveInterface_int.outInterface = {
  name: interfaces.outInterface.name + 'rx_',
  interface: 'InterfaceGenReqAck',
  params: {wAck: 0, wReqData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0, wAckData:0},
  direction: 'master'
};

//============================================//
// create rxSysCo in and out interface
//============================================//

let rxSysCoInterface = {};
rxSysCoInterface.inClkInterface = inClkInterface;
rxSysCoInterface.outClkInterface = outClkInterface;
rxSysCoInterface.inProtectionInterface = inProtectionInterface;
rxSysCoInterface.outProtectionInterface = outProtectionInterface;
rxSysCoInterface.inInterface = {
  name: interfaces.inInterface.name + 'sysco_',
  interface: 'SYSCO',
  params: interfaces.inInterface.params,
  direction: interfaces.inInterface.direction
};
rxSysCoInterface.outInterface = {
  name: interfaces.outInterface.name + 'sysco_',
  interface: 'SYSCO',
  params: interfaces.outInterface.params,
  direction: interfaces.outInterface.direction
};

inInterfaceFunc   = new obj.userLib[rxSysCoInterface.inInterface.interface];
outInterfaceFunc  = new obj.userLib[rxSysCoInterface.outInterface.interface];

var rxSysCoBundle = inInterfaceFunc.getSignalsBundle(rxSysCoInterface.inInterface.params);

var rxSysCoInterface_int = {};
rxSysCoInterface_int.inClkInterface = inClkInterface;
rxSysCoInterface_int.outClkInterface = outClkInterface;
rxSysCoInterface_int.inProtectionInterface = inProtectionInterface;
rxSysCoInterface_int.outProtectionInterface = outProtectionInterface;

rxSysCoInterface_int.inInterface = {
  name: 'int_' + interfaces.inInterface.name + 'sysco_',
  interface: 'InterfaceGenReqAck',
  params: {wAck: 1, wReqData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0, wAckData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0},
  direction: 'slave'
};

rxSysCoInterface_int.outInterface = {
  name: 'int_' +  interfaces.outInterface.name + 'sysco_',
  interface: 'InterfaceGenReqAck',
  params: {wAck: 1, wReqData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0, wAckData: interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL' ? 1 : 0},
  direction: 'master'
};

//============================================//
// create interface for chi async top
//============================================//

var topInterface = {};

topInterface.inClk = inClkInterface;
topInterface.outClk = outClkInterface;
topInterface.inProt = inProtectionInterface;
topInterface.outProt = outProtectionInterface;

topInterface.reqIn =  reqFlitInterface.inInterface;
topInterface.reqOut = reqFlitInterface.outInterface;

topInterface.reqLcIn = reqFlitInterface_lcrdv.inInterface;
topInterface.reqLcOut = reqFlitInterface_lcrdv.outInterface;

topInterface.rxrspIn = rxrspFlitInterface.inInterface;
topInterface.rxrspOut = rxrspFlitInterface.outInterface;

topInterface.rxrspLcIn = rxrspFlitInterface_lcrdv.inInterface;
topInterface.rxrspLcOut = rxrspFlitInterface_lcrdv.outInterface;

topInterface.rxdatIn = rxdatFlitInterface.inInterface;
topInterface.rxdatOut = rxdatFlitInterface.outInterface;

topInterface.rxdatLcIn = rxdatFlitInterface_lcrdv.inInterface;
topInterface.rxdatLcOut = rxdatFlitInterface_lcrdv.outInterface;

topInterface.txsnpIn = txsnpFlitInterface.inInterface;
topInterface.txsnpOut = txsnpFlitInterface.outInterface;

topInterface.txsnpLcIn = txsnpFlitInterface_lcrdv.inInterface;
topInterface.txsnpLcOut = txsnpFlitInterface_lcrdv.outInterface;

topInterface.txrspIn = txrspFlitInterface.inInterface;
topInterface.txrspOut = txrspFlitInterface.outInterface;

topInterface.txrspLcIn = txrspFlitInterface_lcrdv.inInterface;
topInterface.txrspLcOut = txrspFlitInterface_lcrdv.outInterface;

topInterface.txdatIn = txdatFlitInterface.inInterface;
topInterface.txdatOut = txdatFlitInterface.outInterface;

topInterface.txdatLcIn = txdatFlitInterface_lcrdv.inInterface;
topInterface.txdatLcOut = txdatFlitInterface_lcrdv.outInterface;

topInterface.txlinkIn  = txlinkFlitInterface.inInterface;
topInterface.txlinkOut = txlinkFlitInterface.outInterface;

topInterface.rxlinkIn  = rxlinkFlitInterface.inInterface;
topInterface.rxlinkOut = rxlinkFlitInterface.outInterface;

u.nInterfaces(interfaces);


\jsend
module \= u.getModuleName()=\ (\=u.getPorts('\n  ')=\);

wire \=topInterface['reqIn'].name=\ready;
wire \=topInterface['rxrspIn'].name=\ready;
wire \=topInterface['rxdatIn'].name=\ready;
wire \=topInterface['txsnpIn'].name=\ready;
wire \=topInterface['txrspIn'].name=\ready;
wire \=topInterface['txdatIn'].name=\ready;
wire \=topInterface['reqLcIn'].name=\ready;
wire \=topInterface['rxrspLcIn'].name=\ready;
wire \=topInterface['rxdatLcIn'].name=\ready;
wire \=topInterface['txsnpLcIn'].name=\ready;
wire \=topInterface['txrspLcIn'].name=\ready;
wire \=topInterface['txdatLcIn'].name=\ready;

wire int_\=topInterface['reqLcOut'].name=\rdv;
wire int_\=topInterface['reqLcOut'].name=\valid;
wire int_\=topInterface['reqLcOut'].name=\ready;
wire int_\=topInterface['rxrspLcOut'].name=\rdv;
wire int_\=topInterface['rxrspLcOut'].name=\valid;
wire int_\=topInterface['rxrspLcOut'].name=\ready;
wire int_\=topInterface['rxdatLcOut'].name=\rdv;
wire int_\=topInterface['rxdatLcOut'].name=\valid;
wire int_\=topInterface['rxdatLcOut'].name=\ready;
wire int_\=topInterface['txsnpLcOut'].name=\rdv;
wire int_\=topInterface['txsnpLcOut'].name=\valid;
wire int_\=topInterface['txsnpLcOut'].name=\ready;
wire int_\=topInterface['txrspLcOut'].name=\rdv;
wire int_\=topInterface['txrspLcOut'].name=\valid;
wire int_\=topInterface['txrspLcOut'].name=\ready;
wire int_\=topInterface['txdatLcOut'].name=\rdv;
wire int_\=topInterface['txdatLcOut'].name=\valid;
wire int_\=topInterface['txdatLcOut'].name=\ready;
wire int_\=topInterface['reqOut'].name=\flitv;
wire int_\=topInterface['reqOut'].name=\valid;
wire int_\=topInterface['reqOut'].name=\ready;
wire int_\=topInterface['reqOut'].name=\flit_pend;
wire int_\=topInterface['rxrspOut'].name=\flitv;
wire int_\=topInterface['rxrspOut'].name=\valid;
wire int_\=topInterface['rxrspOut'].name=\ready;
wire int_\=topInterface['rxrspOut'].name=\flit_pend;
wire int_\=topInterface['rxdatOut'].name=\flitv;
wire int_\=topInterface['rxdatOut'].name=\valid;
wire int_\=topInterface['rxdatOut'].name=\ready;
wire int_\=topInterface['rxdatOut'].name=\flit_pend;
wire int_\=topInterface['txsnpOut'].name=\flitv;
wire int_\=topInterface['txsnpOut'].name=\valid;
wire int_\=topInterface['txsnpOut'].name=\ready;
wire int_\=topInterface['txsnpOut'].name=\flit_pend;
wire int_\=topInterface['txrspOut'].name=\flitv;
wire int_\=topInterface['txrspOut'].name=\valid;
wire int_\=topInterface['txrspOut'].name=\ready;
wire int_\=topInterface['txrspOut'].name=\flit_pend;
wire int_\=topInterface['txdatOut'].name=\flitv;
wire int_\=topInterface['txdatOut'].name=\valid;
wire int_\=topInterface['txdatOut'].name=\ready;
wire int_\=topInterface['txdatOut'].name=\flit_pend;
wire [\=wReqflit=\-1:0] int_\=topInterface['reqOut'].name=\flit;
wire [\=wRspflit=\-1:0] int_\=topInterface['rxrspOut'].name=\flit;
wire [\=wDatflit=\-1:0] int_\=topInterface['rxdatOut'].name=\flit;
wire [\=wSnpflit=\-1:0] int_\=topInterface['txsnpOut'].name=\flit;
wire [\=wRspflit=\-1:0] int_\=topInterface['txrspOut'].name=\flit;
wire [\=wDatflit=\-1:0] int_\=topInterface['txdatOut'].name=\flit; \jsbegin

if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
wire [\=Math.ceil(wReqflit/8)=\-1:0] int_\=topInterface['reqOut'].name=\flit_chk;
wire int_\=topInterface['reqOut'].name=\flitv_chk;
wire int_\=topInterface['reqOut'].name=\flit_pend_chk;
wire [\=Math.ceil(wRspflit/8)=\-1:0] int_\=topInterface['rxrspOut'].name=\flit_chk;
wire int_\=topInterface['rxrspOut'].name=\flitv_chk;
wire int_\=topInterface['rxrspOut'].name=\flit_pend_chk;
wire [\=Math.ceil(wDatflit/8)=\-1:0] int_\=topInterface['rxdatOut'].name=\flit_chk;
wire int_\=topInterface['rxdatOut'].name=\flitv_chk;
wire int_\=topInterface['rxdatOut'].name=\flit_pend_chk;
wire [\=Math.ceil(wSnpflit/8)=\-1:0] int_\=topInterface['txsnpOut'].name=\flit_chk;
wire int_\=topInterface['txsnpOut'].name=\flitv_chk;
wire int_\=topInterface['txsnpOut'].name=\flit_pend_chk;
wire [\=Math.ceil(wRspflit/8)=\-1:0] int_\=topInterface['txrspOut'].name=\flit_chk;
wire int_\=topInterface['txrspOut'].name=\flitv_chk;
wire int_\=topInterface['txrspOut'].name=\flit_pend_chk;
wire [\=Math.ceil(wDatflit/8)=\-1:0] int_\=topInterface['txdatOut'].name=\flit_chk;
wire int_\=topInterface['txdatOut'].name=\flitv_chk;
wire int_\=topInterface['txdatOut'].name=\flit_pend_chk;

wire int_\=topInterface['reqLcOut'].name=\rdv_chk;
wire int_\=topInterface['rxrspLcOut'].name=\rdv_chk;
wire int_\=topInterface['rxdatLcOut'].name=\rdv_chk;
wire int_\=topInterface['txsnpLcOut'].name=\rdv_chk;
wire int_\=topInterface['txrspLcOut'].name=\rdv_chk;
wire int_\=topInterface['txdatLcOut'].name=\rdv_chk;

\jsbegin
} \jsend

\=declareWiresNewStyleInterface( rxlinkFlitInterface_int.inInterface )=\
\=declareWiresNewStyleInterface( txlinkFlitInterface_int.inInterface  )=\
\=declareWiresNewStyleInterface( rxlinkFlitInterface_int.outInterface )=\
\=declareWiresNewStyleInterface( txlinkFlitInterface_int.outInterface  )=\
\=declareWiresNewStyleInterface( rxSActiveInterface_int.inInterface )=\
\=declareWiresNewStyleInterface( txSActiveInterface_int.inInterface  )=\
\=declareWiresNewStyleInterface( rxSActiveInterface_int.outInterface )=\
\=declareWiresNewStyleInterface( txSActiveInterface_int.outInterface  )=\
\=declareWiresNewStyleInterface( rxSysCoInterface_int.inInterface )=\
\=declareWiresNewStyleInterface( rxSysCoInterface_int.outInterface )=\

wire \=reqFlitInterface.inClkInterface.name=\sync_reset_n;
wire \=reqFlitInterface.outClkInterface.name=\sync_reset_n;


\=u.instance({
   instanceName: 'u_in_rx_clk_sync_reset_n',
   moduleName:   'chi_aiu_sync_reset',
   params: {
       'depth' : syncDepth,
   },
   ports: {
       clk      : reqFlitInterface.inClkInterface.name+'clk',
       reset_n  : reqFlitInterface.inClkInterface.name+'reset_n',
       sync_reset_n : reqFlitInterface.inClkInterface.name+'sync_reset_n'
    }
})=\

\=u.instance({
   instanceName: 'u_out_tx_clk_sync_reset_n',
   moduleName:   'chi_aiu_sync_reset',
   params: {
       'depth' : syncDepth,
   },
   ports: {
       clk      : reqFlitInterface.outClkInterface.name+'clk',
       reset_n  : reqFlitInterface.outClkInterface.name+'reset_n',
       sync_reset_n : reqFlitInterface.outClkInterface.name+'sync_reset_n'
    }
})=\

\jsbegin
	['reqIn', 'rxrspIn', 'rxdatIn', 'txsnpIn', 'txrspIn', 'txdatIn'].forEach(function(key){ 
\jsend
wire \=topInterface[key].name=\valid; \jsbegin

  if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
assign \=topInterface[key].name=\valid        = \=topInterface[key].name=\flitv | ~\=topInterface[key].name=\flitv_chk; \jsbegin
  } else { \jsend
assign \=topInterface[key].name=\valid        = \=topInterface[key].name=\flitv; \jsbegin
  }

});
\jsend

\jsbegin
['reqOut', 'rxrspOut', 'rxdatOut', 'txsnpOut', 'txrspOut', 'txdatOut'].forEach(function(key){ \jsend
assign int_\=topInterface[key].name=\ready = 1'b1;
assign \=topInterface[key].name=\flit = int_\=topInterface[key].name=\flit;
assign \=topInterface[key].name=\flitv = int_\=topInterface[key].name=\valid; \jsbegin

  if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
assign \=topInterface[key].name=\flit_chk = int_\=topInterface[key].name=\flit_chk;
assign \=topInterface[key].name=\flitv_chk = int_\=topInterface[key].name=\valid ? int_\=topInterface[key].name=\flitv_chk : 1'b1; \jsbegin
  }
});

['reqOut', 'rxrspOut', 'rxdatOut'].forEach(function(key){ \jsend
assign \=topInterface[key].name=\flit_pend = \=reqFlitInterface.outClkInterface.name=\sync_reset_n; \jsbegin

  if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
assign \=topInterface[key].name=\flit_pend_chk = ~\=reqFlitInterface.outClkInterface.name=\sync_reset_n; \jsbegin
  }
});

['txsnpOut', 'txrspOut', 'txdatOut'].forEach(function(key){ \jsend
assign \=topInterface[key].name=\flit_pend = \=reqFlitInterface.inClkInterface.name=\sync_reset_n; \jsbegin

  if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
assign \=topInterface[key].name=\flit_pend_chk = ~\=reqFlitInterface.inClkInterface.name=\sync_reset_n; \jsbegin
  }
});

['reqLcIn', 'rxrspLcIn', 'rxdatLcIn', 'txsnpLcIn', 'txrspLcIn', 'txdatLcIn'].forEach(function(key){
\jsend
wire \=topInterface[key].name=\valid; \jsbegin

  if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
assign \=topInterface[key].name=\valid = \=topInterface[key].name=\rdv | ~\=topInterface[key].name=\rdv_chk; \jsbegin
  } else { \jsend
assign \=topInterface[key].name=\valid = \=topInterface[key].name=\rdv; \jsbegin
  }

});
\jsend

\jsbegin
        ['reqLcOut', 'rxrspLcOut', 'rxdatLcOut', 'txsnpLcOut', 'txrspLcOut', 'txdatLcOut'].forEach(function(key){
\jsend
assign int_\=topInterface[key].name=\ready = 1'b1;
assign \=topInterface[key].name=\rdv       = int_\=topInterface[key].name=\valid; \jsbegin

if(interfaces.inInterface.params.checkType === 'ODD_PARITY_BYTE_ALL') { \jsend
assign \=topInterface[key].name=\rdv_chk   = int_\=topInterface[key].name=\valid ? int_\=topInterface[key].name=\rdv_chk : 1'b1; \jsbegin
}
});
\jsend


assign \=txlinkFlitInterface_int.inInterface.name=\req            = \=interfaces.outInterface.name=\tx_link_active_req;
assign \=txlinkFlitInterface_int.outInterface.name=\ack           = \=interfaces.inInterface.name=\tx_link_active_ack;
assign \=interfaces.outInterface.name=\tx_link_active_ack         = \=txlinkFlitInterface_int.inInterface.name=\ack;
assign \=interfaces.inInterface.name=\tx_link_active_req          = \=txlinkFlitInterface_int.outInterface.name=\req;

\jsbegin
if(txlinkFlitInterface_int.inInterface.params.wReqData) { \jsend
assign \=txlinkFlitInterface_int.inInterface.name=\req_data       = ~\=interfaces.outInterface.name=\tx_link_active_req_chk;
assign \=interfaces.inInterface.name=\tx_link_active_req_chk      = ~\=txlinkFlitInterface_int.outInterface.name=\req_data; \jsbegin

}

if(txlinkFlitInterface_int.inInterface.params.wAckData) { \jsend
assign \=txlinkFlitInterface_int.outInterface.name=\ack_data      = ~\=interfaces.inInterface.name=\tx_link_active_ack_chk;
assign \=interfaces.outInterface.name=\tx_link_active_ack_chk     = ~\=txlinkFlitInterface_int.inInterface.name=\ack_data; \jsbegin

} \jsend



\=u.nInstance({
      instanceName: 'chi_tx_link_async_adapter',
      moduleName: 'gen_req_ack_async_adapter',
      params: {
    		jitterOn: jitterOn,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces: txlinkFlitInterface_int 
	},
	interfaceObj: {
        	interfaces: txlinkFlitInterface_int,
        	prefixes: txlinkFlitInterface_int 
	}})=\


assign \=rxlinkFlitInterface_int.inInterface.name=\req            = \=interfaces.inInterface.name=\rx_link_active_req;
assign \=rxlinkFlitInterface_int.outInterface.name=\ack           = \=interfaces.outInterface.name=\rx_link_active_ack;
assign \=interfaces.inInterface.name=\rx_link_active_ack          = \=rxlinkFlitInterface_int.inInterface.name=\ack;
assign \=interfaces.outInterface.name=\rx_link_active_req         = \=rxlinkFlitInterface_int.outInterface.name=\req;

\jsbegin
if(rxlinkFlitInterface_int.inInterface.params.wReqData) { \jsend
assign \=rxlinkFlitInterface_int.inInterface.name=\req_data       = ~\=interfaces.inInterface.name=\rx_link_active_req_chk;
assign \=interfaces.outInterface.name=\rx_link_active_req_chk     = ~\=rxlinkFlitInterface_int.outInterface.name=\req_data; \jsbegin

}

if(rxlinkFlitInterface_int.inInterface.params.wAckData) { \jsend
assign \=rxlinkFlitInterface_int.outInterface.name=\ack_data      = ~\=interfaces.outInterface.name=\rx_link_active_ack_chk;
assign \=interfaces.inInterface.name=\rx_link_active_ack_chk      = ~\=rxlinkFlitInterface_int.inInterface.name=\ack_data; \jsbegin

} \jsend


\=u.nInstance({
      instanceName: 'chi_rx_link_async_adapter',
      moduleName: 'gen_req_ack_async_adapter',
      params: {
    		jitterOn: jitterOn,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces: rxlinkFlitInterface_int 
	},
	interfaceObj: {
        	interfaces: rxlinkFlitInterface_int,
        	prefixes: rxlinkFlitInterface_int 
	}})=\


assign \=txSActiveInterface_int.inInterface.name=\req            = \=interfaces.outInterface.name=\tx_sactive;
assign \=interfaces.inInterface.name=\tx_sactive                 = \=txSActiveInterface_int.outInterface.name=\req;

\jsbegin
if(txSActiveInterface_int.inInterface.params.wReqData) { \jsend
assign \=txSActiveInterface_int.inInterface.name=\req_data       = ~\=interfaces.outInterface.name=\tx_sactive_chk;
assign \=interfaces.inInterface.name=\tx_sactive_chk             = ~\=txSActiveInterface_int.outInterface.name=\req_data; \jsbegin

} \jsend

\=u.nInstance({
      instanceName: 'chi_tx_sactive_async_adapter',
      moduleName: 'gen_req_ack_async_adapter',
      params: {
    		jitterOn: jitterOn,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces: txSActiveInterface_int 
	},
	interfaceObj: {
        	interfaces: txSActiveInterface_int,
        	prefixes: txSActiveInterface_int 
	}})=\


assign \=rxSActiveInterface_int.inInterface.name=\req            = \=interfaces.inInterface.name=\rx_sactive;
assign \=interfaces.outInterface.name=\rx_sactive                 = \=rxSActiveInterface_int.outInterface.name=\req;

\jsbegin
if(rxSActiveInterface_int.inInterface.params.wReqData) { \jsend
assign \=rxSActiveInterface_int.inInterface.name=\req_data       = ~\=interfaces.inInterface.name=\rx_sactive_chk;
assign \=interfaces.outInterface.name=\rx_sactive_chk             = ~\=rxSActiveInterface_int.outInterface.name=\req_data; \jsbegin

} \jsend

\=u.nInstance({
      instanceName: 'chi_rx_sactive_async_adapter',
      moduleName: 'gen_req_ack_async_adapter',
      params: {
    		jitterOn: jitterOn,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces: rxSActiveInterface_int 
	},
	interfaceObj: {
        	interfaces: rxSActiveInterface_int,
        	prefixes: rxSActiveInterface_int 
	}})=\


assign \=rxSysCoInterface_int.inInterface.name=\req            = \=interfaces.inInterface.name=\sysco_req;
assign \=rxSysCoInterface_int.outInterface.name=\ack           = \=interfaces.outInterface.name=\sysco_ack;
assign \=interfaces.inInterface.name=\sysco_ack          = \=rxSysCoInterface_int.inInterface.name=\ack;
assign \=interfaces.outInterface.name=\sysco_req         = \=rxSysCoInterface_int.outInterface.name=\req;

\jsbegin
if(rxSysCoInterface_int.inInterface.params.wReqData) { \jsend
assign \=rxSysCoInterface_int.inInterface.name=\req_data       = ~\=interfaces.inInterface.name=\sysco_req_chk;
assign \=interfaces.outInterface.name=\sysco_req_chk     = ~\=rxSysCoInterface_int.outInterface.name=\req_data; \jsbegin

}

if(rxSysCoInterface_int.inInterface.params.wAckData) { \jsend
assign \=rxSysCoInterface_int.outInterface.name=\ack_data      = ~\=interfaces.outInterface.name=\sysco_ack_chk;
assign \=interfaces.inInterface.name=\sysco_ack_chk      = ~\=rxSysCoInterface_int.inInterface.name=\ack_data; \jsbegin

} \jsend


\=u.nInstance({
      instanceName: 'chi_rx_sysco_async_adapter',
      moduleName: 'gen_req_ack_async_adapter',
      params: {
    		jitterOn: jitterOn,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces: rxSysCoInterface_int 
	},
	interfaceObj: {
        	interfaces: rxSysCoInterface_int,
        	prefixes: rxSysCoInterface_int 
	}})=\



\=u.nInstance({
      instanceName: 'chi_req_lcrdv_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
    		jitterOn: jitterOn,
    		width: 5,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces:  reqFlitInterface_lcrdv_int
	},
	interfaceObj: {
        	interfaces: reqFlitInterface_lcrdv_int,
        	prefixes: reqFlitInterface_lcrdv_int
	}})=\

\=u.nInstance({
      instanceName: 'chi_req_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
    		width: 5,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
  		interfaces:  reqFlitInterface_int
         } ,
      interfaceObj: {
        interfaces: reqFlitInterface_int,
        prefixes: reqFlitInterface_int}})=\

\=u.nInstance({
      instanceName: 'chi_rxrsp_lcrdv_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces : rxrspFlitInterface_lcrdv_int
} ,
      interfaceObj: {
        interfaces: rxrspFlitInterface_lcrdv_int,
        prefixes: rxrspFlitInterface_lcrdv_int}})=\

\=u.nInstance({
      instanceName: 'chi_rxrsp_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
    		width: 3,
    		depth: reqcredits+2,
    		syncDepth: syncDepth,
    		async: async,
    		protectionStyle: protectionStyle,
    		interfaces:  rxrspFlitInterface_int
              } ,
      interfaceObj: {
        interfaces: rxrspFlitInterface_int,
        prefixes: rxrspFlitInterface_int}})=\

\=u.nInstance({
      instanceName: 'chi_rxdat_lcrdv_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces : rxdatFlitInterface_lcrdv_int
              },
      interfaceObj: {
        interfaces: rxdatFlitInterface_lcrdv_int,
        prefixes: rxdatFlitInterface_lcrdv_int}})=\

\=u.nInstance({
      instanceName: 'chi_rxdat_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces : rxdatFlitInterface_int
              },
      interfaceObj: {
        interfaces: rxdatFlitInterface_int,
        prefixes: rxdatFlitInterface_int}})=\

\=u.nInstance({
      instanceName: 'chi_txsnp_lcrdv_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 7,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces : txsnpFlitInterface_lcrdv_int
              },
        interfaceObj: {
        interfaces: txsnpFlitInterface_lcrdv_int,
        prefixes: txsnpFlitInterface_lcrdv_int}})=\


\=u.nInstance({
      instanceName: 'chi_txsnp_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 7,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces : txsnpFlitInterface_int
              },
      interfaceObj: {
        interfaces: txsnpFlitInterface_int,
        prefixes: txsnpFlitInterface_int}})=\

\=u.nInstance({
      instanceName: 'chi_txrsp_lcrdv_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces: txrspFlitInterface_lcrdv_int
              },
      interfaceObj: {
        interfaces:  txrspFlitInterface_lcrdv_int,
        prefixes: txrspFlitInterface_lcrdv_int}})=\

\=u.nInstance({
      instanceName: 'chi_txrsp_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces: txrspFlitInterface_int
              },
        interfaceObj: {
        interfaces:  txrspFlitInterface_int,
        prefixes: txrspFlitInterface_int}})=\

\=u.nInstance({
      instanceName: 'chi_txdat_lcrdv_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces: txdatFlitInterface_lcrdv_int
              },
      interfaceObj: {
        interfaces: txdatFlitInterface_lcrdv_int,
        prefixes: txdatFlitInterface_lcrdv_int}})=\

\=u.nInstance({
      instanceName: 'chi_txdat_async_adapter',
      moduleName: 'gen_async_adapter',
      params: {
                jitterOn: jitterOn,
                width: 3,
                depth: reqcredits+2,
    		syncDepth: syncDepth,
                async: async,
                protectionStyle: protectionStyle,
                interfaces: txdatFlitInterface_int
              },
      interfaceObj: {
        interfaces: txdatFlitInterface_int,
        prefixes: txdatFlitInterface_int}})=\

endmodule
