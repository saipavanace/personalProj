\jsbegin
//=============================================================================
// Copyright(C) 2021 Arteris, Inc.
// All rights reserved
//=============================================================================
// Sys.Event Receiver
//
// Author: Boon Chuan
//
// Descriptions:
//
// The Sys.Event Receiver has the following transaction flow:
// SysReq.Event -> assert EventOut.Req
//              -> wait for EventOut.Ack assertion
//              -> deassert EventOut.Req
//              -> wait for EventOut.Ack deassertion
//              -> issue SysRsp as response
// 
// The Sys.Event Receiver comprises:
//   an input queue (depth = one entry per messaging agent),
//   a response generator,
//   a scheduler, and
//   a finite state machine (as event generator for EventOut handshake signaling).
//
// Note that the SysReq messages can arrive faster than the EventOut handshake signaling.
// In other words, source rate can be faster than the sink rate. The scheduler can
// aggregate multiple arriving messages within a certain time period, and to ensure
// every arriving SysReq message is responded with a SysRsp message.
//=============================================================================
\jsend

\jsbegin

var u = obj.lib;

var log2ceil = function(n) { return Math.ceil(Math.log(n)/Math.LN2); };

//=============================================================================
// Parameters
//=============================================================================

var wFUnitId                = u.getParam('wFUnitId');
var wMessageId              = u.getParam('wMessageId');
var wSysReqOp               = u.getParam('wSysReqOp');
var wEventTimeout           = u.getParam('wEventTimeout');
var nEventAgentsForReceiver = u.getParam('nEventAgentsForReceiver');
var useSysEvtBroadcaster = u.getParam('useSysEvtBroadcaster');


var nEntries           = nEventAgentsForReceiver;
var wEntries           = log2ceil(nEntries + 1);
var wSysReqFifo        = wFUnitId + wMessageId + 8 + 1;
var wSysRspFifo        = wFUnitId + wMessageId + 8;

//=============================================================================
// Ports
//=============================================================================

// Clock interface
u.port('input',  'clk',      1);
u.port('input',  'reset_n',  1);
u.port('output', 'evt_receiver_busy',  1);

// CSR interface
u.port('input',  'csr_sys_evt_receiver_enable', 1);
u.port('input',  'csr_event_timeout_value', wEventTimeout);
u.port('output', 'csr_sys_evt_receiver_err_vld', 1);
u.port('output', 'csr_sys_evt_receiver_err_event_timeout', 1);
u.port('output', 'csr_sys_evt_receiver_err_f_unit_id', wFUnitId);

// Input SysReq interface
u.port('input',  'sysreq_valid', 1);
u.port('output', 'sysreq_ready', 1);
u.port('input',  'sysreq_initiator_f_unit_id', wFUnitId);
u.port('input',  'sysreq_message_id', wMessageId);
u.port('input',  'sysreq_cmstatus', 8);
u.port('input',  'sysreq_op', wSysReqOp); // 0=NOP 1=Attach 2=Detach 3=Event

// Output SysRsp interface
u.port('output', 'sysrsp_valid', 1);
u.port('input',  'sysrsp_ready', 1);
u.port('output', 'sysrsp_target_f_unit_id', wFUnitId);
u.port('output', 'sysrsp_rmessage_id', wMessageId);
u.port('output', 'sysrsp_cmstatus', 8);

// Output Event interface
u.port('output', 'event_out_req', 1);
u.port('input',  'event_out_ack', 1);
u.port('output', 'event_out_initiator_id', wFUnitId);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

wire dff_enable = 1'b1;

wire [2:0] ST_IDLE    = 3'b000;
wire [2:0] ST_SETEV   = 3'b001;
wire [2:0] ST_WFA     = 3'b010;
wire [2:0] ST_CLREV   = 3'b011;
wire [2:0] ST_DONE    = 3'b100;

reg  [2:0] next_state;
wire [2:0] state;

wire state_is_IDLE;
wire state_is_SETEV;
wire state_is_WFA;
wire state_is_CLREV;
wire state_is_DONE;

wire next_state_is_IDLE;
wire next_state_is_SETEV;
wire next_state_is_WFA;
wire next_state_is_CLREV;
wire next_state_is_DONE;

wire event_out_req_set;
wire event_out_req_clr;
wire event_out_req_en;
wire event_out_req_in;

wire event_timeout;

wire [\=wEventTimeout-1=\:0] event_timeout_counter;
wire [\=wEventTimeout-1=\:0] event_timeout_counter_in;
wire event_timeout_counter_en;
wire event_timeout_counter_clr;
wire event_timeout_counter_incr;

wire next_state_is_IDLE_or_DONE;
wire state_was_IDLE_or_DONE;

wire sysreq_fifo__push_valid;
wire sysreq_fifo__push_ready;
wire [\=wSysReqFifo-1=\:0] sysreq_fifo__push_data;
wire [\=wSysReqFifo-1=\:0] sysreq_fifo__pop_data;
wire sysreq_fifo__pop_valid;
wire sysreq_fifo__pop_ready;

wire sysrsp_fifo__push_valid;
wire sysrsp_fifo__push_ready;
wire [\=wSysRspFifo-1=\:0] sysrsp_fifo__push_data;
wire [\=wSysRspFifo-1=\:0] sysrsp_fifo__pop_data;
wire sysrsp_fifo__pop_valid;
wire sysrsp_fifo__pop_ready;

wire [\=wFUnitId-1=\:0] target_f_unit_id;
wire [\=wMessageId-1=\:0] rmessage_id;
wire [7:0] cmstatus;
wire [7:0] cmstatus_mod;

wire cmstatus_arrival_err;
wire cmstatus_timeout;
wire cmstatus_busy;
wire cmstatus_disabled;

wire cmstatus_err_vld;

\jsbegin
//=============================================================================
// Input Queue for SysReq interface
//=============================================================================
\jsend

\jsbegin
    var sysreqFifoParams = {
        width       : wSysReqFifo,
        depth       : nEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_sysreq_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'sysreq_fifo__push_data',
        push_valid          : 'sysreq_fifo__push_valid',
        push_ready          : 'sysreq_fifo__push_ready',
        pop_data            : 'sysreq_fifo__pop_data',
        pop_valid           : 'sysreq_fifo__pop_valid',
        pop_ready           : 'sysreq_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'sysreq_fifo',
        moduleName: 'fifo',
        params : sysreqFifoParams,
        verilogParams: {},
        ports: instance_ports_for_sysreq_fifo,
        portsDelimiter: '\n    '
    })=\

assign sysreq_fifo__push_valid = sysreq_valid;

assign sysreq_ready = sysreq_fifo__push_ready;

assign sysreq_fifo__push_data = { next_state_is_IDLE_or_DONE, sysreq_cmstatus, sysreq_message_id, sysreq_initiator_f_unit_id };

assign { state_was_IDLE_or_DONE, cmstatus, rmessage_id, target_f_unit_id } = sysreq_fifo__pop_data;

assign event_out_initiator_id = target_f_unit_id;

\jsbegin 
//=============================================================================
// Scheduler
//=============================================================================
\jsend

assign sysreq_fifo__pop_ready = sysrsp_fifo__push_valid & sysrsp_fifo__push_ready;

assign sysrsp_fifo__push_valid = state_is_DONE & sysreq_fifo__pop_valid;

assign sysrsp_fifo__push_data = { cmstatus_mod, rmessage_id, target_f_unit_id };

\jsbegin
//=============================================================================
// Event Generator for Event interface
//=============================================================================
\jsend

always @(*)
case (state)
    ST_IDLE  : next_state = sysreq_fifo__pop_valid & state_was_IDLE_or_DONE & csr_sys_evt_receiver_enable & ~cmstatus_arrival_err ? ST_SETEV :
                            sysreq_fifo__pop_valid & (~state_was_IDLE_or_DONE | ~csr_sys_evt_receiver_enable | cmstatus_arrival_err) ? ST_DONE : ST_IDLE;

    ST_SETEV : next_state = ST_WFA;

    ST_WFA   : next_state = event_out_ack | event_timeout ? ST_CLREV : ST_WFA;

    ST_CLREV : next_state = ~event_out_ack | event_timeout ? ST_DONE : ST_CLREV;

    ST_DONE  : next_state = sysrsp_fifo__push_ready ? ST_IDLE : ST_DONE;

    default next_state = state;
endcase

\=u.dffre(3, 'state', 'next_state', "3'b0", 'dff_enable', 'clk', 'reset_n')=\

assign state_is_IDLE       = (state == ST_IDLE);
assign state_is_SETEV      = (state == ST_SETEV);
assign state_is_WFA        = (state == ST_WFA);
assign state_is_CLREV      = (state == ST_CLREV);
assign state_is_DONE       = (state == ST_DONE);

assign next_state_is_IDLE       = (next_state == ST_IDLE);
assign next_state_is_SETEV      = (next_state == ST_SETEV);
assign next_state_is_WFA        = (next_state == ST_WFA);
assign next_state_is_CLREV      = (next_state == ST_CLREV);
assign next_state_is_DONE       = (next_state == ST_DONE);   \jsbegin
 
if (!useSysEvtBroadcaster) { \jsend
assign next_state_is_IDLE_or_DONE = next_state_is_IDLE | next_state_is_DONE; \jsbegin
} else { \jsend
assign next_state_is_IDLE_or_DONE = 1'b1; \jsbegin
} \jsend

\jsbegin
//=============================================================================
// OUTPUT event_out_req
//=============================================================================
\jsend

\=u.dffre(1, 'event_out_req', 'event_out_req_in', "1'b0", 'event_out_req_en', 'clk', 'reset_n')=\

assign event_out_req_set = next_state_is_SETEV;
assign event_out_req_clr = next_state_is_CLREV;
assign event_out_req_en  = event_out_req_set | event_out_req_clr;
assign event_out_req_in  = event_out_req_set;

\jsbegin
//=============================================================================
// event_timeout
//=============================================================================
\jsend

assign event_timeout = {|{csr_event_timeout_value}} ? (event_timeout_counter == csr_event_timeout_value) : 1'b0;

\=u.dffre(wEventTimeout, 'event_timeout_counter', 'event_timeout_counter_in', wEventTimeout+"'b0", 'event_timeout_counter_en', 'clk', 'reset_n')=\

assign event_timeout_counter_clr  = state_is_IDLE;

assign event_timeout_counter_incr = (state_is_WFA | state_is_CLREV) & ~event_timeout;

assign event_timeout_counter_en = event_timeout_counter_clr | event_timeout_counter_incr;

assign event_timeout_counter_in = event_timeout_counter_clr  ? \=wEventTimeout=\'b0 :
                                  event_timeout_counter_incr ? event_timeout_counter + \=wEventTimeout=\'b1 :
                                                               event_timeout_counter;

\jsbegin
//=============================================================================
// Response Generator for SysRsp interface
//=============================================================================
\jsend

assign cmstatus_arrival_err = {|{cmstatus[7:6]}};
assign cmstatus_timeout     = event_timeout;
assign cmstatus_busy        = ~state_was_IDLE_or_DONE;
assign cmstatus_disabled    = ~csr_sys_evt_receiver_enable;

assign cmstatus_mod[7:6] = cmstatus_arrival_err ? cmstatus[7:6] :
                           cmstatus_timeout     ? 2'b01 :
                                                  2'b00 ;
assign cmstatus_mod[5:3] = 3'b000;
assign cmstatus_mod[2:0] = cmstatus_disabled | cmstatus_arrival_err | cmstatus_timeout ? 3'b000 : //No operation performed
                           cmstatus_busy                                               ? 3'b001 : //Busy
                                                                                         3'b011 ; //OK

\jsbegin
    var sysrspFifoParams = {
        width       : wSysRspFifo,
        depth       : nEntries,
        bypass_mode : 0,
        zerodepth   : 0
    };
    var instance_ports_for_sysrsp_fifo = {
        clk                 : 'clk',
        reset_n             : 'reset_n',
        push_data           : 'sysrsp_fifo__push_data',
        push_valid          : 'sysrsp_fifo__push_valid',
        push_ready          : 'sysrsp_fifo__push_ready',
        pop_data            : 'sysrsp_fifo__pop_data',
        pop_valid           : 'sysrsp_fifo__pop_valid',
        pop_ready           : 'sysrsp_fifo__pop_ready'
    };
\jsend
    \=obj.lib.instance({
        instanceName: 'sysrsp_fifo',
        moduleName: 'fifo',
        params : sysrspFifoParams,
        verilogParams: {},
        ports: instance_ports_for_sysrsp_fifo,
        portsDelimiter: '\n    '
    })=\


assign sysrsp_valid = sysrsp_fifo__pop_valid;

assign sysrsp_fifo__pop_ready = sysrsp_ready;

assign { sysrsp_cmstatus, sysrsp_rmessage_id, sysrsp_target_f_unit_id } = sysrsp_fifo__pop_data;

\jsbegin
//=============================================================================
// CSR error logging
//=============================================================================
\jsend

assign csr_sys_evt_receiver_err_vld = cmstatus_err_vld;

assign cmstatus_err_vld = sysrsp_fifo__push_valid & sysrsp_fifo__push_ready & {|{cmstatus_mod[7:6]}};

assign csr_sys_evt_receiver_err_f_unit_id = target_f_unit_id;

assign csr_sys_evt_receiver_err_event_timeout = event_timeout;

\jsbegin
//=============================================================================
// Busy
//=============================================================================
\jsend

assign evt_receiver_busy = sysreq_fifo__pop_valid | sysrsp_fifo__pop_valid;

endmodule
