\jsbegin
//=============================================================================
// Copyright(C) 2025 Arteris, Inc.
// All rights reserved
//=============================================================================
// Filename: ncore3_addr_mod12_lut1c.tachl
// Author: Boon Chuan
// Description: Ncore3 Address 6-bit Corner LUT with two 4-bit inputs from the modulo 12 result of each subgroup
//=============================================================================

obj.lib.port('input',  'in0', 4);
obj.lib.port('input',  'in1', 4);
obj.lib.port('output', 'out', 4, 'reg');

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

wire [5:0] sum = {in1, 2'b00} + {2'b00, in0};

always @(*) begin
case (sum) 
    6'd0   : out = 4'd0;  //  0 mod 12 = 0
    6'd1   : out = 4'd1;  //  1 mod 12 = 1
    6'd2   : out = 4'd2;  //  2 mod 12 = 2
    6'd3   : out = 4'd3;  //  3 mod 12 = 3
    6'd4   : out = 4'd4;  //  4 mod 12 = 4
    6'd5   : out = 4'd5;  //  5 mod 12 = 5
    6'd6   : out = 4'd6;  //  6 mod 12 = 6
    6'd7   : out = 4'd7;  //  7 mod 12 = 7
    6'd8   : out = 4'd8;  //  8 mod 12 = 8
    6'd9   : out = 4'd9;  //  9 mod 12 = 9
    6'd10  : out = 4'd10; // 10 mod 12 = 10
    6'd11  : out = 4'd11; // 11 mod 12 = 11
    6'd12  : out = 4'd0;  // 12 mod 12 = 0
    6'd13  : out = 4'd1;  // 13 mod 12 = 1
    6'd14  : out = 4'd2;  // 14 mod 12 = 2
    6'd15  : out = 4'd3;  // 15 mod 12 = 3
    6'd16  : out = 4'd4;  // 16 mod 12 = 4
    6'd17  : out = 4'd5;  // 17 mod 12 = 5
    6'd18  : out = 4'd6;  // 18 mod 12 = 6
    6'd19  : out = 4'd7;  // 19 mod 12 = 7
    6'd20  : out = 4'd8;  // 20 mod 12 = 8
    6'd21  : out = 4'd9;  // 21 mod 12 = 9
    6'd22  : out = 4'd10; // 22 mod 12 = 10
    6'd23  : out = 4'd11; // 23 mod 12 = 11
    6'd24  : out = 4'd0;  // 24 mod 12 = 0
    6'd25  : out = 4'd1;  // 25 mod 12 = 1
    6'd26  : out = 4'd2;  // 26 mod 12 = 2
    6'd27  : out = 4'd3;  // 27 mod 12 = 3
    6'd28  : out = 4'd4;  // 28 mod 12 = 4
    6'd29  : out = 4'd5;  // 29 mod 12 = 5
    6'd30  : out = 4'd6;  // 30 mod 12 = 6
    6'd31  : out = 4'd7;  // 32 mod 12 = 7
    6'd32  : out = 4'd8;  // 32 mod 12 = 8
    6'd33  : out = 4'd9;  // 33 mod 12 = 9
    6'd34  : out = 4'd10; // 34 mod 12 = 10
    6'd35  : out = 4'd11; // 35 mod 12 = 11
    6'd36  : out = 4'd0;  // 36 mod 12 = 0
    6'd37  : out = 4'd1;  // 37 mod 12 = 1
    6'd38  : out = 4'd2;  // 38 mod 12 = 2
    6'd39  : out = 4'd3;  // 39 mod 12 = 3
    6'd40  : out = 4'd4;  // 40 mod 12 = 4
    6'd41  : out = 4'd5;  // 41 mod 12 = 5
    6'd42  : out = 4'd6;  // 42 mod 12 = 6
    6'd43  : out = 4'd7;  // 43 mod 12 = 7
    6'd44  : out = 4'd8;  // 44 mod 12 = 8
    6'd45  : out = 4'd9;  // 45 mod 12 = 9
    6'd46  : out = 4'd10; // 46 mod 12 = 10
    6'd47  : out = 4'd11; // 47 mod 12 = 11
    6'd48  : out = 4'd0;  // 48 mod 12 = 0
    6'd49  : out = 4'd1;  // 49 mod 12 = 1
    6'd50  : out = 4'd2;  // 50 mod 12 = 2
    6'd51  : out = 4'd3;  // 51 mod 12 = 3
    6'd52  : out = 4'd4;  // 52 mod 12 = 4
    6'd53  : out = 4'd5;  // 53 mod 12 = 5
    6'd54  : out = 4'd6;  // 54 mod 12 = 6
    6'd55  : out = 4'd7;  // 55 mod 12 = 7
    default: out = 4'd0;
endcase
end

endmodule
