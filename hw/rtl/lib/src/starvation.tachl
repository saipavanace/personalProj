\jsbegin

var u = obj.lib;

var p = u.getParam();

u.interface('',             'slave',        p.clkInterface,            []);

u.port("input","req_entry_valid",p.depth);

u.port("output","starv_mode",1);
u.port("input", "qos_disable",1);
u.port("output","starv_valid",p.depth);
u.port("input", "dealloc_en", 1);
u.port("input", "grant_index_one_hot", p.depth);
u.port("input", "starv_threshold",p.wStarvThreshold);
u.port("input","starv_en",1)
u.port("output","starv_overflow_event",1);
\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n    ')=\);

wire dealloc_q;
wire [\=p.wStarvCnt-1=\ : 0] starv_count_d;
wire [\=p.wStarvCnt-1=\ : 0] starv_count;
wire starv_count_en;

wire entry_starv_en;
wire [\=p.depth-1=\ : 0] entry_starv_overflow_d;
wire [\=p.depth-1=\ : 0] entry_starv_overflow;
wire [\=p.depth-1=\ : 0] starv_overflow_clear;
wire [\=p.depth-1=\ : 0] starv_overflow_set;

wire [\=p.depth-1=\ : 0] entry_starv,entry_starv_qual,entry_starv_d,entry_starv_no_dealloc_d,entry_starv_dealloc_d;

wire entry_starv_overflow_en;

wire starv_mode_no_dealloc_d,starv_mode_dealloc_d,starv_mode_dealloc,starv_mode_no_dealloc;

assign starv_count_d = (starv_count[\=p.wStarvCnt-1=\:\=p.starvCntOffset=\] == starv_threshold) ? \=p.wStarvCnt=\'b0 : starv_count + 1'b1;
assign starv_count_en = ~starv_mode & dealloc_en & starv_en & ~qos_disable | starv_overflow_event ;
\=u.dffre(p.wStarvCnt,    'starv_count',            'starv_count_d',              p.wStarvCnt+"'d0",    'starv_count_en',           'clk',  'reset_n')=\



assign starv_overflow_event = (starv_count[\=p.wStarvCnt-1=\:\=p.starvCntOffset=\] == starv_threshold) & (starv_threshold != \=p.wStarvThreshold=\'b0) & starv_en & ~qos_disable;
assign entry_starv_dealloc_d  = (entry_starv_overflow & ~(grant_index_one_hot) & {\=p.depth=\{starv_overflow_event}}) | (entry_starv & ~grant_index_one_hot);
assign entry_starv_no_dealloc_d  = (entry_starv_overflow & {\=p.depth=\{starv_overflow_event}}) | entry_starv;
assign entry_starv_d = (entry_starv_overflow & ~(grant_index_one_hot & {\=p.depth=\{dealloc_en}}) & {\=p.depth=\{starv_overflow_event}}) | (entry_starv & ~grant_index_one_hot & {\=p.depth=\{dealloc_en}});


assign starv_valid = entry_starv;
\=u.dffre(p.depth,        'entry_starv',            'entry_starv_d',              p.depth+"'d0",        'entry_starv_en',           'clk',  'reset_n')=\


assign entry_starv_qual = req_entry_valid & ~(grant_index_one_hot & {\=p.depth=\{dealloc_en}});
assign entry_starv_en = starv_overflow_event | dealloc_en;
assign entry_starv_overflow_d  = (entry_starv_qual & {\=p.depth=\{starv_overflow_event}}) | (entry_starv_overflow & ~grant_index_one_hot & {\=p.depth=\{dealloc_en}});
assign entry_starv_overflow_en = starv_overflow_event | dealloc_en;
\=u.dffre(p.depth,        'entry_starv_overflow',   'entry_starv_overflow_d',     p.depth+"'d0",        'entry_starv_overflow_en',  'clk',  'reset_n')=\

assign starv_mode_dealloc_d = (|entry_starv_dealloc_d) & starv_en & ~qos_disable;
assign starv_mode_no_dealloc_d =  (|entry_starv_no_dealloc_d) & starv_en & ~qos_disable;
assign starv_mode = dealloc_q ? starv_mode_dealloc : starv_mode_no_dealloc;

\=u.dffre(1,            'starv_mode_dealloc',     'starv_mode_dealloc_d',       "1'd0",             "1'b1",                     'clk',  'reset_n')=\
\=u.dffre(1,            'starv_mode_no_dealloc',  'starv_mode_no_dealloc_d',    "1'd0",             "1'b1",                     'clk',  'reset_n')=\
\=u.dffre(1,            'dealloc_q',              'dealloc_en',                 "1'd0",             "1'b1",                     'clk',  'reset_n')=\
endmodule


