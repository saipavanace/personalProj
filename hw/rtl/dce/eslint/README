Each rules have 3 severity level: 0 (don't care), 1 (warning), and 2 (error)
We assign severity level for each rule based on http://eslint.org/docs/rules/

Stylistic issues: 0
Best Practices: 1
Everything else: 2

Some errors/warnings are waived because they cannot be met due to ACHL syntax
Here is a list of waived rules and examples


----------
no-bitwise (1): disallow use of bitwise operators
----------

Example: & used instead of &&

flm.allocate0_ack = first_beat_init.first & init_vld & (init_sfipriv["this.param.wSfiPriv_MsgType-1",0]==DtwData);

Reason for Waiver: ACHL only supports bit-wise operator; logical operations must use bit-wise operator


----------
no-console (2): disallow use of console
----------

Example: use the keyword console

console.log(aiuglbparams);

Reason for Waiver: ACHL supports console.log


----------
no-extra-parens (2): disallow unnecessary parentheses
----------

Example: it complains that we have parenthesis

first_beat_init.vld =   init_vld & (init_sfipriv["this.param.wSfiPriv_MsgType-1",0]==DtwData);

Reason for Waiver: parenthesis improves readability, we shoud allow it


----------
no-multi-spaces (1): disallow use of multiple spaces
----------

Example: it complains that we have multiple spaces

flm.deallocate0 =           deallocate_decoded;

Reason for Waiver: multiple spaces are used to line up statements, we should allow it


----------
no-multi-str (2): disallow use of multiline strings
----------

Example: statements span several lines

ott_dtw_sfipriv_a = entry_txn_sfipriv_0   & [dtw_issue_fifo_onehot[ 0 ]].repeat("this.param.wSfiPriv")
/*! for (var i = 1; i < this.param.nOttCtrlEntries; i++) { */
                | entry_txn_sfipriv_$i$ & [dtw_issue_fifo_onehot[$i$]].repeat("this.param.wSfiPriv")
/*! } */

Reason for Waiver: Sometime we use multiple line of strings to make it easier to read


----------
no-plusplus (2): disallow use of unary operators, ++ and --
----------

Example: use of ++ operators

for (var i=0; i<this.param.nCtrlEntries; i++) {

Reason for Waiver: It is ok to have ++ or --


----------
no-redeclare (1): disallow declaring the same variable more than once
----------

Example: variables are being re-declared

for (var i=0; i<this.nAddr; i++) {

    u.state('s_mem'+i, this.param.wData * this.param.nBeats, 0);
    u.state('s_wr_counter'+i, this.param.wBeats, 0);
    u.state('s_rd_counter'+i, this.param.wBeats, 0);

}

.....

for (var i=0; i<this.nAddr; i++) {

Reason for Waiver: It is ok to re-use i, j variables in a loop


----------
no-sequences (1): disallow use of comma operator
----------

Example: , is used

flm.allocate0_ack =         first_beat_init.first & init_vld & (init_sfipriv["this.param.wSfiPriv_MsgType-1",0]==DtwData);

Reason for Waiver: We cannot avoid having comma as ACHL needs comma to specify ranges


----------
no-unused-vars (2): disallow declaration of variables that are not used in the code
----------

Example: flag vars that are not used

var AttDirmCommitIf       = interfaces.dceAttDirmCommitIf(this);

Reason for Change Severitry: Make this a warning instead


----------
no-var (2): require let or const instead of var
----------

Example: complain about using var to declare variable

var SBM   = require('./dce_sb_mgr.achl');

Reason for Waiver: We allow using var to declare variables


----------
no-warning-comments (1): disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
----------

Example: complain about using FIXME or TODO

u.signal("index_id", this.param.wRttCtrlEntries); // FIXME: need to figure out the proper width

Reason for Waiver: We should allow comments


----------
block-scoped-var (1): treat var statements as if they were block scoped
----------

Example: complains about signals are used outside the current function/always block

flm.deallocate0 =           deallocate_decoded;

Reason for Waiver: This is ok; it makes sense for any signal to appear in any always block in a module


----------
complexity (1): specify the maximum cyclomatic complexity allowed in a program
----------

Example: complains about statements that are too complex

switch (s_state) {

    case SEFREE:
        if (update_ctrl) {
            state_next = SECLEAN;
        } else {
            state_next = SEFREE;
        }
        break;
    case SECLEAN:
        if (dtw_req_same_addr & axi_rsp_same_entry) {
            state_next = SEFREE;
        } else if (mrd_req_same_addr & axi_rsp_same_entry) {
            state_next = SESENDDTR;

Reason for Waiver: We do not limit cyclomatic complexity


----------
dot-notation (1): encourages use of dot notation whenever possible
----------

Example: 

dtw_rsp_rcvd     = sfi_mst_rsp_rdy & sfi_mst_rsp_vld & (sfi_mst_rsp_transid["dtw_tag_msb"] == ID_PREFIX_DTW)
                 & ~sfi_mst_rsp_transid["dtw_tag_is_stt"]; // OTT

Reason for Waiver: This is ok in ACHL


----------
eqeqeq (1): require the use of === and !==
----------

Example: complains about using == instead of ===

flm.allocate0_ack =         first_beat_init.first & init_vld & (init_sfipriv["this.param.wSfiPriv_MsgType-1",0]==DtwData);

Reason for Waiver:  == has special meaning for ACHL


----------
global-strict (2): require or disallow the "use strict" pragma in the global scope
----------

Example: What's wrong with that?

'use strict';

Reason for Waiver: Not important


----------
max-len (2): specify the maximum length of a line in your program
----------

Example: complains that it is too long

first_beat_init.vld =   init_vld & (init_sfipriv["this.param.wSfiPriv_MsgType-1",0]==DtwData);

Reason for Waiver: We do not constraint users on the length


----------
max-statements (2): specify the maximum number of statement allowed in a function
----------

Example: complains that the function content is too long

function wtt() {
    this.defineName('wtt');

    var u = require("../../lib/src/utils.js").init(this, "DMI Write Table");

.....

Reason for Waiver: We do not constraint users on the max number of statements


----------
vars-on-top (1): requires to declare all vars on top of their containing scope 
----------

Example: complain about not declaring all variables at the top

var entry_wtt = require('./dmi_entry_wtt.achl');
var first_beat = require('./dmi_first_beat.achl');
var flm = require('../../lib/src/flm.achl');

function wtt() {
    this.defineName('wtt');

    var u = require("../../lib/src/utils.js").init(this, "DMI Write Table");

Reason for Waiver: We cannot avoid sometime having vars declared not at top
