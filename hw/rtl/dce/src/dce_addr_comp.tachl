\jsbegin
//=============================================================================
// Copyright (C) 2018 Arteris, Inc.
// All rights reserved.
//=============================================================================
//
// NAME: DCE Addr match
//
// AUTHOR : Mohammed Khaleeluddin 
//
// DESCRIPTION:
//
//=============================================================================


//      
// Variables
// 
   
var u = obj.lib;
var m = obj.userLib;

//
// Params
//

let W_ADDR =  m.ParamDefaultGet(u, 'wAddr', 'int', 32);
let W_NS=  m.ParamDefaultGet(u, 'wNS', 'int', 1);
let W_CLO = m.ParamDefaultGet(u, 'wCacheLineOffset', 'int', 4);
let N_ATT = m.ParamDefaultGet(u, 'nAtt', 'int', 32);

//
// Ports
//

u.port('input', 'req_addr', W_ADDR);
u.port('input', 'req_ns', W_NS);
u.port('input', 'req_valid', 1);
u.port('input', 'req_att', N_ATT);
u.port('input', 'req_wakeup_valid', 1);
u.port('input', 'req_upd_valid', 1);
u.port('input', 'att_addr', N_ATT*W_ADDR);
u.port('input', 'att_ns', N_ATT*W_NS);
u.port('input', 'att_last', N_ATT);
u.port('input', 'att_valid', N_ATT);
u.port('input', 'att_recall_entry_valid', N_ATT);

u.port('output', 'att_sleep', N_ATT);
u.port('output', 'att_coll_en', N_ATT);
u.port('output', 'att_coll_detected', 1);

// 
// Module
//

\jsend
module \=u.getModuleName()=\
         (\=u.getPorts()=\
          );

   
   
localparam
  W_ADDR = \=W_ADDR=\,
  W_CLO = \=W_CLO=\,
  N_ATT = \=N_ATT=\;

   

wire [N_ATT-1:0] att_req_match, att_recall_match, att_match, addr_match; 
wire match_found;

\jsbegin 

// req_valid = p1_tm_cmd_valid = flop( tm_req_alloc_valid & tm_req_alloc_ready );
//
// req_att = p1_req_att_alloc = p1_req_wakeup_valid ? p1_wakeup_req_att : p1_att_req_alloc;
//         = p1_req_att_alloc = p1_req_wakeup_valid ? p1_wakeup_req_att : flop( att_req_alloc );
//         = p1_req_att_alloc = p1_req_wakeup_valid ? p1_wakeup_req_att : flop( att_req_avail & {N_ATT{tm_req_alloc_valid & tm_req_alloc_ready}} );
//
// req_addr = p1_req_cmd_req_addr = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_addr : p1_tm_cmd_req_addr;
// req_ns   = p1_req_cmd_req_ns   = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_ns   : p1_tm_cmd_req_ns;
//
// att_valid = att_entry_addr_comp_valid = All ATT Entries' (valid & ~de_alloc_pulse);
//
// req_wakeup_valid = p1_req_wakeup_valid = flop( ih_req_wakeup_valid )
//
// att_recall_entry_valid = All ATT Entries' recall_req = flop( d:'recall_alloc & ~unconnected_dmi_access', en:'valid_en' ) 
//
// CONC-5564 "Need clarification on dce rtl handling for two recall requests to same address"
// CONC-5605 "DCE TM needs to provide correct busy_wy_vec for updates"
// CONC-6023 "exclusive monitors are updated prematurely even if DM retries the request"
// CONC-6429 "Directory commit to wrong SF index/way; Way currpt"

\jsend 


\js for(var gi = 0; gi < N_ATT; gi++) {

assign addr_match[\=gi=\] = (req_addr[W_ADDR-1:W_CLO] == att_addr[\=gi=\*W_ADDR+W_CLO +: W_ADDR-W_CLO]) & (req_ns == att_ns[\=gi=\]); 
assign att_req_match[\=gi=\] = addr_match[\=gi=\] & (att_valid[\=gi=\] & att_last[\=gi=\] & ~req_att[\=gi=\] & req_valid);
assign att_recall_match[\=gi=\] = addr_match[\=gi=\] & (att_valid[\=gi=\] & att_recall_entry_valid[\=gi=\] & (req_valid | req_wakeup_valid));

\js }

wire att_req_match_or;
wire att_match_or;

  \=u.instance({
    instanceName: 'u_att_req_match_or',
    moduleName:   'logic_tree',
    params: {'width' : N_ATT,
             'logic' : '|'},
    ports: { 'din'  : 'att_req_match',
             'dout' : 'att_req_match_or' }
    })=\

  \=u.instance({
    instanceName: 'u_att_match_or',
    moduleName:   'logic_tree',
    params: {'width' : N_ATT,
             'logic' : '|'},
    ports: { 'din'  : 'att_match',
             'dout' : 'att_match_or' }
    })=\

assign att_match = att_req_match | (att_recall_match & {N_ATT{~att_req_match_or}});
assign match_found = ~req_upd_valid & att_match_or;
assign att_coll_en = ~req_upd_valid ? att_match : {N_ATT{1'b0}};
   
assign att_sleep = {N_ATT{match_found}} & req_att;
assign att_coll_detected = match_found;
 
endmodule
