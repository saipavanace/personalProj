\jsbegin
//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
// Filename: dce_att_entry_sleep_wake.tachl
//=============================================================================
//
// Variables
//
var u = obj.lib;
var m = obj.userLib;

//
// Parameters
//
let N_ATT   = u.getParam('nAtt');
let W_N_ATT = u.getParam('wNumAtt');

//
// Ports
//
u.port('input',  'clk', 1);
u.port('input',  'reset_n', 1);

u.port('input',  'att_entry_sleep', 1);
u.port('input',  'att_entry_wake', 1);

u.port('input',  'att_entry_coll_en', 1);
u.port('input',  'att_entry_coll_num', W_N_ATT);
u.port('output', 'att_entry_last', 1);
u.port('output', 'att_entry_addr_comp_valid', 1); //att_entry_addr_comp_valid = valid & ~de_alloc_pulse;
u.port('output', 'att_entry_wake_next', N_ATT);

u.port('output', 'att_entry_wakeup_req_valid', 1);
u.port('input',  'att_entry_wakeup_req_ready', 1);

u.port('output', 'sleep', 1);

u.port('input',  'valid', 1);
u.port('input',  'de_alloc_pulse', 1);
u.port('input',  'p1_att_req_wakeup_valid', 1);
u.port('input',  'p1_alloc', 1);

//
// Module
//

\jsend

module \=u.getModuleName()=\ (\=u.getPorts('\n')=\);

localparam
  W_N_ATT = \=W_N_ATT=\,
  N_ATT = \=N_ATT=\;

wire sleep_en;
wire sleep_in;
wire wakeup_req_en;
wire wakeup_req_in;
wire wakeup_req_q0;
wire is_wakeup_entry;


assign att_entry_addr_comp_valid = valid & ~de_alloc_pulse;
                
//=============================================================================     
// Sleep / Wakeup / Collision
//=============================================================================     

wire [N_ATT-1:0] coll_vec, coll_num_q0_onehot;
wire [W_N_ATT-1:0] coll_num_in, coll_num_q0;
wire coll_en, coll_num_valid_in, coll_num_valid_q0, coll_num_valid;
wire last_en, last_in;

//
// sleep
//   
assign sleep_in = is_wakeup_entry ? att_entry_sleep :  ((att_entry_wake) ? 1'b0 : 1'b1);

assign sleep_en = att_entry_sleep | att_entry_wake;          

\=u.dffre(1, 'sleep', 'sleep_in', "1'b0", 'sleep_en', 'clk', 'reset_n')=\

//
// att_entry_wakeup_req_valid
//
assign wakeup_req_en = (sleep & att_entry_wake) | att_entry_wakeup_req_ready;
assign wakeup_req_in = ~att_entry_wakeup_req_ready;

\=u.dffre(1, 'wakeup_req_q0', 'wakeup_req_in', "1'b0", 'wakeup_req_en', 'clk', 'reset_n')=\   

assign att_entry_wakeup_req_valid = wakeup_req_q0;

//
// att-entry_wake_next
//
assign coll_en = att_entry_coll_en | de_alloc_pulse;
assign coll_num_in = {W_N_ATT{~de_alloc_pulse}} & att_entry_coll_num;   
assign coll_num_valid_in = ~de_alloc_pulse & att_entry_coll_en;

\=u.dffre(W_N_ATT, 'coll_num_q0', 'coll_num_in', "{W_N_ATT{1'b0}}", 'coll_en', 'clk', 'reset_n')=\   

\=u.dffre(1, 'coll_num_valid_q0', 'coll_num_valid_in', "1'b0", 'coll_en', 'clk', 'reset_n')=\

assign coll_num_valid = de_alloc_pulse & coll_num_valid_q0;

assign coll_num_q0_onehot = (\=N_ATT=\'b1 << coll_num_q0[\=W_N_ATT-1=\:0]);

assign coll_vec = coll_num_q0_onehot;

assign att_entry_wake_next = {N_ATT{coll_num_valid}} & coll_vec;   

//
// att_entry_last
//
assign last_en = (~p1_att_req_wakeup_valid & p1_alloc) | (att_entry_coll_en | de_alloc_pulse);
assign last_in = (att_entry_coll_en | de_alloc_pulse) ? 1'b0 : 1'b1; 

\=u.dffre(1, 'att_entry_last', 'last_in', "1'b0", 'last_en', 'clk', 'reset_n')=\

//=============================================================================     
// is_wakeup_entry
//=============================================================================     
wire is_wakeup_entry_en = (sleep & att_entry_wake) | de_alloc_pulse;
wire is_wakeup_entry_in = de_alloc_pulse ? 1'b0 : 1'b1;

\=u.dffre(1, 'is_wakeup_entry', 'is_wakeup_entry_in', "1'b0", 'is_wakeup_entry_en', 'clk', 'reset_n')=\   

endmodule 
