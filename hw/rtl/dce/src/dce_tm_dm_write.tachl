\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
// DCE Transaction Manager DM Write
//
// Filename: dce_tm_dm_write.tachl
//=============================================================================

var u = obj.lib;
var m = obj.userLib;

let ASSERT_ON    = m.ParamDefaultGet(u, 'ASSERT_ON', 'int', 0);
let N_ATT        = m.ParamDefaultGet(u, 'N_ATT', 'int', 32);
let W_ADDR       = m.ParamDefaultGet(u, 'W_ADDR', 'int', 32);
let W_NS         = m.ParamDefaultGet(u, 'W_NS', 'int', 1);
let N_WAYS       = m.ParamDefaultGet(u, 'N_WAYS', 'int', 8);
let N_C_AGENTS   = m.ParamDefaultGet(u, 'N_C_AGENTS', 'int', 4);
let W_N_C_AGENTS = m.ParamDefaultGet(u, 'W_N_C_AGENTS', 'int', 2);

u.port('input', 'clk', 1);
u.port('input', 'reset_n', 1);

u.port('input', 'att_entry_dm_write_valid', N_ATT);
u.port('input', 'att_entry_dm_write_last',  N_ATT);
u.port('output','att_entry_dm_write_ready', N_ATT);
u.port('output','att_entry_dm_write_grant', N_ATT);

u.port('input', 'att_entry_dm_write_addr',        N_ATT * W_ADDR);
u.port('input', 'att_entry_dm_write_ns',          N_ATT * W_NS);
u.port('input', 'att_entry_dm_write_way_vec',     N_ATT * N_WAYS);
u.port('input', 'att_entry_dm_write_owner_valid', N_ATT * 1);
u.port('input', 'att_entry_dm_write_owner_num',   N_ATT * W_N_C_AGENTS);
u.port('input', 'att_entry_dm_write_sharer_vec',  N_ATT * N_C_AGENTS);
u.port('input', 'att_entry_dm_write_change_vec',  N_ATT * N_C_AGENTS);

u.port('input', 'tm_dm_write_ready', 1);
u.port('output','tm_dm_write_valid', 1);
u.port('output','tm_dm_write_addr', W_ADDR);
u.port('output','tm_dm_write_ns', W_NS);
u.port('output','tm_dm_write_way_vec', N_WAYS);
u.port('output','tm_dm_write_owner_valid', 1);
u.port('output','tm_dm_write_owner_num', W_N_C_AGENTS);
u.port('output','tm_dm_write_sharer_vec', N_C_AGENTS);
u.port('output','tm_dm_write_change_vec', N_C_AGENTS);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts()=\);

localparam
  N_ATT = \=N_ATT=\,
  W_ADDR = \=W_ADDR=\,
  W_NS = \=W_NS=\,
  N_WAYS = \=N_WAYS=\,
  N_C_AGENTS = \=N_C_AGENTS=\,
  W_N_C_AGENTS = \=W_N_C_AGENTS=\;

//
// DIR write
//

wire tm_dm_write_source_last;

\=u.instance ({
               instanceName: 'dw_wr_rr_arb',
               moduleName: 'rr_arb_comb_mux_therm',
               params: {
                        num_inputs: N_ATT,
                        interleave_mode : 1
                        },
               verilogParams: {},
               ports: {
                       'clk' : 'clk',
                       'reset_n' : 'reset_n',
                       'sink_valid':'att_entry_dm_write_valid',
                       'sink_last': 'att_entry_dm_write_last',
                       'sink_ready': 'att_entry_dm_write_ready',
                       'sink_grant': 'att_entry_dm_write_grant',
                       'source_valid': 'tm_dm_write_valid',
                       'source_ready': 'tm_dm_write_ready',
                       'source_last' : 'tm_dm_write_source_last'
                       }
               })=\



assign tm_dm_write_addr = (
\jsbegin
                        for (let i=0; i< N_ATT ; i++)
                        {
\jsend 
                         ({W_ADDR{att_entry_dm_write_grant[\=i=\]}} & att_entry_dm_write_addr[W_ADDR*\=i=\ +: W_ADDR]) |
\js                     } 
                        {W_ADDR{1'b0}});
assign tm_dm_write_ns= (
\jsbegin
                     for (let i=0; i< N_ATT ; i++)
                     {
\jsend 
                      ({W_NS{att_entry_dm_write_grant[\=i=\]}} & att_entry_dm_write_ns[W_NS*\=i=\ +: W_NS]) |
\js                  } 
                     {W_NS{1'b0}});
assign tm_dm_write_way_vec = (
\jsbegin
                           for (let i=0; i< N_ATT ; i++)
                           {
\jsend 
                            ({N_WAYS{att_entry_dm_write_grant[\=i=\]}} & att_entry_dm_write_way_vec[N_WAYS*\=i=\ +: N_WAYS]) |
\js                        } 
                           {N_WAYS{1'b0}});
assign tm_dm_write_owner_valid = (
\jsbegin
                               for (let i=0; i< N_ATT ; i++)
                               {
\jsend 
                                (att_entry_dm_write_grant[\=i=\ ] & att_entry_dm_write_owner_valid[\=i=\ ]) |
\js                             } 
                               {1{1'b0}});
assign tm_dm_write_owner_num = (
\jsbegin
                             for (let i=0; i< N_ATT ; i++)
                             {
\jsend 
                              ({W_N_C_AGENTS{att_entry_dm_write_grant[\=i=\ ]}} & att_entry_dm_write_owner_num[W_N_C_AGENTS*\=i=\ +: W_N_C_AGENTS]) |
\js                          } 
                             {W_N_C_AGENTS{1'b0}});
assign tm_dm_write_sharer_vec = (
\jsbegin
                              for (let i=0; i< N_ATT ; i++)
                              {
\jsend 
                               ({N_C_AGENTS{att_entry_dm_write_grant[\=i=\ ]}} & att_entry_dm_write_sharer_vec[N_C_AGENTS*\=i=\ +: N_C_AGENTS]) |
\js                            } 
                              {N_C_AGENTS{1'b0}});
assign tm_dm_write_change_vec = (
\jsbegin
                              for (let i=0; i< N_ATT ; i++)
                              {
\jsend 
                               ({N_C_AGENTS{att_entry_dm_write_grant[\=i=\ ]}} & att_entry_dm_write_change_vec[N_C_AGENTS*\=i=\ +: N_C_AGENTS]) |
\js                            } 
                              {N_C_AGENTS{1'b0}});

endmodule
