\jsbegin
//=============================================================================
// Copyright (C) 2024 Arteris, Inc.
// All rights reserved.
//=============================================================================
// Filename: dce_tm_p1.tachl
// DCE Transaction Manager P1 cycle signals
//=============================================================================
//
// Variables
//
var u = obj.lib;
var m = obj.userLib;
var bundleFunctions = obj.userLib.bundleFunctions;

//
// Parameters
//
let ASSERT_ON = m.ParamDefaultGet(u, 'assertOn', 'int', 0);

let CMD_REQ_INTF = m.ParamDefaultGet(u, 'cmdReqInterface', 'object', {});

let CM_TYPE = m.ParamDefaultGet(u, 'cmType', 'object', {});
let N_WAYS =m.ParamDefaultGet(u, 'nWays', 'int', 8);
let N_ATT =m.ParamDefaultGet(u, 'nAttEntries', 'int', 32);
let W_N_ATT = m.ParamDefaultGet(u, 'wNumAtt', 'int', 4);
let N_C_AGENTS = m.ParamDefaultGet(u, 'nCachingAgents', 'int', 4);
let N_CONNECTED_DMIS = m.ParamDefaultGet(u, 'nConnectedDmis', 'int', 4);
let W_CLO = m.ParamDefaultGet(u, 'wCacheLineOffset', 'int', 4);
let W_FUNIT_ID = m.ParamDefaultGet(u, 'wFUnitId', 'int', 4);
let SF_INFO = m.ParamDefaultGet(u, 'SnoopFilterInfo', 'array', []);

let STASH_EN_VEC = m.ParamDefaultGet(u, 'StashEnable', 'string', "7'd0");

var nChiplets        = u.getParam('nChiplets');
var wGlobalFUnitId   = u.getParam('wGlobalFUnitId');
var nCachingAgents   = N_C_AGENTS;

var useSramInputFlop = u.getParam('useSramInputFlop');

let W_INIT_ID = CMD_REQ_INTF.initiator_id;
let W_CM_TYPE = CMD_REQ_INTF.cm_type;
let W_ADDR = CMD_REQ_INTF.addr;
let W_ES = CMD_REQ_INTF.es;
let W_NS = CMD_REQ_INTF.ns;
let W_MPF1 = CMD_REQ_INTF.mpf1;
let W_MPF2 = CMD_REQ_INTF.mpf2;
let W_D_ID = CMD_REQ_INTF.d_id;

let CMD_PIPE_INTF = {};

Object.keys(CMD_REQ_INTF).forEach(function (signal) {
    if ( CMD_REQ_INTF[signal] !== 0) {
        CMD_PIPE_INTF[signal] = CMD_REQ_INTF[signal];
    }
});

delete CMD_PIPE_INTF.valid;
delete CMD_PIPE_INTF.ready;

//
// Ports
//

u.port('input', 'clk', 1);
u.port('input', 'reset_n', 1);

u.port('input', 'connected_dmi_f_unit_id', N_CONNECTED_DMIS * W_FUNIT_ID);
u.port('input', 'ca_f_unit_id',            N_C_AGENTS * W_FUNIT_ID);
u.port('input', 'csr_SnoopEnable',         N_C_AGENTS);

if (nChiplets > 1) {
u.port('input', 'ca_global_f_unit_id', nCachingAgents * wGlobalFUnitId);
u.port('input', 'ca_global_f_unit_id_valid', nCachingAgents);
}

u.port('input', 'tm_req_alloc_valid', 1);
u.port('input', 'tm_req_alloc_ready', 1);
u.port('input', 'att_req_alloc',      N_ATT);
m.defineSlavePortsFromInterface('tm_cmd_req_', CMD_REQ_INTF, u.port, ['ready', 'valid']);

u.port('input', 'ih_req_wakeup_valid', 1);
u.port('input', 'ih_req_addr', W_ADDR);
u.port('input', 'ih_req_initiator_id', W_INIT_ID);
u.port('input', 'ih_req_ns', W_NS);
u.port('input', 'ih_req_type', W_CM_TYPE);
u.port('input', 'ih_req_mpf1', W_MPF1);
u.port('input', 'ih_req_mpf2', W_MPF2);
u.port('input', 'ih_req_es', W_ES);
u.port('input', 'ih_req_alloc_vec', N_ATT);

u.port('input', 'ih_req_upd_valid', 1);
u.port('input', 'ih_req_upd_req_ns', W_NS);
u.port('input', 'ih_req_upd_req_addr', W_ADDR);

u.port('input',  'att_entry_way_vec',         N_ATT*N_WAYS);
u.port('input',  'att_entry_req_addr',        N_ATT*W_ADDR);
u.port('input',  'att_entry_req_ns',          N_ATT*W_NS);
u.port('input',  'att_entry_last',            N_ATT);
u.port('input',  'att_entry_addr_comp_valid', N_ATT);
u.port('input',  'att_recall_entry_valid',    N_ATT);

u.port('output', 'att_entry_sleep',           N_ATT);   //P1 signal
u.port('output', 'att_entry_coll_en',         N_ATT);   //P1 signal
u.port('output', 'att_entry_coll_num',        W_N_ATT); //P1 signal

u.port('output', 'p1_req_att_alloc', N_ATT);
u.port('output', 'p1_att_snp_all', 1);
u.port('output', 'p1_att_snp_type', W_CM_TYPE);
u.port('output', 'p1_att_mrd_type_valid', 1);
u.port('output', 'p1_att_write_rbid_valid', 1);
u.port('output', 'p1_att_mrd_type', W_CM_TYPE);
u.port('output', 'p1_req_wakeup_valid', 1);
u.port('output', 'p1_req_cmd_req_stash_mpf1', 1);

u.port('output', 'p1_dm_busy_way_vec', N_WAYS);
u.port('output', 'p1_dm_req_alloc', 1);
u.port('output', 'p1_dm_req_cancel', 1);

u.port('output', 'err_p1_tm_cmd_req_d_id_valid', 1);
u.port('output', 'err_p1_tm_cmd_req_d_id_addr', W_ADDR);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts()=\);

localparam
  W_INIT_ID = \=W_INIT_ID=\,
  W_ADDR = \=W_ADDR=\,
  W_CM_TYPE = \=W_CM_TYPE=\,
  W_ES = \=W_ES=\,
  W_NS = \=W_NS=\,
  W_MPF1 = \=W_MPF1=\,
  W_MPF2 = \=W_MPF2=\,
  W_D_ID = \=W_D_ID=\,
  N_C_AGENTS = \=N_C_AGENTS=\,
  N_ATT = \=N_ATT=\,
  N_WAYS = \=N_WAYS=\,
  W_FUNIT_ID = \=W_FUNIT_ID=\,
  N_CONNECTED_DMIS = \=N_CONNECTED_DMIS=\,
  STASH_EN_VEC = \=STASH_EN_VEC=\;


wire dff_enable = 1'b1;

wire cmd_pipe_en;

wire                  p1_tm_cmd_valid;   
\=m.bundleFunctions.wiresFromInterface('p1_tm_cmd_req_', CMD_PIPE_INTF, [], u.bundle)=\
wire [N_ATT-1:0]      p1_att_req_alloc;

wire [W_NS-1:0]       p1_wakeup_req_cmd_req_ns;
wire [W_CM_TYPE-1:0]  p1_wakeup_req_cmd_cm_type;
wire [W_ADDR-1:0]     p1_wakeup_req_cmd_req_addr;
wire [W_INIT_ID-1:0]  p1_wakeup_req_cmd_req_initiator_id;
wire [W_MPF1-1:0]     p1_wakeup_req_cmd_req_mpf1;
wire [W_MPF2-1:0]     p1_wakeup_req_cmd_req_mpf2;
wire [W_ES-1:0]       p1_wakeup_req_cmd_req_es;
wire [N_ATT-1:0]      p1_wakeup_req_att;

wire [W_NS-1:0]       p1_req_cmd_req_ns;
wire [W_CM_TYPE-1:0]  p1_req_cmd_cm_type;
wire [W_ADDR-1:0]     p1_req_cmd_req_addr;
wire [W_INIT_ID-1:0]  p1_req_cmd_req_initiator_id;   
wire [W_MPF1-1:0]     p1_req_cmd_req_mpf1;
wire [W_MPF2-1:0]     p1_req_cmd_req_mpf2;
wire [W_ES-1:0]       p1_req_cmd_req_es;

wire                  p1_req_valid;
wire [W_NS-1:0]       p1_req_ns;
wire [W_ADDR-1:0]     p1_req_addr;

wire                  p1_req_upd_valid;
wire [W_ADDR-1:0]     p1_req_upd_req_addr;
wire [W_NS-1:0]       p1_req_upd_req_ns;

wire                  p1_att_atm_req;
wire                  p1_stash_cmd;
wire                  p1_stash_mask;
wire [N_C_AGENTS-1:0] p1_stash_cmd_targ_vec;   



//=============================================================================
// tm_cmd_req
//=============================================================================

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (useSramInputFlop) {
\jsend

wire             p0plus_tm_cmd_valid;
wire [N_ATT-1:0] p0plus_att_req_alloc;

\=m.bundleFunctions.wiresFromInterface('p0plus_tm_cmd_req_', CMD_PIPE_INTF, [], u.bundle)=\

assign cmd_pipe_en = tm_req_alloc_valid & tm_req_alloc_ready; 

\=u.dffre(1, 'p0plus_tm_cmd_valid', 'cmd_pipe_en',         "1'b0", "1'b1", 'clk', 'reset_n')=\
\=u.dffre(1,     'p1_tm_cmd_valid', 'p0plus_tm_cmd_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\

\=u.dffre(N_ATT, 'p0plus_att_req_alloc',        'att_req_alloc', "{N_ATT{1'b0}}", "1'b1", 'clk', 'reset_n')=\
\=u.dffre(N_ATT,     'p1_att_req_alloc', 'p0plus_att_req_alloc', "{N_ATT{1'b0}}", "1'b1", 'clk', 'reset_n')=\

\=u.instance({
              instanceName : 'cmd_pipe_stage',
              moduleName : 'simple_pipe_stage',
              params : {
                        pipeSignals: CMD_PIPE_INTF
                        },
              ports : {
                       clk : 'clk',
                       reset_n : 'reset_n',
                       en : 'cmd_pipe_en'
                       },
              interfaces : [
                            {modulePrefix: 'in_', localPrefix: 'tm_cmd_req_', interface: CMD_PIPE_INTF},
                            {modulePrefix: 'out_', localPrefix: 'p0plus_tm_cmd_req_', interface: CMD_PIPE_INTF}
                            ]
              })=\

\=u.instance({
              instanceName : 'p1_cmd_pipe_stage',
              moduleName : 'simple_pipe_stage',
              params : {
                        pipeSignals: CMD_PIPE_INTF
                        },
              ports : {
                       clk : 'clk',
                       reset_n : 'reset_n',
                       en : 'p0plus_tm_cmd_valid'
                       },
              interfaces : [
                            {modulePrefix: 'in_', localPrefix: 'p0plus_tm_cmd_req_', interface: CMD_PIPE_INTF},
                            {modulePrefix: 'out_', localPrefix: 'p1_tm_cmd_req_', interface: CMD_PIPE_INTF}
                            ]
              })=\

\js } else {

assign cmd_pipe_en = tm_req_alloc_valid & tm_req_alloc_ready; 

\=u.dffre(1,     'p1_tm_cmd_valid',  'cmd_pipe_en',   "1'b0",          "1'b1", 'clk', 'reset_n')=\

\=u.dffre(N_ATT, 'p1_att_req_alloc', 'att_req_alloc', "{N_ATT{1'b0}}", "1'b1", 'clk', 'reset_n')=\
   
\=u.instance({
              instanceName : 'cmd_pipe_stage',
              moduleName : 'simple_pipe_stage',
              params : {
                        pipeSignals: CMD_PIPE_INTF
                        },
              ports : {
                       clk : 'clk',
                       reset_n : 'reset_n',
                       en : 'cmd_pipe_en'
                       },
              interfaces : [
                            {modulePrefix: 'in_', localPrefix: 'tm_cmd_req_', interface: CMD_PIPE_INTF},
                            {modulePrefix: 'out_', localPrefix: 'p1_tm_cmd_req_', interface: CMD_PIPE_INTF}
                            ]
              })=\

\js }

//=============================================================================
// ih_req
//=============================================================================

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (useSramInputFlop) {
\jsend

wire [W_NS-1:0]       p0plus_wakeup_req_cmd_req_ns;
wire [W_CM_TYPE-1:0]  p0plus_wakeup_req_cmd_cm_type;
wire [W_ADDR-1:0]     p0plus_wakeup_req_cmd_req_addr;
wire [W_INIT_ID-1:0]  p0plus_wakeup_req_cmd_req_initiator_id;
wire [W_MPF1-1:0]     p0plus_wakeup_req_cmd_req_mpf1;
wire [W_MPF2-1:0]     p0plus_wakeup_req_cmd_req_mpf2;
wire [W_ES-1:0]       p0plus_wakeup_req_cmd_req_es;
wire [N_ATT-1:0]      p0plus_wakeup_req_att;
wire                  p0plus_req_wakeup_valid;

\=u.dffre(W_CM_TYPE, 'p0plus_wakeup_req_cmd_cm_type',          'ih_req_type',         "{W_CM_TYPE{1'b0}}", 'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_NS,      'p0plus_wakeup_req_cmd_req_ns',           'ih_req_ns',           "{W_NS{1'b0}}",      'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR,    'p0plus_wakeup_req_cmd_req_addr',         'ih_req_addr',         "{W_ADDR{1'b0}}",    'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_INIT_ID, 'p0plus_wakeup_req_cmd_req_initiator_id', 'ih_req_initiator_id', "{W_INIT_ID{1'b0}}", 'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_MPF1,    'p0plus_wakeup_req_cmd_req_mpf1',         'ih_req_mpf1',         "{W_MPF1{1'b0}}",    'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_MPF2,    'p0plus_wakeup_req_cmd_req_mpf2',         'ih_req_mpf2',         "{W_MPF2{1'b0}}",    'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ES,      'p0plus_wakeup_req_cmd_req_es',           'ih_req_es',           "{W_ES{1'b0}}",      'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(N_ATT,     'p0plus_wakeup_req_att',                  'ih_req_alloc_vec',    "{N_ATT{1'b0}}",     'ih_req_wakeup_valid', 'clk', 'reset_n')=\

\=u.dffre(W_CM_TYPE, 'p1_wakeup_req_cmd_cm_type',          'p0plus_wakeup_req_cmd_cm_type',          "{W_CM_TYPE{1'b0}}", 'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_NS,      'p1_wakeup_req_cmd_req_ns',           'p0plus_wakeup_req_cmd_req_ns',           "{W_NS{1'b0}}",      'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR,    'p1_wakeup_req_cmd_req_addr',         'p0plus_wakeup_req_cmd_req_addr',         "{W_ADDR{1'b0}}",    'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_INIT_ID, 'p1_wakeup_req_cmd_req_initiator_id', 'p0plus_wakeup_req_cmd_req_initiator_id', "{W_INIT_ID{1'b0}}", 'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_MPF1,    'p1_wakeup_req_cmd_req_mpf1',         'p0plus_wakeup_req_cmd_req_mpf1',         "{W_MPF1{1'b0}}",    'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_MPF2,    'p1_wakeup_req_cmd_req_mpf2',         'p0plus_wakeup_req_cmd_req_mpf2',         "{W_MPF2{1'b0}}",    'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ES,      'p1_wakeup_req_cmd_req_es',           'p0plus_wakeup_req_cmd_req_es',           "{W_ES{1'b0}}",      'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(N_ATT,     'p1_wakeup_req_att',                  'p0plus_wakeup_req_att',                  "{N_ATT{1'b0}}",     'p0plus_req_wakeup_valid', 'clk', 'reset_n')=\

\=u.dffre(1, 'p0plus_req_wakeup_valid',     'ih_req_wakeup_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\
\=u.dffre(1,     'p1_req_wakeup_valid', 'p0plus_req_wakeup_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\

\js } else {

\=u.dffre(W_CM_TYPE, 'p1_wakeup_req_cmd_cm_type',          'ih_req_type',         "{W_CM_TYPE{1'b0}}", 'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_NS,      'p1_wakeup_req_cmd_req_ns',           'ih_req_ns',           "{W_NS{1'b0}}",      'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR,    'p1_wakeup_req_cmd_req_addr',         'ih_req_addr',         "{W_ADDR{1'b0}}",    'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_INIT_ID, 'p1_wakeup_req_cmd_req_initiator_id', 'ih_req_initiator_id', "{W_INIT_ID{1'b0}}", 'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_MPF1,    'p1_wakeup_req_cmd_req_mpf1',         'ih_req_mpf1',         "{W_MPF1{1'b0}}",    'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_MPF2,    'p1_wakeup_req_cmd_req_mpf2',         'ih_req_mpf2',         "{W_MPF2{1'b0}}",    'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ES,      'p1_wakeup_req_cmd_req_es',           'ih_req_es',           "{W_ES{1'b0}}",      'ih_req_wakeup_valid', 'clk', 'reset_n')=\
\=u.dffre(N_ATT,     'p1_wakeup_req_att',                  'ih_req_alloc_vec',    "{N_ATT{1'b0}}",     'ih_req_wakeup_valid', 'clk', 'reset_n')=\

\=u.dffre(1, 'p1_req_wakeup_valid', 'ih_req_wakeup_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\

\js }

//=============================================================================
// p1_req_cmd MUX
//=============================================================================

assign p1_req_cmd_req_ns           = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_ns           : p1_tm_cmd_req_ns;
assign p1_req_cmd_req_addr         = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_addr         : p1_tm_cmd_req_addr;
assign p1_req_cmd_req_initiator_id = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_initiator_id : p1_tm_cmd_req_initiator_id;
assign p1_req_cmd_cm_type          = p1_req_wakeup_valid ? p1_wakeup_req_cmd_cm_type          : p1_tm_cmd_req_cm_type;
assign p1_req_cmd_req_mpf1         = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_mpf1         : p1_tm_cmd_req_mpf1;
assign p1_req_cmd_req_mpf2         = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_mpf2         : p1_tm_cmd_req_mpf2; 
assign p1_req_cmd_req_es           = p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_es           : p1_tm_cmd_req_es;
assign p1_req_att_alloc            = p1_req_wakeup_valid ? p1_wakeup_req_att                  : p1_att_req_alloc;

//=============================================================================
// ih_req_upd
//=============================================================================

\jsbegin
/* istanbul ignore else env ncore_3p7 */
if (useSramInputFlop) {
\jsend

wire [W_ADDR-1:0]     p0plus_req_upd_req_addr;
wire [W_NS-1:0]       p0plus_req_upd_req_ns;
wire                  p0plus_req_upd_valid;

\=u.dffre(W_NS,   'p0plus_req_upd_req_ns',   'ih_req_upd_req_ns',     "{W_NS{1'b0}}", 'ih_req_upd_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR, 'p0plus_req_upd_req_addr', 'ih_req_upd_req_addr', "{W_ADDR{1'b0}}", 'ih_req_upd_valid', 'clk', 'reset_n')=\

\=u.dffre(W_NS,   'p1_req_upd_req_ns',   'p0plus_req_upd_req_ns',     "{W_NS{1'b0}}", 'p0plus_req_upd_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR, 'p1_req_upd_req_addr', 'p0plus_req_upd_req_addr', "{W_ADDR{1'b0}}", 'p0plus_req_upd_valid', 'clk', 'reset_n')=\

\=u.dffre(1, 'p0plus_req_upd_valid',     'ih_req_upd_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\
\=u.dffre(1,     'p1_req_upd_valid', 'p0plus_req_upd_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\

\js } else {

\=u.dffre(1, 'p1_req_upd_valid', 'ih_req_upd_valid', "1'b0", "1'b1", 'clk', 'reset_n')=\
\=u.dffre(W_NS, 'p1_req_upd_req_ns', 'ih_req_upd_req_ns', "{W_NS{1'b0}}", 'ih_req_upd_valid', 'clk', 'reset_n')=\
\=u.dffre(W_ADDR, 'p1_req_upd_req_addr', 'ih_req_upd_req_addr', "{W_ADDR{1'b0}}", 'ih_req_upd_valid', 'clk', 'reset_n')=\

\js }

//=============================================================================
// p1_req MUX
//=============================================================================

assign p1_req_addr = p1_req_upd_valid ? p1_req_upd_req_addr : p1_req_cmd_req_addr;
assign p1_req_ns   = p1_req_upd_valid ? p1_req_upd_req_ns   : p1_req_cmd_req_ns;

assign p1_req_valid = p1_req_upd_valid | p1_req_wakeup_valid | p1_tm_cmd_valid;

//=============================================================================
// p1_req_cmd DECODE
//=============================================================================

//
// p1_req_cmd_req_stash_mpf1
//
assign p1_stash_cmd = (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchShd=\     ) |
                      (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchUnq=\     ) |
                      (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrStshFull=\   ) |
                      (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrStshPtl=\      );

\js if (nChiplets > 1) {
   
    \js for(let i=0; i<N_C_AGENTS; i++) {
assign p1_stash_cmd_targ_vec[\=i=\ ] = (p1_req_cmd_req_mpf1[\=wGlobalFUnitId-1=\:0] == ca_global_f_unit_id[\=i*wGlobalFUnitId=\ +: \=wGlobalFUnitId=\]); 
    \js }

\js } else {
   
    \js for(let i=0; i<N_C_AGENTS; i++) {
assign p1_stash_cmd_targ_vec[\=i=\ ] = (p1_req_cmd_req_mpf1[W_FUNIT_ID-1:0] == ca_f_unit_id[\=i=\*W_FUNIT_ID +: W_FUNIT_ID]); 
    \js }

\js }

assign p1_stash_mask = ~(| (p1_stash_cmd_targ_vec & STASH_EN_VEC & csr_SnoopEnable));  

assign p1_req_cmd_req_stash_mpf1 = (p1_req_cmd_req_mpf1[W_MPF1-1] & ~p1_stash_mask & p1_stash_cmd); 
 
//
// Command decode
// 

wire [W_CM_TYPE-1:0] p1_att_snp_cln_dtr, p1_att_snp_vld_dtr, p1_att_snp_inv_dtr;
wire [W_CM_TYPE-1:0] p1_att_snp_cln_dtw, p1_att_snp_inv_dtw, p1_att_snp_inv;
wire [W_CM_TYPE-1:0] p1_att_snp_nitc, p1_att_snp_nosd;
wire [W_CM_TYPE-1:0] p1_att_snp_inv_stsh, p1_att_snp_unq_stsh; 
wire [W_CM_TYPE-1:0] p1_att_snp_stsh_shd, p1_att_snp_stsh_unq;
wire [W_CM_TYPE-1:0] p1_att_snp_nitcci, p1_att_snp_nitcmi;
wire [W_CM_TYPE-1:0] p1_att_mrd_rd_cln;
wire [W_CM_TYPE-1:0] p1_att_mrd_rd_wu, p1_att_mrd_rd_winv, p1_att_mrd_pref;
wire [W_CM_TYPE-1:0] p1_att_mrd_cln, p1_att_mrd_inv, p1_att_mrd_flush;   
wire [N_C_AGENTS-1:0] pipe_dm_rsp_owner_one_hot, pipe_dm_rsp_owner_vec;
wire p1_att_coll_detected, p1_att_wr_req;
   
   
assign p1_att_snp_cln_dtr     = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdCln=\          )) ? \=CM_TYPE.SnpClnDtr=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_vld_dtr     = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdVld=\          )) ? \=CM_TYPE.SnpVldDtr=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_inv_dtr     = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdUnq=\          )) ? \=CM_TYPE.SnpInvDtr=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_cln_dtw     = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdClnVld=\         )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdClnShPsist=\     )) ? \=CM_TYPE.SnpClnDtw=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_inv_dtw     = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdClnInv=\         )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdClnUnq=\         )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrUnqPtl=\       )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrAtm=\          )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdRdAtm=\          )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdSwapAtm=\        )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdCompAtm=\        )) ? \=CM_TYPE.SnpInvDtw=\    : \=W_CM_TYPE=\'d0;
assign p1_att_snp_inv         = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdMkInv=\          )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdMkUnq=\          )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrUnqFull=\      )) ? \=CM_TYPE.SnpInv=\       : \=W_CM_TYPE=\'d0;
assign p1_att_snp_nitc        = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNitc=\         )) ? \=CM_TYPE.SnpNitc=\      : \=W_CM_TYPE=\'d0;
assign p1_att_snp_nosd        = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNshDty=\       )) ? \=CM_TYPE.SnpNoSDInt=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_inv_stsh    = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdWrStshFull=\     )) ? \=CM_TYPE.SnpInvStsh=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_unq_stsh    = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdWrStshPtl=\      )) ? \=CM_TYPE.SnpUnqStsh=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_stsh_shd    = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchShd=\       )) ? \=CM_TYPE.SnpStshShd=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_stsh_unq    = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchUnq=\       )) ? \=CM_TYPE.SnpStshUnq=\   : \=W_CM_TYPE=\'d0;
assign p1_att_snp_nitcci      = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNitcCI=\       )) ? \=CM_TYPE.SnpNitcCI=\    : \=W_CM_TYPE=\'d0;
assign p1_att_snp_nitcmi      = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNitcMI=\       )) ? \=CM_TYPE.SnpNitcMI=\    : \=W_CM_TYPE=\'d0;
   
assign p1_att_snp_type  = p1_att_snp_cln_dtr | p1_att_snp_vld_dtr | p1_att_snp_inv_dtr |
                          p1_att_snp_cln_dtw | p1_att_snp_inv_dtw | p1_att_snp_inv |
                          p1_att_snp_nitc | p1_att_snp_nosd |
                          p1_att_snp_inv_stsh | p1_att_snp_unq_stsh |
                          p1_att_snp_stsh_shd | p1_att_snp_stsh_unq |
                          p1_att_snp_nitcci | p1_att_snp_nitcmi;
   
assign p1_att_snp_all = | (p1_att_snp_inv_dtr | p1_att_snp_inv_dtw | p1_att_snp_inv | p1_att_snp_nitcmi | p1_att_snp_nitcci | p1_att_snp_inv_stsh | p1_att_snp_unq_stsh);   

assign p1_att_mrd_rd_cln      = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdCln=\          )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdRdVld=\          )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchUnq=\       )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchShd=\       )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNshDty=\       )) ? \=CM_TYPE.MrdRdCln=\  : \=W_CM_TYPE=\'d0; // WS / WU based on snp rsp in att entry

assign p1_att_mrd_rd_wu       = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdUnq=\          )) ? \=CM_TYPE.MrdRdWU=\     : \=W_CM_TYPE=\'d0;

assign p1_att_mrd_rd_winv     = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNitcMI=\       )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNitcCI=\       )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdRdNitc=\         )) ? \=CM_TYPE.MrdRdWInv=\   : \=W_CM_TYPE=\'d0;
   
assign p1_att_mrd_pref        = (~p1_req_cmd_req_stash_mpf1 &
                                 ((p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchUnq=\       ) |
                                  (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchShd=\       ))) ? \=CM_TYPE.MrdPref=\     : \=W_CM_TYPE=\'d0; 

assign p1_att_mrd_cln         = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdClnShPsist=\     )  |
                                 (p1_req_cmd_cm_type == \=CM_TYPE.CmdClnVld=\         )) ? \=CM_TYPE.MrdCln=\      : \=W_CM_TYPE=\'d0;
   
assign p1_att_mrd_inv         = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdMkInv=\          )) ? \=CM_TYPE.MrdInv=\      : \=W_CM_TYPE=\'d0;
   
assign p1_att_mrd_flush       = ((p1_req_cmd_cm_type == \=CM_TYPE.CmdClnInv=\         )) ? \=CM_TYPE.MrdFlush=\    : \=W_CM_TYPE=\'d0;
                       
assign p1_att_mrd_type        =  p1_att_mrd_rd_cln | p1_att_mrd_rd_wu | p1_att_mrd_rd_winv | p1_att_mrd_pref |
                                 p1_att_mrd_cln | p1_att_mrd_inv | p1_att_mrd_flush;

assign p1_att_mrd_type_valid  = | p1_att_mrd_type;

assign p1_att_wr_req = (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrUnqFull=\ ) |
                       (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrUnqPtl=\ )  |
                       (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrBkPtl=\ )   |
                       (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrBkFull=\ )  |
                       (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrClnFull=\ ) |
                       (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrClnPtl=\ )  |
                       (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrEvict=\ );

assign p1_att_atm_req = (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrAtm=\ ) |
                        (p1_req_cmd_cm_type == \=CM_TYPE.CmdRdAtm=\ ) |
                        (p1_req_cmd_cm_type == \=CM_TYPE.CmdSwapAtm=\ ) |
                        (p1_req_cmd_cm_type == \=CM_TYPE.CmdCompAtm=\ );

assign p1_att_write_rbid_valid = ((| (p1_att_snp_cln_dtr | p1_att_snp_inv_dtr | p1_att_snp_cln_dtw | p1_att_snp_inv_dtw | p1_att_snp_vld_dtr | 
                                     p1_att_snp_nitc | p1_att_snp_nosd | p1_att_snp_nitcci | p1_att_snp_nitcmi |
                                     p1_att_snp_unq_stsh | p1_att_snp_inv_stsh)) | 
                                     ( | (p1_att_snp_stsh_shd | p1_att_snp_stsh_unq) & p1_req_cmd_req_stash_mpf1) | p1_att_wr_req);

assign p1_dm_req_alloc = ~p1_att_coll_detected &                                                            // no collision       
                         ~p1_att_wr_req &                                                                   // not a write
                         ~p1_att_atm_req &                                                                  // not atomic
                         ~(p1_req_cmd_cm_type == \=CM_TYPE.CmdEvict=\ ) &                                   // not evict 
                         ~(| (p1_att_mrd_rd_winv | p1_att_mrd_cln | p1_att_mrd_inv | p1_att_mrd_flush)) &   // not NITC or CMO
                         ~(((p1_req_cmd_cm_type == \=CM_TYPE.CmdWrStshFull=\     ) |                        // not stash with no target  
                            (p1_req_cmd_cm_type == \=CM_TYPE.CmdWrStshPtl=\      ) |
                            (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchUnq=\       ) |
                            (p1_req_cmd_cm_type == \=CM_TYPE.CmdLdCchShd=\       ) ) &
                           ~p1_req_cmd_req_stash_mpf1);  

assign p1_dm_req_cancel = p1_att_coll_detected;
   
// Busy Way Vector generation
   
\=u.instance ({
    instanceName: 'u_busy_way_vec',
    moduleName: 'dce_busy_way_vec',
    params: {
        wAddr : W_ADDR,
        nWays : N_WAYS,
        nAtt : N_ATT,
        SnoopFilterInfo : SF_INFO
    },
    ports : {
       req_valid        : 'p1_req_valid', //= flop( ih_req_upd_valid ) | flop( ih_req_wakeup_valid ) | flop( tm_req_alloc_valid & tm_req_alloc_ready )
       req_addr         : 'p1_req_addr',  //= p1_req_upd_valid ? p1_req_upd_req_addr : p1_req_wakeup_valid ? p1_wakeup_req_cmd_req_addr : p1_tm_cmd_req_addr;
       att_addr         : 'att_entry_req_addr',
       att_way_vec      : 'att_entry_way_vec',
       att_valid        : 'att_entry_addr_comp_valid',
       dm_busy_way_vec  : 'p1_dm_busy_way_vec'
    }
})=\

// Address Collision detection

\=u.instance ({
    instanceName: 'cmd_req_addr_comp',
    moduleName: 'dce_addr_comp',
    params: {
        wAddr : W_ADDR,
        wNS : W_NS,
        wCacheLineOffset : W_CLO,
        nAtt : N_ATT
    },
    ports : {
        req_valid              : 'p1_tm_cmd_valid',      //= flop( tm_req_alloc_valid & tm_req_alloc_ready );
        req_wakeup_valid       : 'p1_req_wakeup_valid',  //= flop( ih_req_wakeup_valid )
        req_upd_valid          : 'p1_req_upd_valid',     //= flop( ih_req_upd_valid    )
        req_addr               : 'p1_req_cmd_req_addr',  //WAS: p1_req_addr
        req_ns                 : 'p1_req_cmd_req_ns',    //WAS: p1_req_ns
        req_att                : 'p1_req_att_alloc',
        att_addr               : 'att_entry_req_addr',
        att_ns                 : 'att_entry_req_ns',
        att_last               : 'att_entry_last',
        att_valid              : 'att_entry_addr_comp_valid',
        att_recall_entry_valid : 'att_recall_entry_valid',
        att_sleep              : 'att_entry_sleep',
        att_coll_en            : 'att_entry_coll_en',
        att_coll_detected      : 'p1_att_coll_detected'
    }
})=\

\=u.instance({
    instanceName: 'u_encode_p1_req_att_alloc',
    moduleName: 'encoder',
    params: { width: N_ATT },
    ports: {
        invector: 'p1_req_att_alloc',
        outdecode: 'att_entry_coll_num'
    }
})=\

//
// CMDreq.D_ID check for Unconnected DMI access error detection
//

wire [\=N_CONNECTED_DMIS-1=\:0] p1_tm_cmd_req_d_id_vec;

\js for (let i=0; i< N_CONNECTED_DMIS; i++) {
    \js if (N_CONNECTED_DMIS == 1) {
assign p1_tm_cmd_req_d_id_vec = (p1_tm_cmd_req_d_id[W_FUNIT_ID-1:0] == connected_dmi_f_unit_id[\=i=\*W_FUNIT_ID +: W_FUNIT_ID]) ? 1'b1 : 1'b0;
    \js } else {
assign p1_tm_cmd_req_d_id_vec[\=i=\] = (p1_tm_cmd_req_d_id[W_FUNIT_ID-1:0] == connected_dmi_f_unit_id[\=i=\*W_FUNIT_ID +: W_FUNIT_ID]) ? 1'b1 : 1'b0;
    \js }
\js }

assign err_p1_tm_cmd_req_d_id_valid = p1_tm_cmd_valid & ~{|{p1_tm_cmd_req_d_id_vec}};
assign err_p1_tm_cmd_req_d_id_addr  = p1_tm_cmd_req_addr;

endmodule
