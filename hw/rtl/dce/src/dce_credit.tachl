\jsbegin
//=============================================================================
// Copyright (C) 2017 Arteris, Inc.
// All rights reserved.
//=============================================================================
//
// NAME: dce_credit
//
// AUTHOR : Mohammed Khaleeluddin 
//
// DESCRIPTION:
// credit for DCE
//
//=============================================================================
//
// Variables
//
var u = obj.lib;
var m = obj.userLib;
//
// Params
//

let ASSERT_ON = m.ParamDefaultGet(u, 'assertOn', 'int', 0);

let N_ATT = m.ParamDefaultGet(u, 'nAttEntries', 'int', 32);
let N_TARGS = m.ParamDefaultGet(u, 'nTargets', 'int', 4);
let W_TARG_ID = m.ParamDefaultGet(u, 'wTargetId', 'int', 8);
let N_CREDITS = m.ParamDefaultGet(u, 'nCreditsPerTarget', 'int', 8);

let W_N_CREDITS = Math.max(Math.floor(Math.log2(N_CREDITS))+1, 1);

//
// Ports
//

u.port('input', 'clk', 1);
u.port('input', 'reset_n', 1);

u.port('input', 'att_req_credit', N_ATT);
u.port('input', 'att_req_credit_id_vec', N_ATT*N_TARGS);

u.port('input', 'att_targ_ids', N_TARGS*W_TARG_ID);

u.port('input', 'att_void_credit', 1);
u.port('input', 'att_void_credit_id', W_TARG_ID);

u.port('output', 'att_credit_grant', N_ATT*N_TARGS);
u.port('output', 'credits_not_zero', N_TARGS);

//
// Module
//

\jsend

module \=u.getModuleName()=\
         (\=u.getPorts()=\
          );
   
\jsbegin
//
// verilog params
//
\jsend
     
localparam
  N_ATT = \=N_ATT=\,
  N_TARGS = \=N_TARGS=\,
  W_TARG_ID = \=W_TARG_ID=\,
  N_CREDITS = \=N_CREDITS=\,
  N_CREDITS_MINUS_1 = N_CREDITS - 'd1,
  W_N_CREDITS = \=W_N_CREDITS=\;



wire [N_TARGS*N_ATT-1:0] targ_req_sel_mask, targ_sel_req, credit_sel_ready, targ_sel_gnt;
wire [N_TARGS-1:0] credit_req_valid, credit_req_ready, credit_req_last;
wire [N_TARGS-1:0] credits_not_zero_int;


\js for(var gi=0; gi< N_ATT; gi++) {

    \js for(let i=0; i<N_TARGS; i++) {                    
assign targ_req_sel_mask[N_ATT*\=i=\ + \=gi=\] = att_req_credit_id_vec[\=i=\+(N_TARGS*\=gi=\)];  
    \js } 

\js }

\js for(var gi=0; gi< N_TARGS; gi++) {

assign targ_sel_req[\=gi=\*N_ATT +: N_ATT] = targ_req_sel_mask[\=gi=\*N_ATT +: N_ATT]; //& att_req_credit;
        // ARB
        \=u.instance ({
                       instanceName: 'credit_rr_arb'+gi,
                       moduleName: 'rr_arb_comb_mux_therm',
                       params: {
                                num_inputs: N_ATT,
                                interleave_mode : 1
                                },
                       verilogParams: {},
                       ports: {
                               'clk' : 'clk',
                               'reset_n' : 'reset_n',
                               'sink_valid':'targ_sel_req['+gi+'*N_ATT +: N_ATT]',
                               'sink_last': "{N_ATT{1'b1}}",
                               'sink_ready': 'credit_sel_ready['+gi+'*N_ATT +: N_ATT]',
                               'sink_grant': 'targ_sel_gnt['+gi+'*N_ATT +: N_ATT]',
                               'source_valid': 'credit_req_valid['+gi+']',
                               'source_ready': 'credit_req_ready['+gi+']',
                               'source_last' : 'credit_req_last['+gi+']'
                               }
                       })=\

          // credit counter
        \=u.instance ({
                       instanceName: 'u_credit_counter'+gi,
                       moduleName: 'dce_credit_counter',
                       params: {
                                assertOn: ASSERT_ON,
                                wTargetId : W_TARG_ID,
                                nCreditsPerTarget : N_CREDITS
                                },
                       verilogParams: {},
                       ports: {
                               clk                : 'clk',
                               reset_n            : 'reset_n',
                               att_targ_ids       : 'att_targ_ids['+gi+'*W_TARG_ID +: W_TARG_ID]',
                               credits_not_zero   : 'credits_not_zero_int['+gi+']',
                               credit_req_valid   : 'credit_req_valid['+gi+']',
                               credit_req_ready   : 'credit_req_ready['+gi+']',
                               att_void_credit    : 'att_void_credit',
                               att_void_credit_id : 'att_void_credit_id'
                              }
                       })=\

    \js if (N_TARGS == 1) {
assign credits_not_zero = credits_not_zero_int[\=gi=\];
    \js } else {
assign credits_not_zero[\=gi=\] = credits_not_zero_int[\=gi=\];
    \js }

\js }

\js for(var gi=0; gi< N_ATT; gi++) {

    \js for(let i=0; i<N_TARGS; i++) {  
        assign att_credit_grant[\=i=\+(N_TARGS*\=gi=\)] = credit_sel_ready[N_ATT*\=i=\ + \=gi=\];       
    \js } 

\js }

endmodule 
