\jsbegin
//=============================================================================
// Copyright(C) 2023 Arteris, Inc.
// All rights reserved
//=============================================================================
// plru.tachl
// Author: Boon Chuan
// Filename: plru.tachl
//=============================================================================

// Variables

var u = obj.lib;

//=============================================================================
// Top Level Parameters
//=============================================================================

var ways = u.getParam("ways");

var ways_is_illegal = 0;
//This is a leagaility test should not be able to do it.
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways < 0) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 1 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 3 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 5 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 7 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 9 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 10 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 11 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 13 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 14 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 15 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 17 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 18 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 19 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 21 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 22 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 23 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 25 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 26 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 27 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 29 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 30 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways == 31 ) ways_is_illegal = 1;
/* istanbul ignore if env ncore_3p6, ncore_3p7*/
if (ways_is_illegal) {
    throw new Error("ERROR! It's illegal for ways=", ways);
}

//=============================================================================
// Ports
//=============================================================================

u.port('input',  'hit_way', ways);
u.port('input',  'valid_ways', ways);
u.port('input',  'cur_state',  ways-1);
u.port('output', 'nxt_state',  ways-1, 'reg');
u.port('output', 'victim_way', ways);

\jsend

module \=obj.lib.getModuleName()=\ (\=obj.lib.getPorts('\n')=\);

wire hit;
wire [\=ways-2=\:0] s;
wire [\=ways-2=\:0] state;
reg  [\=ways-1=\:0] victim;

\jsbegin
//=============================================================================
//                           (hit_way != all 0s)
//                                             |          LUT
//                                            +-+         +--+
//            .------------------------------>|1|         |  |
//            |                               | |-------->|  |
//            |              .--------------->|0|         |  |
//            |              |                +-+         |  |
//            |  override    |     LUT        MUX         |  |
//            |   +----+     |     +--+       +-+         |  |
// cur_state -+-->|    |-> state ->|  |-> w ->|0|--> v -->|  |--> nxt_state
//                |    |           |  |       | |    |    |  |
//                |    |           |  |       | |    |    |  |
//                |    |           +--+       | |    |    +--+
//                |    |                      | |    |
//                |    |     hit_way -------->|1|    |    MUX
//                |    |                      +-+    |    +-+
//             .->|    |                       |     +--->|0|
//             |  +----+                       |          | |--> victim_way
//             |                               |  all 0s->|1|
//             |             (hit_way != all 0s)          +-+
//             |                                           |
// valid_ways->+-------------------------------------------+
//                                (valid_ways == all 0s) OR (hit_way != all 0s)
//=============================================================================
\jsend

assign hit = {|{hit_way}};

assign victim_way = {|{valid_ways}} & ~hit ? victim : \=ways=\'b0;

\jsbegin
//=============================================================================
// 2-way set associateive pseudo LRU
//=============================================================================
//                state[0]
//                  / \
//                 0   1
//                 |   |
//                way way
//                 0   1
//
//  lut
//  ---------------  -------------------
//  state | victim   ref to | next state
//  ------+--------  -------+-----------
//  0     | way 0    way 0  | 1
//  1     | way 1    way 1  | 0
//
// way 0 1 0 1
//
// override
// ------------------------------------------------
// state[0] = valid_ways[0] == 0 ? 1 :
//            valid_ways[1] == 0 ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 2) {

assign state = valid_ways[0] == 1'b0 ? 1'b1 :
               valid_ways[1] == 1'b0 ? 1'b0 : cur_state;

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
case (state)
    1'b0    : victim = 2'b01;
    1'b1    : victim = 2'b10;

    default : victim = 2'b01;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = 1'b1;
    victim[1] : nxt_state = 1'b0;

    default   : nxt_state = 1'b1;
endcase
end

\js } // if (ways == 2)
 
\jsbegin
//=============================================================================
// 4-way set associateive pseudo LRU
//=============================================================================
//                state[0]
//                  / \
//                 0   1
//                /     \
//           state[1] state[2]
//             / \      / \
//            0   1    0   1
//            |   |    |   |
//           way way  way way
//            0   1    2   3
//
// way 0 2 1 3 0 2 1 3
//
//  lut
//  --------------------  -------------------
//  state[2:0] | victim   ref to | next state
//  -----------+--------  -------+-----------
//  x0 0       | way 0    way 0  | _1 1
//  x1 0       | way 1    way 1  | _0 1
//  0x 1       | way 2    way 2  | 1_ 0
//  1x 1       | way 3    way 3  | 0_ 0
//
// override
// ------------------------------------------------
// state[0] = valid_ways[1:0] == 00 ? 1 :
//            valid_ways[3:2] == 00 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[1:0] == 00 ? _ :
//            valid_ways[0] == 0 ? 1 :
//            valid_ways[1] == 0 ? 0 : _;
// ------------------------------------------------
// state[2] = valid_ways[3:2] == 00 ? _ :
//            valid_ways[2] == 0 ? 1 :
//            valid_ways[3] == 0 ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 4) {

assign state[0] = valid_ways[1:0] == 2'b00 ? 1'b1 :
                  valid_ways[3:2] == 2'b00 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[1:0] == 2'b00 ? cur_state[1] :
                  valid_ways[0] == 1'b0 ? 1'b1 :
                  valid_ways[1] == 1'b0 ? 1'b0 : cur_state[1];

assign state[2] = valid_ways[3:2] == 2'b00 ? cur_state[2] :
                  valid_ways[2] == 1'b0 ? 1'b1 :
                  valid_ways[3] == 1'b0 ? 1'b0 : cur_state[2];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    3'b?00  : victim = 4'b0001;
    3'b?10  : victim = 4'b0010;
    3'b0?1  : victim = 4'b0100;
    3'b1?1  : victim = 4'b1000;

    default : victim = 4'b0001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[2], 1'b1, 1'b1};
    victim[1] : nxt_state = {s[2], 1'b0, 1'b1};
    victim[2] : nxt_state = {1'b1, s[1], 1'b0};
    victim[3] : nxt_state = {1'b0, s[1], 1'b0};

    default   : nxt_state = {s[2], 1'b1, 1'b1};
endcase
end

\js } // if (ways == 4)
 
\jsbegin
//=============================================================================
// 6-way set associateive pseudo LRU
//=============================================================================
//                state[0]
//                 /   \
//                0     1
//               /       \
//          state[1]   state[2]
//            / \         / \
//           0   1       0   1
//          /     \     /     \
//       state[3] way state[4] way
//        / \      2   / \      5
//       0   1        0   1
//       |   |        |   |
//      way way      way way
//       0   1        3   4
//
// way 0 3 2 5 1 4 2 5 0 3 2 5 1 4 2 5
//
//  lut
//  ---------------------  ------------------------
//  state[4:0] | victim    ref to | next state[4:0]
//  -----------+---------  -------+----------------
//    x0 x0 0  | way 0     way 0  |   _1 _1 1
//    x1 x0 0  | way 1     way 1  |   _0 _1 1
//    xx x1 0  | way 2     way 2  |   __ _0 1
//    0x 0x 1  | way 3     way 3  |   1_ 1_ 0
//    1x 0x 1  | way 4     way 4  |   0_ 1_ 0
//    xx 1x 1  | way 5     way 5  |   __ 0_ 0
//
// override
// ------------------------------------------------
// state[0] = valid_ways[2:0] == 000 ? 1 :
//            valid_ways[5:3] == 000 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[2:0] == 000 ? _ :
//            valid_ways[1:0] == 00   ? 1 :
//            valid_ways[  2] == 0    ? 0 : _;
// state[2] = valid_ways[5:3] == 000 ? _ :
//            valid_ways[4:3] == 00   ? 1 :
//            valid_ways[  5] == 0    ? 0 : _;
// ------------------------------------------------
// state[3] = valid_ways[1:0] == 00   ? _ :
//            valid_ways[0]   == 0    ? 1 :
//            valid_ways[1]   == 0    ? 0 : _;
// state[4] = valid_ways[4:3] == 00   ? _ :
//            valid_ways[3]   == 0    ? 1 :
//            valid_ways[4]   == 0    ? 0 : _;
//=============================================================================
\jsend

\js if (ways == 6) {

assign state[0] = valid_ways[2:0] == 3'b000 ? 1'b1 :
                  valid_ways[5:3] == 3'b000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[2:0] == 3'b000 ? cur_state[1] :
                  valid_ways[1:0] == 2'b00 ? 1'b1 :
                  valid_ways[2]   == 1'b0  ? 1'b0 : cur_state[1];

assign state[2] = valid_ways[5:3] == 3'b000 ? cur_state[2] :
                  valid_ways[4:3] == 2'b00 ? 1'b1 :
                  valid_ways[5]   == 1'b0  ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[1:0] == 2'b00 ? cur_state[3] :
                  valid_ways[0]   == 1'b0 ? 1'b1 :
                  valid_ways[1]   == 1'b0 ? 1'b0 : cur_state[3];

assign state[4] = valid_ways[4:3] == 2'b00 ? cur_state[4] :
                  valid_ways[3]   == 1'b0 ? 1'b1 :
                  valid_ways[4]   == 1'b0 ? 1'b0 : cur_state[4];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    5'b?0_?0_0  : victim = 6'b000001;
    5'b?1_?0_0  : victim = 6'b000010;
    5'b??_?1_0  : victim = 6'b000100;
    5'b0?_0?_1  : victim = 6'b001000;
    5'b1?_0?_1  : victim = 6'b010000;
    5'b??_1?_1  : victim = 6'b100000;

    default     : victim = 6'b000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[4], 1'b1, s[2], 1'b1, 1'b1};
    victim[1] : nxt_state = {s[4], 1'b0, s[2], 1'b1, 1'b1};
    victim[2] : nxt_state = {s[4], s[3], s[2], 1'b0, 1'b1};
    victim[3] : nxt_state = {1'b1, s[3], 1'b1, s[1], 1'b0};
    victim[4] : nxt_state = {1'b0, s[3], 1'b1, s[1], 1'b0};
    victim[5] : nxt_state = {s[4], s[3], 1'b0, s[1], 1'b0};

    default   : nxt_state = {s[4], 1'b1, s[2], 1'b1, 1'b1};
endcase
end

\js } // if (ways == 6)

\jsbegin
//=============================================================================
// 8-way set associateive pseudo LRU
//=============================================================================
//                state[0]
//                 /   \
//                0     1
//               /       \
//          state[1]     state[2]
//            / \           / \
//           0   1         0   1
//          /     \       /     \
//   state[3] state[4] state[5] state[6]
//    / \      /  \     / \      / \
//   0   1    0   1    0   1    0   1
//   |   |    |   |    |   |    |   |
//  way way  way way  way way  way way
//   0   1    2   3    4   5    6   7
//
// way 0 4 2 6 1 5 3 7 0 4 2 6 1 5 3 7
//
//  lut
//  ---------------------  ------------------------
//  state[6:0] | victim    ref to | next state[6:0]
//  -----------+---------  -------+----------------
//  xxx0 x0 0  | way 0     way 0  |  ___1 _1 1
//  xxx1 x0 0  | way 1     way 1  |  ___0 _1 1
//  xx0x x1 0  | way 2     way 2  |  __1_ _0 1
//  xx1x x1 0  | way 3     way 3  |  __0_ _0 1
//  x0xx 0x 1  | way 4     way 4  |  _1__ 1_ 0
//  x1xx 0x 1  | way 5     way 5  |  _0__ 1_ 0
//  0xxx 1x 1  | way 6     way 6  |  1___ 0_ 0
//  1xxx 1x 1  | way 7     way 7  |  0___ 0_ 0
//
// override
// ------------------------------------------------
// state[0] = valid_ways[3:0] == 0000 ? 1 :
//            valid_ways[7:4] == 0000 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[3:0] == 0000 ? _ :
//            valid_ways[1:0] == 00   ? 1 :
//            valid_ways[3:2] == 00   ? 0 : _;
// state[2] = valid_ways[7:4] == 0000 ? _ :
//            valid_ways[5:4] == 00   ? 1 :
//            valid_ways[7:6] == 00   ? 0 : _;
// ------------------------------------------------
// state[3] = valid_ways[1:0] == 00   ? _ :
//            valid_ways[0]   == 0    ? 1 :
//            valid_ways[1]   == 0    ? 0 : _;
// state[4] = valid_ways[3:2] == 00   ? _ :
//            valid_ways[2]   == 0    ? 1 :
//            valid_ways[3]   == 0    ? 0 : _;
// state[5] = valid_ways[5:4] == 00   ? _ :
//            valid_ways[4]   == 0    ? 1 :
//            valid_ways[5]   == 0    ? 0 : _;
// state[6] = valid_ways[7:6] == 00   ? _ :
//            valid_ways[6]   == 0    ? 1 :
//            valid_ways[7]   == 0    ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 8) {

assign state[0] = valid_ways[3:0] == 4'b0000 ? 1'b1 :
                  valid_ways[7:4] == 4'b0000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[3:0] == 4'b0000 ? cur_state[1] :
                  valid_ways[1:0] == 2'b00 ? 1'b1 :
                  valid_ways[3:2] == 2'b00 ? 1'b0 : cur_state[1];

assign state[2] = valid_ways[7:4] == 4'b0000 ? cur_state[2] :
                  valid_ways[5:4] == 2'b00 ? 1'b1 :
                  valid_ways[7:6] == 2'b00 ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[1:0] == 2'b00 ? cur_state[3] :
                  valid_ways[0]   == 1'b0 ? 1'b1 :
                  valid_ways[1]   == 1'b0 ? 1'b0 : cur_state[3];

assign state[4] = valid_ways[3:2] == 2'b00 ? cur_state[4] :
                  valid_ways[2]   == 1'b0 ? 1'b1 :
                  valid_ways[3]   == 1'b0 ? 1'b0 : cur_state[4];

assign state[5] = valid_ways[5:4] == 2'b00 ? cur_state[5] :
                  valid_ways[4]   == 1'b0 ? 1'b1 :
                  valid_ways[5]   == 1'b0 ? 1'b0 : cur_state[5];

assign state[6] = valid_ways[7:6] == 2'b00 ? cur_state[6] :
                  valid_ways[6]   == 1'b0 ? 1'b1 :
                  valid_ways[7]   == 1'b0 ? 1'b0 : cur_state[6];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    7'b???0_?0_0  : victim = 8'b00000001;
    7'b???1_?0_0  : victim = 8'b00000010;
    7'b??0?_?1_0  : victim = 8'b00000100;
    7'b??1?_?1_0  : victim = 8'b00001000;
    7'b?0??_0?_1  : victim = 8'b00010000;
    7'b?1??_0?_1  : victim = 8'b00100000;
    7'b0???_1?_1  : victim = 8'b01000000;
    7'b1???_1?_1  : victim = 8'b10000000;

    default       : victim = 8'b00000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[6], s[5], s[4], 1'b1, s[2], 1'b1, 1'b1};
    victim[1] : nxt_state = {s[6], s[5], s[4], 1'b0, s[2], 1'b1, 1'b1};
    victim[2] : nxt_state = {s[6], s[5], 1'b1, s[3], s[2], 1'b0, 1'b1};
    victim[3] : nxt_state = {s[6], s[5], 1'b0, s[3], s[2], 1'b0, 1'b1};
    victim[4] : nxt_state = {s[6], 1'b1, s[4], s[3], 1'b1, s[1], 1'b0};
    victim[5] : nxt_state = {s[6], 1'b0, s[4], s[3], 1'b1, s[1], 1'b0};
    victim[6] : nxt_state = {1'b1, s[5], s[4], s[3], 1'b0, s[1], 1'b0};
    victim[7] : nxt_state = {1'b0, s[5], s[4], s[3], 1'b0, s[1], 1'b0};

    default   : nxt_state = {s[6], s[5], s[4], 1'b1, s[2], 1'b1, 1'b1};
endcase
end

\js } // if (ways == 8)
 
\jsbegin
//=============================================================================
// 12-way set associateive pseudo LRU
//=============================================================================
//                           s[0]
//                     /             \
//                    0               1
//                   /                 \
//                s[1]                  s[2]
//                /  \                 /    \
//               0    1               0      1
//              /      \             /        \
//            s[3]      s[4]       s[5]       s[6]
//            / \       /  \       / \         / \
//           0   1      0   1     0   1       0   1
//          /     \     |   |    /     \      |   |
//        s[7]   s[8]  way way  s[9]   s[10] way way
//        / \    /  \   4   5  / \     /  \   10  11
//      way way way way       way way way way
//       0   1   2   3         6   7   8   9
//
// way 0 6 4 10 2 8 5 11 1 7 4 10 3 9 5 11 0 6 4 10 2 8 5 11 1 7 4 10 3 9 5 11
//
//  lut
//  ------------------------------  ----------------------------
//  state[10:0]         | replace   ref to | next state[10:0]
//  --------------------+---------  -------+--------------------
//      xxx0 xxx0 x0 0  | way 0     way 0  |     ___1 ___1 _1 1
//      xxx1 xxx0 x0 0  | way 1     way 1  |     ___0 ___1 _1 1
//      xx0x xxx1 x0 0  | way 2     way 2  |     __1_ ___0 _1 1
//      xx1x xxx1 x0 0  | way 3     way 3  |     __0_ ___0 _1 1
//      xxxx xx0x x1 0  | way 4     way 4  |     ____ __1_ _0 1
//      xxxx xx1x x1 0  | way 5     way 5  |     ____ __0_ _0 1
//      x0xx x0xx 0x 1  | way 6     way 6  |     _1__ _1__ 1_ 0
//      x1xx x0xx 0x 1  | way 7     way 7  |     _0__ _1__ 1_ 0
//      0xxx x1xx 0x 1  | way 8     way 8  |     1___ _0__ 1_ 0
//      1xxx x1xx 0x 1  | way 9     way 9  |     0___ _0__ 1_ 0
//      xxxx 0xxx 1x 1  | way 10    way 10 |     ____ 1___ 0_ 0
//      xxxx 1xxx 1x 1  | way 11    way 11 |     ____ 0___ 0_ 0
//
// victim
// ------------------------------------------------
// state[0] = valid_ways[ 5:0] == 00000 ? 1 :
//            valid_ways[11:6] == 00000 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[ 5:0] == 00000 ? _ :
//            valid_ways[ 3: 0] == 0000 ? 1 :
//            valid_ways[ 5: 4] ==   00 ? 0 : _;
// state[2] = valid_ways[11:6] == 00000 ? _ :
//            valid_ways[ 9: 6] == 0000 ? 1 :
//            valid_ways[11:10] ==   00 ? 0 : _;
// ------------------------------------------------
// state[3] = valid_ways[ 3: 0] == 0000 ? _ :
//            valid_ways[1:0] == 00   ? 1 :
//            valid_ways[3:2] == 00   ? 0 : _;
// state[4] = valid_ways[ 5: 4] ==   00 ? _ :
//            valid_ways[4]   ==  0   ? 1 :
//            valid_ways[5]   ==  0   ? 0 : _;
// state[5] = valid_ways[ 9: 6] == 0000 ? _ :
//            valid_ways[7:6] == 00   ? 1 :
//            valid_ways[9:8] == 00   ? 0 : _;
// state[6] = valid_ways[11:10] ==   00 ? _ :
//            valid_ways[10]  ==  0   ? 1 :
//            valid_ways[11]  ==  0   ? 0 : _;
// ------------------------------------------------
// state[7]  = valid_ways[1:0] == 00   ? _ :
//             valid_ways[ 0] == 0  ? 1 :
//             valid_ways[ 1] == 0  ? 0 : _;
// state[8]  = valid_ways[3:2] == 00   ? _ :
//             valid_ways[ 2] == 0  ? 1 :
//             valid_ways[ 3] == 0  ? 0 : _;
// state[9]  = valid_ways[7:6] == 00   ? _ :
//             valid_ways[ 6] == 0  ? 1 :
//             valid_ways[ 7] == 0  ? 0 : _;
// state[10] = valid_ways[9:8] == 00   ? _ :
//             valid_ways[ 8] == 0  ? 1 :
//             valid_ways[ 9] == 0  ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 12) {

assign state[0] = valid_ways[5:0]  == 6'b000000 ? 1'b1 :
                  valid_ways[11:6] == 6'b000000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[5:0]  == 6'b000000 ? cur_state[1] :
                  valid_ways[3:0]   == 4'b0000 ? 1'b1 :
                  valid_ways[5:4]   == 2'b00   ? 1'b0 : cur_state[1];
assign state[2] = valid_ways[11:6] == 6'b000000 ? cur_state[2] :
                  valid_ways[9:6]   == 4'b0000 ? 1'b1 :
                  valid_ways[11:10] == 2'b00   ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[3:0]   == 4'b0000 ? cur_state[3] :
                  valid_ways[1:0] == 2'b00 ? 1'b1 :
                  valid_ways[3:2] == 2'b00 ? 1'b0 : cur_state[3];
assign state[4] = valid_ways[5:4]   == 2'b00   ? cur_state[4] :
                  valid_ways[4]   == 1'b0  ? 1'b1 :
                  valid_ways[5]   == 1'b0  ? 1'b0 : cur_state[4];
assign state[5] = valid_ways[9:6]   == 4'b0000 ? cur_state[5] :
                  valid_ways[7:6] == 2'b00 ? 1'b1 :
                  valid_ways[9:8] == 2'b00 ? 1'b0 : cur_state[5];
assign state[6] = valid_ways[11:10] == 2'b00   ? cur_state[6] :
                  valid_ways[10]  == 1'b0  ? 1'b1 :
                  valid_ways[11]  == 1'b0  ? 1'b0 : cur_state[6];

assign state[7] =  valid_ways[1:0] == 2'b00 ? cur_state[7] :
                   valid_ways[0] == 1'b0 ? 1'b1 :
                   valid_ways[1] == 1'b0 ? 1'b0 : cur_state[7];
assign state[8] =  valid_ways[3:2] == 2'b00 ? cur_state[8] :
                   valid_ways[2] == 1'b0 ? 1'b1 :
                   valid_ways[3] == 1'b0 ? 1'b0 : cur_state[8];
assign state[9] =  valid_ways[7:6] == 2'b00 ? cur_state[9] :
                   valid_ways[6] == 1'b0 ? 1'b1 :
                   valid_ways[7] == 1'b0 ? 1'b0 : cur_state[9];
assign state[10] = valid_ways[9:8] == 2'b00 ? cur_state[10] :
                   valid_ways[8] == 1'b0 ? 1'b1 :
                   valid_ways[9] == 1'b0 ? 1'b0 : cur_state[10];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    11'b???0_???0_?0_0  : victim = 12'b000000000001;
    11'b???1_???0_?0_0  : victim = 12'b000000000010;
    11'b??0?_???1_?0_0  : victim = 12'b000000000100;
    11'b??1?_???1_?0_0  : victim = 12'b000000001000;
    11'b????_??0?_?1_0  : victim = 12'b000000010000;
    11'b????_??1?_?1_0  : victim = 12'b000000100000;
    11'b?0??_?0??_0?_1  : victim = 12'b000001000000;
    11'b?1??_?0??_0?_1  : victim = 12'b000010000000;
    11'b0???_?1??_0?_1  : victim = 12'b000100000000;
    11'b1???_?1??_0?_1  : victim = 12'b001000000000;
    11'b????_0???_1?_1  : victim = 12'b010000000000;
    11'b????_1???_1?_1  : victim = 12'b100000000000;

    default             : victim = 12'b000000000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[10], s[9], s[8], 1'b1, s[6], s[5], s[4], 1'b1, s[2], 1'b1, 1'b1};
    victim[1] : nxt_state = {s[10], s[9], s[8], 1'b0, s[6], s[5], s[4], 1'b1, s[2], 1'b1, 1'b1};
    victim[2] : nxt_state = {s[10], s[9], 1'b1, s[7], s[6], s[5], s[4], 1'b0, s[2], 1'b1, 1'b1};
    victim[3] : nxt_state = {s[10], s[9], 1'b0, s[7], s[6], s[5], s[4], 1'b0, s[2], 1'b1, 1'b1};
    victim[4] : nxt_state = {s[10], s[9], s[8], s[7], s[6], s[5], 1'b1, s[3], s[2], 1'b0, 1'b1};
    victim[5] : nxt_state = {s[10], s[9], s[8], s[7], s[6], s[5], 1'b0, s[3], s[2], 1'b0, 1'b1};
    victim[6] : nxt_state = {s[10], 1'b1, s[8], s[7], s[6], 1'b1, s[4], s[3], 1'b1, s[1], 1'b0};
    victim[7] : nxt_state = {s[10], 1'b0, s[8], s[7], s[6], 1'b0, s[4], s[3], 1'b1, s[1], 1'b0};
    victim[8] : nxt_state = {1'b1,  s[9], s[8], s[7], s[6], 1'b0, s[4], s[3], 1'b1, s[1], 1'b0};
    victim[9] : nxt_state = {1'b0,  s[9], s[8], s[7], s[6], 1'b0, s[4], s[3], 1'b1, s[1], 1'b0};
    victim[10]: nxt_state = {s[10], s[9], s[8], s[7], 1'b1, s[5], s[4], s[3], 1'b0, s[1], 1'b0};
    victim[11]: nxt_state = {s[10], s[9], s[8], s[7], 1'b0, s[5], s[4], s[3], 1'b0, s[1], 1'b0};

    default   : nxt_state = {s[10], s[9], s[8], 1'b1, s[6], s[5], s[4], 1'b1, s[2], 1'b1, 1'b1};
endcase
end

\js } // if (ways == 12)
 
\jsbegin
//=============================================================================
// 16-way set associateive pseudo LRU
//=============================================================================
//                                 s[0]
//                        /                   \
//                       0                     1
//                      /                       \
//                  s[1]                          s[2]
//                 /     \                       /     \
//                0       1                     0       1
//               /         \                   /         \
//           s[3]           s[4]            s[5]          s[6]
//           / \            /  \             / \            / \
//          0   1          0    1           0   1          0   1
//         /     \        /      \         /     \        /     \
//       s[7]   s[8]    s[9]    s[10]    s[11]  s[12]   s[13]   s[14]
//       / \    /  \    /  \    /  \     /  \   /  \    /  \    /  \
//     way way way way way way way way way way way way way way way way
//      0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15
//
// way 0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15 0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15
//
//  lut
//  ------------------------------  ----------------------------
//  state[14:0]         | victim    ref to | next state[14:0]
//  --------------------+---------  -------+--------------------
//  xxxxxxx0 xxx0 x0 0  | way 0     way 0  |  _______1 ___1 _1 1
//  xxxxxxx1 xxx0 x0 0  | way 1     way 1  |  _______0 ___1 _1 1
//  xxxxxx0x xxx1 x0 0  | way 2     way 2  |  ______1_ ___0 _1 1
//  xxxxxx1x xxx1 x0 0  | way 3     way 3  |  ______0_ ___0 _1 1
//  xxxxx0xx xx0x x1 0  | way 4     way 4  |  _____1__ __1_ _0 1
//  xxxxx1xx xx0x x1 0  | way 5     way 5  |  _____0__ __1_ _0 1
//  xxxx0xxx xx1x x1 0  | way 6     way 6  |  ____1___ __0_ _0 1
//  xxxx1xxx xx1x x1 0  | way 7     way 7  |  ____0___ __0_ _0 1
//  xxx0xxxx x0xx 0x 1  | way 8     way 8  |  ___1____ _1__ 1_ 0
//  xxx1xxxx x0xx 0x 1  | way 9     way 9  |  ___0____ _1__ 1_ 0
//  xx0xxxxx x1xx 0x 1  | way 10    way 10 |  __1_____ _0__ 1_ 0
//  xx1xxxxx x1xx 0x 1  | way 11    way 11 |  __0_____ _0__ 1_ 0
//  x0xxxxxx 0xxx 1x 1  | way 12    way 12 |  _1______ 1___ 0_ 0
//  x1xxxxxx 0xxx 1x 1  | way 13    way 13 |  _0______ 1___ 0_ 0
//  0xxxxxxx 1xxx 1x 1  | way 14    way 14 |  1_______ 0___ 0_ 0
//  1xxxxxxx 1xxx 1x 1  | way 15    way 15 |  0_______ 0___ 0_ 0
//
// override
// ------------------------------------------------
// state[0] = valid_ways[ 7:0] == 0000_0000 ? 1 :
//            valid_ways[15:8] == 0000_0000 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[ 7:0] == 0000_0000 ? _ :
//            valid_ways[ 3: 0] == 0000 ? 1 :
//            valid_ways[ 7: 4] == 0000 ? 0 : _;
// state[2] = valid_ways[15:8] == 0000_0000 ?  _ :
//            valid_ways[11: 8] == 0000 ? 1 :
//            valid_ways[15:12] == 0000 ? 0 : _;
// ------------------------------------------------
// state[3] = valid_ways[ 3: 0] == 0000 ? _ :
//            valid_ways[ 1: 0] == 00   ? 1 :
//            valid_ways[ 3: 2] == 00   ? 0 : _;
// state[4] = valid_ways[ 7: 4] == 0000 ? _ :
//            valid_ways[ 5: 4] == 00   ? 1 :
//            valid_ways[ 7: 6] == 00   ? 0 : _;
// state[5] = valid_ways[11: 8] == 0000 ? _ :
//            valid_ways[ 9: 8] == 00   ? 1 :
//            valid_ways[11:10] == 00   ? 0 : _;
// state[6] = valid_ways[15:12] == 0000 ? _ :
//            valid_ways[13:12] == 00   ? 1 :
//            valid_ways[15:14] == 00   ? 0 : _;
// ------------------------------------------------
// state[7]  = valid_ways[ 1: 0] == 00   ? _ :
//             valid_ways[ 0] == 0  ? 1 :
//             valid_ways[ 1] == 0  ? 0 : _;
// state[8]  = valid_ways[ 3: 2] == 00   ? _ :
//             valid_ways[ 2] == 0  ? 1 :
//             valid_ways[ 3] == 0  ? 0 : _;
// state[9]  = valid_ways[ 5: 4] == 00   ? _ :
//             valid_ways[ 4] == 0  ? 1 :
//             valid_ways[ 5] == 0  ? 0 : _;
// state[10] = valid_ways[ 7: 6] == 00   ? _ :
//             valid_ways[ 6] == 0  ? 1 :
//             valid_ways[ 7] == 0  ? 0 : _;
// state[11] = valid_ways[ 9: 8] == 00   ? _ :
//             valid_ways[ 8] == 0  ? 1 :
//             valid_ways[ 9] == 0  ? 0 : _;
// state[12] = valid_ways[11:10] == 00   ? _ :
//             valid_ways[10] == 0  ? 1 :
//             valid_ways[11] == 0  ? 0 : _;
// state[13] = valid_ways[13:12] == 00   ? _ :
//             valid_ways[12] == 0  ? 1 :
//             valid_ways[13] == 0  ? 0 : _;
// state[14] = valid_ways[15:14] == 00   ? _ :
//             valid_ways[14] == 0  ? 1 :
//             valid_ways[15] == 0  ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 16) {

assign state[0] = valid_ways[ 7:0] == 8'b0000_0000 ? 1'b1 :
                  valid_ways[15:8] == 8'b0000_0000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[ 7:0] == 8'b0000_0000 ? cur_state[1] :
                  valid_ways[ 3: 0] == 4'b0000 ? 1'b1 :
                  valid_ways[ 7: 4] == 4'b0000 ? 1'b0 : cur_state[1];
assign state[2] = valid_ways[15:8] == 8'b0000_0000 ? cur_state[2] :
                  valid_ways[11: 8] == 4'b0000 ? 1'b1 :
                  valid_ways[15:12] == 4'b0000 ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[ 3: 0] == 4'b0000 ? cur_state[3] :
                  valid_ways[ 1: 0] == 2'b00   ? 1'b1 :
                  valid_ways[ 3: 2] == 2'b00   ? 1'b0 : cur_state[3];
assign state[4] = valid_ways[ 7: 4] == 4'b0000 ? cur_state[4] :
                  valid_ways[ 5: 4] == 2'b00   ? 1'b1 :
                  valid_ways[ 7: 6] == 2'b00   ? 1'b0 : cur_state[4];
assign state[5] = valid_ways[11: 8] == 4'b0000 ? cur_state[5] :
                  valid_ways[ 9: 8] == 2'b00   ? 1'b1 :
                  valid_ways[11:10] == 2'b00   ? 1'b0 : cur_state[5];
assign state[6] = valid_ways[15:12] == 4'b0000 ? cur_state[6] :
                  valid_ways[13:12] == 2'b00   ? 1'b1 :
                  valid_ways[15:14] == 2'b00   ? 1'b0 : cur_state[6];

assign state[7]  = valid_ways[ 1: 0] == 2'b00   ? cur_state[7] :
                   valid_ways[ 0] == 1'b0  ? 1'b1 :
                   valid_ways[ 1] == 1'b0  ? 1'b0 : cur_state[7];
assign state[8]  = valid_ways[ 3: 2] == 2'b00   ? cur_state[8] :
                   valid_ways[ 2] == 1'b0  ? 1'b1 :
                   valid_ways[ 3] == 1'b0  ? 1'b0 : cur_state[8];
assign state[9]  = valid_ways[ 5: 4] == 2'b00   ? cur_state[9] :
                   valid_ways[ 4] == 1'b0  ? 1'b1 :
                   valid_ways[ 5] == 1'b0  ? 1'b0 : cur_state[9];
assign state[10] = valid_ways[ 7: 6] == 2'b00   ?  cur_state[10] :
                   valid_ways[ 6] == 1'b0  ? 1'b1 :
                   valid_ways[ 7] == 1'b0  ? 1'b0 : cur_state[10];
assign state[11] = valid_ways[ 9: 8] == 2'b00   ? cur_state[11] :
                   valid_ways[ 8] == 1'b0  ? 1'b1 :
                   valid_ways[ 9] == 1'b0  ? 1'b0 : cur_state[11];
assign state[12] = valid_ways[11:10] == 2'b00   ? cur_state[12] :
                   valid_ways[10] == 1'b0  ? 1'b1 :
                   valid_ways[11] == 1'b0  ? 1'b0 : cur_state[12];
assign state[13] = valid_ways[13:12] == 2'b00   ? cur_state[13] :
                   valid_ways[12] == 1'b0  ? 1'b1 :
                   valid_ways[13] == 1'b0  ? 1'b0 : cur_state[13];
assign state[14] = valid_ways[15:14] == 2'b00   ? cur_state[14] :
                   valid_ways[14] == 1'b0  ? 1'b1 :
                   valid_ways[15] == 1'b0  ? 1'b0 : cur_state[14];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    15'b???????0_???0_?0_0  : victim = 16'b0000000000000001;
    15'b???????1_???0_?0_0  : victim = 16'b0000000000000010;
    15'b??????0?_???1_?0_0  : victim = 16'b0000000000000100;
    15'b??????1?_???1_?0_0  : victim = 16'b0000000000001000;
    15'b?????0??_??0?_?1_0  : victim = 16'b0000000000010000;
    15'b?????1??_??0?_?1_0  : victim = 16'b0000000000100000;
    15'b????0???_??1?_?1_0  : victim = 16'b0000000001000000;
    15'b????1???_??1?_?1_0  : victim = 16'b0000000010000000;
    15'b???0????_?0??_0?_1  : victim = 16'b0000000100000000;
    15'b???1????_?0??_0?_1  : victim = 16'b0000001000000000;
    15'b??0?????_?1??_0?_1  : victim = 16'b0000010000000000;
    15'b??1?????_?1??_0?_1  : victim = 16'b0000100000000000;
    15'b?0??????_0???_1?_1  : victim = 16'b0001000000000000;
    15'b?1??????_0???_1?_1  : victim = 16'b0010000000000000;
    15'b0???????_1???_1?_1  : victim = 16'b0100000000000000;
    15'b1???????_1???_1?_1  : victim = 16'b1000000000000000;

    default                 : victim = 16'b0000000000000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[14: 8],1'b1,         s[6:4],1'b1,        s[2],1'b1, 1'b1};
    victim[1] : nxt_state = {s[14: 8],1'b0,         s[6:4],1'b1,        s[2],1'b1, 1'b1};
    victim[2] : nxt_state = {s[14: 9],1'b1,s[   7], s[6:4],1'b0,        s[2],1'b1, 1'b1};
    victim[3] : nxt_state = {s[14: 9],1'b0,s[   7], s[6:4],1'b0,        s[2],1'b1, 1'b1};
    victim[4] : nxt_state = {s[14:10],1'b1,s[ 8:7], s[6:5],1'b1,s[  3], s[2],1'b0, 1'b1};
    victim[5] : nxt_state = {s[14:10],1'b0,s[ 8:7], s[6:5],1'b1,s[  3], s[2],1'b0, 1'b1};
    victim[6] : nxt_state = {s[14:11],1'b1,s[ 9:7], s[6:5],1'b0,s[  3], s[2],1'b0, 1'b1};
    victim[7] : nxt_state = {s[14:11],1'b0,s[ 9:7], s[6:5],1'b0,s[  3], s[2],1'b0, 1'b1};
    victim[8] : nxt_state = {s[14:12],1'b1,s[10:7], s[  6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[9] : nxt_state = {s[14:12],1'b0,s[10:7], s[  6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[10]: nxt_state = {s[14:13],1'b1,s[11:7], s[  6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[11]: nxt_state = {s[14:13],1'b0,s[11:7], s[  6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[12]: nxt_state = {s[   14],1'b1,s[12:7],        1'b1,s[5:3], 1'b0,s[1], 1'b0};
    victim[13]: nxt_state = {s[   14],1'b0,s[12:7],        1'b1,s[5:3], 1'b0,s[1], 1'b0};
    victim[14]: nxt_state = {         1'b1,s[13:7],        1'b0,s[5:3], 1'b0,s[1], 1'b0};
    victim[15]: nxt_state = {         1'b0,s[13:7],        1'b0,s[5:3], 1'b0,s[1], 1'b0};

    default   : nxt_state = {s[14: 8],1'b1,         s[6:4],1'b1,        s[2],1'b1, 1'b1};
endcase
end

\js } // if (ways == 16)
 
\jsbegin
//=============================================================================
// 20-way set associateive pseudo LRU
//=============================================================================
//                                    s[0]
//                         /                         \
//                        0                           1
//                       /                             \
//                   s[1]                               s[2]
//             /              \                     /          \
//            0                1                   0            1
//           /                  \                 /              \
//          s[3]               s[4]              s[5]            s[6]
//          / \                /  \             /   \           /    \
//         0   1              0    1           0     1         0      1
//        /     \            /      \         /       \       /        \
//      s[7]   s[8]       s[9]     s[10]    s[11]   s[12]   s[13]    s[14]
//     /  \     / \      /   \     / \      /   \   /   \    /  \     / \
//    0    1   0   1    0     1   0   1     0   1   0   1   0    1   0   1
//    |    |   |   |    |     |   |   |     |   |   |   |   |    |   |   |
//   s15  way way way  s16   way way way   s17 way way way s18  way way way
//   / \   2   3   4   / \    7   8   9    / \  12  13 14  / \   17  18  19
//  0   1             0   1               0   1           0   1
//  |   |             |   |               |   |           |   |
// way way           way way             way way         way way
//  0   1             5   6               10  11          15  16
//
// way 0 10 5 15 3 13 8 18 2 12 7 17 4 14 9 19 1 11 6 16 3 13 8 18 2 12 7 17 4 14 9 19
//
//  lut
//  -----------------------------------  -----------------------------------
//  state[18:0]              | victim    ref to | next state[18:0]
//  -------------------------+---------  -------+---------------------------
//  xxx0 xxxxxxx0 xxx0 x0 0  | way 0     way 0  |    ___1 _______1 ___1 _1 1
//  xxx1 xxxxxxx0 xxx0 x0 0  | way 1     way 1  |    ___0 _______1 ___1 _1 1
//  xxxx xxxxxxx1 xxx0 x0 0  | way 2     way 2  |    ____ _______0 ___1 _1 1
//  xxxx xxxxxx0x xxx1 x0 0  | way 3     way 3  |    ____ ______1_ ___0 _1 1
//  xxxx xxxxxx1x xxx1 x0 0  | way 4     way 4  |    ____ ______0_ ___0 _1 1
//  xx0x xxxxx0xx xx0x x1 0  | way 5     way 5  |    __1_ _____1__ __1_ _0 1
//  xx1x xxxxx0xx xx0x x1 0  | way 6     way 6  |    __0_ _____1__ __1_ _0 1
//  xxxx xxxxx1xx xx0x x1 0  | way 7     way 7  |    ____ _____0__ __1_ _0 1
//  xxxx xxxx0xxx xx1x x1 0  | way 8     way 8  |    ____ ____1___ __0_ _0 1
//  xxxx xxxx1xxx xx1x x1 0  | way 9     way 9  |    ____ ____0___ __0_ _0 1
//  x0xx xxx0xxxx x0xx 0x 1  | way 10    way 10 |    _1__ ___1____ _1__ 1_ 0
//  x1xx xxx0xxxx x0xx 0x 1  | way 11    way 11 |    _0__ ___1____ _1__ 1_ 0
//  xxxx xxx1xxxx x0xx 0x 1  | way 12    way 12 |    ____ ___0____ _1__ 1_ 0
//  xxxx xx0xxxxx x1xx 0x 1  | way 13    way 13 |    ____ __1_____ _0__ 1_ 0
//  xxxx xx1xxxxx x1xx 0x 1  | way 14    way 14 |    ____ __0_____ _0__ 1_ 0
//  0xxx x0xxxxxx 0xxx 1x 1  | way 15    way 15 |    1___ _1______ 1___ 0_ 0
//  1xxx x0xxxxxx 0xxx 1x 1  | way 16    way 16 |    0___ _1______ 1___ 0_ 0
//  xxxx x1xxxxxx 0xxx 1x 1  | way 17    way 17 |    ____ _0______ 1___ 0_ 0
//  xxxx 0xxxxxxx 1xxx 1x 1  | way 18    way 18 |    ____ 1_______ 0___ 0_ 0
//  xxxx 1xxxxxxx 1xxx 1x 1  | way 19    way 19 |    ____ 0_______ 0___ 0_ 0
//
// override
// ------------------------------------------------
// state[0] = valid_ways[ 9: 0] == 00_0000_0000 ? 1 :
//            valid_ways[19:10] == 00_0000_0000 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[ 9: 0] == 00_0000_0000 ? _ :
//            valid_ways[ 4: 0] == 0_0000 ? 1 :
//            valid_ways[ 9: 5] == 0_0000 ? 0 : _;
// state[2] = valid_ways[19:10] == 00_0000_0000 ? _ :
//            valid_ways[14:10] == 0_0000 ? 1 :
//            valid_ways[19:15] == 0_0000 ? 0 : _;
// ------------------------------------------------
// state[3] = valid_ways[ 4: 0] == 0_0000 ? _ :
//            valid_ways[ 2: 0] == 000 ? 1 :
//            valid_ways[ 4: 3] ==  00 ? 0 : _;
// state[4] = valid_ways[ 9: 5] == 0_0000 ? _ :
//            valid_ways[ 7: 5] == 000 ? 1 :
//            valid_ways[ 9: 8] ==  00 ? 0 : _;
// state[5] = valid_ways[14:10] == 0_0000 ?  _ :
//            valid_ways[12:10] == 000 ? 1 :
//            valid_ways[14:13] ==  00 ? 0 : _;
// state[6] = valid_ways[19:15] == 0_0000 ? _ :
//            valid_ways[17:15] == 000 ? 1 :
//            valid_ways[19:18] ==  00 ? 0 : _;
// ------------------------------------------------
// state[7]  = valid_ways[ 2: 0] == 000 ? _ :
//             valid_ways[1:0]   == 00 ? 1 :
//             valid_ways[2]     ==  0 ? 0 : _;
// state[8]  = valid_ways[ 4: 3] ==  00 ? _ :
//             valid_ways[3]     ==  0 ? 1 :
//             valid_ways[4]     ==  0 ? 0 : _;
// state[9]  = valid_ways[ 7: 5] == 000 ? _ :
//             valid_ways[6:5]   == 00 ? 1 :
//             valid_ways[7]     ==  0 ? 0 : _;
// state[10] = valid_ways[ 9: 8] ==  00 ? _ :
//             valid_ways[8]     ==  0 ? 1 :
//             valid_ways[9]     ==  0 ? 0 : _;
// state[11] = valid_ways[12:10] == 000 ? _ :
//             valid_ways[11:10] == 00 ? 1 :
//             valid_ways[12]    ==  0 ? 0 : _;
// state[12] = valid_ways[14:13] ==  00 ? _ :
//             valid_ways[13]    ==  0 ? 1 :
//             valid_ways[14]    ==  0 ? 0 : _;
// state[13] = valid_ways[17:15] == 000 ? _ :
//             valid_ways[16:15] == 00 ? 1 :
//             valid_ways[17]    ==  0 ? 0 : _;
// state[14] = valid_ways[19:18] ==  00 ? _ :
//             valid_ways[18]    ==  0 ? 1 :
//             valid_ways[19]    ==  0 ? 0 : _;
// ------------------------------------------------
// state[15] = valid_ways[1:0]   == 00 ? _ :
//             valid_ways[0]  == 0 ? 1 :
//             valid_ways[1]  == 0 ? 0 : _;
// state[16] = valid_ways[6:5]   == 00 ? _ :
//             valid_ways[5]  == 0 ? 1 :
//             valid_ways[6]  == 0 ? 0 : _;
// state[17] = valid_ways[11:10] == 00 ?  _ :
//             valid_ways[10] == 0 ? 1 :
//             valid_ways[11] == 0 ? 0 : _;
// state[18] = valid_ways[16:15] == 00 ? _ :
//             valid_ways[15] == 0 ? 1 :
//             valid_ways[16] == 0 ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 20) {

assign state[0] = valid_ways[ 9: 0] == 10'b00_0000_0000 ? 1'b1 :
                  valid_ways[19:10] == 10'b00_0000_0000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[ 9: 0] == 10'b00_0000_0000 ? cur_state[1] :
                  valid_ways[ 4: 0] == 5'b0_0000 ? 1'b1 :
                  valid_ways[ 9: 5] == 5'b0_0000 ? 1'b0 : cur_state[1];
assign state[2] = valid_ways[19:10] == 10'b00_0000_0000 ? cur_state[2] :
                  valid_ways[14:10] == 5'b0_0000 ? 1'b1 :
                  valid_ways[19:15] == 5'b0_0000 ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[ 4: 0] == 5'b0_0000 ? cur_state[3] :
                  valid_ways[ 2: 0] == 3'b000 ? 1'b1 :
                  valid_ways[ 4: 3] == 2'b00  ? 1'b0 : cur_state[3];
assign state[4] = valid_ways[ 9: 5] == 5'b0_0000 ? cur_state[4] :
                  valid_ways[ 7: 5] == 3'b000 ? 1'b1 :
                  valid_ways[ 9: 8] == 2'b00  ? 1'b0 : cur_state[4];
assign state[5] = valid_ways[14:10] == 5'b0_0000 ? cur_state[5] :
                  valid_ways[12:10] == 3'b000 ? 1'b1 :
                  valid_ways[14:13] == 2'b00  ? 1'b0 : cur_state[5];
assign state[6] = valid_ways[19:15] == 5'b0_0000 ? cur_state[6] :
                  valid_ways[17:15] == 3'b000 ? 1'b1 :
                  valid_ways[19:18] == 2'b00  ? 1'b0 : cur_state[6];

assign state[7]  = valid_ways[ 2: 0] == 3'b000 ? cur_state[7] :
                   valid_ways[1:0]   == 2'b00 ? 1'b1 :
                   valid_ways[2]     == 1'b0  ? 1'b0 : cur_state[7];
assign state[8]  = valid_ways[ 4: 3] == 2'b00  ? cur_state[8] :
                   valid_ways[3]     == 1'b0  ? 1'b1 :
                   valid_ways[4]     == 1'b0  ? 1'b0 : cur_state[8];
assign state[9]  = valid_ways[ 7: 5] == 3'b000 ? cur_state[9] :
                   valid_ways[6:5]   == 2'b00 ? 1'b1 :
                   valid_ways[7]     == 1'b0  ? 1'b0 : cur_state[9];
assign state[10] = valid_ways[ 9: 8] == 2'b00  ? cur_state[10] :
                   valid_ways[8]     == 1'b0  ? 1'b1 :
                   valid_ways[9]     == 1'b0  ? 1'b0 : cur_state[10];
assign state[11] = valid_ways[12:10] == 3'b000 ? cur_state[11] :
                   valid_ways[11:10] == 2'b00 ? 1'b1 :
                   valid_ways[12]    == 1'b0  ? 1'b0 : cur_state[11];
assign state[12] = valid_ways[14:13] == 2'b00  ? cur_state[12] :
                   valid_ways[13]    == 1'b0  ? 1'b1 :
                   valid_ways[14]    == 1'b0  ? 1'b0 : cur_state[12];
assign state[13] = valid_ways[17:15] == 3'b000 ? cur_state[13] :
                   valid_ways[16:15] == 2'b00 ? 1'b1 :
                   valid_ways[17]    == 1'b0  ? 1'b0 : cur_state[13];
assign state[14] = valid_ways[19:18] == 2'b00  ? cur_state[14] :
                   valid_ways[18]    == 1'b0  ? 1'b1 :
                   valid_ways[19]    == 1'b0  ? 1'b0 : cur_state[14];

assign state[15] = valid_ways[1:0]   == 2'b00 ? cur_state[15] :
                   valid_ways[0]  == 1'b0 ? 1'b1 :
                   valid_ways[1]  == 1'b0 ? 1'b0 : cur_state[15];
assign state[16] = valid_ways[6:5]   == 2'b00 ? cur_state[16] :
                   valid_ways[5]  == 1'b0 ? 1'b1 :
                   valid_ways[6]  == 1'b0 ? 1'b0 : cur_state[16];
assign state[17] = valid_ways[11:10] == 2'b00 ? cur_state[17] :
                   valid_ways[10] == 1'b0 ? 1'b1 :
                   valid_ways[11] == 1'b0 ? 1'b0 : cur_state[17];
assign state[18] = valid_ways[16:15] == 2'b00 ? cur_state[18] :
                   valid_ways[15] == 1'b0 ? 1'b1 :
                   valid_ways[16] == 1'b0 ? 1'b0 : cur_state[18];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    19'b???0_???????0_???0_?0_0  : victim = 20'b00000000000000000001;
    19'b???1_???????0_???0_?0_0  : victim = 20'b00000000000000000010;
    19'b????_???????1_???0_?0_0  : victim = 20'b00000000000000000100;
    19'b????_??????0?_???1_?0_0  : victim = 20'b00000000000000001000;
    19'b????_??????1?_???1_?0_0  : victim = 20'b00000000000000010000;
    19'b??0?_?????0??_??0?_?1_0  : victim = 20'b00000000000000100000;
    19'b??1?_?????0??_??0?_?1_0  : victim = 20'b00000000000001000000;
    19'b????_?????1??_??0?_?1_0  : victim = 20'b00000000000010000000;
    19'b????_????0???_??1?_?1_0  : victim = 20'b00000000000100000000;
    19'b????_????1???_??1?_?1_0  : victim = 20'b00000000001000000000;
    19'b?0??_???0????_?0??_0?_1  : victim = 20'b00000000010000000000;
    19'b?1??_???0????_?0??_0?_1  : victim = 20'b00000000100000000000;
    19'b????_???1????_?0??_0?_1  : victim = 20'b00000001000000000000;
    19'b????_??0?????_?1??_0?_1  : victim = 20'b00000010000000000000;
    19'b????_??1?????_?1??_0?_1  : victim = 20'b00000100000000000000;
    19'b0???_?0??????_0???_1?_1  : victim = 20'b00001000000000000000;
    19'b1???_?0??????_0???_1?_1  : victim = 20'b00010000000000000000;
    19'b????_?1??????_0???_1?_1  : victim = 20'b00100000000000000000;
    19'b????_0???????_1???_1?_1  : victim = 20'b01000000000000000000;
    19'b????_1???????_1???_1?_1  : victim = 20'b10000000000000000000;

    default                      : victim = 20'b00000000000000000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[18:16],1'b1,       s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[1] : nxt_state = {s[18:16],1'b0,       s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[2] : nxt_state = {s[18:15],            s[14:8],1'b0,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[3] : nxt_state = {s[18:15],            s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[4] : nxt_state = {s[18:15],            s[14:9],1'b0,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[5] : nxt_state = {s[18:16],1'b1,       s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[6] : nxt_state = {s[18:16],1'b0,       s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[7] : nxt_state = {s[18:15],            s[14:10],1'b0,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[8] : nxt_state = {s[18:15],            s[14:11],1'b1,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[9] : nxt_state = {s[18:15],            s[14:11],1'b0,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[10]: nxt_state = {s[18],1'b1,s[16:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[11]: nxt_state = {s[18],1'b0,s[16:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[12]: nxt_state = {s[18:15],            s[14:12],1'b0,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[13]: nxt_state = {s[18:15],            s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[14]: nxt_state = {s[18:15],            s[14:13],1'b0,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[15]: nxt_state = {1'b1,s[17:15],       s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[16]: nxt_state = {1'b0,s[17:15],       s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[17]: nxt_state = {s[18:15],            s[14],1'b0,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[18]: nxt_state = {s[18:15],            1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[19]: nxt_state = {s[18:15],            1'b0,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};

    default   : nxt_state = {s[18:16],1'b1,       s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
endcase
end

\js } // if (ways == 20)
 
\jsbegin
//=============================================================================
// 24-way set associateive pseudo LRU
//=============================================================================
//                                    s[0]
//                         /                       \
//                        0                         1
//                       /                           \
//                  s[1]                               s[2]
//               /         \                        /        \
//              0           1                      0          1
//             /             \                    /            \
//          s[3]              s[4]              s[5]             s[6]
//          / \               /  \             /   \            /    \
//         0   1             0    1           0     1          0      1
//        /     \           /      \         /       \        /        \
//      s[7]   s[8]       s[9]   s[10]    s[11]     s[12]    s[13]     s[14]
//     /  \     / \      /  \     / \      /   \    /   \     /  \      / \
//    0    1   0   1    0    1   0   1     0   1    0   1    0    1    0   1
//    |    |   |   |    |    |   |   |     |   |    |   |    |    |    |   |
//   s15  way s16 way  s17  way s18 way   s19 way  s20 way  s21  way  s22 way
//   / \   2  / \  5   / \   8  / \  11   / \  14  / \  17  / \   20  / \  23
//  0   1    0   1    0   1    0   1     0   1    0   1    0   1     0   1
//  |   |    |   |    |   |    |   |     |   |    |   |    |   |     |   |
// way way  way way  way way  way way   way way  way way  way way   way way
//  0   1    3   4    6   7    9   10    12  13   15  16   18  19    21  22
//
// way 0 12 6 18 3 15 9 21 2 14 8 20 5 17 11 23 1 13 7 19 4 16 10 22 2 14 8 20 5 17 11 23
//
//  lut
//  ---------------------------------------  ------------------------------------
//  state[22:0]                  | victim    ref to | next state[22:0]
//  -----------------------------+---------  -------+----------------------------
//  xxxxxxx0 xxxxxxx0 xxx0 x0 0  | way 0     way 0  | _______1 _______1 ___1 _1 1
//  xxxxxxx1 xxxxxxx0 xxx0 x0 0  | way 1     way 1  | _______0 _______1 ___1 _1 1
//  xxxxxxxx xxxxxxx1 xxx0 x0 0  | way 2     way 2  | ________ _______0 ___1 _1 1
//  xxxxxx0x xxxxxx0x xxx1 x0 0  | way 3     way 3  | ______1_ ______1_ ___0 _1 1
//  xxxxxx1x xxxxxx0x xxx1 x0 0  | way 4     way 4  | ______0_ ______1_ ___0 _1 1
//  xxxxxxxx xxxxxx1x xxx1 x0 0  | way 5     way 5  | ________ ______0_ ___0 _1 1
//  xxxxx0xx xxxxx0xx xx0x x1 0  | way 6     way 6  | _____1__ _____1__ __1_ _0 1
//  xxxxx1xx xxxxx0xx xx0x x1 0  | way 7     way 7  | _____0__ _____1__ __1_ _0 1
//  xxxxxxxx xxxxx1xx xx0x x1 0  | way 8     way 8  | ________ _____0__ __1_ _0 1
//  xxxx0xxx xxxx0xxx xx1x x1 0  | way 9     way 9  | ____1___ ____1___ __0_ _0 1
//  xxxx1xxx xxxx0xxx xx1x x1 0  | way 10    way 10 | ____0___ ____1___ __0_ _0 1
//  xxxxxxxx xxxx1xxx xx1x x1 0  | way 11    way 11 | ________ ____0___ __0_ _0 1
//  xxx0xxxx xxx0xxxx x0xx 0x 1  | way 12    way 12 | ___1____ ___1____ _1__ 1_ 0
//  xxx1xxxx xxx0xxxx x0xx 0x 1  | way 13    way 13 | ___0____ ___1____ _1__ 1_ 0
//  xxxxxxxx xxx1xxxx x0xx 0x 1  | way 14    way 14 | ________ ___0____ _1__ 1_ 0
//  xx0xxxxx xx0xxxxx x1xx 0x 1  | way 15    way 15 | __1_____ __1_____ _0__ 1_ 0
//  xx1xxxxx xx0xxxxx x1xx 0x 1  | way 16    way 16 | __0_____ __1_____ _0__ 1_ 0
//  xxxxxxxx xx1xxxxx x1xx 0x 1  | way 17    way 17 | ________ __0_____ _0__ 1_ 0
//  x0xxxxxx x0xxxxxx 0xxx 1x 1  | way 18    way 18 | _1______ _1______ 1___ 0_ 0
//  x1xxxxxx x0xxxxxx 0xxx 1x 1  | way 19    way 19 | _0______ _1______ 1___ 0_ 0
//  xxxxxxxx x1xxxxxx 0xxx 1x 1  | way 20    way 20 | ________ _0______ 1___ 0_ 0
//  0xxxxxxx 0xxxxxxx 1xxx 1x 1  | way 21    way 21 | 1_______ 1_______ 0___ 0_ 0
//  1xxxxxxx 0xxxxxxx 1xxx 1x 1  | way 22    way 22 | 0_______ 1_______ 0___ 0_ 0
//  xxxxxxxx 1xxxxxxx 1xxx 1x 1  | way 23    way 23 | ________ 0_______ 0___ 0_ 0
//
//  override
// ------------------------------------------------
// state[0] = valid_ways[11: 0] == 0000_0000_0000 ? 1 :
//            valid_ways[23:12] == 0000_0000_0000 ? 0 : _;
// ------------------------------------------------
// state[1] = valid_ways[11: 0] == 0000_0000_0000 ? _ :
//            valid_ways[5 : 0] == 00_0000 ? 1 :
//            valid_ways[11: 6] == 00_0000 ? 0 : _;
// state[2] = valid_ways[23:12] == 0000_0000_0000 ? _ :
//            valid_ways[17:12] == 00_0000 ? 1 :
//            valid_ways[23:18] == 00_0000 ? 0 : _;
// ------------------------------------------------
// state[3] = valid_ways[5 : 0] == 00_0000 ? _ :
//            valid_ways[ 2:0]  == 000 ? 1 :
//            valid_ways[ 5:3]  == 000 ? 0 : _;
// state[4] = valid_ways[11: 6] == 00_0000 ? _ :
//            valid_ways[ 8:6]  == 000 ? 1 :
//            valid_ways[11:9]  == 000 ? 0 : _;
// state[5] = valid_ways[17:12] == 00_0000 ? _ :
//            valid_ways[14:12] == 000 ? 1 :
//            valid_ways[17:15] == 000 ? 0 : _;
// state[6] = valid_ways[23:18] == 00_0000 ? _ :
//            valid_ways[20:18] == 000 ? 1 :
//            valid_ways[23:21] == 000 ? 0 : _;
// ------------------------------------------------
// state[7]  = valid_ways[ 2:0]  == 000 ? _ :
//             valid_ways[ 1: 0] == 00 ? 1 :
//             valid_ways[ 2   ] ==  0 ? 0 : _;
// state[8]  = valid_ways[ 5:3]  == 000 ? _ :
//             valid_ways[ 4: 3] == 00 ? 1 :
//             valid_ways[ 5   ] ==  0 ? 0 : _;
// state[9]  = valid_ways[ 8:6]  == 000 ? _ :
//             valid_ways[ 7: 6] == 00 ? 1 :
//             valid_ways[ 8   ] ==  0 ? 0 : _;
// state[10] = valid_ways[11:9]  == 000 ? _ :
//             valid_ways[10: 9] == 00 ? 1 :
//             valid_ways[11   ] ==  0 ? 0 : _;
// state[11] = valid_ways[14:12] == 000 ? _ :
//             valid_ways[13:12] == 00 ? 1 :
//             valid_ways[14   ] ==  0 ? 0 : _;
// state[12] = valid_ways[17:15] == 000 ? _ :
//             valid_ways[16:15] == 00 ? 1 :
//             valid_ways[17   ] ==  0 ? 0 : _;
// state[13] = valid_ways[20:18] == 000 ? _ :
//             valid_ways[19:18] == 00 ? 1 :
//             valid_ways[20   ] ==  0 ? 0 : _;
// state[14] = valid_ways[23:21] == 000 ? _ :
//             valid_ways[22:21] == 00 ? 1 :
//             valid_ways[23   ] ==  0 ? 0 : _;
// ------------------------------------------------
// state[15] = valid_ways[ 1: 0] == 00 ? _ :
//             valid_ways[0]  == 0 ? 1 :
//             valid_ways[1]  == 0 ? 0 : _;
// state[16] = valid_ways[ 4: 3] == 00 ? _ :
//             valid_ways[3]  == 0 ? 1 :
//             valid_ways[4]  == 0 ? 0 : _;
// state[17] = valid_ways[ 7: 6] == 00 ? _ :
//             valid_ways[6]  == 0 ? 1 :
//             valid_ways[7]  == 0 ? 0 : _;
// state[18] = valid_ways[10: 9] == 00 ? _ :
//             valid_ways[9]  == 0 ? 1 :
//             valid_ways[10] == 0 ? 0 : _;
// state[19] = valid_ways[13:12] == 00 ? _ :
//             valid_ways[12] == 0 ? 1 :
//             valid_ways[13] == 0 ? 0 : _;
// state[20] = valid_ways[16:15] == 00 ? _ :
//             valid_ways[15] == 0 ? 1 :
//             valid_ways[16] == 0 ? 0 : _;
// state[21] = valid_ways[19:18] == 00 ? _ :
//             valid_ways[18] == 0 ? 1 :
//             valid_ways[19] == 0 ? 0 : _;
// state[22] = valid_ways[22:21] == 00 ? _ :
//             valid_ways[21] == 0 ? 1 :
//             valid_ways[22] == 0 ? 0 : _;
// ------------------------------------------------
\jsend

\js if (ways == 24) {

assign state[0] = valid_ways[11: 0] == 12'b0000_0000_0000 ? 1'b1 :
                  valid_ways[23:12] == 12'b0000_0000_0000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[11: 0] == 12'b0000_0000_0000 ? cur_state[1] :
                  valid_ways[5 : 0] == 6'b00_0000 ? 1'b1 :
                  valid_ways[11: 6] == 6'b00_0000 ? 1'b0 : cur_state[1];
assign state[2] = valid_ways[23:12] == 12'b0000_0000_0000 ? cur_state[2] :
                  valid_ways[17:12] == 6'b00_0000 ? 1'b1 :
                  valid_ways[23:18] == 6'b00_0000 ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[5 : 0] == 6'b00_0000 ? cur_state[3] :
                  valid_ways[ 2:0]  == 3'b000 ? 1'b1 :
                  valid_ways[ 5:3]  == 3'b000 ? 1'b0 : cur_state[3];
assign state[4] = valid_ways[11: 6] == 6'b00_0000 ? cur_state[4] :
                  valid_ways[ 8:6]  == 3'b000 ? 1'b1 :
                  valid_ways[11:9]  == 3'b000 ? 1'b0 : cur_state[4];
assign state[5] = valid_ways[17:12] == 6'b00_0000 ? cur_state[5] :
                  valid_ways[14:12] == 3'b000 ? 1'b1 :
                  valid_ways[17:15] == 3'b000 ? 1'b0 : cur_state[5];
assign state[6] = valid_ways[23:18] == 6'b00_0000 ? cur_state[6] :
                  valid_ways[20:18] == 3'b000 ? 1'b1 :
                  valid_ways[23:21] == 3'b000 ? 1'b0 : cur_state[6];

assign state[7]  = valid_ways[ 2:0]  == 3'b000 ? cur_state[7] :
                   valid_ways[ 1: 0] == 2'b00 ? 1'b1 :
                   valid_ways[ 2   ] == 1'b0  ? 1'b0 : cur_state[7];
assign state[8]  = valid_ways[ 5:3]  == 3'b000 ? cur_state[8] :
                   valid_ways[ 4: 3] == 2'b00 ? 1'b1 :
                   valid_ways[ 5   ] == 1'b0  ? 1'b0 : cur_state[8];
assign state[9]  = valid_ways[ 8:6]  == 3'b000 ? cur_state[9] :
                   valid_ways[ 7: 6] == 2'b00 ? 1'b1 :
                   valid_ways[ 8   ] == 1'b0  ? 1'b0 : cur_state[9];
assign state[10] = valid_ways[11:9]  == 3'b000 ? cur_state[10] :
                   valid_ways[10: 9] == 2'b00 ? 1'b1 :
                   valid_ways[11   ] == 1'b0  ? 1'b0 : cur_state[10];
assign state[11] = valid_ways[14:12] == 3'b000 ? cur_state[11] :
                   valid_ways[13:12] == 2'b00 ? 1'b1 :
                   valid_ways[14   ] == 1'b0  ? 1'b0 : cur_state[11];
assign state[12] = valid_ways[17:15] == 3'b000 ? cur_state[12] :
                   valid_ways[16:15] == 2'b00 ? 1'b1 :
                   valid_ways[17   ] == 1'b0  ? 1'b0 : cur_state[12];
assign state[13] = valid_ways[20:18] == 3'b000 ? cur_state[13] :
                   valid_ways[19:18] == 2'b00 ? 1'b1 :
                   valid_ways[20   ] == 1'b0  ? 1'b0 : cur_state[13];
assign state[14] = valid_ways[23:21] == 3'b000 ? cur_state[14] :
                   valid_ways[22:21] == 2'b00 ? 1'b1 :
                   valid_ways[23   ] == 1'b0  ? 1'b0 : cur_state[14];

assign state[15] = valid_ways[ 1: 0] == 2'b00 ? cur_state[15] :
                   valid_ways[0]  == 1'b0 ? 1'b1 :
                   valid_ways[1]  == 1'b0 ? 1'b0 : cur_state[15];
assign state[16] = valid_ways[ 4: 3] == 2'b00 ? cur_state[16] :
                   valid_ways[3]  == 1'b0 ? 1'b1 :
                   valid_ways[4]  == 1'b0 ? 1'b0 : cur_state[16];
assign state[17] = valid_ways[ 7: 6] == 2'b00 ? cur_state[17] :
                   valid_ways[6]  == 1'b0 ? 1'b1 :
                   valid_ways[7]  == 1'b0 ? 1'b0 : cur_state[17];
assign state[18] = valid_ways[10: 9] == 2'b00 ? cur_state[18] :
                   valid_ways[9]  == 1'b0 ? 1'b1 :
                   valid_ways[10] == 1'b0 ? 1'b0 : cur_state[18];
assign state[19] = valid_ways[13:12] == 2'b00 ? cur_state[19] :
                   valid_ways[12] == 1'b0 ? 1'b1 :
                   valid_ways[13] == 1'b0 ? 1'b0 : cur_state[19];
assign state[20] = valid_ways[16:15] == 2'b00 ? cur_state[20] :
                   valid_ways[15] == 1'b0 ? 1'b1 :
                   valid_ways[16] == 1'b0 ? 1'b0 : cur_state[20];
assign state[21] = valid_ways[19:18] == 2'b00 ? cur_state[21] :
                   valid_ways[18] == 1'b0 ? 1'b1 :
                   valid_ways[19] == 1'b0 ? 1'b0 : cur_state[21];
assign state[22] = valid_ways[22:21] == 2'b00 ? cur_state[22] :
                   valid_ways[21] == 1'b0 ? 1'b1 :
                   valid_ways[22] == 1'b0 ? 1'b0 : cur_state[22];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    23'b???????0_???????0_???0_?0_0  : victim = 24'b000000000000000000000001;
    23'b???????1_???????0_???0_?0_0  : victim = 24'b000000000000000000000010;
    23'b????????_???????1_???0_?0_0  : victim = 24'b000000000000000000000100;
    23'b??????0?_??????0?_???1_?0_0  : victim = 24'b000000000000000000001000;
    23'b??????1?_??????0?_???1_?0_0  : victim = 24'b000000000000000000010000;
    23'b????????_??????1?_???1_?0_0  : victim = 24'b000000000000000000100000;
    23'b?????0??_?????0??_??0?_?1_0  : victim = 24'b000000000000000001000000;
    23'b?????1??_?????0??_??0?_?1_0  : victim = 24'b000000000000000010000000;
    23'b????????_?????1??_??0?_?1_0  : victim = 24'b000000000000000100000000;
    23'b????0???_????0???_??1?_?1_0  : victim = 24'b000000000000001000000000;
    23'b????1???_????0???_??1?_?1_0  : victim = 24'b000000000000010000000000;
    23'b????????_????1???_??1?_?1_0  : victim = 24'b000000000000100000000000;
    23'b???0????_???0????_?0??_0?_1  : victim = 24'b000000000001000000000000;
    23'b???1????_???0????_?0??_0?_1  : victim = 24'b000000000010000000000000;
    23'b????????_???1????_?0??_0?_1  : victim = 24'b000000000100000000000000;
    23'b??0?????_??0?????_?1??_0?_1  : victim = 24'b000000001000000000000000;
    23'b??1?????_??0?????_?1??_0?_1  : victim = 24'b000000010000000000000000;
    23'b????????_??1?????_?1??_0?_1  : victim = 24'b000000100000000000000000;
    23'b?0??????_?0??????_0???_1?_1  : victim = 24'b000001000000000000000000;
    23'b?1??????_?0??????_0???_1?_1  : victim = 24'b000010000000000000000000;
    23'b????????_?1??????_0???_1?_1  : victim = 24'b000100000000000000000000;
    23'b0???????_0???????_1???_1?_1  : victim = 24'b001000000000000000000000;
    23'b1???????_0???????_1???_1?_1  : victim = 24'b010000000000000000000000;
    23'b????????_1???????_1???_1?_1  : victim = 24'b100000000000000000000000;

    default                          : victim = 24'b000000000000000000000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[22:16],1'b1,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[1] : nxt_state = {s[22:16],1'b0,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[2] : nxt_state = {s[22:15],               s[14:8],1'b0,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[3] : nxt_state = {s[22:17],1'b1,s[15],    s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[4] : nxt_state = {s[22:17],1'b0,s[15],    s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[5] : nxt_state = {s[22:15],               s[14:9],1'b0,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[6] : nxt_state = {s[22:18],1'b1,s[16:15], s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[7] : nxt_state = {s[22:18],1'b0,s[16:15], s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[8] : nxt_state = {s[22:15],               s[14:10],1'b0,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[9] : nxt_state = {s[22:19],1'b1,s[17:15], s[14:11],1'b1,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[10]: nxt_state = {s[22:19],1'b0,s[17:15], s[14:11],1'b1,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[11]: nxt_state = {s[22:15],               s[14:11],1'b0,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[12]: nxt_state = {s[22:20],1'b1,s[18:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[13]: nxt_state = {s[22:20],1'b0,s[18:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[14]: nxt_state = {s[22:15],               s[14:12],1'b0,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[15]: nxt_state = {s[22:21],1'b1,s[19:15], s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[16]: nxt_state = {s[22:21],1'b0,s[19:15], s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[17]: nxt_state = {s[22:15],               s[14:13],1'b0,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[18]: nxt_state = {s[22],1'b1,s[20:15],    s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[19]: nxt_state = {s[22],1'b0,s[20:15],    s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[20]: nxt_state = {s[22:15],               s[14],1'b0,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[21]: nxt_state = {1'b1,s[21:15],          1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[22]: nxt_state = {1'b0,s[21:15],          1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[23]: nxt_state = {s[22:15],               1'b0,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};

    default   : nxt_state = {s[22:16],1'b1,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
endcase
end

\js } // if (ways == 24)
 
\jsbegin
//=============================================================================
// 28-way set associateive pseudo LRU
//=============================================================================
//                                                            s[0]
//                                       ___________________/      \_________________________
//                                     0                                                      1
//                                    /                                                        \
//                           ___ s[1] _____                                                 ____ s[2] _____
//                          /              \                                               /               \
//                         0                1                                             0                 1
//                        /                  \                                           /                   \
//               s[3]                             s[4]                           s[5]                            s[6]
//               /  \                            /   \                           /   \                          /    \
//              0     1                         0     1                         0     1                        0      1
//             /       \                       /       \                       /       \                      /        \
//        s[7]            s[8]            s[9]           s[10]            s[11]          s[12]           s[13]           s[14]
//      /     \         /     \         /     \         /     \          /    \         /     \         /     \         /    \
//     0       1       0       1       0       1       0       1       0       1       0       1       0       1       0       1
//     |       |       |       |       |       |       |       |       |       |       |       |       |       |       |       |
//   s[15]   s[16]   s[17]    way    s[18]   s[19]   s[20]     way   s[21]   s[22]   s[23]    way    s[24]   s[25]   s[26]    way
//    / \     / \     / \      6      / \     / \     / \       13    / \     / \     / \      20     / \     / \     / \      27
//   0   1   0   1   0   1           0   1   0   1   0   1           0   1   0   1   0   1           0   1   0   1   0   1  
//   |   |   |   |   |   |           |   |   |   |   |   |           |   |   |   |   |   |           |   |   |   |   |   | 
//  way way way way way way         way way way way way way         way way way way way way         way way way way way way
//   0   1   2   3   4   5           7   8   9   10  11  12          14  15  16  17  18  19          21  22  23  24  25  26
//
// way 0 14 7 21 4 18 11 25 2 16 9 23 6 20 13 27 1 15 8 22 5 19 12 26 3 17 10 24 6 20 13 27
//
// ---------------------------------------------------------------------------------
// lut
// -----------------------------------------  --------------------------------------
// state[26:0]                     | victim   ref to | next state[26:0]
// --------------------------------+--------  -------+------------------------------
// xxxxxxxxxxx0 xxxxxxx0 xxx0 x0 0 | way 0    way 0  | ___________1 _______1 ___1 _1 1
// xxxxxxxxxxx1 xxxxxxx0 xxx0 x0 0 | way 1    way 1  | ___________0 _______1 ___1 _1 1
// xxxxxxxxxx0x xxxxxxx1 xxx0 x0 0 | way 2    way 2  | __________1_ _______0 ___1 _1 1
// xxxxxxxxxx1x xxxxxxx1 xxx0 x0 0 | way 3    way 3  | __________0_ _______0 ___1 _1 1
// xxxxxxxxx0xx xxxxxx0x xxx1 x0 0 | way 4    way 4  | _________1__ ______1_ ___0 _1 1
// xxxxxxxxx1xx xxxxxx0x xxx1 x0 0 | way 5    way 5  | _________0__ ______1_ ___0 _1 1
// xxxxxxxxxxxx xxxxxx1x xxx1 x0 0 | way 6    way 6  | ____________ ______0_ ___0 _1 1
// xxxxxxxx0xxx xxxxx0xx xx0x x1 0 | way 7    way 7  | ________1___ _____1__ __1_ _0 1
// xxxxxxxx1xxx xxxxx0xx xx0x x1 0 | way 8    way 8  | ________0___ _____1__ __1_ _0 1
// xxxxxxx0xxxx xxxxx1xx xx0x x1 0 | way 9    way 9  | _______1____ _____0__ __1_ _0 1
// xxxxxxx1xxxx xxxxx1xx xx0x x1 0 | way 10   way 10 | _______0____ _____0__ __1_ _0 1
// xxxxxx0xxxxx xxxx0xxx xx1x x1 0 | way 11   way 11 | ______1_____ ____1___ _0__ _0 1
// xxxxxx1xxxxx xxxx0xxx xx1x x1 0 | way 12   way 12 | ______0_____ ____1___ _0__ _0 1
// xxxxxxxxxxxx xxxx1xxx xx1x x1 0 | way 13   way 13 | ____________ ____0___ _0__ _0 1
// xxxxx0xxxxxx xxx0xxxx x0xx 0x 1 | way 14   way 14 | _____1______ ___1____ _1__ 1_ 0
// xxxxx1xxxxxx xxx0xxxx x0xx 0x 1 | way 15   way 15 | _____0______ ___1____ _1__ 1_ 0
// xxxx0xxxxxxx xxx1xxxx x0xx 0x 1 | way 16   way 16 | ____1_______ ___0____ _1__ 1_ 0
// xxxx1xxxxxxx xxx1xxxx x0xx 0x 1 | way 17   way 17 | ____0_______ ___0____ _1__ 1_ 0
// xxx0xxxxxxxx xx0xxxxx x1xx 0x 1 | way 18   way 18 | ___1________ __1_____ _0__ 1_ 0
// xxx1xxxxxxxx xx0xxxxx x1xx 0x 1 | way 19   way 19 | ___0________ __1_____ _0__ 1_ 0
// xxxxxxxxxxxx xx1xxxxx x1xx 0x 1 | way 20   way 20 | ____________ __0_____ _0__ 1_ 0
// xx0xxxxxxxxx x0xxxxxx 0xxx 1x 1 | way 21   way 21 | __1_________ _1______ 1___ 0_ 0
// xx1xxxxxxxxx x0xxxxxx 0xxx 1x 1 | way 22   way 22 | __0_________ _1______ 1___ 0_ 0
// x0xxxxxxxxxx x1xxxxxx 0xxx 1x 1 | way 23   way 23 | _1__________ _0______ 1___ 0_ 0
// x1xxxxxxxxxx x1xxxxxx 0xxx 1x 1 | way 24   way 24 | _0__________ _0______ 1___ 0_ 0
// 0xxxxxxxxxxx 0xxxxxxx 1xxx 1x 1 | way 25   way 25 | 1___________ 1_______ 0___ 0_ 0
// 1xxxxxxxxxxx 0xxxxxxx 1xxx 1x 1 | way 26   way 26 | 0___________ 1_______ 0___ 0_ 0
// xxxxxxxxxxxx 1xxxxxxx 1xxx 1x 1 | way 27   way 27 | ____________ 0_______ 0___ 0_ 0
// 
// override
// --------------------------------------------------------
// state[0] = valid_ways[13: 0] == 00_0000_0000_0000 ? 1 :
//            valid_ways[27:14] == 00_0000_0000_0000 ? 0 : _;
// --------------------------------------------------------
// state[1] = valid_ways[13: 0] == 00_0000_0000_0000 ? _ :
//            valid_ways[ 6: 0] == 000_0000 ? 1 :
//            valid_ways[13: 7] == 000_0000 ? 0 : _;
// state[2] = valid_ways[27:14] == 00_0000_0000_0000 ? _ :
//            valid_ways[20:14] == 000_0000 ? 1 :
//            valid_ways[27:21] == 000_0000 ? 0 : _;
// --------------------------------------------------------
// state[3] = valid_ways[ 6: 0] == 000_0000 ? _ :
//            valid_ways[ 3: 0] == 0000 ? 1 :
//            valid_ways[ 6: 4] ==  000 ? 0 : _;
// state[4] = valid_ways[13: 7] == 000_0000 ? _ :
//            valid_ways[10: 7] == 0000 ? 1 :
//            valid_ways[13:11] ==  000 ? 0 : _;
// state[5] = valid_ways[20:14] == 000_0000 ? _ :
//            valid_ways[17:14] == 0000 ? 1 :
//            valid_ways[20:18] ==  000 ? 0 : _;
// state[6] = valid_ways[27:21] == 000_0000 ? _ :
//            valid_ways[24:21] == 0000 ? 1 :
//            valid_ways[27:25] ==  000 ? 0 : _;
// --------------------------------------------------------
// state[7]  = valid_ways[ 3: 0] == 0000 ? _ :
//             valid_ways[ 1: 0] == 00 ? 1 :
//             valid_ways[ 3: 2] == 00 ? 0 : _;
// state[8]  = valid_ways[ 6: 4] ==  000 ? _ :
//             valid_ways[ 5: 4] == 00 ? 1 :
//             valid_ways[    6] ==  0 ? 0 : _;
// state[9]  = valid_ways[10: 7] == 0000 ? _ :
//             valid_ways[ 8: 7] == 00 ? 1 :
//             valid_ways[10: 9] == 00 ? 0 : _;
// state[10] = valid_ways[13:11] ==  000 ? _ :
//             valid_ways[12:11] == 00 ? 1 :
//             valid_ways[   13] ==  0 ? 0 : _;
// state[11] = valid_ways[17:14] == 0000 ? _ :
//             valid_ways[15:14] == 00 ? 1 :
//             valid_ways[17:16] == 00 ? 0 : _;
// state[12] = valid_ways[20:18] ==  000 ? _ :
//             valid_ways[19:18] == 00 ? 1 :
//             valid_ways[   20] ==  0 ? 0 : _;
// state[13] = valid_ways[24:21] == 0000 ? _ :
//             valid_ways[22:21] == 00 ? 1 :
//             valid_ways[24:23] == 00 ? 0 : _;
// state[14] = valid_ways[27:25] ==  000 ? _ :
//             valid_ways[26:25] == 00 ? 1 :
//             valid_ways[   27] ==  0 ? 0 : _;
// --------------------------------------------------------
// state[15] = valid_ways[ 1: 0] == 00 ? _ :
//             valid_ways[0]  == 0 ? 1 :
//             valid_ways[1]  == 0 ? 0 : _;
// state[16] = valid_ways[ 3: 2] == 00 ?  _ :
//             valid_ways[2]  == 0 ? 1 :
//             valid_ways[3]  == 0 ? 0 : _;
// state[17] = valid_ways[ 5: 4] == 00 ? _ :
//             valid_ways[4]  == 0 ? 1 :
//             valid_ways[5]  == 0 ? 0 : _;
// state[18] = valid_ways[ 8: 7] == 00 ? _ :
//             valid_ways[7]  == 0 ? 1 :
//             valid_ways[8]  == 0 ? 0 : _;
// state[19] = valid_ways[10: 9] == 00 ? _ :
//             valid_ways[9]  == 0 ? 1 :
//             valid_ways[10] == 0 ? 0 : _;
// state[20] = valid_ways[12:11] == 00 ? _ :
//             valid_ways[11] == 0 ? 1 :
//             valid_ways[12] == 0 ? 0 : _;
// state[21] = valid_ways[15:14] == 00 ? _ :
//             valid_ways[14] == 0 ? 1 :
//             valid_ways[15] == 0 ? 0 : _;
// state[22] = valid_ways[17:16] == 00 ? _ :
//             valid_ways[16] == 0 ? 1 :
//             valid_ways[17] == 0 ? 0 : _;
// state[23] = valid_ways[19:18] == 00 ? _ :
//             valid_ways[18] == 0 ? 1 :
//             valid_ways[19] == 0 ? 0 : _;
// state[24] = valid_ways[22:21] == 00 ? _ :
//             valid_ways[21] == 0 ? 1 :
//             valid_ways[22] == 0 ? 0 : _;
// state[25] = valid_ways[24:23] == 00 ? _ :
//             valid_ways[23] == 0 ? 1 :
//             valid_ways[24] == 0 ? 0 : _;
// state[26] = valid_ways[26:25] == 00 ? _ :
//             valid_ways[25] == 0 ? 1 :
//             valid_ways[26] == 0 ? 0 : _;
// --------------------------------------------------------
\jsend

\js if (ways == 28) {

assign state[0] = valid_ways[13: 0] == 14'b00_0000_0000_0000 ? 1'b1 :
                  valid_ways[27:14] == 14'b00_0000_0000_0000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[13: 0] == 14'b00_0000_0000_0000 ? cur_state[1] :
                  valid_ways[ 6: 0] == 7'b000_0000 ? 1'b1 :
                  valid_ways[13: 7] == 7'b000_0000 ? 1'b0 : cur_state[1];
assign state[2] = valid_ways[27:14] == 14'b00_0000_0000_0000 ? cur_state[2] :
                  valid_ways[20:14] == 7'b000_0000 ? 1'b1 :
                  valid_ways[27:21] == 7'b000_0000 ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[ 6: 0] == 7'b000_0000 ? cur_state[3] :
                  valid_ways[ 3: 0] == 4'b0000 ? 1'b1 :
                  valid_ways[ 6: 4] == 3'b000  ? 1'b0 : cur_state[3];
assign state[4] = valid_ways[13: 7] == 7'b000_0000 ? cur_state[4] :
                  valid_ways[10: 7] == 4'b0000 ? 1'b1 :
                  valid_ways[13:11] == 3'b000  ? 1'b0 : cur_state[4];
assign state[5] = valid_ways[20:14] == 7'b000_0000 ? cur_state[5] :
                  valid_ways[17:14] == 4'b0000 ? 1'b1 :
                  valid_ways[20:18] == 3'b000  ? 1'b0 : cur_state[5];
assign state[6] = valid_ways[27:21] == 7'b000_0000 ? cur_state[6] :
                  valid_ways[24:21] == 4'b0000 ? 1'b1 :
                  valid_ways[27:25] == 3'b000  ? 1'b0 : cur_state[6];

assign state[7]  = valid_ways[ 3: 0] == 4'b0000 ? cur_state[7] :
                   valid_ways[ 1: 0] == 2'b00 ? 1'b1 :
                   valid_ways[ 3: 2] == 2'b00 ? 1'b0 : cur_state[7];
assign state[8]  = valid_ways[ 6: 4] == 3'b000  ? cur_state[8] :
                   valid_ways[ 5: 4] == 2'b00 ? 1'b1 :
                   valid_ways[    6] == 1'b0  ? 1'b0 : cur_state[8];
assign state[9]  = valid_ways[10: 7] == 4'b0000 ? cur_state[9] :
                   valid_ways[ 8: 7] == 2'b00 ? 1'b1 :
                   valid_ways[10: 9] == 2'b00 ? 1'b0 : cur_state[9];
assign state[10] = valid_ways[13:11] == 3'b000  ? cur_state[10] :
                   valid_ways[12:11] == 2'b00 ? 1'b1 :
                   valid_ways[   13] == 1'b0  ? 1'b0 : cur_state[10];
assign state[11] = valid_ways[17:14] == 4'b0000 ? cur_state[11] :
                   valid_ways[15:14] == 2'b00 ? 1'b1 :
                   valid_ways[17:16] == 2'b00 ? 1'b0 : cur_state[11];
assign state[12] = valid_ways[20:18] == 3'b000  ? cur_state[12] :
                   valid_ways[19:18] == 2'b00 ? 1'b1 :
                   valid_ways[   20] == 1'b0  ? 1'b0 : cur_state[12];
assign state[13] = valid_ways[24:21] == 4'b0000 ? cur_state[13] :
                   valid_ways[22:21] == 2'b00 ? 1'b1 :
                   valid_ways[24:23] == 2'b00 ? 1'b0 : cur_state[13];
assign state[14] = valid_ways[27:25] == 3'b000  ? cur_state[14] :
                   valid_ways[26:25] == 2'b00 ? 1'b1 :
                   valid_ways[   27] == 1'b0  ? 1'b0 : cur_state[14];

assign state[15] = valid_ways[ 1: 0] == 2'b00 ? cur_state[15] :
                   valid_ways[0]  == 1'b0 ? 1'b1 :
                   valid_ways[1]  == 1'b0 ? 1'b0 : cur_state[15];
assign state[16] = valid_ways[ 3: 2] == 2'b00 ? cur_state[16] :
                   valid_ways[2]  == 1'b0 ? 1'b1 :
                   valid_ways[3]  == 1'b0 ? 1'b0 : cur_state[16];
assign state[17] = valid_ways[ 5: 4] == 2'b00 ? cur_state[17] :
                   valid_ways[4]  == 1'b0 ? 1'b1 :
                   valid_ways[5]  == 1'b0 ? 1'b0 : cur_state[17];
assign state[18] = valid_ways[ 8: 7] == 2'b00 ? cur_state[18] :
                   valid_ways[7]  == 1'b0 ? 1'b1 :
                   valid_ways[8]  == 1'b0 ? 1'b0 : cur_state[18];
assign state[19] = valid_ways[10: 9] == 2'b00 ? cur_state[19] :
                   valid_ways[9]  == 1'b0 ? 1'b1 :
                   valid_ways[10] == 1'b0 ? 1'b0 : cur_state[19];
assign state[20] = valid_ways[12:11] == 2'b00 ? cur_state[20] :
                   valid_ways[11] == 1'b0 ? 1'b1 :
                   valid_ways[12] == 1'b0 ? 1'b0 : cur_state[20];
assign state[21] = valid_ways[15:14] == 2'b00 ? cur_state[21] :
                   valid_ways[14] == 1'b0 ? 1'b1 :
                   valid_ways[15] == 1'b0 ? 1'b0 : cur_state[21];
assign state[22] = valid_ways[17:16] == 2'b00 ? cur_state[22] :
                   valid_ways[16] == 1'b0 ? 1'b1 :
                   valid_ways[17] == 1'b0 ? 1'b0 : cur_state[22];
assign state[23] = valid_ways[19:18] == 2'b00 ? cur_state[23] :
                   valid_ways[18] == 1'b0 ? 1'b1 :
                   valid_ways[19] == 1'b0 ? 1'b0 : cur_state[23];
assign state[24] = valid_ways[22:21] == 2'b00 ? cur_state[24] :
                   valid_ways[21] == 1'b0 ? 1'b1 :
                   valid_ways[22] == 1'b0 ? 1'b0 : cur_state[24];
assign state[25] = valid_ways[24:23] == 2'b00 ? cur_state[25] :
                   valid_ways[23] == 1'b0 ? 1'b1 :
                   valid_ways[24] == 1'b0 ? 1'b0 : cur_state[25];
assign state[26] = valid_ways[26:25] == 2'b00 ? cur_state[26] :
                   valid_ways[25] == 1'b0 ? 1'b1 :
                   valid_ways[26] == 1'b0 ? 1'b0 : cur_state[26];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    27'b???????????0_???????0_???0_?0_0  : victim = 28'b0000000000000000000000000001;
    27'b???????????1_???????0_???0_?0_0  : victim = 28'b0000000000000000000000000010;
    27'b??????????0?_???????1_???0_?0_0  : victim = 28'b0000000000000000000000000100;
    27'b??????????1?_???????1_???0_?0_0  : victim = 28'b0000000000000000000000001000;
    27'b?????????0??_??????0?_???1_?0_0  : victim = 28'b0000000000000000000000010000;
    27'b?????????1??_??????0?_???1_?0_0  : victim = 28'b0000000000000000000000100000;
    27'b????????????_??????1?_???1_?0_0  : victim = 28'b0000000000000000000001000000;
    27'b????????0???_?????0??_??0?_?1_0  : victim = 28'b0000000000000000000010000000;
    27'b????????1???_?????0??_??0?_?1_0  : victim = 28'b0000000000000000000100000000;
    27'b???????0????_?????1??_??0?_?1_0  : victim = 28'b0000000000000000001000000000;
    27'b???????1????_?????1??_??0?_?1_0  : victim = 28'b0000000000000000010000000000;
    27'b??????0?????_????0???_??1?_?1_0  : victim = 28'b0000000000000000100000000000;
    27'b??????1?????_????0???_??1?_?1_0  : victim = 28'b0000000000000001000000000000;
    27'b????????????_????1???_??1?_?1_0  : victim = 28'b0000000000000010000000000000;
    27'b?????0??????_???0????_?0??_0?_1  : victim = 28'b0000000000000100000000000000;
    27'b?????1??????_???0????_?0??_0?_1  : victim = 28'b0000000000001000000000000000;
    27'b????0???????_???1????_?0??_0?_1  : victim = 28'b0000000000010000000000000000;
    27'b????1???????_???1????_?0??_0?_1  : victim = 28'b0000000000100000000000000000;
    27'b???0????????_??0?????_?1??_0?_1  : victim = 28'b0000000001000000000000000000;
    27'b???1????????_??0?????_?1??_0?_1  : victim = 28'b0000000010000000000000000000;
    27'b????????????_??1?????_?1??_0?_1  : victim = 28'b0000000100000000000000000000;
    27'b??0?????????_?0??????_0???_1?_1  : victim = 28'b0000001000000000000000000000;
    27'b??1?????????_?0??????_0???_1?_1  : victim = 28'b0000010000000000000000000000;
    27'b?0??????????_?1??????_0???_1?_1  : victim = 28'b0000100000000000000000000000;
    27'b?1??????????_?1??????_0???_1?_1  : victim = 28'b0001000000000000000000000000;
    27'b0???????????_0???????_1???_1?_1  : victim = 28'b0010000000000000000000000000;
    27'b1???????????_0???????_1???_1?_1  : victim = 28'b0100000000000000000000000000;
    27'b????????????_1???????_1???_1?_1  : victim = 28'b1000000000000000000000000000;

    default                              : victim = 28'b0000000000000000000000000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[26:16],1'b1,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[1] : nxt_state = {s[26:16],1'b0,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[2] : nxt_state = {s[26:17],1'b1,s[15],    s[14:8],1'b0,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[3] : nxt_state = {s[26:17],1'b0,s[15],    s[14:8],1'b0,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[4] : nxt_state = {s[26:18],1'b1,s[16:15], s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[5] : nxt_state = {s[26:18],1'b0,s[16:15], s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[6] : nxt_state = {s[26:15],               s[14:9],1'b0,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[7] : nxt_state = {s[26:19],1'b1,s[17:15], s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[8] : nxt_state = {s[26:19],1'b0,s[17:15], s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[9] : nxt_state = {s[26:20],1'b1,s[18:15], s[14:10],1'b0,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[10]: nxt_state = {s[26:20],1'b0,s[18:15], s[14:10],1'b0,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[11]: nxt_state = {s[26:21],1'b1,s[19:15], s[14:11],1'b1,s[9:7],  s[6],1'b0,s[4:3], s[2],1'b0, 1'b1};
    victim[12]: nxt_state = {s[26:21],1'b0,s[19:15], s[14:11],1'b1,s[9:7],  s[6],1'b0,s[4:3], s[2],1'b0, 1'b1};
    victim[13]: nxt_state = {s[26:15],               s[14:11],1'b0,s[9:7],  s[6],1'b0,s[4:3], s[2],1'b0, 1'b1};
    victim[14]: nxt_state = {s[26:22],1'b1,s[20:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[15]: nxt_state = {s[26:22],1'b0,s[20:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[16]: nxt_state = {s[26:23],1'b1,s[21:15], s[14:12],1'b0,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[17]: nxt_state = {s[26:23],1'b0,s[21:15], s[14:12],1'b0,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[18]: nxt_state = {s[26:24],1'b1,s[22:15], s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[19]: nxt_state = {s[26:24],1'b0,s[22:15], s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[20]: nxt_state = {s[26:15],               s[14:13],1'b0,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[21]: nxt_state = {s[26:25],1'b1,s[23:15], s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[22]: nxt_state = {s[26:25],1'b0,s[23:15], s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[23]: nxt_state = {s[26],1'b1,s[24:15],    s[14],1'b0,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[24]: nxt_state = {s[26],1'b0,s[24:15],    s[14],1'b0,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[25]: nxt_state = {1'b1,s[25:15],          1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[26]: nxt_state = {1'b0,s[25:15],          1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[27]: nxt_state = {s[26:15],               1'b0,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};

    default   : nxt_state = {s[26:16],1'b1,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
endcase
end

\js } // if (ways == 28)
 
\jsbegin
//=============================================================================
// 32-way set associateive pseudo LRU
//=============================================================================
//                                                            s[0]
//                                       ___________________/      \_________________________
//                                     0                                                      1
//                                    /                                                        \
//                           ___ s[1] _____                                                 ____ s[2] _____
//                          /              \                                               /               \
//                         0                1                                             0                 1
//                        /                  \                                           /                   \
//               s[3]                             s[4]                           s[5]                            s[6]
//               /  \                            /   \                           /   \                          /    \
//              0     1                         0     1                         0     1                        0      1
//             /       \                       /       \                       /       \                      /        \
//        s[7]            s[8]            s[9]           s[10]            s[11]          s[12]           s[13]           s[14]
//      /     \         /     \         /     \         /     \          /    \         /     \         /     \         /    \
//     0       1       0       1       0       1       0       1       0       1       0       1       0       1       0       1
//     |       |       |       |       |       |       |       |       |       |       |       |       |       |       |       |
//   s[15]   s[16]   s[17]   s[18]   s[19]   s[20]   s[21]   s[22]   s[23]   s[24]   s[25]   s[26]   s[27]   s[28]   s[29]   s[30]
//    / \     / \     / \     / \     / \     / \     / \     / \     / \     / \     / \     / \     / \     / \     / \     / \
//   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1   0   1
//   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
//  way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way way
//   0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31
//
// way 0 16 8 24 4 20 12 28 2 18 10 26 6 22 14 30 1 17 9 25 5 21 13 29 3 19 11 27 7 23 15 31
//
// ------------------------------------------------------------------------------------------
// lut
// --------------------------------------------- --------------------------------------------
// state[30:0]                         | replace ref to | next state[30:0]
// ------------------------------------+-------- -------+------------------------------------
// xxxxxxxxxxxxxxx0 xxxxxxx0 xxx0 x0 0 | way 0   way 0  | _______________1 _______1 ___1 _1 1
// xxxxxxxxxxxxxxx1 xxxxxxx0 xxx0 x0 0 | way 1   way 1  | _______________0 _______1 ___1 _1 1
// xxxxxxxxxxxxxx0x xxxxxxx1 xxx0 x0 0 | way 2   way 2  | ______________1_ _______0 ___1 _1 1
// xxxxxxxxxxxxxx1x xxxxxxx1 xxx0 x0 0 | way 3   way 3  | ______________0_ _______0 ___1 _1 1
// xxxxxxxxxxxxx0xx xxxxxx0x xxx1 x0 0 | way 4   way 4  | _____________1__ ______1_ ___0 _1 1
// xxxxxxxxxxxxx1xx xxxxxx0x xxx1 x0 0 | way 5   way 5  | _____________0__ ______1_ ___0 _1 1
// xxxxxxxxxxxx0xxx xxxxxx1x xxx1 x0 0 | way 6   way 6  | ____________1___ ______0_ ___0 _1 1
// xxxxxxxxxxxx1xxx xxxxxx1x xxx1 x0 0 | way 7   way 7  | ____________0___ ______0_ ___0 _1 1
// xxxxxxxxxxx0xxxx xxxxx0xx xx0x x1 0 | way 8   way 8  | ___________1____ _____1__ __1_ _0 1
// xxxxxxxxxxx1xxxx xxxxx0xx xx0x x1 0 | way 9   way 9  | ___________0____ _____1__ __1_ _0 1
// xxxxxxxxxx0xxxxx xxxxx1xx xx0x x1 0 | way 10  way 10 | __________1_____ _____0__ __1_ _0 1
// xxxxxxxxxx1xxxxx xxxxx1xx xx0x x1 0 | way 11  way 11 | __________0_____ _____0__ __1_ _0 1
// xxxxxxxxx0xxxxxx xxxx0xxx xx1x x1 0 | way 12  way 12 | _________1______ ____1___ __0_ _0 1
// xxxxxxxxx1xxxxxx xxxx0xxx xx1x x1 0 | way 13  way 13 | _________0______ ____1___ __0_ _0 1
// xxxxxxxx0xxxxxxx xxxx1xxx xx1x x1 0 | way 14  way 14 | ________1_______ ____0___ __0_ _0 1
// xxxxxxxx1xxxxxxx xxxx1xxx xx1x x1 0 | way 15  way 15 | ________0_______ ____0___ __0_ _0 1
// xxxxxxx0xxxxxxxx xxx0xxxx x0xx 0x 1 | way 16  way 16 | _______1________ ___1____ _1__ 1_ 0
// xxxxxxx1xxxxxxxx xxx0xxxx x0xx 0x 1 | way 17  way 17 | _______0________ ___1____ _1__ 1_ 0
// xxxxxx0xxxxxxxxx xxx1xxxx x0xx 0x 1 | way 18  way 18 | ______1_________ ___0____ _1__ 1_ 0
// xxxxxx1xxxxxxxxx xxx1xxxx x0xx 0x 1 | way 19  way 19 | ______0_________ ___0____ _1__ 1_ 0
// xxxxx0xxxxxxxxxx xx0xxxxx x1xx 0x 1 | way 20  way 20 | _____1__________ __1_____ _0__ 1_ 0
// xxxxx1xxxxxxxxxx xx0xxxxx x1xx 0x 1 | way 21  way 21 | _____0__________ __1_____ _0__ 1_ 0
// xxxx0xxxxxxxxxxx xx1xxxxx x1xx 0x 1 | way 22  way 22 | ____1___________ __0_____ _0__ 1_ 0
// xxxx1xxxxxxxxxxx xx1xxxxx x1xx 0x 1 | way 23  way 23 | ____0___________ __0_____ _0__ 1_ 0
// xxx0xxxxxxxxxxxx x0xxxxxx 0xxx 1x 1 | way 24  way 24 | ___1____________ _1______ 1___ 0_ 0
// xxx1xxxxxxxxxxxx x0xxxxxx 0xxx 1x 1 | way 25  way 25 | ___0____________ _1______ 1___ 0_ 0
// xx0xxxxxxxxxxxxx x1xxxxxx 0xxx 1x 1 | way 26  way 26 | __1_____________ _0______ 1___ 0_ 0
// xx1xxxxxxxxxxxxx x1xxxxxx 0xxx 1x 1 | way 27  way 27 | __0_____________ _0______ 1___ 0_ 0
// x0xxxxxxxxxxxxxx 0xxxxxxx 1xxx 1x 1 | way 28  way 28 | _1______________ 1_______ 0___ 0_ 0
// x1xxxxxxxxxxxxxx 0xxxxxxx 1xxx 1x 1 | way 29  way 29 | _0______________ 1_______ 0___ 0_ 0
// 0xxxxxxxxxxxxxxx 1xxxxxxx 1xxx 1x 1 | way 30  way 30 | 1_______________ 0_______ 0___ 0_ 0
// 1xxxxxxxxxxxxxxx 1xxxxxxx 1xxx 1x 1 | way 31  way 31 | 0_______________ 0_______ 0___ 0_ 0
//
// victim
// --------------------------------------------------------
// state[0] = valid_ways[15: 0] == 0000_0000_0000_0000 ? 1 :
//            valid_ways[31:16] == 0000_0000_0000_0000 ? 0 : _;
// --------------------------------------------------------
// state[1] = valid_ways[15: 0] == 0000_0000_0000_0000 ? _ :
//            valid_ways[ 7: 0] == 0000_0000 ? 1 :
//            valid_ways[15: 8] == 0000_0000 ? 0 : _;
// state[2] = valid_ways[31:16] == 0000_0000_0000_0000 ? _ :
//            valid_ways[23:16] == 0000_0000 ? 1 :
//            valid_ways[31:24] == 0000_0000 ? 0 : _;
// --------------------------------------------------------
// state[3] = valid_ways[ 7: 0] == 0000_0000 ? _ :
//            valid_ways[ 3: 0] == 0000 ? 1 :
//            valid_ways[ 7: 4] == 0000 ? 0 : _;
// state[4] = valid_ways[15: 8] == 0000_0000 ? _ :
//            valid_ways[11: 8] == 0000 ? 1 :
//            valid_ways[15:12] == 0000 ? 0 : _;
// state[5] = valid_ways[23:16] == 0000_0000 ? _ :
//            valid_ways[19:16] == 0000 ? 1 :
//            valid_ways[23:20] == 0000 ? 0 : _;
// state[6] = valid_ways[31:24] == 0000_0000 ? _ :
//            valid_ways[27:24] == 0000 ? 1 :
//            valid_ways[31:28] == 0000 ? 0 : _;
// --------------------------------------------------------
// state[7]  = valid_ways[ 3: 0] == 0000 ? _ :
//             valid_ways[ 1: 0] == 00 ? 1 :
//             valid_ways[ 3: 2] == 00 ? 0 : _;
// state[8]  = valid_ways[ 7: 4] == 0000 ? _ :
//             valid_ways[ 5: 4] == 00 ? 1 :
//             valid_ways[ 7: 6] == 00 ? 0 : _;
// state[9]  = valid_ways[11: 8] == 0000 ? _ :
//             valid_ways[ 9: 8] == 00 ? 1 :
//             valid_ways[11:10] == 00 ? 0 : _;
// state[10] = valid_ways[15:12] == 0000 ? _ :
//             valid_ways[13:12] == 00 ? 1 :
//             valid_ways[15:14] == 00 ? 0 : _;
// state[11] = valid_ways[19:16] == 0000 ? _ :
//             valid_ways[17:16] == 00 ? 1 :
//             valid_ways[19:18] == 00 ? 0 : _;
// state[12] = valid_ways[23:20] == 0000 ? _ :
//             valid_ways[21:20] == 00 ? 1 :
//             valid_ways[23:22] == 00 ? 0 : _;
// state[13] = valid_ways[27:24] == 0000 ? _ :
//             valid_ways[25:24] == 00 ? 1 :
//             valid_ways[27:26] == 00 ? 0 : _;
// state[14] = valid_ways[31:28] == 0000 ? _ :
//             valid_ways[29:28] == 00 ? 1 :
//             valid_ways[31:30] == 00 ? 0 : _;
// --------------------------------------------------------
// state[15] = valid_ways[ 1: 0] == 00 ? _ :
//             valid_ways[0]  == 0 ? 1 :
//             valid_ways[1]  == 0 ? 0 : _;
// state[16] = valid_ways[ 3: 2] == 00 ? _ :
//             valid_ways[2]  == 0 ? 1 :
//             valid_ways[3]  == 0 ? 0 : _;
// state[17] = valid_ways[ 5: 4] == 00 ? _ :
//             valid_ways[4]  == 0 ? 1 :
//             valid_ways[5]  == 0 ? 0 : _;
// state[18] = valid_ways[ 7: 6] == 00 ? _ :
//             valid_ways[6]  == 0 ? 1 :
//             valid_ways[7]  == 0 ? 0 : _;
// state[19] = valid_ways[ 9: 8] == 00 ? _ :
//             valid_ways[8]  == 0 ? 1 :
//             valid_ways[9]  == 0 ? 0 : _;
// state[20] = valid_ways[11:10] == 00 ? _ :
//             valid_ways[10] == 0 ? 1 :
//             valid_ways[11] == 0 ? 0 : _;
// state[21] = valid_ways[13:12] == 00 ? _ :
//             valid_ways[12] == 0 ? 1 :
//             valid_ways[13] == 0 ? 0 : _;
// state[22] = valid_ways[15:14] == 00 ? _ :
//             valid_ways[14] == 0 ? 1 :
//             valid_ways[15] == 0 ? 0 : _;
// state[23] = valid_ways[17:16] == 00 ? _ :
//             valid_ways[16] == 0 ? 1 :
//             valid_ways[17] == 0 ? 0 : _;
// state[24] = valid_ways[19:18] == 00 ? _ :
//             valid_ways[18] == 0 ? 1 :
//             valid_ways[19] == 0 ? 0 : _;
// state[25] = valid_ways[21:20] == 00 ? _ :
//             valid_ways[20] == 0 ? 1 :
//             valid_ways[21] == 0 ? 0 : _;
// state[26] = valid_ways[23:22] == 00 ? _ :
//             valid_ways[22] == 0 ? 1 :
//             valid_ways[23] == 0 ? 0 : _;
// state[27] = valid_ways[25:24] == 00 ? _ :
//             valid_ways[24] == 0 ? 1 :
//             valid_ways[25] == 0 ? 0 : _;
// state[28] = valid_ways[27:26] == 00 ? _ :
//             valid_ways[26] == 0 ? 1 :
//             valid_ways[27] == 0 ? 0 : _;
// state[29] = valid_ways[29:28] == 00 ? _ :
//             valid_ways[28] == 0 ? 1 :
//             valid_ways[29] == 0 ? 0 : _;
// state[30] = valid_ways[31:30] == 00 ? _ :
//             valid_ways[30] == 0 ? 1 :
//             valid_ways[31] == 0 ? 0 : _;
// --------------------------------------------------------
\jsend

\js if (ways == 32) {

assign state[0] = valid_ways[15: 0] == 16'b0000_0000_0000_0000 ? 1'b1 :
                  valid_ways[31:16] == 16'b0000_0000_0000_0000 ? 1'b0 : cur_state[0];

assign state[1] = valid_ways[15: 0] == 16'b0000_0000_0000_0000 ? cur_state[1] :
                  valid_ways[ 7: 0] == 8'b0000_0000 ? 1'b1 :
                  valid_ways[15: 8] == 8'b0000_0000 ? 1'b0 : cur_state[1];
assign state[2] = valid_ways[31:16] == 16'b0000_0000_0000_0000 ? cur_state[2] :
                  valid_ways[23:16] == 8'b0000_0000 ? 1'b1 :
                  valid_ways[31:24] == 8'b0000_0000 ? 1'b0 : cur_state[2];

assign state[3] = valid_ways[ 7: 0] == 8'b0000_0000 ? cur_state[3] :
                  valid_ways[ 3: 0] == 4'b0000 ? 1'b1 :
                  valid_ways[ 7: 4] == 4'b0000 ? 1'b0 : cur_state[3];
assign state[4] = valid_ways[15: 8] == 8'b0000_0000 ? cur_state[4] :
                  valid_ways[11: 8] == 4'b0000 ? 1'b1 :
                  valid_ways[15:12] == 4'b0000 ? 1'b0 : cur_state[4];
assign state[5] = valid_ways[23:16] == 8'b0000_0000 ? cur_state[5] :
                  valid_ways[19:16] == 4'b0000 ? 1'b1 :
                  valid_ways[23:20] == 4'b0000 ? 1'b0 : cur_state[5];
assign state[6] = valid_ways[31:24] == 8'b0000_0000 ? cur_state[6] :
                  valid_ways[27:24] == 4'b0000 ? 1'b1 :
                  valid_ways[31:28] == 4'b0000 ? 1'b0 : cur_state[6];

assign state[7]  = valid_ways[ 3: 0] == 4'b0000 ? cur_state[7] :
                   valid_ways[ 1: 0] == 2'b00 ? 1'b1 :
                   valid_ways[ 3: 2] == 2'b00 ? 1'b0 : cur_state[7];
assign state[8]  = valid_ways[ 7: 4] == 4'b0000 ? cur_state[8] :
                   valid_ways[ 5: 4] == 2'b00 ? 1'b1 :
                   valid_ways[ 7: 6] == 2'b00 ? 1'b0 : cur_state[8];
assign state[9]  = valid_ways[11: 8] == 4'b0000 ? cur_state[9] :
                   valid_ways[ 9: 8] == 2'b00 ? 1'b1 :
                   valid_ways[11:10] == 2'b00 ? 1'b0 : cur_state[9];
assign state[10] = valid_ways[15:12] == 4'b0000 ? cur_state[10] :
                   valid_ways[13:12] == 2'b00 ? 1'b1 :
                   valid_ways[15:14] == 2'b00 ? 1'b0 : cur_state[10];
assign state[11] = valid_ways[19:16] == 4'b0000 ? cur_state[11] :
                   valid_ways[17:16] == 2'b00 ? 1'b1 :
                   valid_ways[19:18] == 2'b00 ? 1'b0 : cur_state[11];
assign state[12] = valid_ways[23:20] == 4'b0000 ? cur_state[12] :
                   valid_ways[21:20] == 2'b00 ? 1'b1 :
                   valid_ways[23:22] == 2'b00 ? 1'b0 : cur_state[12];
assign state[13] = valid_ways[27:24] == 4'b0000 ? cur_state[13] :
                   valid_ways[25:24] == 2'b00 ? 1'b1 :
                   valid_ways[27:26] == 2'b00 ? 1'b0 : cur_state[13];
assign state[14] = valid_ways[31:28] == 4'b0000 ? cur_state[14] :
                   valid_ways[29:28] == 2'b00 ? 1'b1 :
                   valid_ways[31:30] == 2'b00 ? 1'b0 : cur_state[14];

assign state[15] = valid_ways[ 1: 0] == 2'b00 ? cur_state[15] :
                   valid_ways[0]  == 1'b0 ? 1'b1 :
                   valid_ways[1]  == 1'b0 ? 1'b0 : cur_state[15];
assign state[16] = valid_ways[ 3: 2] == 2'b00 ? cur_state[16] :
                   valid_ways[2]  == 1'b0 ? 1'b1 :
                   valid_ways[3]  == 1'b0 ? 1'b0 : cur_state[16];
assign state[17] = valid_ways[ 5: 4] == 2'b00 ? cur_state[17] :
                   valid_ways[4]  == 1'b0 ? 1'b1 :
                   valid_ways[5]  == 1'b0 ? 1'b0 : cur_state[17];
assign state[18] = valid_ways[ 7: 6] == 2'b00 ? cur_state[18] :
                   valid_ways[6]  == 1'b0 ? 1'b1 :
                   valid_ways[7]  == 1'b0 ? 1'b0 : cur_state[18];
assign state[19] = valid_ways[ 9: 8] == 2'b00 ? cur_state[19] :
                   valid_ways[8]  == 1'b0 ? 1'b1 :
                   valid_ways[9]  == 1'b0 ? 1'b0 : cur_state[19];
assign state[20] = valid_ways[11:10] == 2'b00 ? cur_state[20] :
                   valid_ways[10] == 1'b0 ? 1'b1 :
                   valid_ways[11] == 1'b0 ? 1'b0 : cur_state[20];
assign state[21] = valid_ways[13:12] == 2'b00 ? cur_state[21] :
                   valid_ways[12] == 1'b0 ? 1'b1 :
                   valid_ways[13] == 1'b0 ? 1'b0 : cur_state[21];
assign state[22] = valid_ways[15:14] == 2'b00 ? cur_state[22] :
                   valid_ways[14] == 1'b0 ? 1'b1 :
                   valid_ways[15] == 1'b0 ? 1'b0 : cur_state[22];
assign state[23] = valid_ways[17:16] == 2'b00 ? cur_state[23] :
                   valid_ways[16] == 1'b0 ? 1'b1 :
                   valid_ways[17] == 1'b0 ? 1'b0 : cur_state[23];
assign state[24] = valid_ways[19:18] == 2'b00 ? cur_state[24] :
                   valid_ways[18] == 1'b0 ? 1'b1 :
                   valid_ways[19] == 1'b0 ? 1'b0 : cur_state[24];
assign state[25] = valid_ways[21:20] == 2'b00 ? cur_state[25] :
                   valid_ways[20] == 1'b0 ? 1'b1 :
                   valid_ways[21] == 1'b0 ? 1'b0 : cur_state[25];
assign state[26] = valid_ways[23:22] == 2'b00 ? cur_state[26] :
                   valid_ways[22] == 1'b0 ? 1'b1 :
                   valid_ways[23] == 1'b0 ? 1'b0 : cur_state[26];
assign state[27] = valid_ways[25:24] == 2'b00 ? cur_state[27] :
                   valid_ways[24] == 1'b0 ? 1'b1 :
                   valid_ways[25] == 1'b0 ? 1'b0 : cur_state[27];
assign state[28] = valid_ways[27:26] == 2'b00 ? cur_state[28] :
                   valid_ways[26] == 1'b0 ? 1'b1 :
                   valid_ways[27] == 1'b0 ? 1'b0 : cur_state[28];
assign state[29] = valid_ways[29:28] == 2'b00 ? cur_state[29] :
                   valid_ways[28] == 1'b0 ? 1'b1 :
                   valid_ways[29] == 1'b0 ? 1'b0 : cur_state[29];
assign state[30] = valid_ways[31:30] == 2'b00 ? cur_state[30] :
                   valid_ways[30] == 1'b0 ? 1'b1 :
                   valid_ways[31] == 1'b0 ? 1'b0 : cur_state[30];

assign s = hit ? cur_state : state;

always@(*) begin
if (hit) begin
    victim = hit_way;
end else
casez (state)
    31'b???????????????0_???????0_???0_?0_0  : victim = 32'b00000000000000000000000000000001;
    31'b???????????????1_???????0_???0_?0_0  : victim = 32'b00000000000000000000000000000010;
    31'b??????????????0?_???????1_???0_?0_0  : victim = 32'b00000000000000000000000000000100;
    31'b??????????????1?_???????1_???0_?0_0  : victim = 32'b00000000000000000000000000001000;
    31'b?????????????0??_??????0?_???1_?0_0  : victim = 32'b00000000000000000000000000010000;
    31'b?????????????1??_??????0?_???1_?0_0  : victim = 32'b00000000000000000000000000100000;
    31'b????????????0???_??????1?_???1_?0_0  : victim = 32'b00000000000000000000000001000000;
    31'b????????????1???_??????1?_???1_?0_0  : victim = 32'b00000000000000000000000010000000;
    31'b???????????0????_?????0??_??0?_?1_0  : victim = 32'b00000000000000000000000100000000;
    31'b???????????1????_?????0??_??0?_?1_0  : victim = 32'b00000000000000000000001000000000;
    31'b??????????0?????_?????1??_??0?_?1_0  : victim = 32'b00000000000000000000010000000000;
    31'b??????????1?????_?????1??_??0?_?1_0  : victim = 32'b00000000000000000000100000000000;
    31'b?????????0??????_????0???_??1?_?1_0  : victim = 32'b00000000000000000001000000000000;
    31'b?????????1??????_????0???_??1?_?1_0  : victim = 32'b00000000000000000010000000000000;
    31'b????????0???????_????1???_??1?_?1_0  : victim = 32'b00000000000000000100000000000000;
    31'b????????1???????_????1???_??1?_?1_0  : victim = 32'b00000000000000001000000000000000;
    31'b???????0????????_???0????_?0??_0?_1  : victim = 32'b00000000000000010000000000000000;
    31'b???????1????????_???0????_?0??_0?_1  : victim = 32'b00000000000000100000000000000000;
    31'b??????0?????????_???1????_?0??_0?_1  : victim = 32'b00000000000001000000000000000000;
    31'b??????1?????????_???1????_?0??_0?_1  : victim = 32'b00000000000010000000000000000000;
    31'b?????0??????????_??0?????_?1??_0?_1  : victim = 32'b00000000000100000000000000000000;
    31'b?????1??????????_??0?????_?1??_0?_1  : victim = 32'b00000000001000000000000000000000;
    31'b????0???????????_??1?????_?1??_0?_1  : victim = 32'b00000000010000000000000000000000;
    31'b????1???????????_??1?????_?1??_0?_1  : victim = 32'b00000000100000000000000000000000;
    31'b???0????????????_?0??????_0???_1?_1  : victim = 32'b00000001000000000000000000000000;
    31'b???1????????????_?0??????_0???_1?_1  : victim = 32'b00000010000000000000000000000000;
    31'b??0?????????????_?1??????_0???_1?_1  : victim = 32'b00000100000000000000000000000000;
    31'b??1?????????????_?1??????_0???_1?_1  : victim = 32'b00001000000000000000000000000000;
    31'b?0??????????????_0???????_1???_1?_1  : victim = 32'b00010000000000000000000000000000;
    31'b?1??????????????_0???????_1???_1?_1  : victim = 32'b00100000000000000000000000000000;
    31'b0???????????????_1???????_1???_1?_1  : victim = 32'b01000000000000000000000000000000;
    31'b1???????????????_1???????_1???_1?_1  : victim = 32'b10000000000000000000000000000000;

    default                                  : victim = 32'b00000000000000000000000000000001;
endcase
end

always@(*) begin
case (1'b1)
    victim[0] : nxt_state = {s[30:16],1'b1,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[1] : nxt_state = {s[30:16],1'b0,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[2] : nxt_state = {s[30:17],1'b1,s[15],    s[14:8],1'b0,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[3] : nxt_state = {s[30:17],1'b0,s[15],    s[14:8],1'b0,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
    victim[4] : nxt_state = {s[30:18],1'b1,s[16:15], s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[5] : nxt_state = {s[30:18],1'b0,s[16:15], s[14:9],1'b1,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[6] : nxt_state = {s[30:19],1'b1,s[17:15], s[14:9],1'b0,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[7] : nxt_state = {s[30:19],1'b0,s[17:15], s[14:9],1'b0,s[7],     s[6:4],1'b0,      s[2],1'b1, 1'b1};
    victim[8] : nxt_state = {s[30:20],1'b1,s[18:15], s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[9] : nxt_state = {s[30:20],1'b0,s[18:15], s[14:10],1'b1,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[10]: nxt_state = {s[30:21],1'b1,s[19:15], s[14:10],1'b0,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[11]: nxt_state = {s[30:21],1'b0,s[19:15], s[14:10],1'b0,s[8:7],  s[6:5],1'b1,s[3], s[2],1'b0, 1'b1};
    victim[12]: nxt_state = {s[30:22],1'b1,s[20:15], s[14:11],1'b1,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[13]: nxt_state = {s[30:22],1'b0,s[20:15], s[14:11],1'b1,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[14]: nxt_state = {s[30:23],1'b1,s[21:15], s[14:11],1'b0,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[15]: nxt_state = {s[30:23],1'b0,s[21:15], s[14:11],1'b0,s[9:7],  s[6:5],1'b0,s[3], s[2],1'b0, 1'b1};
    victim[16]: nxt_state = {s[30:24],1'b1,s[22:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[17]: nxt_state = {s[30:24],1'b0,s[22:15], s[14:12],1'b1,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[18]: nxt_state = {s[30:25],1'b1,s[23:15], s[14:12],1'b0,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[19]: nxt_state = {s[30:25],1'b0,s[23:15], s[14:12],1'b0,s[10:7], s[6],1'b1,s[4:3], 1'b1,s[1], 1'b0};
    victim[20]: nxt_state = {s[30:26],1'b1,s[24:15], s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[21]: nxt_state = {s[30:26],1'b0,s[24:15], s[14:13],1'b1,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[22]: nxt_state = {s[30:27],1'b1,s[25:15], s[14:13],1'b0,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[23]: nxt_state = {s[30:27],1'b0,s[25:15], s[14:13],1'b0,s[11:7], s[6],1'b0,s[4:3], 1'b1,s[1], 1'b0};
    victim[24]: nxt_state = {s[30:28],1'b1,s[26:15], s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[25]: nxt_state = {s[30:28],1'b0,s[26:15], s[14],1'b1,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[26]: nxt_state = {s[30:29],1'b1,s[27:15], s[14],1'b0,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[27]: nxt_state = {s[30:29],1'b0,s[27:15], s[14],1'b0,s[12:7],    1'b1,s[5:3],      1'b0,s[1], 1'b0};
    victim[28]: nxt_state = {s[30],1'b1,s[28:15],    1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[29]: nxt_state = {s[30],1'b0,s[28:15],    1'b1,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[30]: nxt_state = {1'b1,s[29:15],          1'b0,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};
    victim[31]: nxt_state = {1'b0,s[29:15],          1'b0,s[13:7],          1'b0,s[5:3],      1'b0,s[1], 1'b0};

    default   : nxt_state = {s[30:16],1'b1,          s[14:8],1'b1,          s[6:4],1'b1,      s[2],1'b1, 1'b1};
endcase
end

\js } // if (ways == 32)
 
endmodule
