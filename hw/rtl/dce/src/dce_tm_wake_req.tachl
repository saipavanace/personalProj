\jsbegin
//=============================================================================
// Copyright(C) 2024 Arteris, Inc.
// All rights reserved
//=============================================================================
// DCE Transaction Manager SNPreq
//
// Filename: dce_tm_snp_req.tachl
//=============================================================================

var u = obj.lib;
var m = obj.userLib;

let ASSERT_ON    = m.ParamDefaultGet(u, 'assertOn', 'int', 0);
let N_ATT        = m.ParamDefaultGet(u, 'nAttEntries', 'int', 32);
let CMD_REQ_INTF = m.ParamDefaultGet(u, 'cmdReqInterface', 'object', {});

let W_INIT_ID    = CMD_REQ_INTF.initiator_id;
let W_CM_TYPE    = CMD_REQ_INTF.cm_type;
let W_ADDR       = CMD_REQ_INTF.addr;
let W_NS         = CMD_REQ_INTF.ns;
let W_MPF1       = CMD_REQ_INTF.mpf1;
let W_MPF2       = CMD_REQ_INTF.mpf2;
let W_ES         = CMD_REQ_INTF.es;

u.port('input',  'clk', 1);
u.port('input',  'reset_n', 1);

u.port('input',  'att_entry_wakeup_req_valid', N_ATT);
u.port('output', 'att_entry_wakeup_req_ready', N_ATT);
u.port('input',  'att_entry_req_type',                N_ATT*W_CM_TYPE);
u.port('input',  'att_entry_req_ns',                  N_ATT*W_NS);
u.port('input',  'att_entry_req_addr',                N_ATT*W_ADDR);
u.port('input',  'att_entry_req_mpf1',                N_ATT*W_MPF1);
u.port('input',  'att_entry_req_mpf2',                N_ATT*W_MPF2);
u.port('input',  'att_entry_req_es',                  N_ATT*W_ES);
u.port('input',  'att_entry_req_initiator_id',        N_ATT*W_INIT_ID);

u.port('output', 'tm_cmd_wakeup_req_arb_valid',       1);
u.port('input',  'tm_cmd_wakeup_req_arb_ready',       1);
u.port('output', 'att_entry_wakeup_req_att_vec',      N_ATT);
u.port('output', 'att_entry_wakeup_req_cm_type',      W_CM_TYPE);
u.port('output', 'att_entry_wakeup_req_ns',           W_NS);
u.port('output', 'att_entry_wakeup_req_addr',         W_ADDR);
u.port('output', 'att_entry_wakeup_req_mpf1',         W_MPF1);
u.port('output', 'att_entry_wakeup_req_mpf2',         W_MPF2);
u.port('output', 'att_entry_wakeup_req_es',           W_ES);
u.port('output', 'att_entry_wakeup_req_initiator_id', W_INIT_ID);

\jsend

module \=u.getModuleName()=\ (\=u.getPorts()=\);

localparam
  W_INIT_ID = \=W_INIT_ID=\,
  W_CM_TYPE = \=W_CM_TYPE=\,
  W_ADDR = \=W_ADDR=\,
  W_NS = \=W_NS=\,
  W_MPF1 = \=W_MPF1=\,
  W_MPF2 = \=W_MPF2=\,
  W_ES = \=W_ES=\,
  N_ATT = \=N_ATT=\;


wire tm_cmd_wakeup_req_arb_last;
                                    
// Wake up mux path

    \=u.instance ({
               instanceName: 'wakeup_req_rr_arb',
               moduleName: 'rr_arb_comb_mux_therm',
               params: {
                        num_inputs: N_ATT,
                        interleave_mode : 1
                        },
               verilogParams: {},
               ports: {
                       'clk' : 'clk',
                       'reset_n' : 'reset_n',
                       'sink_valid': 'att_entry_wakeup_req_valid',
                       'sink_last':  "{N_ATT{1'b1}}",
                       'sink_ready': 'att_entry_wakeup_req_ready',
                       'sink_grant': 'att_entry_wakeup_req_att_vec',
                       'source_valid': 'tm_cmd_wakeup_req_arb_valid',
                       'source_ready': 'tm_cmd_wakeup_req_arb_ready',
                       'source_last' : 'tm_cmd_wakeup_req_arb_last'
                       }
    })=\   


assign att_entry_wakeup_req_cm_type = (
\js for (let i=0; i< N_ATT ; i++) {
                                     ({W_CM_TYPE{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_type[W_CM_TYPE*\=i=\ +: W_CM_TYPE]) |
\js }
                                     {W_CM_TYPE{1'b0}});
assign att_entry_wakeup_req_ns = (
\js for (let i=0; i< N_ATT ; i++) {
                                ({W_NS{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_ns[W_NS*\=i=\ +: W_NS]) |
\js }  
                                {W_NS{1'b0}});
assign att_entry_wakeup_req_addr = (
\js for (let i=0; i< N_ATT ; i++) {
                                  ({W_ADDR{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_addr[W_ADDR*\=i=\ +: W_ADDR]) |
\js } 
                                  {W_ADDR{1'b0}});
assign att_entry_wakeup_req_mpf1 = ( 
\js for (let i=0; i< N_ATT ; i++) {
                                   ({W_MPF1{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_mpf1[W_MPF1*\=i=\ +: W_MPF1]) |
\js }
                                   {W_MPF1{1'b0}});     
assign att_entry_wakeup_req_mpf2 = ( 
\js for (let i=0; i< N_ATT ; i++) {
                                   ({W_MPF2{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_mpf2[W_MPF2*\=i=\ +: W_MPF2]) |
\js }
                                   {W_MPF2{1'b0}});
assign att_entry_wakeup_req_es = (
\js for (let i=0; i< N_ATT ; i++) {
                                ({W_ES{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_es[W_ES*\=i=\ +: W_ES]) |
\js }  
                                {W_ES{1'b0}});                            
assign att_entry_wakeup_req_initiator_id = (
\js for (let i=0; i< N_ATT ; i++) {
                                ({W_INIT_ID{att_entry_wakeup_req_att_vec[\=i=\]}} & att_entry_req_initiator_id[W_INIT_ID*\=i=\ +: W_INIT_ID]) |
\js }
                                {W_INIT_ID{1'b0}});

endmodule
