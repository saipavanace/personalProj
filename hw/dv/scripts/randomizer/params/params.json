{
  "ncoreParams": {
    "architecture": {
      "structural": {
        "nCaius": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            "1:32"
          ],
          "releaseValidValues": [
            "1:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This exists only for the engineering team and the customer indirectly have these constraints based on the number of Coherent sockets that are created",
          "constraints": "",
          "generalComments": ""
        },
        "nNcaius": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This exists only for the engineering team and the customer indirectly have these constraints based on the number of Non sockets that are created",
          "constraints": "",
          "generalComments": ""
        },
        "nDces": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            "1:16"
          ],
          "releaseValidValues": [
            "1:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Total number of distributed coherency engines configured in a Ncore Interconnect",
          "constraints": "",
          "generalComments": ""
        },
        "nSnoopFilters": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            "1:16"
          ],
          "releaseValidValues": [
            "1:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Total number of Snoop Filters configured in a Ncore interconnect",
          "constraints": "",
          "generalComments": "FIXME: Need to understand and implement the constraints and relationship between nSnoopFilters and nDCEs"
        },
        "nDves": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            1
          ],
          "releaseValidValues": [
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Total number of distributed virtual memory system engines configured in a Ncore interconnect",
          "constraints": "",
          "generalComments": ""
        },
        "nDmis": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            "1:16"
          ],
          "releaseValidValues": [
            "1:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Total number of Distributed Memory Interfaces configured in a Ncore interconnect",
          "constraints": "",
          "generalComments": ""
        },
        "nDiis": {
          "type": "int",
          "visibility": "engg",
          "access": "",
          "default": "",
          "architectureValidValues": [
            "1:15"
          ],
          "releaseValidValues": [
            "1:15"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Total number of distributed IO interfaces configured in a Ncore Interconnect",
          "constraints": "",
          "generalComments": ""
        }
      },
      "system": {
        "projectName": {
          "type": "string",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Project Name",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Understand what this parameter is and what it is used for"
        },
        "coherentTemplate": {
          "type": "enum",
          "visibility": "user",
          "access": "readWrite",
          "default": "FourCtrlOneDataTemplate",
          "architectureValidValues": [
            "TwoCtrlOneDataTemplate",
            "ThreeCtrlOneDataTemplate",
            "FourCtrlOneDataTemplate"
          ],
          "releaseValidValues": [
            "TwoCtrlOneDataTemplate",
            "ThreeCtrlOneDataTemplate",
            "FourCtrlOneDataTemplate"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Control and data network options: TwoCtrlOneDataTemplate: Adds support for two control and a single data network. ThreeCtrlOneDataTemplate: Adds support for three control and a single data network. FourCtrlOneDataTemplate: Adds support for four control and a single data network",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nAiuPorts": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            1,
            2,
            4
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the number of AIU that are grouped together. These AIUs must be identical",
          "architectureDescription": "The parameter applies to any Initiator AIU type in Ncore i.e. CAIU, NCAIU or multi ported NCAIU. These set of AIUs are treated as a single group of AIUs and must be identical",
          "constraints": "",
          "generalComments": ""
        },
        "aPrimaryAiuPortBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify Address bits for port interleaving",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Type is defined as enum in the spec which is not true. Should be an integer array\nNeed to come up with a formula to calculate this\nValues cannot overlap with the address bits used for cache sets/banks if an NCAIU contains cache for example proxy cache and interleaving bits used for nNativeInterfacePorts."
        },
        "aSecondaryAiuPortBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: The type is defined as Enum for this. It should be integer Array"
        },
        "nGPRA": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:24"
          ],
          "releaseValidValues": [
            "2:24"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of general purpose address regions that the system can support",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "dceInterleavingPrimaryBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "System directory primary select bits. N address bits other than bits 0 through 5 can be chosen. The cardinal values of these bits in the order of their ordinal positions are used to identify the DMIs to be accessed",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: The description can be updated to mention what exactly will happen with these bits"
        },
        "dceInterleavingSecondaryBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "The secondary bits are chosen on oa per primary bit bases. The bits within the set for a primary bit are combined and the primary bit with an Exclusive OR combination.",
          "architectureDescription": "Not tested yet. Will not be released at NCore 3.2.",
          "constraints": "",
          "generalComments": "FIXME: Check if the description is still valid regarding Ncore 3.2?"
        },
        "resiliencyEnabled": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable resilience-related features in the Ncore system.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "duplicationEnabled": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable unit duplication for all Ncore units only. Memories and interconnect logic are not duplicated; they may be protected separately",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nativeIntfProtEnabled": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable capability to add protection on native Ncore interfaces. This adds an empty verilog module with specified signals at the interface. Protection logic can be added in this Verilog module",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "interUnitDelay": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:4"
          ],
          "releaseValidValues": [
            "1:4"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Delay between functional unit and delay unit. Delay can be specified in number of clock cycles",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "resiliencyProtectionType": {
          "type": "string",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "None",
          "architectureValidValues": [
            "\"NONE\"",
            "\"PARITY\"",
            "\"SECDED\""
          ],
          "releaseValidValues": [
            "\"NONE\"",
            "\"PARITY\"",
            "\"SECDED\""
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Interconnect protection type. Both data and control header will be protected. Available options are: NONE: no protection. PARITY: Error detection, parity protection. SECDED: Single bit error correction and double bit error detection, ECC protection.",
          "architectureDescription": "This parameter affects CDTI protection only",
          "constraints": "",
          "generalComments": "FIXME: Should this be enum instead of string?"
        },
        "fnDisableResiliencyBistDebugPin": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "When set removes BIST and trace & debug disable pin",
          "architectureDescription": "When set removes BIST and trace & debug disable pin",
          "constraints": "",
          "generalComments": "FIXME: Should this be boolean for the sake of consistency"
        },
        "timeoutThreshold": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16384",
          "architectureValidValues": [
            "1:2147483647"
          ],
          "releaseValidValues": [
            "1:2147483647"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Time out threshold value. This specifies number of clock cycles within which a transaction must complete in an NCORE system. The value specified is at 4096 clock cycle granularity.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "memoryProtectionType": {
          "type": "string",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "None",
          "architectureValidValues": [
            "\"NONE\"",
            "\"PARITY\"",
            "\"SECDED\""
          ],
          "releaseValidValues": [
            "\"NONE\"",
            "\"PARITY\"",
            "\"SECDED\""
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Protection type for all memories in the Ncore system. Available options are: NONE : no protection. PARITY : Error detection, parity protection. SECDED : Single bit error correction and double bit error detection, ECC protection. SRAM memory type does not support memoryProtectionType ==NONE. If the memory is configured as FLOP, then NONE is supported.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "qosEnabled": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable Qos Support",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "qosMap": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "4 bit Native interface QoS value map to 3 bit priority. Value 0 has the highest priority and value 7 has the lowest priority",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "qosEventThreshold": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "1:8192"
          ],
          "releaseValidValues": [
            "1:8192"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "QoS starvation threshold. Maximum number of high priority requests that can bypass a lower priority request.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nMainTraceBufSize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "64",
          "architectureValidValues": [
            "32:4096"
          ],
          "releaseValidValues": [
            "32:1024"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of trace entries in the buffer",
          "architectureDescription": "Number Debug DTW entries the trace buffer can hold. The actual depth of the trace buffer may be larger depending on the data width for the design. Each debug DTW can be max 64 bytes",
          "constraints": "",
          "generalComments": ""
        },
        "nTraceRegisters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:8"
          ],
          "releaseValidValues": [
            "1:4"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of trace trigger configuration register sets. Each set of register can enable a trace condition.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nUnitTraceBufSize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "8",
          "architectureValidValues": [
            8,
            16,
            32
          ],
          "releaseValidValues": [
            8,
            16
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of trace entries in each Ncore Unit. Each entry is 64 bytes",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "fnDebugAPBEnable": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "When set enables an APB slave port on the CSR network. This port is expected to be used for on chip debug purposes only.",
          "architectureDescription": "When set enables an APB slave port on the CSR network. This port is expected to be used for on chip debug purposes only.",
          "constraints": "",
          "generalComments": "FIXME: Should this be boolean for the sake of consistency"
        },
        "syncDepth": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            2,
            3,
            4
          ],
          "releaseValidValues": [
            2,
            3,
            4
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "The depth of the synchronizers used for signals that cross domains for metastability reasons. This is only for sym_async_adapter. FIFO depth of the chi_async_adapter would be calculate considering credit at the CHI interface link.",
          "architectureDescription": "Circular FIFO depth of the sym_async_adpater would be derived by this system configuration value \n • syncDepth: 2 → circular fifo depth of sym_async_adapter: 8 \n • syncDepth: 3 → circular fifo depth of sym_async_adapter: 10 \n • syncDepth: 4 → circular fifo depth of sym_async_adapter: 12",
          "constraints": "",
          "generalComments": ""
        },
        "assertionEnable": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Enable HW assertions",
          "constraints": "",
          "generalComments": ""
        },
        "engVerId": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "implVerId": {
          "type": "shortint",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "frequency": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "300",
          "architectureValidValues": [
            "1:1600"
          ],
          "releaseValidValues": [
            "1:1600"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "NCore 3.6 supports 1.6GHz as a maximum frequency. The range should visible only for that ranges",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check the units of frequency and clarify the comment?FIXME: The above range is specified in MHz but the spec actually mentioned in GHz. Need to check if this is okay and update the document if required MAES-7558 filed"
        },
        "unitClockGating": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "When the parameter is true, then the blocks in the corresponding clock region will insert clock gating based on its internal and the state of the interfaces connected to it",
          "architectureDescription": "Not all blocks will insert clock gates when this parameter is set to true. For instance, blocks sym_async_adapter and sym_rate_adapter do not insert clock gating in response to this parameter",
          "constraints": "",
          "generalComments": ""
        },
        "gating": {
          "type": "string",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "always_on",
          "architectureValidValues": [
            "\"always_on\"",
            "\"external\""
          ],
          "releaseValidValues": [
            "\"always_on\"",
            "\"external\""
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify 'always_on' if no gating applied, or 'external' if logic externa",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: The comment in the spec seems to be incomplete"
        },
        "noDVM": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Visibility of this should be User? Instead of Engg?"
        }
      },
      "memory": {
        "csrMemoryBase": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0x0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify CSR region base address. This address must be aligned to the size specified",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check how to set this value and what are the limits"
        },
        "csrMemorySize": {
          "type": "integer",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "CSR sized is fixed as 1MB from NCore 3.2",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check the data type of this parameter. Also what are the limits"
        },
        "bootMemoryBase": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0x0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify boot region base address. This address must be aligned to the size specified",
          "architectureDescription": "Must be aligned to 4KB",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype of this variable and how to set it"
        },
        "bootMemorySize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": [],
          "releaseValidValues": [],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the size of boot region. Minimum is 4KB and must be a power of two",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: what is the datatype of this variable and how to set it?"
        },
        "mg_ref": {
          "type": "string",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the DMI interleave group associated with the boot region",
          "architectureDescription": "If mg_ref is specified, channel_ref cannot be specified",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype and how to set this variable"
        },
        "channel_ref": {
          "type": "string",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the DII group associated with the boot region.",
          "architectureDescription": "If channel_ref is specified, mg_ref cannot be specified",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype and how to set this variable. channel_ref and mg_ref are mutually exclusive"
        },
        "primaryInterleavingBitOne": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8192"
          ],
          "releaseValidValues": [
            "0:8192"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This primaryInterleavingBitOne is per MIF",
          "constraints": "",
          "generalComments": "FIXME: How to use this parameter?"
        },
        "primaryInterleavingBitTwo": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8192"
          ],
          "releaseValidValues": [
            "0:8192"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This primaryInterleavingBitTwo is per MIF",
          "constraints": "",
          "generalComments": "FIXME: How to use this parameter?"
        },
        "primaryInterleavingBitThree": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8192"
          ],
          "releaseValidValues": [
            "0:8192"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This primaryInterleavingBitThree is per MIF",
          "constraints": "",
          "generalComments": "FIXME: How to use this parameter?"
        },
        "primaryInterleavingBitFour": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8192"
          ],
          "releaseValidValues": [
            "0:8192"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This primaryInterleavingBitFour is per MIF",
          "constraints": "",
          "generalComments": "FIXME: How to use this parameter?"
        }
      },
      "chi": {
        "fnNativeInterface": {
          "type": "Enum",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "CHI-B",
          "architectureValidValues": [
            "CHI-E",
            "CHI-B",
            "ACE",
            "ACE5",
            "AXI4",
            "AXI5",
            "ACE-Lite",
            "ACE5-Lite",
            "PCIe_ACE-Lite",
            "PCIe_AXI4",
            "PCIe_AXI5"
          ],
          "releaseValidValues": [
            "CHI-E",
            "CHI-B",
            "ACE",
            "ACE5",
            "AXI4",
            "AXI5",
            "ACE-Lite",
            "ACE5-Lite",
            "PCIe_ACE-Lite",
            "PCIe_AXI4",
            "PCIe_AXI5"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nOttCtrlEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:128"
          ],
          "releaseValidValues": [
            "4:128"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of outstanding native transactions this AIU should support",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "genericports": {
          "type": "",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "To assign user defined ports for place holder definition",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "Understand what this parameter is and what it is used for"
        },
        "nNativeCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:15"
          ],
          "releaseValidValues": [
            "2:15"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of CHI link credits this AIU should support.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDceCmdCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for coherent transactions per DCE. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiCmdCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDiiCmdCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for non-coherent transactions per DII. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nStashSnpCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "1:8"
          ],
          "releaseValidValues": [
            "1:8"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of outstanding stash snoops this AIU should support.These are stash snoops issued on the CHI interface.",
          "architectureDescription": "This is used for assign Ott Stash entries in CAIU.\nTotal number of OTT entries = nOttCtrlEntries + nStshSnpCredits",
          "constraints": "",
          "generalComments": ""
        },
        "fnCsrAccess": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable CSR access via this AIU",
          "architectureDescription": "Parameter works as a reset value for CSR BAR valid bit",
          "constraints": "",
          "generalComments": ""
        },
        "snoopFilter_Ref": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:64"
          ],
          "releaseValidValues": [
            "0:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the snoop filter associated with this AIU",
          "architectureDescription": "User would need to bind CAIU into specific snoop filter, using update_object -name $caiu_name -type snoopFilter -bind $ snoop_filter_name.\nArch team would want to move this parameter to DCE in next NCore versions",
          "constraints": "",
          "generalComments": ""
        },
        "nPerfCounters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            0,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            0,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nLatencyCounters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            0,
            16,
            32
          ],
          "releaseValidValues": [
            0,
            16
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Latency counters in a CAIU",
          "architectureDescription": "Parameter applies only to AIUs, DMIs and DIIs only and can be set individually.",
          "constraints": "",
          "generalComments": "This parameter applies to AIUs, DMIs and DIIs. Maybe the description can be modified. Does this apply to AXI4 and ACE-Lite configs? Can we skip the CAIU in customer description?"
        },
        "nProcessors": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            1,
            2,
            4,
            8,
            16
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Processors",
          "architectureDescription": ": SW must multiply the specified parameter by 2 before passing it on to RTL. This is to account for threads as each core can have up to two threads",
          "constraints": "",
          "generalComments": "Spec says the datatype is enum for some reason. Check why"
        },
        "useSysCoEngine": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Always true for CHI",
          "constraints": "",
          "generalComments": ""
        },
        "useSysReqSender": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDmiVec": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW. Every bit in the vector that is set to one specifies that the particular AIU is connected to the associated DMI at that NunitID",
          "constraints": "",
          "generalComments": ""
        },
        "useSysReqReceiver": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDceVec": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW. Every bit in the vector that is set to one specifies that the particular AIU is connected to the associated DCE at that NunitID",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDiiVec": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW. Every bit in the vector that is set to one specifies that the particular AIU is connected to the associated DII at that NunitID",
          "constraints": "",
          "generalComments": "FIXME: hexAiuDmiVec is missing for CHI in confluence. Need to add this"
        },
        "hexAiuConnectedDceFunitId": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW. List of DCE FuntiIDs that are connected to the AIU",
          "constraints": "",
          "generalComments": ""
        },
        "nAiuConnectedDces": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:64"
          ],
          "releaseValidValues": [
            "1:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Specifies the number of caching agents (AIUs) that are connected to DCE",
          "constraints": "",
          "generalComments": ""
        },
        "useSysCoInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of SysCoReq and SysCoAck interface to the AIU. If customer's CPU does not have the interface, and does not set False to the parameter, it is recommended to tie SysCoReq to 0",
          "architectureDescription": "Connect the I/O to the SysCo Engine hardware.",
          "constraints": "",
          "generalComments": ""
        },
        "useEventInInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of EventInReq and EventInAck interface to the AIU. If customer's CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventInAck to EventInReq.",
          "architectureDescription": "Connect the I/O to the SysReq Receiver hardware.",
          "constraints": "",
          "generalComments": ""
        },
        "useEventOutInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of EventOutReq and EventOutAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventOutReq to 0",
          "architectureDescription": "Connect the I/O to the SysReq Sender hardware",
          "constraints": "",
          "generalComments": "FIXME: Typo in the name of this parameter in the spec"
        },
        "nodeID_Width": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "7",
          "architectureValidValues": [
            "7:11"
          ],
          "releaseValidValues": [
            "7:11"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of the Node ID of the CHI Interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wAddr": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "48",
          "architectureValidValues": [
            "44:52"
          ],
          "releaseValidValues": [
            "44:52"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of the address on CHI interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "req_rsvdc": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            4,
            8,
            12,
            16,
            24,
            32
          ],
          "releaseValidValues": [
            0,
            4,
            8,
            12,
            16,
            24,
            32
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "REQ_RSVDC is to define user-bit for command channel. Do not support user bit on data channel",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wData": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "128",
          "architectureValidValues": [
            128,
            256
          ],
          "releaseValidValues": [
            128,
            256
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of data on the Chi interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "enPoison": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable Poison Bit",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "checkType": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "NONE",
          "architectureValidValues": [
            "NONE",
            "ODD_PARITY_BYTE_ALL"
          ],
          "releaseValidValues": [
            "NONE",
            "ODD_PARITY_BYTE_ALL"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        }
      },
      "cioaiu": {
        "fnNativeInterface": {
          "type": "Enum",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "CHI-B",
          "architectureValidValues": [
            "CHI-E",
            "CHI-B",
            "ACE",
            "ACE5",
            "AXI4",
            "AXI5",
            "ACE-Lite",
            "ACE5-Lite",
            "PCIe_ACE-Lite",
            "PCIe_AXI4",
            "PCIe_AXI5"
          ],
          "releaseValidValues": [
            "CHI-E",
            "CHI-B",
            "ACE",
            "ACE5",
            "AXI4",
            "AXI5",
            "ACE-Lite",
            "ACE5-Lite",
            "PCIe_ACE-Lite",
            "PCIe_AXI4",
            "PCIe_AXI5"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "genericports": {
          "type": "string",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "Understand what this parameter is and what it is used for"
        },
        "wRUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wResp": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWays": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of sets/entries in the Cache",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Should there be any constraints on this? This parameter probably can take only powers of 2"
        },
        "wProt": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wArId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:20"
          ],
          "releaseValidValues": [
            "1:20"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the ArId width",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "wAwId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:20"
          ],
          "releaseValidValues": [
            "1:20"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the AwId width",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wAddr": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "32",
          "architectureValidValues": [
            32,
            40,
            44,
            48
          ],
          "releaseValidValues": [
            32,
            40,
            44,
            48
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of address bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "If CHI is present, wAddr can only be 44 or 48. Need to add constraint"
        },
        "wData": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "64",
          "architectureValidValues": [
            64,
            128,
            256
          ],
          "releaseValidValues": [
            64,
            128,
            256
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of data bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wArUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of ArUser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wAwUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of Awuser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "checkType": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "None",
          "architectureValidValues": [
            "NONE",
            "ODD_PARITY_BYTE_ALL"
          ],
          "releaseValidValues": [
            "NONE",
            "ODD_PARITY_BYTE_ALL"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "architectureDescription": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "constraints": "",
          "generalComments": ""
        },
        "nOttCtrlEntries": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:128"
          ],
          "releaseValidValues": [
            "4:128"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of outstanding native transactions this AIU should support.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "fnCsrAccess": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable CSR access via this AIU",
          "architectureDescription": "Parameter works as a reset value for CSR BAR valid bit",
          "constraints": "",
          "generalComments": ""
        },
        "useSysCoInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of SysCoReq and SysCoAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie SysCoReq to 0.",
          "architectureDescription": "Connect the I/O to the SysCo Engine hardware.",
          "constraints": "",
          "generalComments": ""
        },
        "useEventOutInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of EventOutReq and EventOutAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventOutReq to 0",
          "architectureDescription": "Connect the I/O to the SysReq Sender hardware.",
          "constraints": "",
          "generalComments": ""
        },
        "useEventInInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of EventInReq and EventInAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventInAck to EventInReq",
          "architectureDescription": "Connect the I/O to the SysReq Receiver hardware",
          "constraints": "",
          "generalComments": ""
        },
        "memory": {
          "type": "",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand the datatype and how to set this variable"
        },
        "nProcessors": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4,
            8,
            16,
            32
          ],
          "releaseValidValues": [
            1,
            2,
            4,
            8,
            16,
            32
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Processors",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "This should be applicable only for AXI4? This is mentioned for ACE in the spec. Need to check"
        },
        "axIdProcSelectBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Processor Select Bits from AXID. If there is only one processor, the array is empty and is default as zero",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useSysCoEngine": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Always true for ACE",
          "constraints": "",
          "generalComments": ""
        },
        "useSysReqSender": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Used to instantiate SysReq Sender hardware in the AIU",
          "constraints": "",
          "generalComments": ""
        },
        "useSysReqReceiver": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eUnique": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wCdData": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wSnoop": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eAc": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eDomain": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useQos": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wQos": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLoop": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eStash": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eTrace": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eAtomic": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDiiCmdCredits": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiCmdCredits": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDceCmdCredits": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for coherent transactions per DCE. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nNativeInterfacePorts": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4,
            8
          ],
          "releaseValidValues": [
            1,
            2,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the number of native interface ports",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: This is missing for other NC AIUs"
        },
        "nPerfCounters": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            0,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            0,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nLatencyCounters": {
          "type": "int",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            0,
            16,
            32
          ],
          "releaseValidValues": [
            0,
            16
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Latency counters in a CAIU",
          "architectureDescription": "Parameter applies only to AIUs, DMIs and DIIs only and can be set individually.",
          "constraints": "",
          "generalComments": "This parameter applies to AIUs, DMIs and DIIs. Maybe the description can be modified. Does this apply to AXI4 and ACE-Lite configs? Can we skip the CAIU in customer description?"
        },
        "aNcaiuIntvFunc": {
          "type": "object",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Can this parameter be simplified? else need to check how to represent this param"
        },
        "snoopFilterAssignment": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:64"
          ],
          "releaseValidValues": [
            "0:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: This is not mentioned for CHI in the spec. Need to check. FIXME: This needs to be added for ACE"
        },
        "fnDisableRdInterleave": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "When set disables read data interleaving across different AXI IDs",
          "architectureDescription": "When set disables read data interleaving across different AXI IDs. This parameter applies to NCAIU with AXI, ACE-LITE and ACE5-LITE ports",
          "constraints": "",
          "generalComments": "FIXME: This needs to be added for ACE-Lite and ACE-Lite-E protocol. ALSO should this be boolean?"
        },
        "nSets": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192
          ],
          "releaseValidValues": [
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of sets/entries in the Cache",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useScratchPad": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "false"
          ],
          "releaseValidValues": [
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Not applicable in AXI4",
          "constraints": "",
          "generalComments": ""
        },
        "priSubDiagAddrBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify address bits to be used as primary set select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check how to set this value and what are the limits"
        },
        "tagBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "dataBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "cacheReplPolicy": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "RANDOM",
          "architectureValidValues": [
            "RANDOM",
            "NRU",
            "SRRIP",
            "pLRU"
          ],
          "releaseValidValues": [
            "RANDOM",
            "NRU",
            "pLRU"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Cache Replacement Policy",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "cacheReplStateWidth": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1,
            2
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "constraints": "",
          "generalComments": "FIXME: The customer description for this parameter is wrong"
        },
        "snoopFilter_Ref": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:64"
          ],
          "releaseValidValues": [
            "0:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the snoop filter associated with this AIU",
          "architectureDescription": "User would need to bind CAIU into specific snoop filter, using update_object -name $caiu_name -type snoopFilter -bind $ snoop_filter_name.\nArch team would want to move this parameter to DCE in next NCore versions",
          "constraints": "",
          "generalComments": ""
        },
        "wWUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wBUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLen": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wSize": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLock": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wRegion": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nAiuConnectedDces": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuConnectedDceFunitId": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDmiVec": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDceVec": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDiiVec": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "exclusiveAccesses": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "Once it is turned on, Exclusive accesses are supported",
          "customerDescription": "Once it is turned on, Exclusive accesses are supported",
          "architectureDescription": "Once it is turned on, Exclusive accesses are supported",
          "constraints": "",
          "generalComments": ""
        },
        "atomicTransactions": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "Once this property is enabled, atomic transactions are supported for the ACE-Lite and ACE5-Lite interfaces. This property can only be selectable if the proxy cache is disable. (FIXME: This comments needs to be modified)",
          "customerDescription": "Once this property is enabled, atomic transactions are supported for the ACE-Lite and ACE5-Lite interfaces.",
          "architectureDescription": "Once this property is enabled, atomic transactions are supported for the ACE-Lite and ACE5-Lite interfaces.",
          "constraints": "",
          "generalComments": ""
        }
      },
      "ncioaiu": {
        "fnNativeInterface": {
          "type": "Enum",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "CHI-B",
          "architectureValidValues": [
            "CHI-E",
            "CHI-B",
            "ACE",
            "ACE5",
            "AXI4",
            "AXI5",
            "ACE-Lite",
            "ACE5-Lite",
            "PCIe_ACE-Lite",
            "PCIe_AXI4",
            "PCIe_AXI5"
          ],
          "releaseValidValues": [
            "CHI-E",
            "CHI-B",
            "ACE",
            "ACE5",
            "AXI4",
            "AXI5",
            "ACE-Lite",
            "ACE5-Lite",
            "PCIe_ACE-Lite",
            "PCIe_AXI4",
            "PCIe_AXI5"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "genericports": {
          "type": "string",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "Understand what this parameter is and what it is used for"
        },
        "wRUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wResp": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWays": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of sets/entries in the Cache",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Should there be any constraints on this? This parameter probably can take only powers of 2"
        },
        "wProt": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wArId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:20"
          ],
          "releaseValidValues": [
            "1:20"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the ArId width",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "wAwId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:20"
          ],
          "releaseValidValues": [
            "1:20"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the AwId width",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wAddr": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "32",
          "architectureValidValues": [
            32,
            40,
            44,
            48
          ],
          "releaseValidValues": [
            32,
            40,
            44,
            48
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of address bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "If CHI is present, wAddr can only be 44 or 48. Need to add constraint"
        },
        "wData": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "64",
          "architectureValidValues": [
            64,
            128,
            256,
            512
          ],
          "releaseValidValues": [
            64,
            128,
            256,
            512
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of data bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wArUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of ArUser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wAwUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of Awuser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "checkType": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "None",
          "architectureValidValues": [
            "NONE",
            "ODD_PARITY_BYTE_ALL"
          ],
          "releaseValidValues": [
            "NONE",
            "ODD_PARITY_BYTE_ALL"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "architectureDescription": "Default to not enable the protection. Necessary odd parity signals across ALL channels will be added once it is set as ODD_PARITY_BYTE_ALL",
          "constraints": "",
          "generalComments": ""
        },
        "nOttCtrlEntries": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:128"
          ],
          "releaseValidValues": [
            "4:128"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of outstanding native transactions this AIU should support.",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "fnCsrAccess": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable CSR access via this AIU",
          "architectureDescription": "Parameter works as a reset value for CSR BAR valid bit",
          "constraints": "",
          "generalComments": ""
        },
        "useSysCoInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of SysCoReq and SysCoAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie SysCoReq to 0.",
          "architectureDescription": "Connect the I/O to the SysCo Engine hardware.",
          "constraints": "",
          "generalComments": ""
        },
        "useEventOutInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of EventOutReq and EventOutAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventOutReq to 0",
          "architectureDescription": "Connect the I/O to the SysReq Sender hardware.",
          "constraints": "",
          "generalComments": ""
        },
        "useEventInInt": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Setting the parameter to enable the connection of EventInReq and EventInAck interface to the AIU.\nIf customer’s CPU does not have the interface, and does not set False to the parameter, it is recommended to tie EventInAck to EventInReq",
          "architectureDescription": "Connect the I/O to the SysReq Receiver hardware",
          "constraints": "",
          "generalComments": ""
        },
        "memory": {
          "type": "",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand the datatype and how to set this variable"
        },
        "nProcessors": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4,
            8,
            16,
            32
          ],
          "releaseValidValues": [
            1,
            2,
            4,
            8,
            16,
            32
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Processors",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "This should be applicable only for AXI4? This is mentioned for ACE in the spec. Need to check"
        },
        "axIdProcSelectBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Processor Select Bits from AXID. If there is only one processor, the array is empty and is default as zero",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useSysCoEngine": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Always true for ACE",
          "constraints": "",
          "generalComments": ""
        },
        "useSysReqSender": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Used to instantiate SysReq Sender hardware in the AIU",
          "constraints": "",
          "generalComments": ""
        },
        "useSysReqReceiver": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true"
          ],
          "releaseValidValues": [
            "true"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eUnique": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wCdData": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wSnoop": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eAc": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eDomain": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useQos": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wQos": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLoop": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eStash": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eTrace": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "eAtomic": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDiiCmdCredits": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiCmdCredits": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for non-coherent transactions per DMI. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDceCmdCredits": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of credits for coherent transactions per DCE. This should be determined based on required bandwidth and network round trip latency",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nNativeInterfacePorts": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4,
            8
          ],
          "releaseValidValues": [
            1,
            2,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the number of native interface ports",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: This is missing for other NC AIUs"
        },
        "nPerfCounters": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            0,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            0,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nLatencyCounters": {
          "type": "int",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            0,
            16,
            32
          ],
          "releaseValidValues": [
            0,
            16
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Latency counters in a CAIU",
          "architectureDescription": "Parameter applies only to AIUs, DMIs and DIIs only and can be set individually.",
          "constraints": "",
          "generalComments": "This parameter applies to AIUs, DMIs and DIIs. Maybe the description can be modified. Does this apply to AXI4 and ACE-Lite configs? Can we skip the CAIU in customer description?"
        },
        "aNcaiuIntvFunc": {
          "type": "object",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Can this parameter be simplified? else need to check how to represent this param"
        },
        "snoopFilterAssignment": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:64"
          ],
          "releaseValidValues": [
            "0:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: This is not mentioned for CHI in the spec. Need to check. FIXME: This needs to be added for ACE"
        },
        "fnDisableRdInterleave": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "When set disables read data interleaving across different AXI IDs",
          "architectureDescription": "When set disables read data interleaving across different AXI IDs. This parameter applies to NCAIU with AXI, ACE-LITE and ACE5-LITE ports",
          "constraints": "",
          "generalComments": "FIXME: This needs to be added for ACE-Lite and ACE-Lite-E protocol. ALSO should this be boolean?"
        },
        "nSets": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192
          ],
          "releaseValidValues": [
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of sets/entries in the Cache",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useScratchPad": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "false"
          ],
          "releaseValidValues": [
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Not applicable in AXI4",
          "constraints": "",
          "generalComments": ""
        },
        "priSubDiagAddrBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify address bits to be used as primary set select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check how to set this value and what are the limits"
        },
        "tagBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "dataBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "cacheReplPolicy": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "RANDOM",
          "architectureValidValues": [
            "RANDOM",
            "NRU",
            "SRRIP",
            "pLRU"
          ],
          "releaseValidValues": [
            "RANDOM",
            "NRU",
            "pLRU"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Cache Replacement Policy",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "cacheReplStateWidth": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1,
            2
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "constraints": "",
          "generalComments": "FIXME: The customer description for this parameter is wrong"
        },
        "snoopFilter_Ref": {
          "type": "int",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:64"
          ],
          "releaseValidValues": [
            "0:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the snoop filter associated with this AIU",
          "architectureDescription": "User would need to bind CAIU into specific snoop filter, using update_object -name $caiu_name -type snoopFilter -bind $ snoop_filter_name.\nArch team would want to move this parameter to DCE in next NCore versions",
          "constraints": "",
          "generalComments": ""
        },
        "wWUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wBUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLen": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wSize": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLock": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wRegion": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nAiuConnectedDces": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuConnectedDceFunitId": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDmiVec": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDceVec": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexAiuDiiVec": {
          "type": "string",
          "visibility": "Engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "exclusiveAccesses": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "Once it is turned on, Exclusive accesses are supported",
          "customerDescription": "Once it is turned on, Exclusive accesses are supported",
          "architectureDescription": "Once it is turned on, Exclusive accesses are supported",
          "constraints": "",
          "generalComments": ""
        },
        "atomicTransactions": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "true",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "Once this property is enabled, atomic transactions are supported for the AXI5 interface. This property can only be selectable if the proxy cache is disable.",
          "customerDescription": "Once this property is enabled, atomic transactions are supported for the AXI5 interface",
          "architectureDescription": "Once this property is enabled, atomic transactions are supported for the AXI5 interface",
          "constraints": "",
          "generalComments": ""
        },
        "hasProxyCache": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "This option enables a ProxyCache is configured for a NCAIU",
          "architectureDescription": "This option adds a ProxyCache in NCAIU",
          "constraints": "",
          "generalComments": ""
        },
        "multicycleODSram": {
          "type": "boolean",
          "visibility": "User",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "OD timing closure optimization parameter for OWO configuration",
          "architectureDescription": "OD timing closure optimization parameter for OWO configuration",
          "constraints": "",
          "generalComments": ""
        }
      },
      "snoopFilter": {
        "nSets": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "16:1048576"
          ],
          "releaseValidValues": [
            "16:1048576"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of sets for the selected snoop filter",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWays": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "2:32"
          ],
          "releaseValidValues": [
            "2:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of ways for the selected snoop filter",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nVictimEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "0:64"
          ],
          "releaseValidValues": [
            "0:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of victim buffer entries for the specified snoop filter, per DCE",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "aPrimaryBits": {
          "type": "intArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Set selection parameter",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "memory": {
          "type": "",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "remoteCachingAgents": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify if the caching agents is considered remote to the DCE\nEg. [AIU0, AIU2]",
          "architectureDescription": "Derive the value into array of integers for DCE, to indicate if the corresponding caching agent is remote (sync up with DCE’s Jason file parameter)",
          "constraints": "",
          "generalComments": "FIXME: Need to change the typo. Change Jason to JSON"
        },
        "localCachingAgents": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify if the caching agents is considered local to the DCE\nEg. [AIU1]",
          "architectureDescription": "Derive the value into array of integers for DCE, to indicate if the corresponding caching agent is local (sync up with DCE’s Jason file parameter)",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "useScratchPad": {
          "type": "boolean",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "false"
          ],
          "releaseValidValues": [
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Enable Scratchpad. The visibility will be overridden based on block type",
          "constraints": "",
          "generalComments": ""
        },
        "priSubDiagAddrBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Specify address bits to be used as primary set select bits",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype and how to set this variable"
        },
        "tagBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "The tag bank select bit values must be unique.\nThe tag bank selection bit must be one of the primary set selection bits.\nThe number of tag bank bits must be log2(nTagBanks)",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype and how to set this variable"
        },
        "dataBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype and how to set this variable"
        },
        "cacheReplPolicy": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "RANDOM",
          "architectureValidValues": [
            "RANDOM",
            "PLRU"
          ],
          "releaseValidValues": [
            "RANDOM",
            "PLRU"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Cache Replacement Policy",
          "architectureDescription": "Depending on the selected policy, a dependent parameter cacheReplStateWidth needs to be calculated. That parameter defines the number of bits required to represent the current position in the replacement algorithm for each cacheline in the set",
          "constraints": "",
          "generalComments": ""
        },
        "cacheReplStateWidth": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1,
            2
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "constraints": "",
          "generalComments": "FIXME: The customer description for this parameter is wrong"
        }
      },
      "dce": {
        "nAttCtrlEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:64"
          ],
          "releaseValidValues": [
            "4:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of active coherent transactions tracked by each DCE",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nCMDSkidBufSize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:768"
          ],
          "releaseValidValues": [
            "4:768"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total depth of skid buffer for commands to DCE/DII and the non-coherent port of DMI.\nThe skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution.\nCSR Address: 0xFF0",
          "architectureDescription": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection",
          "constraints": "",
          "generalComments": ""
        },
        "nCMDSkidBufArb": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:256"
          ],
          "releaseValidValues": [
            "4:256"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "architectureDescription": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFF0",
          "constraints": "",
          "generalComments": ""
        },
        "CMDOverflowBufInSRAM": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "architectureDescription": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "constraints": "",
          "generalComments": ""
        },
        "nDceRbCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:64"
          ],
          "releaseValidValues": [
            "2:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of RB credits per DCE. The value is same for all DCEs and DMIs. Specify the maximum number of DCE write request buffer credits per DMI. These credits limit number of Coherent writes and incudes snoops that can cause a write to DMI",
          "architectureDescription": "Number of RB credits per DCE",
          "constraints": "",
          "generalComments": ""
        },
        "nAiuSnpCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of snoop request credits per AIU",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiMrdCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of memory read credits per DMI",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nPerfCounters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            0,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            0,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total number of performance counter in Ncore Unit",
          "architectureDescription": "Archi team would modify this as a common parameter in next NCore versions",
          "constraints": "",
          "generalComments": "FIXME: The comments says only 2 values are supported and 0 is excluded"
        },
        "nTaggedMonitors": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8"
          ],
          "releaseValidValues": [
            "0:8"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the desired number of tagged exclusive monitor per DCE instance. Note that each DCE instance will always have a basic exclusive monitor",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hexDceConnectedDmiFunitID": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW\nList of DMI FuntiIDs that are connected to the DCE",
          "constraints": "",
          "generalComments": ""
        },
        "hexDceConnectedCaFunitID": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW\nList of caching agent FuntiIDs that are connected to the DCE",
          "constraints": "",
          "generalComments": ""
        },
        "hexDceDmiVec": {
          "type": "hex",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:FFFFFFFF"
          ],
          "releaseValidValues": [
            "0:FFFF"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW\nEvery bit in the vector that is set to one specifies that the particular DCE is connected to the associated DMI at that NunitID",
          "constraints": "",
          "generalComments": ""
        },
        "hexDceDmiRbOffset": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This must be a port in RTL (tACHL) and tie off parameter in SW\nList of 8 bit values, where every 8 bit value specifies the RBID offset to be used by DCE for the DMI represented by the value. The offsets are ordered in incrementing DMI NunitID order.",
          "constraints": "",
          "generalComments": "FIXME: Need to find the datatype of this parameter"
        },
        "nDceConnectedCas": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:64"
          ],
          "releaseValidValues": [
            "1:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Specifies the number of caching agents (AIUs) that are connected to DCE",
          "constraints": "",
          "generalComments": ""
        },
        "nDceConnectedDmis": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:32"
          ],
          "releaseValidValues": [
            "1:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Specifies the number of DMIs that are connected to DCE",
          "constraints": "",
          "generalComments": ""
        }
      },
      "dve": {
        "memory": {
          "type": "",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "eventBroadcasterFIFOdepth": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "Used to size FIFO of Event Broadcaster hardware in the DVE",
          "constraints": "",
          "generalComments": ""
        },
        "nPerfCounters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            4,
            8,
            16
          ],
          "releaseValidValues": [
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total number of performance counter in Ncore Unit",
          "architectureDescription": "Archi team would modify this as a common parameter in next NCore versions",
          "constraints": "",
          "generalComments": "FIXME: Total number of performance counter in Ncore unit. Does it mean this is the total of all perfcounters in Ncore?"
        },
        "nDvmCmdCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            2,
            4
          ],
          "releaseValidValues": [
            2,
            4
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of DVM command credits between an AIU and a DVE",
          "architectureDescription": "This parameter is applicable to all AIUs that can issue DVMs",
          "constraints": "",
          "generalComments": "FIXME: What does the Architecture Description mean? Only DVM has this parameter"
        },
        "nDvmSnpCredits": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "If noDVM7 system wide parameter is not set, take the maximum value out of 8 or (total number of DVM agents + 1) * 2",
          "architectureDescription": "If noDVM system wide parameter is not set, take the maximum value out of 8 or (total number of DVM agents + 1) * 2",
          "constraints": "",
          "generalComments": "FIXME: The default value is 0 if noDVM is set else it is 8. Need to write a constraint for this"
        },
        "DVMVersionSupport": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "132",
          "architectureValidValues": [
            128,
            129,
            132
          ],
          "releaseValidValues": [
            128,
            129,
            132
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "DVM version capability of the system. The value is suggested for the User to configure the system",
          "architectureDescription": "Pass the parameter to register DVEUDVMRR “DVM Revision Register” in DVE register space\nThe version number is encoded as the concatenation of two 4 bit integers {4'd,4'd}. The first integer represents the main DVM version and the second the subversion number.\nFor example: DVM_v8.1 the version number is {4'd8,4'd1} or 129",
          "constraints": "",
          "generalComments": "FIXME: Can we make this easier from the definition point of view making it just an integer? Also, the format says 4bit int, which is not accurate"
        }
      },
      "dmi": {
        "wArId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:28"
          ],
          "releaseValidValues": [
            "1:28"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the ArId width",
          "architectureDescription": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "constraints": "",
          "generalComments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "wAwId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:28"
          ],
          "releaseValidValues": [
            "1:28"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the AwId width",
          "architectureDescription": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "constraints": "",
          "generalComments": ""
        },
        "wAddr": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "32",
          "architectureValidValues": [
            "12:64"
          ],
          "releaseValidValues": [
            "12:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of address bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wData": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "128",
          "architectureValidValues": [
            128,
            256
          ],
          "releaseValidValues": [
            128,
            256
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of data bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wAwUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of AwUser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wArUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of ArUser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "genericports": {
          "type": "",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check the datatype and how to set this variable"
        },
        "nRttCtrlEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:64"
          ],
          "releaseValidValues": [
            "4:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of allowed outstanding read transactions on the downstream AXI interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWttCtrlEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:64"
          ],
          "releaseValidValues": [
            "4:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of allowed outstanding write transactions on the downstream AXI interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiRbCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:64"
          ],
          "releaseValidValues": [
            "2:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of non-coherent write request buffer credits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nCMDSkidBufSize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:768"
          ],
          "releaseValidValues": [
            "4:768"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total depth of skid buffer for commands to DCE/DII and the non-coherent port of DMI.\nThe skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution",
          "architectureDescription": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection. CSR Address: 0xFF0",
          "constraints": "",
          "generalComments": ""
        },
        "nCMDSkidBufArb": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:256"
          ],
          "releaseValidValues": [
            "4:256"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "architectureDescription": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFF0",
          "constraints": "",
          "generalComments": ""
        },
        "CMDOverflowBufInSRAM": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "architectureDescription": "Once the size of overflow buffer/FIFO in the CMD skid buffer is over 256, implement it with SRAM",
          "constraints": "",
          "generalComments": ""
        },
        "nMrdSkidBufSize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:768"
          ],
          "releaseValidValues": [
            "4:768"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total depth of skid buffer for coherent DMI transactions - arriving from DCE. The skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution",
          "architectureDescription": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection. CSR Address: 0xFE0",
          "constraints": "",
          "generalComments": ""
        },
        "nMrdSkidBufArb": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:256"
          ],
          "releaseValidValues": [
            "4:256"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "architectureDescription": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFE0",
          "constraints": "",
          "generalComments": ""
        },
        "MRDOverflowBufInSRAM": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Once the size of overflow buffer/FIFO in the MRD skid buffer is over 256, implement it with SRAM",
          "architectureDescription": "Once the size of overflow buffer/FIFO in the MRD skid buffer is over 256, implement it with SRAM",
          "constraints": "",
          "generalComments": ""
        },
        "nUseMemRspIntrlv": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Use this parameter to enable the feature of DMI can accept read data interleaving from AXI interface",
          "architectureDescription": "To prevent deadlock issue of AXI write address channel, write response channel and read data channel, if the parameter is set to True, and read data buffer is instantiated. And DMI can accept any beat of read data of issued read request, then the read data/response channel and write response channel will never to backpressured",
          "constraints": "",
          "generalComments": ""
        },
        "nExclusiveEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8"
          ],
          "releaseValidValues": [
            "0:8"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "defines the number of exclusive monitors",
          "architectureDescription": "A value of 0 means no exclusive monitor will be instantiated",
          "constraints": "",
          "generalComments": ""
        },
        "nAddrTransRegisters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:4"
          ],
          "releaseValidValues": [
            "0:4"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the number of address translation registers that are available within DMI. These registers add capability to translate address on the AXI bus from DMI. Refer to the address translation section of the reference manual",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "hasSysMemCache": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "This option adds an SMC in DMI. It must be enabled when an atomic capable master is present in the system and requires at least a 4KB SMC",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useScratchPad": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Enable ScratchPad",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWayPartitioningRegisters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:16"
          ],
          "releaseValidValues": [
            "0:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the number of cache way partitioning registers. Each register enables configuration capability to assign specific ways to a single agent. The number of registers enabled here should be equal to maximum number of agents that will be configured for way partitioning",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nTagBanks": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            1,
            2,
            4
          ],
          "releaseValidValues": [
            1,
            2,
            4
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Number of Tag banks",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDataBanks": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "memory": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nPerfCounters": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nLatencyCounters": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "useAtomic": {
          "type": "boolean",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "false",
          "architectureValidValues": [
            "true",
            "false"
          ],
          "releaseValidValues": [
            "true",
            "false"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "This option adds an atomic engine in DMI. It must be enabled when an atomic capable master is present in the system and requires at least a 4KB SMC",
          "architectureDescription": "FIXME: What is 4KB SMC? related to memory parameter? ALSO, CHI-E should be added to the description for this param",
          "constraints": "",
          "generalComments": ""
        },
        "dmiQoSThVal": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "8",
          "architectureValidValues": [
            "1:15"
          ],
          "releaseValidValues": [
            "1:15"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "DMI QoS threshold value. Traffic with QoS equal to or above this value are considered as high priority hard real time traffic",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiWttQoSRsv": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:64"
          ],
          "releaseValidValues": [
            "1:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "WTT entries in DMI reserved for high priority hard real time traffic",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDmiRttQoSRsv": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "1",
          "architectureValidValues": [
            "1:64"
          ],
          "releaseValidValues": [
            "1:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "RTT entries in DMI reserved for high priority hard real time traffic",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nSets": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192
          ],
          "releaseValidValues": [
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            2048,
            4096,
            8192
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of sets/entries in the Cache",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWays": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:16"
          ],
          "releaseValidValues": [
            "2:16"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of sets/entries in the Cache",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Should there be any constraints on this? This parameter probably can take only powers of 2"
        },
        "priSubDiagAddrBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify address bits to be used as primary set select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Check how to set this value and what are the limits"
        },
        "tagBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "dataBankSelBits": {
          "type": "stringArray",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "[]",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "Specify data bank select bit. This bit must be one of the bits from the primary select bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: Need to understand how to set this parameter"
        },
        "cacheReplPolicy": {
          "type": "enum",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "RANDOM",
          "architectureValidValues": [
            "RANDOM",
            "NRU",
            "SRRIP",
            "pLRU"
          ],
          "releaseValidValues": [
            "RANDOM",
            "NRU",
            "pLRU"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Cache Replacement Policy",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "cacheReplStateWidth": {
          "type": "int",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            0,
            1,
            2
          ],
          "releaseValidValues": [
            0,
            1
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "This parameter value is derived based on the cacheReplPolicy parameter: RANDOM: 0, NRU: 1, SRRIP: 2, pLRU: 1\nNote: For the SSRIP implementation we may want to consider an optimization - reserving state 00 as indication of an invalid cache line can save one of the standard state bits that indicate valid, dirty",
          "constraints": "",
          "generalComments": "FIXME: The customer description for this parameter is wrong"
        },
        "wResp": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wWUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wBUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wRUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLen": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wSize": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLock": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wQos": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wRegion": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wProt": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        }
      },
      "dii": {
        "wArId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:28"
          ],
          "releaseValidValues": [
            "1:28"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the ArId width",
          "architectureDescription": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "constraints": "",
          "generalComments": "FIXME: The parameter spec specifies a constraint like so: wArid > (wLPID + wFUnit).wFUnitId is not defined in the spec"
        },
        "wAwId": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "6",
          "architectureValidValues": [
            "1:28"
          ],
          "releaseValidValues": [
            "1:28"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the AwId width",
          "architectureDescription": "Target AwID width must be equal or larger than (maximum of all the AxIDs and wLPId) + wFUnitId. The maximum size is 28 bits for the current release. Make it maximum as 32 bits to leave some room for future growth",
          "constraints": "",
          "generalComments": ""
        },
        "wAddr": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "32",
          "architectureValidValues": [
            "12:64"
          ],
          "releaseValidValues": [
            "12:64"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of address bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wData": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "64",
          "architectureValidValues": [
            64,
            128,
            256
          ],
          "releaseValidValues": [
            64,
            128,
            256
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the width of data bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": "FIXME: SysDii has only one possible value. Need to check how to add this constraint"
        },
        "wAwUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of Awuser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wArUser": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:32"
          ],
          "releaseValidValues": [
            "0:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Width of ArUser bits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nRttCtrlEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:32"
          ],
          "releaseValidValues": [
            "4:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of allowed outstanding read transactions on the downstream AXI interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nWttCtrlEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:32"
          ],
          "releaseValidValues": [
            "4:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the number of allowed outstanding write transactions on the downstream AXI interface",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nLargestEndpoint": {
          "type": "longint",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            "4:549755813888"
          ],
          "releaseValidValues": [
            "4:549755813888"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nDiiRbCredits": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "2",
          "architectureValidValues": [
            "2:32"
          ],
          "releaseValidValues": [
            "2:32"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specify the maximum number of non-coherent write request buffer credits",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nCMDSkidBufSize": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:768"
          ],
          "releaseValidValues": [
            "4:768"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total depth of skid buffer for commands to DCE/DII and the non-coherent port of DMI.\nThe skid buffer is used to stage transaction requests from initiator agents. The number of required entries may be determined by traffic requirements and analysis using performance modeling. This value sets the total budget of protocol credits available for distribution.\nCSR Address: 0xFF0",
          "architectureDescription": "This value sets the total budget of protocol credits available for distribution to communicating initiators. It is recommended to allow at least 2 credits for each active connection",
          "constraints": "",
          "generalComments": ""
        },
        "nCMDSkidBufArb": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "16",
          "architectureValidValues": [
            "4:256"
          ],
          "releaseValidValues": [
            "4:256"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Depth of skid buffer visible to arbitration. This value determines the size of the arbitration window within which arriving requests are selected based on QoS, priority and arrival time. It is recommended to start with a reasonably value for performance analysis - the area of a skid buffer grows with the square of this number and larger options will also significantly impact timing",
          "architectureDescription": "This value sets the number of entries within the skid buffer that is visible to arbitration\nCSR Address: 0xFF0",
          "constraints": "",
          "generalComments": ""
        },
        "nExclusiveEntries": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:8"
          ],
          "releaseValidValues": [
            "0:8"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "defines the number of exclusive monitors",
          "architectureDescription": "A value of 0 means no exclusive monitor will be instantiated",
          "constraints": "",
          "generalComments": ""
        },
        "nAddrTransRegisters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "0",
          "architectureValidValues": [
            "0:16"
          ],
          "releaseValidValues": [
            "0:8"
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Specifies the number of address translation registers that are available within DII. These registers add capability to translate address on the AXI bus from DMI. Refer to the address translation section of the reference manual",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nPerfCounters": {
          "type": "int",
          "visibility": "user",
          "access": "ReadWrite",
          "default": "4",
          "architectureValidValues": [
            0,
            4,
            8,
            16
          ],
          "releaseValidValues": [
            0,
            4,
            8
          ],
          "source": "",
          "conditions": "",
          "customerDescription": "Total number of performance counter in NCore Unit. Each counter can be configured to count different events present in an Ncore unit via CSRs, please refer to the reference manual on the details of performance counter event",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "nLatencyCounters": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "addressBits": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wResp": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wWUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wBUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wRUser": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLen": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wSize": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wLock": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wQos": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wRegion": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "wProt": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        }
      },
      "legato": {
        "portDataWidth": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        },
        "inputBufferDepth": {
          "type": "string",
          "visibility": "engg",
          "access": "ReadWrite",
          "default": "user",
          "architectureValidValues": "",
          "releaseValidValues": "",
          "source": "",
          "conditions": "",
          "customerDescription": "",
          "architectureDescription": "",
          "constraints": "",
          "generalComments": ""
        }
      }
    },
    "maestro": {}
  }
}