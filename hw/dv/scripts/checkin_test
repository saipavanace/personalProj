#!/bin/bash -f
if [ -z $WORK_TOP ] ; then
    echo "ERROR : MUST DEFINE $WORK_TOP !!!"
    exit 1
fi
RUN_LOCAL=0;
RUN_LOCAL_AIU=0
RUN_LOCAL_CUSTTB=0
RUN_LOCAL_DCE=0
RUN_LOCAL_DVE=0
RUN_LOCAL_DMI=0
RUN_LOCAL_DII=0
RUN_LOCAL_IOAIU=0
RUN_LOCAL_CCP=0
RUN_LOCAL_SYS=0
RUN_LOCAL_LINT=0
FORCE_DEST_DIR=""
FORCE_MENTOR=0
LOW_PRIORITY=0
SKIP_REFRESH_RTL=0
while getopts "inamdcplojuvfqsz:" flag; do
    case "${flag}" in
	n) RUN_LOCAL=1;;
	o) RUN_LOCAL_DMI=1; RUN_LOCAL_DCE=1; RUN_LOCAL_DVE=1; RUN_LOCAL_AIU=1; RUN_LOCAL_CUSTTB=1; RUN_LOCAL_IOAIU=1; RUN_LOCAL_DII=1; RUN_LOCAL_SYS=1;;
	a) RUN_LOCAL_AIU=1;;
    u) RUN_LOCAL_CUSTTB=1;;
	i) RUN_LOCAL_IOAIU=1;;
	j) RUN_LOCAL_DII=1;;
	d) RUN_LOCAL_DCE=1;;
	v) RUN_LOCAL_DVE=1;;
	m) RUN_LOCAL_DMI=1;;
	c) RUN_LOCAL_CCP=1;;
	p) RUN_LOCAL_SYS=1;;
	l) RUN_LOCAL_LINT=1;;
	f) FORCE_MENTOR=1;;
	q) LOW_PRIORITY=1;;
	s) SKIP_REFRESH_RTL=1;;
	z) FORCE_DEST_DIR="$OPTARG";;
	*) ;;
    esac
done


# which vsim > /dev/null
# check_val=$?
# if [ $check_val -ne 0  ];
# then
#     echo "QUESTA ENVIRONMENT NOT SET: PLEASE RUN /engr/dev/tools/script/mentor-eng.sh FIRST"
#     exit 1
# fi

# which vcs > /dev/null
# check_val=$?
# if [ $check_val -ne 0  ];
# then
#     echo "VCS ENVIRONMENT NOT SET: PLEASE RUN /engr/dev/tools/script/snps-eng.sh"
#     exit 1
# fi
# if [ -z "" ] ; then
#     DEST_DIR=$1
# else
cur_date=`date +"%Y_%m_%d_%H_%M_%S"`

##to save checkin regression logs in /scratch/jenkins1 instead of /scratch/jenkins as we have moved to new diskspace.
if [ "$USER" = 'jenkins' ];
then
    username="jenkins1"
else
    username=$USER
fi

echo "Current user is $username"

BUILD_ID=$(basename $(dirname $(readlink -f $MAESTRO_HOME)))

if [ -z $BRANCH_NAME ] ; then
scratch_path=/scratch/$username/checkin_$cur_date
else
scratch_path=/scratch/$username/$BRANCH_NAME/$BUILD_ID/checkin_$cur_date
fi

if [ ! -z $FORCE_DEST_DIR ] ; then
    scratch_path=$FORCE_DEST_DIR/checkin_$cur_date
fi

if mkdir -p $scratch_path >& /dev/null; then
    DEST_DIR=$scratch_path
else
    >&2 echo "Can't create scratch directory $scratch_path or $scratch_path3"
    exit -1
fi

echo "RUNNING checkin tests in $DEST_DIR"

PRE_PUSH_TESTLIST=$DEST_DIR/pre_push_testlist

# fi
export ARTERIS_UGLIFY_OFF=1
remote="$1"
url="$2"
pushd $WORK_TOP > /dev/null
#cur_branch=$(git rev-parse --abbrev-ref HEAD | sed -e 's,.*/\(.*\),\1,')
full_branch=$(git rev-parse --abbrev-ref HEAD)
diff_files=$(git diff --name-only $full_branch origin/$full_branch)
local_changes=$(git status)
do_stash=1
if [[ $local_changes =~ modified ]];
then
    do_stash=1
fi
if [ $RUN_LOCAL -eq 1 ] ;
then
    do_stash=0
fi
if [ $do_stash -eq 1 ];
then
#    git stash
    OLD_WORK_TOP=$WORK_TOP
    pushd $DEST_DIR > /dev/null
    /engr/dev/tools/script/latest_concerto
    rm -rf concerto
    mkdir -p concerto
    cd concerto
    git clone $OLD_WORK_TOP/.git .

    cd ..
    source SOURCEME
    /engr/dev/tools/script/latest_concerto
    cd concerto
fi
if [ $SKIP_REFRESH_RTL -eq "0" ] ;
then
    $WORK_TOP/dv/scripts/refresh_rtl
    if [ $? -eq 0 ]
    then
        echo "refresh_rtl script finished successfully"
    else
        echo "refresh_rtl script failed with error"
        exit 1
    fi
    source SOURCEME_image
fi
popd > /dev/null




#Change this to master before broadcasting!
run_aiu=0
run_ioaiu=0
run_dmi=0
run_dii=0
run_dce=0
run_dve=0
run_custtb=0
run_ccp=0
run_scripts=0
run_lint_aiu=0
run_lint_ncb=0
run_lint_dmi=0
run_lint_dii=0;
run_lint_dce=0
run_lint_dve=0
run_lint_ccp=0
run_lint=0
run_lint_psys=0
run_full_sys=0
run_full_sys_snps=0
run_all=0
found_tests=0
argument_list=""
if [[ ($full_branch = "master") || ($full_branch =~ "release") || $RUN_LOCAL ]];
then
    if [[ $diff_files ]];
    then
	found_tests=1
	run_full_sys=1
	run_full_sys_snps=1
    fi
    if [[ $diff_files =~ pre-push ]]; then
	found_tests=1
	run_all=1
    fi
    
    if [[ $diff_files =~ rtl\/ ]];
    then
	#if doing an rtl push, ALWAYS run sub_sys testlist AND lint
	found_tests=1
	run_full_sys=1
	run_full_sys_snps=1
	run_lint=1
	run_lint_psys=1
	#also run block level testlists for each
	if [[ $diff_files =~ rtl\/dce/ ]] ;
	then
    	    run_dce=1
	fi
	if [[ $diff_files =~ rtl\/dve/ ]] ;
	then
    	    run_dve=1
	fi


	if [[ $diff_files =~ rtl\/chi_aiu\/ ]] ;
	then
	    run_lint_aiu=1
    	    run_aiu=1
	fi

	if [[ $diff_files =~ rtl\/ioaiu\/ ]] ;
	then
	    run_lint_aiu=1
    	    run_ioaiu=1
	fi

	
	if [[ $diff_files =~ rtl\/ccp\/ ]] ;
	then
    	    run_dmi=1
	    run_aiu=1
    	    run_lint_dmi=1
	    run_lint_aiu=1
	    run_ccp=1
	fi

	if [[ $diff_files =~ rtl\/dmi\/ ]] ;
	then
	    run_lint_dmi=1
    	    run_dmi=1
	fi
	if [[ $diff_files =~ rtl\/dii\/ ]] ;
	then
	    run_lint_dii=1
    	    run_dii=1
	fi



	if [[ $diff_files =~ rtl\/lib\/src ]] ;
	then
	    run_all=1
	fi
	if [[ $diff_files =~ rtl\/top\/src ]] ;
	then
	    run_all=1
	fi
    fi

    if [[ $diff_files =~ dv\/  ]];
    then
	found_tests=1
	echo "saw dv"
	#if doing pushing env changes that could also affect sub_sys, ALWAYS run sub_sys testlist
	run_full_sys=1
	run_full_sys_snps=1

	#also run block level testlists for each 
	if [[ $diff_files =~ dv\/dce\/tb\/dce\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/dce\/ ]] ;
	then
    	    run_dce=1
	fi

    if [[ $diff_files =~ dv\/cust\_tb\/snps\/tb\/cust\_tb\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/cust\_tb\/snps\/ ]] ;
	then
    	    run_custtb=1
	fi

	if [[ $diff_files =~ dv\/dve\/tb\/dve\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/dve\/ ]] ;
	then
    	    run_dve=1
	fi


	if [[ $diff_files =~ dv\/aiu\/tb\/aiu\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/chi_aiu\/ ]] ;
	then
    	    run_aiu=1
	    run_ccp=1
	fi

	if [[ $diff_files =~ dv\/dmi\/tb\/dmi\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/dmi\/ ]] ;
	then
    	    run_dmi=1
	    run_ccp=1
	fi

	if [[ $diff_files =~ dv\/dii\/tb\/dii\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/dii\/ ]] ;
	then
    	    run_dii=1
	fi

	if [[ $diff_files =~ dv\/ioaiu\/ ]] ;
	then
    	    run_ioaiu=1
	fi

	if [[ $diff_files =~ dv\/ccp\/tb\/ccp_ncb\_testlist\.json ]] ;
	then
	    run_scripts=1
	elif [[ $diff_files =~ dv\/ccp\/ ]] ;
	then
	    run_aiu=1
	    run_dmi=1
	    run_ccp=1
	fi

	if [[ $diff_files =~ dv\/scripts\/ ]] ;
	then
	    run_all=1
	fi
	if [[ $diff_files =~ dv\/common\/lib_tb ]] ;
	then
    	    run_dmi=1
    	    run_dii=1
    	    run_aiu=1
    	    run_dce=1
    	    run_dve=1
	    run_ioaiu=1
	    run_ccp=1
    	    run_full_sys=1	    
	    run_full_sys_snps=1
        run_custtb=1
	fi

	if [[ $diff_files =~ dv\/common\/checker ]] ;
	then
    	    run_full_sys=1	    
	    run_full_sys_snps=1
	fi

    fi

    if [ $found_tests -eq 1 ]; then
	run_all=1;
    fi
    
    if [ $run_all -eq "1" ]; then
        run_dmi=1
    	run_dii=1
    	run_aiu=1
    	run_dce=1
    	run_dve=1
	run_ioaiu=1
        run_custtb=1

#	run_ccp=1
    	run_full_sys=1
	run_full_sys_snps=1
#	run_lint=1
#	run_scripts=1
    fi
    
#   run_aiu=0
#  run_dmi=0
#   run_dii=0
#  run_dce=0
#  run_dve=0
   run_ccp=0
   run_lint_aiu=0
   run_lint_dmi=0
   run_lint_dii=0;
   run_lint_dce=0
   run_lint_dve=0
   run_lint_ccp=0
#   run_ioaiu=0
#   run_full_sys=0
#   run_lint=0
   run_scripts=0
   run_lint_psys=$run_lint
else
    echo "Not on master. Checking in"
    exit 0
fi

if [ $RUN_LOCAL ] ; then
    let "run_aiu=$run_aiu | $RUN_LOCAL_AIU"
    let "run_ioaiu=$run_ioaiu | $RUN_LOCAL_IOAIU";
    let "run_dii=$run_dii | $RUN_LOCAL_DII";
    let "run_dce=$run_dce | $RUN_LOCAL_DCE";    
    let "run_dve=$run_dve | $RUN_LOCAL_DVE"; 
    let "run_custtb=$run_custtb | $RUN_LOCAL_CUSTTB";   
    let "run_dmi=$run_dmi | $RUN_LOCAL_DMI";
    let "run_ccp=$run_ccp | $RUN_LOCAL_CCP";

    let "run_lint_aiu=$run_lint_aiu | ($RUN_LOCAL_AIU & $RUN_LOCAL_LINT)"
    let "run_lint_dce=$run_lint_dce | ($RUN_LOCAL_DCE & $RUN_LOCAL_LINT)"
    let "run_lint_dve=$run_lint_dve | ($RUN_LOCAL_DVE & $RUN_LOCAL_LINT)"
    let "run_lint_dmi=$run_lint_dmi | ($RUN_LOCAL_DMI & $RUN_LOCAL_LINT)"
    let "run_lint_dii=$run_lint_dii | ($RUN_LOCAL_DII & $RUN_LOCAL_LINT)"
    let "run_lint_ccp=$run_lint_ccp | ($RUN_LOCAL_CCP & $RUN_LOCAL_LINT)"


    let "run_full_sys=$run_full_sys | $RUN_LOCAL_SYS";
    let "run_full_sys_snps=$run_full_sys_snps | $RUN_LOCAL_SYS";
    let "run_lint=$run_lint | $RUN_LOCAL_LINT";    
fi
run_lint_aiu=0
run_lint_dce=0
run_lint_dve=0
run_lint_dmi=0
run_lint_ccp=0
run_lint_dii=0;

echo "run_full_sys = $run_full_sys run_full_sys_snps = $run_full_sys_snps run_dce = $run_dce run_dve = $run_dve run_aiu = $run_aiu run_dmi = $run_dmi run_dii = $run_dii run_ioaiu = $run_ioaiu run_ccp = $run_ccp run_custtb = $run_custtb"
echo "run_lint_dce = $run_lint_dce run_lint_dve = $run_lint_dve run_lint_aiu = $run_lint_aiu run_lint_dmi = $run_lint_dmi run_lint_dii = $run_lint_dii run_lint_ncb = $run_lint_ncb run_lint_ccp = $run_lint_ccp"
touch $PRE_PUSH_TESTLIST
cat /dev/null > $PRE_PUSH_TESTLIST    
if [ $FORCE_MENTOR -eq "1" ] ;
then
    export UVM_HOME=/engr/dev/tools/mentor/questa-2021.2_1/questasim/verilog_src/uvm-1.1d
    mentor_flag=" -q "
else
    mentor_flag=""
fi

run_lint_psys=$run_lint
if [ $run_lint_psys -eq "1" ] ;
then
    lines="$(cat $WORK_TOP/dv/scripts/lint_testlist)"
    for line in $lines; do
	if [[ $line =~ "node" ]];
	then
	    #	    echo "$line -D $DEST_DIR">> $PRE_PUSH_TESTLIST
	    if [ $run_lint_aiu -eq "1" ]; then
		if [[ $line =~ \-c ]]; then
		    line="$line -L"
		fi
	    fi
	    
	    echo $line$mentor_flag>> $PRE_PUSH_TESTLIST
	fi
	
    done
fi

runsim_passed=0
    runsim -e fsys -l fregr -h
    runsim_passed=$?
    if [ $runsim_passed -ne "0" ]; then
       echo "=======================================================" 
       echo "Something wrong in locally changed testlist.json syntax"
       echo "======================================================="
       exit 1;
    fi

IFS=$'\n'
has_unicode=1
unicode_err=""
if [ $run_aiu -eq "1" ] ;
then
	#################----------------------------------------------###########################
	#                                                                                        #
	#Passing environment names to the variable argument, to later append to the runsim command which is then saved in prepush testlist
	#                                                                                        #
	#################----------------------------------------------###########################
    argument_list+="chi_aiu,"


    sleep 2s
    argument_list+="chi_subsys,"

    #check for unicode
    #unicode_str=`find $WORK_TOP/rtl/aiu/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
    if [ -z $unicode_str ]; then
	has_unicode=$has_unicode;
    else
	has_unicode=0
	unicode_err="$unicode_err$unicode_str"
    fi
    
fi
if [ $run_ccp -eq "1" ] ;
then
    argument_list+="ccp,"

    #unicode_str=`find $WORK_TOP/rtl/ccp/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
    if [ -z $unicode_str ]; then
	has_unicode=$has_unicode;
    else
	has_unicode=0;
	unicode_err="$unicode_err$unicode_str"
    fi
    

fi
if [ $run_ioaiu -eq "1" ] ;
then
	#################----------------------------------------------###########################
	#                                                                                        #
	#Converting runsim commands to node commands and putting the same inside prepush testlist
	#                                                                                        #
	#################----------------------------------------------###########################
    sleep 2s
    argument_list+="ioaiu,"

    sleep 2s
    argument_list+="ioaiu_subsys,"

    sleep 2s
    argument_list+="ioaiu_subsys_snps,"

    #Disabling old testlist as per IOAIU team's request--- CONC-11250
    #lines="$(cat $WORK_TOP/dv/ioaiu/tb/testlist)"
    #for line in $lines; do
	#if [[ $line =~ "node" ]];
	#then
	#    if [ $run_lint_aiu -eq "1" ]; then
	#	if [[ $line =~ \-c ]]; then
	#	    line="$line -L"
	#	fi
	#    fi

	#    #	    echo "$line -D $DEST_DIR">> $PRE_PUSH_TESTLIST
	#    echo $line$mentor_flag>> $PRE_PUSH_TESTLIST
	#fi
	
    #done

    #unicode_str=`find $WORK_TOP/rtl/ncb/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
    if [ -z $unicode_str ]; then
	has_unicode=$has_unicode;
    else
	has_unicode=0;
	unicode_err="$unicode_err$unicode_str"
    fi

fi

if [ $run_full_sys_snps -eq "1" ] ;
then
	#################----------------------------------------------###########################
	#                                                                                        #
	#Converting runsim commands to node commands and putting the same inside prepush testlist
	#                                                                                        #
	#################----------------------------------------------###########################
    sleep 2s
    argument_list+="fsys_snps,"

    if [ -z $unicode_str ]; then
	has_unicode=$has_unicode;
    else
	has_unicode=0;
	unicode_err="$unicode_err$unicode_str"
    fi

fi
if [ $run_full_sys -eq "1" ] ;
then
    sleep 2s
    argument_list+="fsys,"

    if [ -z $unicode_str ]; then
	has_unicode=$has_unicode;
    else
	has_unicode=0;
	unicode_err="$unicode_err$unicode_str"
    fi

#    cat $WORK_TOP/dv/sub_sys/tb/testlist_mentor >> $PRE_PUSH_TESTLIST
    #    lines=`cat $WORK_TOP/dv/sub_sys/tb/testlist`

    # CONC-12105 : Disable old mechanism
   # lines=`cat $WORK_TOP/dv/full_sys/tb/testlist`    
   # for line in $lines; do
   # 	if [[ $line =~ "node" ]];
   # 	then
   #         # if [ $run_lint ]; then
   #         # 	if [[ $line =~ \-c ]]; then
   #         # 	    line="$line -L"
   #         # 	fi
   #         # fi

   #         #    	    echo "$line -D $DEST_DIR">> $PRE_PUSH_TESTLIST
   #         echo $line$mentor_flag>> $PRE_PUSH_TESTLIST
   # 	fi
   # done


fi
if [ $run_dce -eq "1" ] ;
then
     sleep 2s
     argument_list+="dce,"

     #unicode_str=`find $WORK_TOP/rtl/dce/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
     if [ -z $unicode_str ]; then
	 has_unicode=$has_unicode;
     else
	 has_unicode=0;
	 unicode_err="$unicode_err$unicode_str"
     fi

fi
if [ $run_dve -eq "1" ] ;
then
     sleep 2s
     argument_list+="dve,"

     if [ -z $unicode_str ]; then
	 has_unicode=$has_unicode;
     else
	 has_unicode=0;
	 unicode_err="$unicode_err$unicode_str"
     fi

fi

if [ $run_custtb -eq "1" ] ;
then
     sleep 2s

     argument_list+="cust_tb,"

     #unicode_str=`find $WORK_TOP/rtl/dve/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
     if [ -z $unicode_str ]; then
	 has_unicode=$has_unicode;
     else
	 has_unicode=0;
	 unicode_err="$unicode_err$unicode_str"
     fi

fi

if [ $run_dmi -eq "1" ] ;
then
	#################----------------------------------------------###########################
	#                                                                                        #
	#Converting runsim commands to node commands and putting the same inside prepush testlist
	#                                                                                        #
	#################----------------------------------------------###########################
    sleep 2s
    argument_list+="dmi,"

     #unicode_str=`find $WORK_TOP/rtl/dmi/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
     if [ -z $unicode_str ]; then
	 has_unicode=$has_unicode;
     else
	 has_unicode=0;
	 unicode_err="$unicode_err$unicode_str"
     fi

fi
if [ $run_dii -eq "1" ] ;
then
	#################----------------------------------------------###########################
	#                                                                                        #
	#Converting runsim commands to node commands and putting the same inside prepush testlist
	#                                                                                        #
	#################----------------------------------------------###########################
    sleep 2s
    argument_list+="dii"

    #unicode_str=`find $WORK_TOP/rtl/dmi/src -name '*.js' -print0 | xargs -0 grep -P -n "[^\x00-\x7F]"`
    if [ -z $unicode_str ]; then
	has_unicode=$has_unicode;
    else
	has_unicode=0;
	unicode_err="$unicode_err$unicode_str"
    fi

fi

scripts_passed=0
if [ $run_scripts -ne "0" ]; then
    cd $WORK_TOP/dv/scripts
    mocha_out=`grunt mochaTest`
    scripts_passed=$?
    if [ $scripts_passed -ne "0" ]; then
       echo $mocha_out
       exit 1;
    fi
fi

if [ $has_unicode -eq "0" ]; then
    node_passed=0;
    echo "ERROR! Found Unicode characters in files below"
    echo $unicode_err
fi

#$WORK_TOP/dv/scripts/grid_sub_list.sh -d $WORK_TOP -f $PRE_PUSH_TESTLIST
if [ $run_custtb -ne "0" ] || [ $run_aiu -ne "0" ] || [ $run_dmi -ne "0" ] || [ $run_ioaiu -ne "0" ] || [ $run_dce -ne "0" ] || [ $run_dve -ne "0" ] || [ $run_full_sys -ne "0" ] || [ $run_full_sys_snps -ne "0" ] || [ $run_ccp -ne "0" ] || [ $run_lint -ne "0" ] || [ $run_dii -ne "0" ];
then
   #if ! hash maestro 2>/dev/null; then
   #   # No maestro in the path, we must need full setup.
   #   source /usr/share/Modules/init/bash
   #   module purge
   #   module load dev/concerto/by_path
   #fi

   if [ $LOW_PRIORITY -eq "1" ] ;
   then
       echo "runsim -e $argument_list -l checkin -g -sim VCS -buildtb -d $DEST_DIR" >> "$PRE_PUSH_TESTLIST"
       echo "THE PATH TO PRE_PUSH_TESTLIST: $PRE_PUSH_TESTLIST"
       source "$PRE_PUSH_TESTLIST"
   else
       echo "runsim -e $argument_list -l checkin -g -sim VCS -buildtb -d $DEST_DIR" >> "$PRE_PUSH_TESTLIST"
       echo "THE PATH TO PRE_PUSH_TESTLIST: $PRE_PUSH_TESTLIST"
       source "$PRE_PUSH_TESTLIST"
   fi
   node_passed=$?
else
    node_passed=0;
fi



if [ $do_stash -eq 1 ];
then
#    git stash pop
    # pop from $DEST_DIR
    popd > /dev/null
    export WORK_TOP=$OLD_WORK_TOP

fi



echo "node_passed = $node_passed"
if [ $node_passed -ne "0" ];
then
    echo "FAILURE: Something failed with running pre_push_testlist!"
    exit 1
elif [ $run_custtb -eq "0" ] && [ $run_aiu -eq "0" ] && [ $run_dmi -eq "0" ] && [ $run_ioaiu -eq "0" ] && [ $run_dii -eq "0" ] && [ $run_dce -eq "0" ] && [ $run_dve -eq "0" ] && [ $run_full_sys -eq "0" ] && [ $run_full_sys_snps -eq "0" ];
then
    
    echo "Pre-push has determined no tests needed to be run. Checking in without running tests"
    exit 0
else
    rm -rf $DEST_DIR
    echo "SUCCESS!"
    exit 0
fi    
