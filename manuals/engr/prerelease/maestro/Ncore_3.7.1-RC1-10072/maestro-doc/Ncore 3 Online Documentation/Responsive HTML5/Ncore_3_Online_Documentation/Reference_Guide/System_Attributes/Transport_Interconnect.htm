<html lang="en-US">
<head>
<meta content="IE=edge" http-equiv="X-UA-Compatible" />
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
<title>Transport_Interconnect</title>
<meta content="Transport Interconnect" name="title_original" />
<link href="../../../rhstylemapping.css" rel="stylesheet" type="text/css" />
<link href="../Reference_Guide.css" rel="stylesheet" type="text/css" />
<link href="../../../editstyle.css" rel="stylesheet" type="text/css" /><script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker v17.0" />
<script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../../..";
gCommonRootRelPath = "../../..";
gTopicId = "4.3.4";
</script>
 <meta name="brsprev" value="Ncore_3_Online_Documentation/Reference_Guide/System_Attributes/Power_Management.htm">
 <meta name="brsnext" value="Ncore_3_Online_Documentation/Reference_Guide/System_Attributes/Error_Management.htm">
 <meta name="topic-breadcrumbs" content="Reference Guide > System Attributes" />
</head>
<body dir="ltr">
<script type="text/javascript" src="../../../ehlpdhtm.js"></script>
<div><p class="Heading1" id="980960"><a id="1094_Heading1_980960" name="1094_Heading1_980960"></a>3.8 <a id="XREF_22382__3_7_Transport_Interconnect23" name="XREF_22382__3_7_Transport_Interconnect23"> Transport Interconnect</a></p><p class="Body" id="980961"><a id="1094_Body_980961" name="1094_Body_980961"></a>Ncore 3 uses two types of transport interconnect&#x3A; the CSTI and CDTI.</p><p class="BodyAfterHead" id="980962">CSTI is the service interconnect for configuration and status register access to all Ncore components. CDTI is the main protocol interconnect.</p><p class="Body" id="980963">Ncore 3 components generate different set of control and data messages as described in section, <a href="../Protocols_and_Interfaces/Cache_Coherency_Protocol.htm#XREF_87084__2_1_Cache_Coherency_Protocol20" style="color:#0000ff;">“Cache Coherency Protocol”</a>. These messages are mapped to one data network and at least two control networks, these networks are referred together as CDTI. Separation of different messages onto independent transport resources improves performance and breaks dependency loops inside the transport that may cause deadlocks.</p><p class="Body" id="980967">The number of control networks are determined based on floor plan and throughput requirements. Control network width is determined based on system address width and other protocol control information that needs to flow on it. The width of the Control network width is not user selectable. Data network supports three width options, 64, 128, and 256 bits. These options can be mixed and matched within a single data network. </p><p class="Body" id="980968">For a single native request, the Ncore protocol will issue multiple control messages and most likely a single data message, as described in the <a href="../Protocols_and_Interfaces/Cache_Coherency_Protocol.htm#XREF_87084__2_1_Cache_Coherency_Protocol20" style="color:#0000ff;">“Cache Coherency Protocol”</a> section. Depending on the width of the data network, one or more control network can be chosen to achieve the required throughput. For example, if the data network is 256&#160;bits wide, a cache line read will consume 2 data network cycles. In this case,&#160;three control networks must be used to achieve maximum throughput. This ensures the number of control network cycles required will be within the 2 data network cycles. Currently, Ncore supports the following three options&#x3A;</p><p class="Bullet_1" id="980973"><span class="BulletSymbol">&#x2022; </span>Three networks, one data and two control networks, one for requests and another for responses </p><p class="Bullet_1" id="980974"><span class="BulletSymbol">&#x2022; </span>Four networks, one data and three control networks, one for requests, another for responses and lastly a dedicated network for messages between DCEs and DMIs.</p><p class="Bullet_1" id="996591"><span class="BulletSymbol">&#x2022; </span>Five networks, one data and four control networks, one for requests, two for responses and lastly a dedicated  network for messages between DCEs and DMIs. This is illustrated in <a  href="#XREF_73120__Figure%1110__Four_Interconnect_Option23" style="color:#0000ff;">Figure&#160;13</a>.</p><p class="Figure" id="980938">Figure&#160;13. <a id="XREF_73120__Figure%1110__Four_Interconnect_Option23" name="XREF_73120__Figure%1110__Four_Interconnect_Option23">F</a>ive Interconnect Option<img align="" alt="5network_interconnect10" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/5network_interconnect10.png" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="610.984253" x="5.072306" y="3.004415" /></p><p class="Body" id="981033"><a id="1094_Body_981033" name="1094_Body_981033"></a>Each Ncore component has one service port that connects to the CSTI and multiple protocol ports that connect to CDTI. Number of ports connecting to CDTI for each Ncore component is as follows&#x3A;</p><p class="Bullet_1" id="981034"><span class="BulletSymbol">&#x2022; </span>CAIU&#47;NCAIU has one data egress&#47;ingress port and two control egress&#47;ingress ports </p><p class="Bullet_1" id="981035"><span class="BulletSymbol">&#x2022; </span>DCE has two control egress&#47;ingress port and one dedicated control egress&#47;ingress port for DMI</p><p class="Bullet_1" id="981036"><span class="BulletSymbol">&#x2022; </span>DMI has one data egress&#47;ingress port and three control egress&#47;ingress ports, one of the control egress&#47;ingress port is dedicated to DCE</p><p class="Bullet_1" id="981037"><span class="BulletSymbol">&#x2022; </span>DII has one data egress&#47;ingress port and two control egress&#47;ingress ports</p><p class="Bullet_1" id="981038"><span class="BulletSymbol">&#x2022; </span>DVE has one data ingress port and two control egress&#47;ingress ports </p><p class="Body" id="981039">The control ports may be combined within CDTI depending on the choice of number of control interconnects.</p><p class="Body" id="981040">Topology and bus width for different networks within CDTI and CSTI can be designed depending on floorplan and throughput requirements.</p><p class="Heading2" id="981041"><a id="1094_Heading2_981041" name="1094_Heading2_981041"></a>3.8.1 Topologies</p><p class="BodyAfterHead" id="981042">The transport is created during the &quot;Architectural Design&quot; phase, in the Maestro software. During this phase, Maestro renders one or more NoC implementations to fulfill the requirements set forth in the specifications. NoC design primitives &#x2D; such as interfaces, switches, links, adapters &#x2D; are instantiated, connected and parameterized to achieve the design objectives.</p><p class="BodyAfterHead" id="981043">The primary task in this phase is the choice of a network topology to connect all components together, as well as the assignment of the routes along which traffic will travel. </p><p class="Body" id="983474">The main objectives are&#x3A;</p><p class="Bullet_1" id="981044"><span class="BulletSymbol">&#x2022; </span>Instantiating components that will functionally connect all communicating endpoints</p><p class="Bullet_1" id="981045"><span class="BulletSymbol">&#x2022; </span>Ensuring those components are sized to support the required bandwidths</p><p class="Bullet_1" id="981046"><span class="BulletSymbol">&#x2022; </span>Connecting them in a way that offers the lowest possible latency for critical traffic</p><p class="Bullet_1" id="981047"><span class="BulletSymbol">&#x2022; </span>Choosing routes that are as direct as possible for critical traffic, and otherwise distribute the traffic load to minimize contention hot spots</p><p class="Bullet_1" id="981048"><span class="BulletSymbol">&#x2022; </span>Ensuring that the routes do not interfere with each other to create deadlocks</p><p class="BodyAfterHead" id="981049">Maestro permits manual implementation of these tasks (with tool assistance) or, automatic implementation for designs that are suitably regular.</p><p class="Heading2" id="981050"><a id="1094_Heading2_981050" name="1094_Heading2_981050"></a>3.8.2 Manual Topology Generation</p><p class="BodyAfterHead" id="981051">Topologies and routes can be manipulated manually, while automating tedious and error&#x2D;prone subtasks. An example flow might be as follows&#x3A;</p><p class="Step1" id="981052"><span class="StepNumber">1.  </span>Maestro automatically creates Ncore units based on user definition of the native interfaces (Native interfaces are AXI&#47;ACE&#47;CHI interface)</p><p class="step_contd" id="981053"><span class="StepNumber">2.  </span>Any number of switches that need to be implemented in the NoC can be defined graphically. The designer then connects them (graphically) to describe routes. This process can be iterated as needed. Switches are placed into clock and power domains, and the data width is configurable</p><p class="step_contd" id="981054"><span class="StepNumber">3.  </span>Whenever the connectivity spans clock boundaries or data width boundaries (for the data network), Maestro automatically adds appropriate adapters to implement the clock or packet size conversion</p><p class="step_contd" id="981055"><span class="StepNumber">4.  </span>Other primitives can be manually added to satisfy functional or non&#x2D;functional objectives; for example, extra buffering elements (to improve performance), or pipeline stages (to facilitate timing closure)</p><p class="BodyAfterHead" id="981056">Maestro does not impose restrictions on the choice of topology but helps ensure the outcome is correct and efficient.</p><p class="Heading2" id="1001742">3.8.3 Mesh Topology Generation</p><p class="Body" id="1001721">The topology editor proposes a template for Mesh networks. The maximum number of nodes is 25. The largest supported mesh topologies are therefore 5x5, 6x4, 4x6, 8x3 and 3x8, and command and data networks are generated accordingly by Maestro using an X&#x2D;Y routing scheme. X&#x2D;Y and Y&#x2D;X routing schemes are now selectable. X represents the horizontal&#47; row and Y represents the vertical&#47; column in the Maestro GUI. Mesh unit node connectivity can now be replicated across networks in Maestro (including CSR networks).</p><p class="Body" id="1001723">Ncore 3 allows sub&#x2D;chip reuse or tiling by dividing the system&#x2D;on&#x2D;chip into modular and repeatable group of modules called &#x201c;tiles&#x201d;. The tiling with Mesh topology is flexible and highly scalable for a system on chip with tiled cache&#x2D;coherent CPU clusters for instance.</p><p class="Body" id="1001724">Most Ncore 3 units, except the DVE and the networks components, are all candidates for tiling and a tile can be reused in another tile to create a hierarchical tile. A combination of Ncore 3 unit and a CPU, Accelerator, or DDR controller, for instance, is a candidate for tiling after a successful check by Maestro tool.</p><p class="Heading2" id="992072"><a id="1094_Heading2_992072" name="1094_Heading2_992072"></a>3.8.4 Packet Definitions</p><p class="BodyAfterHead" id="992095">Both the CDTI and CSTI networks are packet based. The definition of the packet is determined by the super set of requirements for all the blocks tied to a particular network. Depending on the network, packets can be multiple beats and a given network can carry packets with different numbers of beats, anywhere from 1 to 8 beats.</p><p class="Heading2" id="992110"><a id="1094_Heading2_992110" name="1094_Heading2_992110"></a>3.8.5 CDTI Blocks</p><p class="BodyAfterHead" id="992132">There are five blocks used in the networks of the CDTI. Three of them can be manipulated manually&#x3A;</p><p class="Bullet_1" id="992133"><span class="BulletSymbol">&#x2022; </span>Switches</p><p class="Bullet_1" id="992161"><span class="BulletSymbol">&#x2022; </span>Pipe Adapters</p><p class="Bullet_1" id="996671"><span class="BulletSymbol">&#x2022; </span>Rate Adapters</p><p class="BodyAfterHead" id="992135">Two of them are automatically inserted by Maestro after a customer is done manipulating the topology&#x3A;</p><p class="Bullet_1" id="992136"><span class="BulletSymbol">&#x2022; </span>Clock Adapters</p><p class="Bullet_1" id="992137"><span class="BulletSymbol">&#x2022; </span>Width Adapters</p><p class="Heading2" id="992128"><a id="1094_Heading2_992128" name="1094_Heading2_992128"></a>3.8.6 Switches</p><p class="BodyAfterHead" id="992191">Switches can be parameterized in five ways&#x3A; </p><p class="Step1" id="992192"><span class="StepNumber">1.  </span>Number of ports</p><p class="step_contd" id="992219"><span class="StepNumber">2.  </span>Depth of internal buffering</p><p class="step_contd" id="992224"><span class="StepNumber">3.  </span>Routes Taken</p><p class="step_contd" id="992229"><span class="StepNumber">4.  </span>Data width of a switch (Only in the data network)</p><p class="step_contd" id="992234"><span class="StepNumber">5.  </span>The clock driving a switch</p><p class="Body" id="992197">Maestro allows switches to be broken apart and merged from the initial topology it creates after socket and route definition. The maximum allowed number of  input and output ports is 16 each, but this may be exceeded temporarily while editing the topology.</p><p class="BodyAfterHead" id="992198">While the topology is being manipulated, if multiple paths between two Ncore units exist for a given route, Maestro allows the customer to select which path to take.</p><p class="BodyAfterHead" id="992199">The width for a&#160;data switch can be set to 64, 128, or 256 bits wide.</p><p class="BodyAfterHead" id="992200">The depth of a buffer placed on all the input ports can be set to &#x30;, 2, 4, 8, 12, 16, 24 or 32. The depth represents a beat of a packet. The buffer can hold multiple packets or parts of packets.</p><p class="Body" id="992895">The switch uses round robin for arbitration.</p><p class="Heading2" id="992187"><a id="1094_Heading2_992187" name="1094_Heading2_992187"></a>3.8.7 Pipe Adapters</p><p class="BodyAfterHead" id="992256">Pipe adapters are used to fix timing issues should the link between two blocks travel a far distance. One&#160;parameter can be configured for pipe adapters&#x3A;</p><p class="Step1" id="992257"><span class="StepNumber">1.  </span>Depth</p><p class="BodyAfterHead" id="992258">While the width and clock of a pipe adapter cannot be directly modified in the Maestro GUI, it can be controlled indirectly by prepending or appending it to an existing block. The inserted adapter will directly assume the width and clock configuration from that block.</p><p class="BodyAfterHead" id="992259">&#160;&#160;&#160;The depth of a pipe adapter may be set to &#x30;, 1, 2 or 3. The depth represents active beats in a packet. The pipe adapter can hold multiple packets or parts of packets.</p><p class="Heading2" id="992252"><a id="1094_Heading2_992252" name="1094_Heading2_992252"></a>3.8.8 Clock Adapters</p><p class="Body" id="995636">Maestro automatically inserts a clock adapter between any two blocks when they are driven by different clocks and connected by a direct link. If two blocks in the topology are connected by a link and they are connected to different clocks, Maestro automatically inserts as well a clock adapter between the two blocks.</p><p class="BodyAfterHead" id="992303" style="text-align:center;">Maestro allows globally setting the number of synchronizing registers used when crossing clock domains. Acceptable values are 2,&#160;3, or 4. This value sets the number of registers used in the circular FIFO as 2&#x2A;(sync depth+1) + 1 raised to the nearest even number. Async FIFO depth can  be configured up to 8. Maestro supports the insertion of clock adapters, at the APB interface as well as the SMI interface.<div align="left"><table class="normal" style="max-width: 100% ;height: auto;"><col width="233.65px"/><col width="190.88px"/><thead><tr height="31.33px"><th><p class="CellHeading" id="992464">Synchronizing Register Depth</p></th><th><p class="CellHeading" id="992466">Circular FIFO Depth</p></th></tr></thead><tr height="22.67px"><td><p class="CellBody" id="992468" style="text-align:center;">2</p></td><td><p class="CellBody" id="992470" style="text-align:center;">8</p></td></tr><tr height="22.67px"><td><p class="CellBody" id="992472" style="text-align:center;">3</p></td><td><p class="CellBody" id="992474" style="text-align:center;">1&#x30;</p></td></tr></table></div></p><p class="Heading2" id="992319"><a id="1094_Heading2_992319" name="1094_Heading2_992319"></a>3.8.9 Width Adapters</p><p class="BodyAfterHead" id="992507">If two blocks in a topology are connected by a link and they have different widths, Maestro inserts a width adapter only for the data network.</p><p class="BodyAfterHead" id="992508">If the two connected blocks have both, different widths and different clocks, then Maestro will insert both a clock adapter and width adapter. The order of insertion for concatenated adapters will be chosen to maximize performance.</p><p class="Figure" id="992503">Figure&#160;14. Auto Adapter Insertion<img align="" alt="100052_022" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/100052_022.jpg" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="608.000000" x="8.000000" y="8.000000" /></p><p class="Heading2" id="992832"><a id="1094_Heading2_992832" name="1094_Heading2_992832"></a>3.8.1&#x30; &#160;Rate Adapters</p><p class="BodyAfterHead" id="995746">The user may insert rate adapters to the topology in front of width adapters when increasing the bus width size. The rate adapter will prevent partially filled data packets from entering the network to avoid wasting transfer bandwidth.</p><p class="Heading2" id="992550"><a id="1094_Heading2_992550" name="1094_Heading2_992550"></a>3.8.11 CSTI Network </p><p class="Body" id="992570">The CSTI network is used to access path for configuration, status, and error registers. It is automatically generated by Maestro and is composed of two sub networks&#x3A;</p><p class="Step1" id="992571"><span class="StepNumber">1.  </span>Request network</p><p class="step_contd" id="992589"><span class="StepNumber">2.  </span>Response network</p><p class="Heading2" id="992298"><a id="1094_Heading2_992298" name="1094_Heading2_992298"></a>3.8.12 CSTI Blocks</p><p class="BodyAfterHead" id="992609">The CSTI network uses switches and adds three more blocks&#x3A;</p><p class="Step1" id="992610"><span class="StepNumber">1.  </span>AXI initiator</p><p class="step_contd" id="997400"><span class="StepNumber">2.  </span>APB port</p><p class="step_contd" id="992630"><span class="StepNumber">3.  </span>APB targets</p><p class="BodyAfterHead" id="992612">The widths of all CSTI blocks are fixed at 32 bits.</p><p class="Body" id="997420">By default, all the AXI Initiators can access the APB targets. The Maestro GUI allows selection of the AXI Initiator to enable access via this Initiator to the APB targets. A dedicated register can be programmed to promote additional AXI Initiators to access the APB targets.</p><p class="Heading2" id="992605"><a id="1094_Heading2_992605" name="1094_Heading2_992605"></a>3.8.13 SysDII</p><p class="BodyAfterHead" id="995801">A selected AXI slave agent is tied to a special DII (the system DII) and forwards all CSR transactions into the CSTI.</p><p class="BodyAfterHead" id="995803">This AXI agent has two ports into the CSTI network, an outgoing request port and an incoming response port.</p><p class="Heading2" id="997461"><a id="1094_Heading2_997461" name="1094_Heading2_997461"></a>3.8.14 APB port</p><p class="Body" id="997462">Alternatively, an APB port can be used for accessing the Control and Status registers (refer to chapter &#x201c;3.1&#x30;.3 Secondary APB port support for CSR network&#x201d;).</p><p class="Body" id="997463">The APB Port complies with APB issue 4 and Ncore supports limited functionalities listed below&#x3A;</p><p class="Heading3" id="997465"><span style="padding-right:18pt ;">&#8203</span>Transaction protection</p><p class="Body" id="997466">Ncore CSR registers are only accessible via Secure Transactions and the protection signal PPROT[1] signal must be asserted low.</p><p class="Body" id="997467">The additional APB PPROT[&#x30;] and PPROT[2] protection signals are don&#x2019;t care for Ncore 3.6.</p><p class="Heading3" id="997469"><span style="padding-right:18pt ;">&#8203</span>Sparse data transfer</p><p class="Body" id="997470">Ncore does not support partial writes for CSR accesses. During a write operation, the APB PSTRB[3&#x3A;&#x30;] signals must be asserted high.</p><p class="Heading2" id="992648"><a id="1094_Heading2_992648" name="1094_Heading2_992648"></a>3.8.15 APB Target</p><p class="BodyAfterHead" id="995822">Every Ncore block exposes an APB port that is compliant to APB issue 4. An APB target block connects this port to the CSTI network. It receives requests from the AXI initiator, converts them to APB transactions on the APB interface and returns responses to the AXI Initiator. All APB transactions generate responses, so when a write completes the APB Target sends a completion response back to the AXI initiator.</p><p class="BodyAfterHead" id="992686">The APB Target has two ports into the CSTI network, an incoming request port and an outgoing response port.</p><p class="Figure" id="997729">Figure&#160;15. CSTI Network with AXI Initiator and APB Port masters<img align="" alt="Network_AXI_APB" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/Network_AXI_APB.jpg" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="592.503357" x="8.000000" y="8.000000" /></p><p class="Heading2" id="1002531">3.8.16 CSR description document</p><p class="Body" id="1002532">A document that lists all the Configuration and Status Registers (CSR) from the custom Ncore configuration is generated as one of the deliverables during the &quot;Export&quot; phase. There is a separate document for fault controller registers if the design is FuSa.</p><p class="Body" id="1002533">Every Configuration and Status register and every bit in a register has a name assigned. In addition, each bit has a description and key attributes listed. The Configuration and Status registers are grouped by Ncore unit instance name. Each group of registers has a base address associated and each Configuration and Status register within a group has an offset value to create a unique address. </p><p class="Body" id="1002534">The CSR Description document includes &quot;Rsvd&quot; Configuration and Status register bits to specify that these bits are reserved. The value from a reserved bit read operation shall be ignored and a write operation to a reserved bit can lead to unpredictable behavior and shall be masked.</p><p class="Heading2" id="981065"><a id="1094_Heading2_981065" name="1094_Heading2_981065"></a>3.8.17 &#160;Deadlock Analysis</p><p class="BodyAfterHead" id="981066">The generated topology needs to be deadlock&#x2D;free. Maestro employs a couple of techniques to ensure this.</p><p class="Bullet_1" id="981067"><span class="BulletSymbol">&#x2022; </span>Protocol&#x2D;level deadlocks&#x3A;</p><p class="b2_bullet2" id="981068"><span class="Bullet_2">&#x30; <span style="padding-right:5pt ;">&#8203</span></span>Protocol&#x2D;related deadlocks are avoided by enforcing&#x3A;</p><p class="b3_bullet3" id="981069"><span class="Bullet_3">s </span>&#160;&#160;&#160;A separation of message classes, which are mapped onto two or more networks. For each configuration, messages are segregated to avoid cyclic dependencies.</p><p class="b3_bullet3" id="981070"><span class="Bullet_3">s </span>&#160;&#160;&#160;A safe allocation of end&#x2D;to&#x2D;end message credits. This allocation is designed to ensure that endpoints will always have sufficient buffering to receive in&#x2D;flight messages, to prevent logjams back propagating across the interconnect.</p><p class="Body" id="981073">Maestro automatically checks for deadlocks in generated topologies. If the user inadvertently configures a deadlock&#x2D;prone system, the checker will alert to the possibility of cycles in the system. In this case, RTL generation will not be allowed.</p></div>
</body>
</html>