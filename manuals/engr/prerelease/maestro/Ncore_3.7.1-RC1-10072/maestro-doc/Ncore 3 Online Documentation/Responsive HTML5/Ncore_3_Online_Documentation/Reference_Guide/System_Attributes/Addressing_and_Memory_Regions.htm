<html lang="en-US">
<head>
<meta content="IE=edge" http-equiv="X-UA-Compatible" />
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
<title>Addressing_and_Memory_Regions</title>
<meta content="Addressing and Memory Regions" name="title_original" />
<link href="../../../rhstylemapping.css" rel="stylesheet" type="text/css" />
<link href="../Reference_Guide.css" rel="stylesheet" type="text/css" />
<link href="../../../editstyle.css" rel="stylesheet" type="text/css" /><script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker v17.0" />
<script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../../..";
gCommonRootRelPath = "../../..";
gTopicId = "4.3.1";
</script>
 <meta name="brsprev" value="Ncore_3_Online_Documentation/Reference_Guide/System_Attributes/Snoop_Filters.htm">
 <meta name="brsnext" value="Ncore_3_Online_Documentation/Reference_Guide/System_Attributes/NCAIUs.htm">
 <meta name="topic-breadcrumbs" content="Reference Guide > System Attributes" />
</head>
<body dir="ltr">
<script type="text/javascript" src="../../../ehlpdhtm.js"></script>
<div><p class="Heading1" id="980642"><a id="1094_Heading1_980642" name="1094_Heading1_980642"></a>3.2 <a id="XREF_80839__3_2_Addressing_and_Memory_Regions23" name="XREF_80839__3_2_Addressing_and_Memory_Regions23">Addressing and Memory Regions</a></p><p class="BodyAfterHead" id="980643"><a id="1094_BodyAfterHead_980643" name="1094_BodyAfterHead_980643"></a>Ncore address map is categorized into three main spaces&#x3A;</p><p class="Bullet_1" id="980644"><span class="BulletSymbol">&#x2022; </span>Ncore Register Space (NRS) </p><p class="Bullet_1" id="980645"><span class="BulletSymbol">&#x2022; </span>General Purpose Address Space (GPAS)</p><p class="Bullet_1" id="980646"><span class="BulletSymbol">&#x2022; </span>Boot Region (BR) </p><p class="Body" id="980647">Each space may contain one or more address regions.</p><p class="Body" id="980648">NRS is peripheral storage space used for Ncore unit configuration and status registers (CSR). Organization of NRS is shown in <a  href="#XREF_64428__Figure%116__NRS_organization23" style="color:#0000ff;">Figure&#160;7</a>.</p><p class="Figure" id="983511">Figure&#160;7. <a id="XREF_64428__Figure%116__NRS_organization23" name="XREF_64428__Figure%116__NRS_organization23">NRS organization</a><img align="" alt="NSR" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/NSR.png" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="459.517975" x="18.000041" y="4.666646" /></p><p class="Body" id="983538"><a id="1094_Body_983538" name="1094_Body_983538"></a>NRS may contain one or more Ncore register region (NRR). Each NRR is of 1MB and is further divided into 256 register pages (RP) of 4KB. Each Ncore component is associated with an RP and may implement up to 1<span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span>24, 4B (32bit) registers. </p><p class="Body" id="983539">Currently, Ncore systems only support one NRR. The number of valid RPs within this NRR is equal to the total number of Ncore components configured in the system. <a  href="#XREF_85896__Table_2__RP_assignment_to_Ncore_Components23" style="color:#0000ff;">Table&#160;4</a> shows the assignment of RPs to different Ncore components.</p><p class="Bullet_1" id="983540"><span class="BulletSymbol">&#x2022; </span>nCAIUs refers to the number of CAIUs in the system and so forth for different Ncore components. </p><p class="Bullet_1" id="983561"><span class="BulletSymbol">&#x2022; </span>nDII is always equal to the total number of DIIs configured plus one. The additional DII  (i.e., the last DII) is the Ncore system DII that is mapped to the NRS. </p><p class="Bullet_1" id="983573"><span class="BulletSymbol">&#x2022; </span>nDVE and nGRB is always one.</p><p class="Body" id="983676"><div align="left"><table class="normal" style="max-width: 100% ;height: auto;"><caption class="ttw-TableTitleWide"><p class="ttw_TableTitleWide" id="983597">Table 4. <a id="XREF_85896__Table_2__RP_assignment_to_Ncore_Components23" name="XREF_85896__Table_2__RP_assignment_to_Ncore_Components23">RP assignment to Ncore Components</a></p></caption><col width="141.43px"/><col width="429.61px"/><thead><tr height="31.33px"><th><p class="CellHeading" id="983601"><a id="1094_CellHeading_983601" name="1094_CellHeading_983601"></a>Ncore component</p></th><th><p class="CellHeading" id="983603">RPNs</p></th></tr></thead><tr height="22.67px"><td><p class="CellBody" id="983605">CAIUs</p></td><td><p class="CellBody" id="983607">RPN<span style="font-family : Consolas ; ">&#x30;</span> to RPN(nCAIU&#x2D;1)</p></td></tr><tr height="22.67px"><td><p class="CellBody" id="983609">NCAIUs</p></td><td><p class="CellBody" id="983611">RPN(nCAIU) to RPN(nCAIU+nNCAIU&#x2D;1)</p></td></tr><tr height="22.67px"><td><p class="CellBody" id="999654">DCEs</p></td><td><p class="CellBody" id="999656">RPN(nCAIU+nNCAIU) to RPN(nCAIU+nNCAIU+nDCEs&#x2D;1)</p></td></tr><tr height="22.67px"><td><p class="CellBody" id="983617">DMIs</p></td><td><p class="CellBody" id="983619">RPN(nCAIU+nNCAIU+nDCEs) to RPN(nCAIU+nNCAIU+nDCEs+nDMIs&#x2D;1)</p></td></tr><tr height="37.33px"><td><p class="CellBody" id="983621">DIIs</p></td><td><p class="CellBody" id="983623">RPN(nCAIU+nNCAIU+nDCEs+nDMIs) to RPN(nCAIU+nNCAIU+nDCEs+nDMIs+nDIIs&#x2D;1)</p></td></tr><tr height="22.67px"><td><p class="CellBody" id="983625">DVE</p></td><td><p class="CellBody" id="983627">RPN(nCAIU+nNCAIU+nDCEs+nDMIs+nDIIs)</p></td></tr></table></div></p><p class="Body" id="983584">The base address of this region must be specified at Ncore system build time and must be 4MB aligned. <a  href="#XREF_66922__Figure%117__Address_distribution23" style="color:#0000ff;">Figure&#160;8</a> shows the address distribution.</p><p class="Figure" id="983532">Figure&#160;8. <a id="XREF_66922__Figure%117__Address_distribution23" name="XREF_66922__Figure%117__Address_distribution23">Address distribution</a><img align="" alt="100052_017" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/100052_017.jpg" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="517.641296" x="8.000000" y="8.000000" /></p><p class="Body" id="980649"><a id="1094_Body_980649" name="1094_Body_980649"></a>General purpose address space is for general purpose use. It can support multiple number of address regions. The number of regions needed within a system must be specified at build time, at least one region is required. The regions can only be configured via CSR accesses and must be configured by software at boot up. They can be mapped to either normal memory (DMI) or a peripheral device (DII). The size of these regions must be a power of 2 within the range of 4 KB and 32 TB (achieved via interleaving). The base address configured must be aligned to the size of the region.</p><p class="Body" id="980650">Boot address space is to be used for system boot up. Current Ncore systems only support one boot address region. This region can be mapped to either normal memory (DMI) or a peripheral device address space (DII). The size of this region must be a power of 2 within the range of 4 KB and 8 TB. The base address of this region must be specified at Ncore system build time and must be aligned to the size of the region. </p><p class="Body" id="980651">Address decoding is priority based. NRS has the highest priority followed by general purpose address space and lastly boot address space. If an access matches higher priority address space then lower priority address space matches are ignored, and the higher priority space is selected for access. Within an address range multiple address region matches are treated as errors; this specifically applies to general purpose address space. An access will result in an error if multiple address region matches are detected within a single address range or no matches are detected to any address space.</p><p class="Body" id="1002301">A read or a write access to one or more address locations in the GPAS is determined as shown below&#x3A;</p><p class="Bullet_1" id="1002302"><span class="BulletSymbol">&#x2022; </span>For AXI and ACE protocols, by AxADDR and AxPROT[1] signals that indicate if the access is secure or not (Ax&#x2A; refers to AR&#x2A; and AW&#x2A; signals).</p><p class="Bullet_1" id="1002303"><span class="BulletSymbol">&#x2022; </span>For CHI protocols, the Addr field and the NS bit that indicates if the access is secure or not.</p><p class="Heading2" id="980652"><a id="1094_Heading2_980652" name="1094_Heading2_980652"></a>3.2.1 <a id="XREF_41564__3_2_1_Interleaving23" name="XREF_41564__3_2_1_Interleaving23">Interleaving </a></p><p class="Body" id="980653"><a id="1094_Body_980653" name="1094_Body_980653"></a>Ncore supports interleaving across snoop filters, system caches, and initiator groups.&#160;An initiator group can be formed by creating a group of initiators. All of the initiators comprising an initiator group must be identical. When DMIs, DCEs and Initiator Groups are all interleaved using the same bits, Maestro is able to dramatically reduce the connectivity of the networks in the design. This capability enables higher access bandwidth and eases physical design of the chip. Snoop filters are implemented within DCE and can be interleaved&#47;distributed across 1 to 16 instances of DCE. System caches are implemented within DMI.</p><p class="Body" id="980654">DMIs can be interleaved&#47;distributed as a Memory Interleave Group (MIG) of 1, 2, 4, 8, or 16 DMIs. Multiple memory interleave groups form a Memory Interleave Group Set (MIGS). For example, if a system has 7 DMIs, DMI<span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span> to DMI6, they can be combined into 3 different memory interleave groups&#x3A; </p><p class="Step1" id="980655"><span class="StepNumber">1.  </span>Group <span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span> of four DMIs (DMI<span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span>, DMI1, DMI2, DMI3)</p><p class="step_contd" id="980656"><span class="StepNumber">2.  </span>Group 1 of 2 DMIs (DMI4 and DMI5)</p><p class="step_contd" id="980657"><span class="StepNumber">3.  </span>Group 2 of one DMI &#x2D; i.e., DMI6</p><p class="Body" id="980658">Three groups together are referred to as a Memory Interleave Group Set. Alternatively, the MIGS may be configured as follows&#x3A;</p><p class="Step1" id="980659"><span class="StepNumber">1.  </span>Group <span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span> of two DMIs (DMI<span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span>, DMI1)</p><p class="step_contd" id="980660"><span class="StepNumber">2.  </span>Group 1 of two DMIs (DMI2, DMI3)&#160;</p><p class="step_contd" id="980661"><span class="StepNumber">3.  </span>Group 2 of two DMIs (DMI4 and DMI5)</p><p class="step_contd" id="980662"><span class="StepNumber">4.  </span>Group 3 of one DMI &#x2D; i.e., DMI6</p><p class="Body" id="976472">The groups are illustrated in <a  href="#XREF_29810__Figure%116__MIGS_Options23" style="color:#0000ff;">Figure&#160;9</a>.</p><p class="Figure" id="980686">Figure&#160;9. <a id="XREF_29810__Figure%116__MIGS_Options23" name="XREF_29810__Figure%116__MIGS_Options23">MIGS Options</a><img align="" alt="100052_006" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/100052_006.jpg" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="612.567688" x="6.483419" y="8.001587" /></p><p class="Heading3" id="980711"><a id="1094_Heading3_980711" name="1094_Heading3_980711"></a><span style="padding-right:18pt ;">&#8203</span> Instance and Set Selection </p><p class="Body" id="980712">DCE and DMI component instances, system memory cache sets, proxy cache sets and snoop filter sets are selected as a function of address bits. The method for calculating the selection index is configurable, and the selection index is based on simple interleaving, in which the selection index is determined by the value of a set of N address bits, known as the primary selection bits. The value of selection index bit n equals the value of the address bit defined by primary selection bit n. For example, if primary selection bit <span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span> is specified as address bit 6, the value of selection index bit <span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span> equals the value of address bit 6.</p><p class="Body" id="980713">Each address bit in the set of primary selection bits must be unique, i.e., an address bit must appear only once in the set of primary selection bits. The address bits must be chosen from a range whose upper bound is less than the size of the system address and whose lower bound is greater than or equal to the size of a cache line. For example, if the size of the system address is 4GB and the size of the directory cache line is 64B, the highest address bit that can be selected is 31 and the lowest address bit is 6. Address bits less than the size of the directory cache line comprise the directory cache line offset, which are bits <span style="font-family : Consolas ; font-size : 9.00pt;">&#x30;</span> through 5 in this example.</p><p class="Body" id="980714">An identifier is computed by taking the value of the selection index modulo the number of items being selected. To select an instance on a component, an instance identifier is calculated. To select a set in a system memory cache, a proxy cache, or a snoop filter, a set identifier is calculated. In the case of snoop filter and system memory cache the final set index is computed by concatenating the instance identifier with the set identifier, i.e., the instance identifier represents the most significant bits of the set index, while the set identifier represents the least significant bits. The address bits in the set of primary selection bits that determine the instance identifier must not appear in any of the sets of primary selection bits that determine the set identifier. </p><p class="Body" id="980715">Additional constraints that apply to various components are described in more detail below.</p><p class="Body" id="1001248">Secondary address bits function is described in <a  href="Caches.htm#XREF_23531__Address_Hashing23">Address Hashing</a>.</p><p class="Heading3" id="980716"><span style="padding-right:18pt ;">&#8203</span>Snoop Filter, System Memory Cache and Proxy Cache and Initiator Groups</p><p class="Body" id="980717">The Set selection is additionally constrained as following&#x3A;</p><p class="Bullet_1" id="980718"><span class="BulletSymbol">&#x2022; </span>The number of sets per instance must be a power&#x2D;of&#x2D;two integer </p><p class="Bullet_1" id="980719"><span class="BulletSymbol">&#x2022; </span>The number of primary selection bits must equal the binary logarithm of the number of sets.</p><p class="Heading3" id="980727"><span style="padding-right:18pt ;">&#8203</span>Distributed Memory Interface Selection</p><p class="Body" id="980728">DMI selection is additionally constrained as follows&#x3A; </p><p class="Bullet_1" id="980729"><span class="BulletSymbol">&#x2022; </span>The number of interleaved instances may be either 1, 2, 4, 8, or 16.</p><p class="Body" id="983252">The number of primary selection bits must equal the binary logarithm of the number of interleaved instances.</p><p class="Body" id="983279">At Ncore system build time, up&#160;to 2 set interleaving address bits can be specified for 2, 4, 8, and 16 interleaving options. One of the specified options can be selected via a configuration register.</p><p class="Heading3" id="980720"><span style="padding-right:18pt ;">&#8203</span>Distributed Coherency Engine Selection</p><p class="Body" id="980721">DCE selection is additionally constrained as follows&#x3A; </p><p class="Bullet_1" id="980722"><span class="BulletSymbol">&#x2022; </span>The number of instances may be either 1, 2, 4, 8, or 16</p><p class="Bullet_1" id="984399"><span class="BulletSymbol">&#x2022; </span>The number of primary selection bits must equal the binary logarithm of the number of interleaved instances.</p><p class="Bullet_1" id="980725"><span class="BulletSymbol">&#x2022; </span>The primary selection bits must be chosen from the address bits common to all snoop filters and above the cache&#160;line offset</p><p class="Heading3" id="993459"><span style="padding-right:18pt ;">&#8203</span>Initiator Group Interface Selection</p><p class="Bullet_1" id="993499"><span class="BulletSymbol">&#x2022; </span>The number of interleaved instances may be either 1, 2, 4, 8 or 16</p><p class="Bullet_1" id="993517"><span class="BulletSymbol">&#x2022; </span>The number of primary selection bits must equal the binary logarithm of the number of interleaved instances</p><p class="Bullet_1" id="993532"><span class="BulletSymbol">&#x2022; </span>&#160;&#160;&#160;All initiators in an initiator group must be identical.</p><p class="Body" id="1002331">An example on the way to select the primary selection bits for the DCE follows&#x3A;</p><p class="Bullet_1" id="1002332"><span class="BulletSymbol">&#x2022; </span>In a 32&#x2D;bit address width ACE system with DCE four&#x2D;way interleaved, DCE&#x30;, DCE1, DCE2, DCE3 instances can be selected.</p><p class="Bullet_1" id="1002333"><span class="BulletSymbol">&#x2022; </span>Address bits [5&#x3A;&#x30;] are excluded because they are below the cacheline offset.</p><p class="Bullet_1" id="1002334"><span class="BulletSymbol">&#x2022; </span>Number of primary selection bits for a system with DCE four&#x2D;way interleaved (N&#x3D;4)&#x3A; log2(N) &#x3D; log2(4) &#x3D; 2.</p><p class="Bullet_1" id="1002335"><span class="BulletSymbol">&#x2022; </span>2 address bits need to be chosen as the primary select bits to select DCE&#x30;, DCE1, DCE2, DCE3.</p><p class="Bullet_1" id="1002336"><span class="BulletSymbol">&#x2022; </span>The address bits common to all snoop filters and above the cache line offset are address bits [31&#x3A;6]. So, the 2 primary selection bits for DCE selection must be chosen from the address bit range [31&#x3A;6] like [7&#x3A;6] or [31&#x3A;3&#x30;].</p></div>
</body>
</html>