<html lang="en-US">
<head>
<meta content="IE=edge" http-equiv="X-UA-Compatible" />
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
<title>Error_Management</title>
<meta content="Error Management" name="title_original" />
<link href="../../../rhstylemapping.css" rel="stylesheet" type="text/css" />
<link href="../Reference_Guide.css" rel="stylesheet" type="text/css" />
<link href="../../../editstyle.css" rel="stylesheet" type="text/css" /><script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker v17.0" />
<script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../../..";
gCommonRootRelPath = "../../..";
gTopicId = "4.3.5";
</script>
 <meta name="brsprev" value="Ncore_3_Online_Documentation/Reference_Guide/System_Attributes/Transport_Interconnect.htm">
 <meta name="brsnext" value="Ncore_3_Online_Documentation/Reference_Guide/System_Attributes/Debug_and_Trace.htm">
 <meta name="topic-breadcrumbs" content="Reference Guide > System Attributes" />
</head>
<body dir="ltr">
<script type="text/javascript" src="../../../ehlpdhtm.js"></script>
<div><p class="Heading1" id="981074"><a id="1094_Heading1_981074" name="1094_Heading1_981074"></a>3.9 Error Management</p><p class="Body" id="981075">In Ncore, an error is defined to be a deviation from correct or expected system behavior. An undetectable error is a deviation that hardware is unable to detect, while a detectable error is a deviation hardware is able to detect. Detectable errors may be further classified as&#x3A;</p><p class="Bullet_1" id="981076"><span class="BulletSymbol">&#x2022; </span>Correctable errors&#x3A; if the hardware is able to correct the deviation upon its detection</p><p class="Bullet_1" id="981077"><span class="BulletSymbol">&#x2022; </span>Uncorrectable errors&#x3A; if the hardware is unable to correct the deviation.</p><p class="Heading2" id="1002579">3.9.1 Errors setting</p><p class="Body" id="1002581">Correctable and uncorrectable errors detection shall be enabled in every component to be managed at the SOC level.  Correctable and Uncorrectable Errors Control Registers (xCECR &#x26; xUEDR) shall be programmed to enable the detection and the logging of some or all errors. </p><p class="Body" id="1002582">When an error detection is enabled, users can enable the interrupt signal for the correctable error based on a threshold value and every uncorrectable error type by programming the Uncorrectable Error Interrupt Register (xUEIR).</p><p class="Heading2" id="981078"><a id="1094_Heading2_981078" name="1094_Heading2_981078"></a>3.9.2 Correctable Errors</p><p class="Body" id="981079">Ncore detects and processes correctable errors when it is configured with SRAMs that are SECDED protected, these are classified into two categories&#x3A;</p><p class="Bullet_1" id="981080"><span class="BulletSymbol">&#x2022; </span>Correctable data errors&#x3A; these are errors on SRAM accesses that store data such as data SRAMs in caches.</p><p class="Bullet_1" id="981081"><span class="BulletSymbol">&#x2022; </span> Correctable address errors&#x3A; these are errors on SRAM access that store address information, such as tag memories in caches.</p><p class="Body" id="985553">In addition when Ncore is configured with Resiliency it is able to detect and correct errors on the network. For more details, refer to <a href="../Resiliency/Resiliency.htm#XREF_35566__Resiliency24" style="font-family : Georgia ; font-weight:normal;font-style:Italic;font-size : 10.00pt;text-decoration:none;text-transform:none;font-stretch:normal;color:#0000ff;background-color:transparent;letter-spacing : 0.00em;"> Chapter 4</a>.</p><p class="Body" id="1002609">Upon a correctable error detection, the user can read the Correctable Error Status Register (xCESR) in each Ncore component to access the error log information like the error count, the error type and error information. Users can further narrow down the source of the error by reading the Correctable Error Location Registers (xCELRy) specific to each Ncore component to take appropriate action. Finally, a Correctable Error Status Alias Register (xCESAR) can be used for injecting error in the status register for testing purposes. If a new Correctable Error attempts to log the same cycle this register is configured, the information in this register will be logged in the status register.</p><p class="Heading2" id="981082"><a id="1094_Heading2_981082" name="1094_Heading2_981082"></a>3.9.3 Uncorrectable Errors </p><p class="Body" id="981083">Ncore detects and processes multiple uncorrectable errors, these are classified as follows&#x3A;</p><p class="Bullet_1" id="995934"><span class="BulletSymbol">&#x2022; </span>Uncorrectable data errors &#x3A; These are errors on SRAM accesses to memories that store data, such as data SRAMs in caches. When this error is detected, the cache line will be marked as poisoned within the SRAM and the poison attribute will be returned on subsequent access to the cache&#160;line. The request will then complete, propagating poison information on the native interface. For a CHI interface the appropriate error signaling method is defined in the standard, the poison bit will be set on the data response. For ACE, ACE&#x2D;Lite, and AXI, error signaling is provided by the byte enables for poisoned data beats will be de&#x2D;asserted. If enabled, an interrupt will be asserted by the component that detected the error.</p><p class="Bullet_1" id="995982"><span class="BulletSymbol">&#x2022; </span>Uncorrectable address errors &#x3A; These are errors on SRAM accesses to memories that store address information, such as tag SRAMs in caches. When this error is detected, the request will be completed with an error message on the native interface, if enabled, an interrupt will be asserted by the component that detected the error.</p><p class="Bullet_1" id="981086"><span class="BulletSymbol">&#x2022; </span>Address map uncorrectable errors &#x3A; These are errors on accesses that either hit multiple configured address regions within GPAS or do not hit any configured address regions. the request is completed with an error message on the native interface. If interrupts are enabled, it is asserted at the component that detected the error.</p><p class="Bullet_1" id="997340"><span class="BulletSymbol">&#x2022; </span>Native uncorrectable errors &#x3A; These are errors that are propagated into Ncore by external native interfaces such as AXI. If the original request does not complete, then the error is propagated, and the original request is completed with error messages on the native interface. If interrupts are enabled, it is asserted at the Ncore component that observes the error on its Native interface.</p><p class="Bullet_1" id="1002652"><span class="BulletSymbol">&#x2022; </span>Timeout uncorrectable errors &#x3A; These are errors on accesses that don&apos;t send any responses within the time defined in the timeout counter. If interrupts are enabled, it is asserted at the component that detected the error.</p><p class="Body" id="1002654">Upon an uncorrectable error detection, the user can read the Uncorrectable Error Status Register (xUESR) in each Ncore component to access the error log information like the error type and error information. Users can further narrow down the source of the error by readding the Uncorrectable Error Location Registers (xUELRy) specific to each Ncore component to take appropriate action. Finally, a Uncorrectable Error Status Alias Register (xUESAR) can be used for injecting error in the status register for testing purposes. If a new Uncorrectable Error attempts to log the same cycle this register is configured, the information in this register will be logged in the status register.</p><p class="Heading2" id="1002690">3.9.4 TrustZone and Security errors</p><p class="Body" id="1002691">TrustZone is supported in the Ncore system and secure and non&#x2D;secure accesses are based on the NSX register field of the General Purpose Region Attribute Register (xGPRAR).</p><p class="Body" id="1002692">Basically, secure and non&#x2D;secure accesses can never access the same data in Ncore and any aliasing is expected to be resolved by software. In addition, NSX value is stored in address buffers and tag filter entries. Any address comparison includes comparison of the NSX value to invalid any access in case of mismatch.</p></div>
</body>
</html>