<html lang="en-US">
<head>
<meta content="IE=edge" http-equiv="X-UA-Compatible" />
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
<title>SRAM_Test_Signals</title>
<meta content="SRAM Test Signals" name="title_original" />
<link href="../../../rhstylemapping.css" rel="stylesheet" type="text/css" />
<link href="../Integration_Guide.css" rel="stylesheet" type="text/css" />
<link href="../../../editstyle.css" rel="stylesheet" type="text/css" /><script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker v17.0" />
<script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../../..";
gCommonRootRelPath = "../../..";
gTopicId = "2.2.1_1";
</script>
 <meta name="brsprev" value="Ncore_3_Online_Documentation/Integration_Guide/EmbedMem/Embedded_Memories.htm">
 <meta name="brsnext" value="Ncore_3_Online_Documentation/Integration_Guide/EmbedMem/Replication.htm">
 <meta name="topic-breadcrumbs" content="Integration Guide > Select Maestro Flow Considerations" />
</head>
<body dir="ltr">
<script type="text/javascript" src="../../../ehlpdhtm.js"></script>
<div><p class="Heading1" id="1048766"><a id="966_Heading1_1048766" name="966_Heading1_1048766"></a>3.2 SRAM Test Signals</p><p class="BodyAfterHead" id="1048767">Maestro provides the ability to define and create test signals for memories of type SRAM. They are created during the Topology Structure phase of Maestro. A test signal is made up of three parameters that must be provided during creation&#x3A;</p><p class="Bullet_1" id="1048768"><span class="BulletSymbol">&#x2022; </span>Name</p><p class="Bullet_1" id="1048769"><span class="BulletSymbol">&#x2022; </span>Direction</p><p class="Bullet_1" id="1048770"><span class="BulletSymbol">&#x2022; </span>Bit width</p><p class="Heading3" id="1048771">Example</p><p class="Body" id="1048775"><img align="" alt="sram" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/sram.jpg" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="174.557693" x="49.750203" y="7.500041" /></p><p class="Body" id="1048776"><br/></p><p class="Normal" id="1048780" style="text-align:left;direction:ltr;font-family : Calibri ; font-weight:normal;font-style:normal;font-size : 11.00pt;text-decoration:none;font-kerning:none;text-transform:none;font-stretch:normal;color:#000000;background-color:transparent;letter-spacing : 0.00em;">&#160;<span style="font-family : Georgia ; font-size : 10.00pt;font-kerning:normal;"><img align="" alt="sram2" class="imageSettings" height="auto" preserveAspectRatio="none" src="../assets/sram2.png" style="max-width: 100% ;height: auto;display:block;margin:auto;" width="501.491058" x="48.313619" y="4.625020" /></span></p><p class="Bulleted" id="1048781"><span class="Bullet_1">&#x30; <span style="padding-right:7pt ;">&#8203</span></span>When RTL is generated, the test signals will be created at the top level of the design and will be routed down the hierarchy to the associated memory wrapper. This provides a method to access the SRAM signals outside the IP, where they can be used for MBIST.</p><p class="Bulleted" id="1048782"><span class="Bullet_1">&#x30; <span style="padding-right:7pt ;">&#8203</span></span>All test signals are grouped into a single bus by direction. The bus (in, out) is then routed through the hierarchy into each memory wrapper. Inside the memory wrapper, the individual signals are re&#x2D;created from the bits of the bus allowing for the connection of the test signals to the individual memory slices as needed.</p><p class="Body" id="1048783"><br/></p><p class="cit_Indented" id="1048784">module dmi_wrdatamem_em_mem_external_a (</p><p class="cit_Indented" id="1048785">    input clk,</p><p class="cit_Indented" id="1048786">    input cg_test_en,</p><p class="cit_Indented" id="1048787">    input [372&#x3A;&#x30;] int_data_in,</p><p class="cit_Indented" id="1048788">    output [372&#x3A;&#x30;] int_data_out,</p><p class="cit_Indented" id="1048789">    input [2&#x3A;&#x30;] int_address,</p><p class="cit_Indented" id="1048790">    input int_write_en,</p><p class="cit_Indented" id="1048791">    input int_chip_en,</p><p class="cit_Indented" id="1048792">    input [52&#x3A;&#x30;] in,</p><p class="cit_Indented" id="1048793">    output [39&#x3A;&#x30;] out);</p><p class="cit_Indented" id="1048794"><br/></p><p class="cit_Indented" id="1048795">    assign &#x7B; TEST1A, TEST1B, RMEA, RMEB, RMA, RMB, LS, TEST_d&#x7D; &#x3D; in;</p><p class="cit_Indented" id="1048796">    assign  out &#x3D; &#x7B; TEST_q&#x7D;;</p><p class="cit_Indented" id="1048797"><br/></p><p class="cit_Indented" id="1048798">    dmi_wrdatamem_external_mem_a external_mem_inst (</p><p class="cit_Indented" id="1048799">    .CLK (dmi_wrdatamem__CLK),</p><p class="cit_Indented" id="1048800">    .D (dmi_wrdatamem__D),</p><p class="cit_Indented" id="1048801">    .ADR (dmi_wrdatamem__ADR),</p><p class="cit_Indented" id="1048802">    .WE (dmi_wrdatamem__WE),</p><p class="cit_Indented" id="1048803">    .ME (dmi_wrdatamem__ME),</p><p class="cit_Indented" id="1048804">    .Q (dmi_wrdatamem__Q),</p><p class="cit_Indented" id="1048805">    . TEST1A ( TEST1A),</p><p class="cit_Indented" id="1048806">    . TEST1B ( TEST1B),</p><p class="cit_Indented" id="1048807">    . RMEA ( RMEA),</p><p class="cit_Indented" id="1048808">    . RMEB ( RMEB),</p><p class="cit_Indented" id="1048809">    . RMA ( RMA),</p><p class="cit_Indented" id="1048810">    . RMB ( RMB),</p><p class="cit_Indented" id="1048811">    . LS ( LS),</p><p class="cit_Indented" id="1048812">    . TEST_d ( TEST_d),</p><p class="cit_Indented" id="1048813">    . TEST_q ( TEST_q));</p><p class="cit_Indented" id="1048814">module dmi_wrdatamem_external_mem_a</p><p class="cit_Indented" id="1048815">&#x23; (</p><p class="cit_Indented" id="1048816">   parameter DATA_WIDTH &#x3D; 373</p><p class="cit_Indented" id="1048817">  ,parameter DATA_DEPTH &#x3D; 8</p><p class="cit_Indented" id="1048818">  ,parameter ADDR_WIDTH &#x3D; 3</p><p class="cit_Indented" id="1048819">) (</p><p class="cit_Indented" id="1048820">    input CLK,</p><p class="cit_Indented" id="1048821">    input [DATA_WIDTH&#x2D;1&#x3A;&#x30;] D,</p><p class="cit_Indented" id="1048822">    input [ADDR_WIDTH&#x2D;1&#x3A;&#x30;] ADR,</p><p class="cit_Indented" id="1048823">    input WE,</p><p class="cit_Indented" id="1048824">    input ME,</p><p class="cit_Indented" id="1048825">    output reg [DATA_WIDTH&#x2D;1&#x3A;&#x30;] Q,</p><p class="cit_Indented" id="1048826">    input  TEST1A,</p><p class="cit_Indented" id="1048827">    input  TEST1B,</p><p class="cit_Indented" id="1048828">    input  RMEA,</p><p class="cit_Indented" id="1048829">    input  RMEB,</p><p class="cit_Indented" id="1048830">    input [3&#x3A;&#x30;] RMA,</p><p class="cit_Indented" id="1048831">    input [3&#x3A;&#x30;] RMB,</p><p class="cit_Indented" id="1048832">    input  LS,</p><p class="cit_Indented" id="1048833">    input [39&#x3A;&#x30;] TEST_d,</p><p class="cit_Indented" id="1048834">    output[39&#x3A;&#x30;] TEST_q);</p><p class="cit_Indented" id="1048835">`ifndef ARTERIS_BACKEND</p><p class="cit_Indented" id="1048836">          assign TEST_q &#x3D; &apos;h&#x30;;</p><p class="cit_Indented" id="1048837">    reg [DATA_WIDTH&#x2D;1&#x3A;&#x30;] Q_int;</p><p class="cit_Indented" id="1048838">    reg [DATA_WIDTH&#x2D;1&#x3A;&#x30;] mem_core [DATA_DEPTH&#x2D;1&#x3A;&#x30;];</p><p class="cit_Indented" id="1048839">    always @(posedge CLK) begin</p><p class="cit_Indented" id="1048840">        if (ME &#x26; &#x7E;WE) begin</p><p class="cit_Indented" id="1048841">            Q_int &#x3C;&#x3D; mem_core[ADR];</p><p class="cit_Indented" id="1048842">        end</p><p class="cit_Indented" id="1048843">    end</p><p class="cit_Indented" id="1048844">    &#47;&#47; mem_core flops</p><p class="cit_Indented" id="1048845">    always @(posedge CLK) begin</p><p class="cit_Indented" id="1048846">        if (ME &#x26; WE) begin</p><p class="cit_Indented" id="1048847">            mem_core[ADR] &#x3C;&#x3D; D;</p><p class="cit_Indented" id="1048848">        end</p><p class="cit_Indented" id="1048849">    end</p><p class="cit_Indented" id="1048850">    &#47;&#47; mem output</p><p class="cit_Indented" id="1048851">    always @(&#x2A;) begin</p><p class="cit_Indented" id="1048852">        Q &#x3D; Q_int;</p><p class="cit_Indented" id="1048853">    end</p><p class="cit_Indented" id="1048854">&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;&#47;</p><p class="cit_Indented" id="1048855">`endif</p><p class="cit_Indented" id="1048856">endmodule</p></div>
</body>
</html>